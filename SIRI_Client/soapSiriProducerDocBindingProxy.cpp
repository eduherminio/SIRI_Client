/* soapSiriProducerDocBindingProxy.cpp
Generated by gSOAP 2.8.44 for SIRI.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapSiriProducerDocBindingProxy.h"

SiriProducerDocBindingProxy::SiriProducerDocBindingProxy()
{
	this->soap = soap_new();
	this->soap_own = true;
	SiriProducerDocBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

SiriProducerDocBindingProxy::SiriProducerDocBindingProxy(const SiriProducerDocBindingProxy& rhs)
{
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

SiriProducerDocBindingProxy::SiriProducerDocBindingProxy(struct soap *_soap)
{
	this->soap = _soap;
	this->soap_own = false;
	SiriProducerDocBindingProxy_init(_soap->imode, _soap->omode);
}

SiriProducerDocBindingProxy::SiriProducerDocBindingProxy(const char *endpoint)
{
	this->soap = soap_new();
	this->soap_own = true;
	SiriProducerDocBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

SiriProducerDocBindingProxy::SiriProducerDocBindingProxy(soap_mode iomode)
{
	this->soap = soap_new();
	this->soap_own = true;
	SiriProducerDocBindingProxy_init(iomode, iomode);
}

SiriProducerDocBindingProxy::SiriProducerDocBindingProxy(const char *endpoint, soap_mode iomode)
{
	this->soap = soap_new();
	this->soap_own = true;
	SiriProducerDocBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

SiriProducerDocBindingProxy::SiriProducerDocBindingProxy(soap_mode imode, soap_mode omode)
{
	this->soap = soap_new();
	this->soap_own = true;
	SiriProducerDocBindingProxy_init(imode, omode);
}

SiriProducerDocBindingProxy::~SiriProducerDocBindingProxy()
{
	if (this->soap_own)
		soap_free(this->soap);
}

void SiriProducerDocBindingProxy::SiriProducerDocBindingProxy_init(soap_mode imode, soap_mode omode)
{
	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
		{ "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
		{ "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
		{ "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
		{ "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
		{ "ns4", "http://www.ifopt.org.uk/acsb", NULL, NULL },
		{ "ns5", "http://datex2.eu/schema/2_0RC1/2_0", NULL, NULL },
		{ "ns2", "http://www.siri.org.uk/siri", NULL, NULL },
		{ "ns3", "http://www.ifopt.org.uk/ifopt", NULL, NULL },
		{ "ns1", "http://wsdl.siri.org.uk", NULL, NULL },
		{ NULL, NULL, NULL, NULL }
	};
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
SiriProducerDocBindingProxy *SiriProducerDocBindingProxy::copy()
{
	SiriProducerDocBindingProxy *dup = SOAP_NEW_COPY(SiriProducerDocBindingProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

SiriProducerDocBindingProxy& SiriProducerDocBindingProxy::operator=(const SiriProducerDocBindingProxy& rhs)
{
	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void SiriProducerDocBindingProxy::destroy()
{
	soap_destroy(this->soap);
	soap_end(this->soap);
}

void SiriProducerDocBindingProxy::reset()
{
	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	SiriProducerDocBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void SiriProducerDocBindingProxy::soap_noheader()
{
	this->soap->header = NULL;
}

::SOAP_ENV__Header *SiriProducerDocBindingProxy::soap_header()
{
	return this->soap->header;
}

::SOAP_ENV__Fault *SiriProducerDocBindingProxy::soap_fault()
{
	return this->soap->fault;
}

const char *SiriProducerDocBindingProxy::soap_fault_string()
{
	return *soap_faultstring(this->soap);
}

const char *SiriProducerDocBindingProxy::soap_fault_detail()
{
	return *soap_faultdetail(this->soap);
}

int SiriProducerDocBindingProxy::soap_close_socket()
{
	return soap_closesock(this->soap);
}

int SiriProducerDocBindingProxy::soap_force_close_socket()
{
	return soap_force_closesock(this->soap);
}

void SiriProducerDocBindingProxy::soap_print_fault(FILE *fd)
{
	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void SiriProducerDocBindingProxy::soap_stream_fault(std::ostream& os)
{
	::soap_stream_fault(this->soap, os);
}
#endif

char *SiriProducerDocBindingProxy::soap_sprint_fault(char *buf, size_t len)
{
	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int SiriProducerDocBindingProxy::Subscribe(const char *endpoint, const char *soap_action, ns1__WsSubscriptionRequestStructure *ns1__Subscribe, ns1__WsSubscriptionAnswerStructure &ns1__SubscribeResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__Subscribe soap_tmp___ns1__Subscribe;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "Subscribe";
	soap_tmp___ns1__Subscribe.ns1__Subscribe = ns1__Subscribe;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__Subscribe(soap, &soap_tmp___ns1__Subscribe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__Subscribe(soap, &soap_tmp___ns1__Subscribe, "-ns1:Subscribe", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__Subscribe(soap, &soap_tmp___ns1__Subscribe, "-ns1:Subscribe", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsSubscriptionAnswerStructure*>(&ns1__SubscribeResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__SubscribeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SubscribeResponse.soap_get(soap, "ns1:SubscribeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::DeleteSubscription(const char *endpoint, const char *soap_action, ns1__WsDeleteSubscriptionRequestStructure *ns1__DeleteSubscription, ns1__WsDeleteSubscriptionAnswerStructure &ns1__DeleteSubscriptionResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__DeleteSubscription soap_tmp___ns1__DeleteSubscription;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "DeleteSubscription";
	soap_tmp___ns1__DeleteSubscription.ns1__DeleteSubscription = ns1__DeleteSubscription;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteSubscription(soap, &soap_tmp___ns1__DeleteSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__DeleteSubscription(soap, &soap_tmp___ns1__DeleteSubscription, "-ns1:DeleteSubscription", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__DeleteSubscription(soap, &soap_tmp___ns1__DeleteSubscription, "-ns1:DeleteSubscription", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsDeleteSubscriptionAnswerStructure*>(&ns1__DeleteSubscriptionResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DeleteSubscriptionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteSubscriptionResponse.soap_get(soap, "ns1:DeleteSubscriptionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::DataSupply(const char *endpoint, const char *soap_action, ns1__WsDataSupplyRequestStructure *ns1__DataSupply, ns1__WsDataSupplyAnswerStructure &ns1__DataSupplyResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__DataSupply soap_tmp___ns1__DataSupply;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "DataSupply";
	soap_tmp___ns1__DataSupply.ns1__DataSupply = ns1__DataSupply;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__DataSupply(soap, &soap_tmp___ns1__DataSupply);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__DataSupply(soap, &soap_tmp___ns1__DataSupply, "-ns1:DataSupply", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__DataSupply(soap, &soap_tmp___ns1__DataSupply, "-ns1:DataSupply", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsDataSupplyAnswerStructure*>(&ns1__DataSupplyResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DataSupplyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DataSupplyResponse.soap_get(soap, "ns1:DataSupplyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::CheckStatus(const char *endpoint, const char *soap_action, ns1__WsCheckStatusStructure *ns1__CheckStatus, ns1__WsCheckStatusResponseStructure &ns1__CheckStatusResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__CheckStatus soap_tmp___ns1__CheckStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "CheckStatus";
	soap_tmp___ns1__CheckStatus.ns1__CheckStatus = ns1__CheckStatus;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckStatus(soap, &soap_tmp___ns1__CheckStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__CheckStatus(soap, &soap_tmp___ns1__CheckStatus, "-ns1:CheckStatus", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__CheckStatus(soap, &soap_tmp___ns1__CheckStatus, "-ns1:CheckStatus", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsCheckStatusResponseStructure*>(&ns1__CheckStatusResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__CheckStatusResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckStatusResponse.soap_get(soap, "ns1:CheckStatusResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetProductionTimetable(const char *endpoint, const char *soap_action, ns1__ProductionTimetableRequestStructure *ns1__GetProductionTimetable, ns1__ProductionTimetableAnswerStructure &ns1__GetProductionTimetableResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetProductionTimetable soap_tmp___ns1__GetProductionTimetable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetProductionTimetable";
	soap_tmp___ns1__GetProductionTimetable.ns1__GetProductionTimetable = ns1__GetProductionTimetable;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProductionTimetable(soap, &soap_tmp___ns1__GetProductionTimetable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetProductionTimetable(soap, &soap_tmp___ns1__GetProductionTimetable, "-ns1:GetProductionTimetable", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetProductionTimetable(soap, &soap_tmp___ns1__GetProductionTimetable, "-ns1:GetProductionTimetable", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__ProductionTimetableAnswerStructure*>(&ns1__GetProductionTimetableResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetProductionTimetableResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProductionTimetableResponse.soap_get(soap, "ns1:GetProductionTimetableResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetEstimatedTimetable(const char *endpoint, const char *soap_action, ns1__WsEstimatedTimetableRequestStructure *ns1__GetEstimatedTimetable, ns1__WsEstimatedTimetableAnswerStructure &ns1__GetEstimatedTimetableResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetEstimatedTimetable soap_tmp___ns1__GetEstimatedTimetable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetEstimatedTimetable";
	soap_tmp___ns1__GetEstimatedTimetable.ns1__GetEstimatedTimetable = ns1__GetEstimatedTimetable;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetEstimatedTimetable(soap, &soap_tmp___ns1__GetEstimatedTimetable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetEstimatedTimetable(soap, &soap_tmp___ns1__GetEstimatedTimetable, "-ns1:GetEstimatedTimetable", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetEstimatedTimetable(soap, &soap_tmp___ns1__GetEstimatedTimetable, "-ns1:GetEstimatedTimetable", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsEstimatedTimetableAnswerStructure*>(&ns1__GetEstimatedTimetableResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetEstimatedTimetableResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetEstimatedTimetableResponse.soap_get(soap, "ns1:GetEstimatedTimetableResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetStopTimetable(const char *endpoint, const char *soap_action, ns1__StopTimetableRequestStructure *ns1__GetStopTimetable, ns1__StopTimetableAnswerStructure &ns1__GetStopTimetableResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetStopTimetable soap_tmp___ns1__GetStopTimetable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetStopTimetable";
	soap_tmp___ns1__GetStopTimetable.ns1__GetStopTimetable = ns1__GetStopTimetable;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetStopTimetable(soap, &soap_tmp___ns1__GetStopTimetable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetStopTimetable(soap, &soap_tmp___ns1__GetStopTimetable, "-ns1:GetStopTimetable", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetStopTimetable(soap, &soap_tmp___ns1__GetStopTimetable, "-ns1:GetStopTimetable", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__StopTimetableAnswerStructure*>(&ns1__GetStopTimetableResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetStopTimetableResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetStopTimetableResponse.soap_get(soap, "ns1:GetStopTimetableResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetStopMonitoring(const char *endpoint, const char *soap_action, ns1__StopMonitoringRequestStructure *ns1__GetStopMonitoring, ns1__StopMonitoringAnswerStructure &ns1__GetStopMonitoringResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetStopMonitoring soap_tmp___ns1__GetStopMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetStopMonitoring";
	soap_tmp___ns1__GetStopMonitoring.ns1__GetStopMonitoring = ns1__GetStopMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetStopMonitoring(soap, &soap_tmp___ns1__GetStopMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetStopMonitoring(soap, &soap_tmp___ns1__GetStopMonitoring, "-ns1:GetStopMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetStopMonitoring(soap, &soap_tmp___ns1__GetStopMonitoring, "-ns1:GetStopMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__StopMonitoringAnswerStructure*>(&ns1__GetStopMonitoringResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetStopMonitoringResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetStopMonitoringResponse.soap_get(soap, "ns1:GetStopMonitoringResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetMultipleStopMonitoring(const char *endpoint, const char *soap_action, ns1__StopMonitoringMultipleRequestStructure *ns1__GetMultipleStopMonitoring, ns1__StopMonitoringAnswerStructure &ns1__GetMultipleStopMonitoringResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetMultipleStopMonitoring soap_tmp___ns1__GetMultipleStopMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetMultipleStopMonitoring";
	soap_tmp___ns1__GetMultipleStopMonitoring.ns1__GetMultipleStopMonitoring = ns1__GetMultipleStopMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetMultipleStopMonitoring(soap, &soap_tmp___ns1__GetMultipleStopMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetMultipleStopMonitoring(soap, &soap_tmp___ns1__GetMultipleStopMonitoring, "-ns1:GetMultipleStopMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetMultipleStopMonitoring(soap, &soap_tmp___ns1__GetMultipleStopMonitoring, "-ns1:GetMultipleStopMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__StopMonitoringAnswerStructure*>(&ns1__GetMultipleStopMonitoringResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetMultipleStopMonitoringResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetMultipleStopMonitoringResponse.soap_get(soap, "ns1:GetMultipleStopMonitoringResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetVehicleMonitoring(const char *endpoint, const char *soap_action, ns1__VehicleMonitoringRequestStructure *ns1__GetVehicleMonitoring, ns1__VehicleMonitoringAnswerStructure &ns1__GetVehicleMonitoringResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetVehicleMonitoring soap_tmp___ns1__GetVehicleMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetVehicleMonitoring";
	soap_tmp___ns1__GetVehicleMonitoring.ns1__GetVehicleMonitoring = ns1__GetVehicleMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetVehicleMonitoring(soap, &soap_tmp___ns1__GetVehicleMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetVehicleMonitoring(soap, &soap_tmp___ns1__GetVehicleMonitoring, "-ns1:GetVehicleMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetVehicleMonitoring(soap, &soap_tmp___ns1__GetVehicleMonitoring, "-ns1:GetVehicleMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__VehicleMonitoringAnswerStructure*>(&ns1__GetVehicleMonitoringResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetVehicleMonitoringResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetVehicleMonitoringResponse.soap_get(soap, "ns1:GetVehicleMonitoringResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetConnectionTimetable(const char *endpoint, const char *soap_action, ns1__WsConnectionTimetableRequestStructure *ns1__GetConnectionTimetable, ns1__WsConnectionTimetableAnswerStructure &ns1__GetConnectionTimetableResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetConnectionTimetable soap_tmp___ns1__GetConnectionTimetable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetConnectionTimetable";
	soap_tmp___ns1__GetConnectionTimetable.ns1__GetConnectionTimetable = ns1__GetConnectionTimetable;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetConnectionTimetable(soap, &soap_tmp___ns1__GetConnectionTimetable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetConnectionTimetable(soap, &soap_tmp___ns1__GetConnectionTimetable, "-ns1:GetConnectionTimetable", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetConnectionTimetable(soap, &soap_tmp___ns1__GetConnectionTimetable, "-ns1:GetConnectionTimetable", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsConnectionTimetableAnswerStructure*>(&ns1__GetConnectionTimetableResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetConnectionTimetableResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetConnectionTimetableResponse.soap_get(soap, "ns1:GetConnectionTimetableResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetConnectionMonitoring(const char *endpoint, const char *soap_action, ns1__WsConnectionMonitoringRequestStructure *ns1__GetConnectionMonitoring, ns1__WsConnectionMonitoringAnswerStructure &ns1__GetConnectionMonitoringResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetConnectionMonitoring soap_tmp___ns1__GetConnectionMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetConnectionMonitoring";
	soap_tmp___ns1__GetConnectionMonitoring.ns1__GetConnectionMonitoring = ns1__GetConnectionMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetConnectionMonitoring(soap, &soap_tmp___ns1__GetConnectionMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetConnectionMonitoring(soap, &soap_tmp___ns1__GetConnectionMonitoring, "-ns1:GetConnectionMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetConnectionMonitoring(soap, &soap_tmp___ns1__GetConnectionMonitoring, "-ns1:GetConnectionMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsConnectionMonitoringAnswerStructure*>(&ns1__GetConnectionMonitoringResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetConnectionMonitoringResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetConnectionMonitoringResponse.soap_get(soap, "ns1:GetConnectionMonitoringResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetGeneralMessage(const char *endpoint, const char *soap_action, ns1__GeneralMessageRequestStructure *ns1__GetGeneralMessage, ns1__GeneralMessageAnswerStructure &ns1__GetGeneralMessageResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetGeneralMessage soap_tmp___ns1__GetGeneralMessage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetGeneralMessage";
	soap_tmp___ns1__GetGeneralMessage.ns1__GetGeneralMessage = ns1__GetGeneralMessage;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetGeneralMessage(soap, &soap_tmp___ns1__GetGeneralMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetGeneralMessage(soap, &soap_tmp___ns1__GetGeneralMessage, "-ns1:GetGeneralMessage", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetGeneralMessage(soap, &soap_tmp___ns1__GetGeneralMessage, "-ns1:GetGeneralMessage", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__GeneralMessageAnswerStructure*>(&ns1__GetGeneralMessageResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetGeneralMessageResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetGeneralMessageResponse.soap_get(soap, "ns1:GetGeneralMessageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetFacilityMonitoring(const char *endpoint, const char *soap_action, ns1__WsFacilityMonitoringRequestStructure *ns1__GetFacilityMonitoring, ns1__WsFacilityMonitoringAnswerStructure &ns1__GetFacilityMonitoringResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetFacilityMonitoring soap_tmp___ns1__GetFacilityMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetFacilityMonitoring";
	soap_tmp___ns1__GetFacilityMonitoring.ns1__GetFacilityMonitoring = ns1__GetFacilityMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetFacilityMonitoring(soap, &soap_tmp___ns1__GetFacilityMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetFacilityMonitoring(soap, &soap_tmp___ns1__GetFacilityMonitoring, "-ns1:GetFacilityMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetFacilityMonitoring(soap, &soap_tmp___ns1__GetFacilityMonitoring, "-ns1:GetFacilityMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsFacilityMonitoringAnswerStructure*>(&ns1__GetFacilityMonitoringResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetFacilityMonitoringResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetFacilityMonitoringResponse.soap_get(soap, "ns1:GetFacilityMonitoringResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetSituationExchange(const char *endpoint, const char *soap_action, ns1__SituationExchangeRequestStructure *ns1__GetSituationExchange, ns1__SituationExchangeAnswerStructure &ns1__GetSituationExchangeResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetSituationExchange soap_tmp___ns1__GetSituationExchange;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetSituationExchange";
	soap_tmp___ns1__GetSituationExchange.ns1__GetSituationExchange = ns1__GetSituationExchange;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSituationExchange(soap, &soap_tmp___ns1__GetSituationExchange);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetSituationExchange(soap, &soap_tmp___ns1__GetSituationExchange, "-ns1:GetSituationExchange", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetSituationExchange(soap, &soap_tmp___ns1__GetSituationExchange, "-ns1:GetSituationExchange", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__SituationExchangeAnswerStructure*>(&ns1__GetSituationExchangeResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetSituationExchangeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSituationExchangeResponse.soap_get(soap, "ns1:GetSituationExchangeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetCapabilities(const char *endpoint, const char *soap_action, ns1__WsGetCapabilitiesRequestStructure *ns1__GetCapabilities, ns1__WsGetCapabilitiesAnswerStructure &ns1__GetCapabilitiesResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetCapabilities soap_tmp___ns1__GetCapabilities;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetCapabilities";
	soap_tmp___ns1__GetCapabilities.ns1__GetCapabilities = ns1__GetCapabilities;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetCapabilities(soap, &soap_tmp___ns1__GetCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetCapabilities(soap, &soap_tmp___ns1__GetCapabilities, "-ns1:GetCapabilities", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetCapabilities(soap, &soap_tmp___ns1__GetCapabilities, "-ns1:GetCapabilities", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsGetCapabilitiesAnswerStructure*>(&ns1__GetCapabilitiesResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetCapabilitiesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetCapabilitiesResponse.soap_get(soap, "ns1:GetCapabilitiesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::GetSiriService(const char *endpoint, const char *soap_action, ns1__GetSiriServiceRequestStructure *ns1__GetSiriService, ns1__GetSiriServiceAnswerStructure &ns1__GetSiriServiceResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__GetSiriService soap_tmp___ns1__GetSiriService;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetSiriService";
	soap_tmp___ns1__GetSiriService.ns1__GetSiriService = ns1__GetSiriService;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSiriService(soap, &soap_tmp___ns1__GetSiriService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__GetSiriService(soap, &soap_tmp___ns1__GetSiriService, "-ns1:GetSiriService", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__GetSiriService(soap, &soap_tmp___ns1__GetSiriService, "-ns1:GetSiriService", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__GetSiriServiceAnswerStructure*>(&ns1__GetSiriServiceResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetSiriServiceResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSiriServiceResponse.soap_get(soap, "ns1:GetSiriServiceResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::StopPointsDiscovery(const char *endpoint, const char *soap_action, ns1__WsStopPointsDiscoveryStructure *ns1__StopPointsDiscovery, ns1__WsStopPointsDiscoveryAnswerStructure &ns1__StopPointsDiscoveryResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__StopPointsDiscovery soap_tmp___ns1__StopPointsDiscovery;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "StopPointsDiscovery";
	soap_tmp___ns1__StopPointsDiscovery.ns1__StopPointsDiscovery = ns1__StopPointsDiscovery;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__StopPointsDiscovery(soap, &soap_tmp___ns1__StopPointsDiscovery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__StopPointsDiscovery(soap, &soap_tmp___ns1__StopPointsDiscovery, "-ns1:StopPointsDiscovery", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__StopPointsDiscovery(soap, &soap_tmp___ns1__StopPointsDiscovery, "-ns1:StopPointsDiscovery", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsStopPointsDiscoveryAnswerStructure*>(&ns1__StopPointsDiscoveryResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__StopPointsDiscoveryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StopPointsDiscoveryResponse.soap_get(soap, "ns1:StopPointsDiscoveryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::LinesDiscovery(const char *endpoint, const char *soap_action, ns1__WsLinesDiscoveryStructure *ns1__LinesDiscovery, ns1__WsLinesDiscoveryAnswerStructure &ns1__LinesDiscoveryResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__LinesDiscovery soap_tmp___ns1__LinesDiscovery;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "LinesDiscovery";
	soap_tmp___ns1__LinesDiscovery.ns1__LinesDiscovery = ns1__LinesDiscovery;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__LinesDiscovery(soap, &soap_tmp___ns1__LinesDiscovery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__LinesDiscovery(soap, &soap_tmp___ns1__LinesDiscovery, "-ns1:LinesDiscovery", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__LinesDiscovery(soap, &soap_tmp___ns1__LinesDiscovery, "-ns1:LinesDiscovery", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsLinesDiscoveryAnswerStructure*>(&ns1__LinesDiscoveryResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__LinesDiscoveryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LinesDiscoveryResponse.soap_get(soap, "ns1:LinesDiscoveryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::ConnectionLinksDiscovery(const char *endpoint, const char *soap_action, ns1__WsConnectionLinksDiscoveryStructure *ns1__ConnectionLinksDiscovery, ns1__WsConnectionLinksDiscoveryAnswerStructure &ns1__ConnectionLinksDiscoveryResponse)
{
	struct soap *soap = this->soap;
	struct __ns1__ConnectionLinksDiscovery soap_tmp___ns1__ConnectionLinksDiscovery;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "ConnectionLinksDiscovery";
	soap_tmp___ns1__ConnectionLinksDiscovery.ns1__ConnectionLinksDiscovery = ns1__ConnectionLinksDiscovery;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__ConnectionLinksDiscovery(soap, &soap_tmp___ns1__ConnectionLinksDiscovery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__ConnectionLinksDiscovery(soap, &soap_tmp___ns1__ConnectionLinksDiscovery, "-ns1:ConnectionLinksDiscovery", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__ConnectionLinksDiscovery(soap, &soap_tmp___ns1__ConnectionLinksDiscovery, "-ns1:ConnectionLinksDiscovery", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__WsConnectionLinksDiscoveryAnswerStructure*>(&ns1__ConnectionLinksDiscoveryResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__ConnectionLinksDiscoveryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ConnectionLinksDiscoveryResponse.soap_get(soap, "ns1:ConnectionLinksDiscoveryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifySubscriptionTerminated(const char *endpoint, const char *soap_action, ns1__WsSubscriptionTerminatedNotificationStructure *ns1__NotifySubscriptionTerminated)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifySubscriptionTerminated soap_tmp___ns1__NotifySubscriptionTerminated;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "NotifySubscriptionTerminated";
	soap_tmp___ns1__NotifySubscriptionTerminated.ns1__NotifySubscriptionTerminated = ns1__NotifySubscriptionTerminated;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifySubscriptionTerminated(soap, &soap_tmp___ns1__NotifySubscriptionTerminated);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifySubscriptionTerminated(soap, &soap_tmp___ns1__NotifySubscriptionTerminated, "-ns1:NotifySubscriptionTerminated", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifySubscriptionTerminated(soap, &soap_tmp___ns1__NotifySubscriptionTerminated, "-ns1:NotifySubscriptionTerminated", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifySubscriptionTerminated(struct __ns1__NotifySubscriptionTerminated& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifySubscriptionTerminated *_param_1 = &tmp;
	soap_default___ns1__NotifySubscriptionTerminated(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifySubscriptionTerminated(soap, _param_1, "-ns1:NotifySubscriptionTerminated", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyDataReady(const char *endpoint, const char *soap_action, ns1__WsDataReadyNotificationStructure *ns1__NotifyDataReady)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyDataReady soap_tmp___ns1__NotifyDataReady;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "NotifyDataReady";
	soap_tmp___ns1__NotifyDataReady.ns1__NotifyDataReady = ns1__NotifyDataReady;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyDataReady(soap, &soap_tmp___ns1__NotifyDataReady);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyDataReady(soap, &soap_tmp___ns1__NotifyDataReady, "-ns1:NotifyDataReady", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyDataReady(soap, &soap_tmp___ns1__NotifyDataReady, "-ns1:NotifyDataReady", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyDataReady(struct __ns1__NotifyDataReady& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyDataReady *_param_1 = &tmp;
	soap_default___ns1__NotifyDataReady(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyDataReady(soap, _param_1, "-ns1:NotifyDataReady", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyHeartbeat(const char *endpoint, const char *soap_action, ns1__WsHeartbeatNotificationStructure *ns1__NotifyHeartbeat)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyHeartbeat soap_tmp___ns1__NotifyHeartbeat;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "NotifyHeartbeat";
	soap_tmp___ns1__NotifyHeartbeat.ns1__NotifyHeartbeat = ns1__NotifyHeartbeat;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyHeartbeat(soap, &soap_tmp___ns1__NotifyHeartbeat);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyHeartbeat(soap, &soap_tmp___ns1__NotifyHeartbeat, "-ns1:NotifyHeartbeat", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyHeartbeat(soap, &soap_tmp___ns1__NotifyHeartbeat, "-ns1:NotifyHeartbeat", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyHeartbeat(struct __ns1__NotifyHeartbeat& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyHeartbeat *_param_1 = &tmp;
	soap_default___ns1__NotifyHeartbeat(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyHeartbeat(soap, _param_1, "-ns1:NotifyHeartbeat", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyProductionTimetable(const char *endpoint, const char *soap_action, ns1__WsProductionTimetableNotificationStructure *ns1__NotifyProductionTimetable)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyProductionTimetable soap_tmp___ns1__NotifyProductionTimetable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetProductionTimetable";
	soap_tmp___ns1__NotifyProductionTimetable.ns1__NotifyProductionTimetable = ns1__NotifyProductionTimetable;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyProductionTimetable(soap, &soap_tmp___ns1__NotifyProductionTimetable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyProductionTimetable(soap, &soap_tmp___ns1__NotifyProductionTimetable, "-ns1:NotifyProductionTimetable", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyProductionTimetable(soap, &soap_tmp___ns1__NotifyProductionTimetable, "-ns1:NotifyProductionTimetable", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyProductionTimetable(struct __ns1__NotifyProductionTimetable& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyProductionTimetable *_param_1 = &tmp;
	soap_default___ns1__NotifyProductionTimetable(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyProductionTimetable(soap, _param_1, "-ns1:NotifyProductionTimetable", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyEstimatedTimetable(const char *endpoint, const char *soap_action, ns1__WsEstimatedTimetableNotificationStructure *ns1__NotifyEstimatedTimetable)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyEstimatedTimetable soap_tmp___ns1__NotifyEstimatedTimetable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetEstimatedTimetable";
	soap_tmp___ns1__NotifyEstimatedTimetable.ns1__NotifyEstimatedTimetable = ns1__NotifyEstimatedTimetable;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyEstimatedTimetable(soap, &soap_tmp___ns1__NotifyEstimatedTimetable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyEstimatedTimetable(soap, &soap_tmp___ns1__NotifyEstimatedTimetable, "-ns1:NotifyEstimatedTimetable", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyEstimatedTimetable(soap, &soap_tmp___ns1__NotifyEstimatedTimetable, "-ns1:NotifyEstimatedTimetable", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyEstimatedTimetable(struct __ns1__NotifyEstimatedTimetable& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyEstimatedTimetable *_param_1 = &tmp;
	soap_default___ns1__NotifyEstimatedTimetable(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyEstimatedTimetable(soap, _param_1, "-ns1:NotifyEstimatedTimetable", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyStopTimetable(const char *endpoint, const char *soap_action, ns1__WsStopTimetableNotificationStructure *ns1__NotifyStopTimetable)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyStopTimetable soap_tmp___ns1__NotifyStopTimetable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetStopTimetable";
	soap_tmp___ns1__NotifyStopTimetable.ns1__NotifyStopTimetable = ns1__NotifyStopTimetable;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyStopTimetable(soap, &soap_tmp___ns1__NotifyStopTimetable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyStopTimetable(soap, &soap_tmp___ns1__NotifyStopTimetable, "-ns1:NotifyStopTimetable", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyStopTimetable(soap, &soap_tmp___ns1__NotifyStopTimetable, "-ns1:NotifyStopTimetable", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyStopTimetable(struct __ns1__NotifyStopTimetable& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyStopTimetable *_param_1 = &tmp;
	soap_default___ns1__NotifyStopTimetable(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyStopTimetable(soap, _param_1, "-ns1:NotifyStopTimetable", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyStopMonitoring(const char *endpoint, const char *soap_action, ns1__WsStopMonitoringNotificationStructure *ns1__NotifyStopMonitoring)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyStopMonitoring soap_tmp___ns1__NotifyStopMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetStopMonitoring";
	soap_tmp___ns1__NotifyStopMonitoring.ns1__NotifyStopMonitoring = ns1__NotifyStopMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyStopMonitoring(soap, &soap_tmp___ns1__NotifyStopMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyStopMonitoring(soap, &soap_tmp___ns1__NotifyStopMonitoring, "-ns1:NotifyStopMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyStopMonitoring(soap, &soap_tmp___ns1__NotifyStopMonitoring, "-ns1:NotifyStopMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyStopMonitoring(struct __ns1__NotifyStopMonitoring& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyStopMonitoring *_param_1 = &tmp;
	soap_default___ns1__NotifyStopMonitoring(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyStopMonitoring(soap, _param_1, "-ns1:NotifyStopMonitoring", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyVehicleMonitoring(const char *endpoint, const char *soap_action, ns1__WsVehicleMonitoringNotificationStructure *ns1__NotifyVehicleMonitoring)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyVehicleMonitoring soap_tmp___ns1__NotifyVehicleMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetVehicleMonitoring";
	soap_tmp___ns1__NotifyVehicleMonitoring.ns1__NotifyVehicleMonitoring = ns1__NotifyVehicleMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyVehicleMonitoring(soap, &soap_tmp___ns1__NotifyVehicleMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyVehicleMonitoring(soap, &soap_tmp___ns1__NotifyVehicleMonitoring, "-ns1:NotifyVehicleMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyVehicleMonitoring(soap, &soap_tmp___ns1__NotifyVehicleMonitoring, "-ns1:NotifyVehicleMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyVehicleMonitoring(struct __ns1__NotifyVehicleMonitoring& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyVehicleMonitoring *_param_1 = &tmp;
	soap_default___ns1__NotifyVehicleMonitoring(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyVehicleMonitoring(soap, _param_1, "-ns1:NotifyVehicleMonitoring", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyConnectionTimetable(const char *endpoint, const char *soap_action, ns1__WsConnectionTimetableNotificationStructure *ns1__NotifyConnectionTimetable)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyConnectionTimetable soap_tmp___ns1__NotifyConnectionTimetable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetConnectionTimetable";
	soap_tmp___ns1__NotifyConnectionTimetable.ns1__NotifyConnectionTimetable = ns1__NotifyConnectionTimetable;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyConnectionTimetable(soap, &soap_tmp___ns1__NotifyConnectionTimetable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyConnectionTimetable(soap, &soap_tmp___ns1__NotifyConnectionTimetable, "-ns1:NotifyConnectionTimetable", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyConnectionTimetable(soap, &soap_tmp___ns1__NotifyConnectionTimetable, "-ns1:NotifyConnectionTimetable", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyConnectionTimetable(struct __ns1__NotifyConnectionTimetable& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyConnectionTimetable *_param_1 = &tmp;
	soap_default___ns1__NotifyConnectionTimetable(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyConnectionTimetable(soap, _param_1, "-ns1:NotifyConnectionTimetable", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyConnectionMonitoring(const char *endpoint, const char *soap_action, ns1__WsConnectionMonitoringNotificationStructure *ns1__NotifyConnectionMonitoring)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyConnectionMonitoring soap_tmp___ns1__NotifyConnectionMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetConnectionMonitoring";
	soap_tmp___ns1__NotifyConnectionMonitoring.ns1__NotifyConnectionMonitoring = ns1__NotifyConnectionMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyConnectionMonitoring(soap, &soap_tmp___ns1__NotifyConnectionMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyConnectionMonitoring(soap, &soap_tmp___ns1__NotifyConnectionMonitoring, "-ns1:NotifyConnectionMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyConnectionMonitoring(soap, &soap_tmp___ns1__NotifyConnectionMonitoring, "-ns1:NotifyConnectionMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyConnectionMonitoring(struct __ns1__NotifyConnectionMonitoring& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyConnectionMonitoring *_param_1 = &tmp;
	soap_default___ns1__NotifyConnectionMonitoring(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyConnectionMonitoring(soap, _param_1, "-ns1:NotifyConnectionMonitoring", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyGeneralMessage(const char *endpoint, const char *soap_action, ns1__WsGeneralMessageNotificationStructure *ns1__NotifyGeneralMessage)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyGeneralMessage soap_tmp___ns1__NotifyGeneralMessage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetGeneralMessage";
	soap_tmp___ns1__NotifyGeneralMessage.ns1__NotifyGeneralMessage = ns1__NotifyGeneralMessage;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyGeneralMessage(soap, &soap_tmp___ns1__NotifyGeneralMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyGeneralMessage(soap, &soap_tmp___ns1__NotifyGeneralMessage, "-ns1:NotifyGeneralMessage", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyGeneralMessage(soap, &soap_tmp___ns1__NotifyGeneralMessage, "-ns1:NotifyGeneralMessage", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyGeneralMessage(struct __ns1__NotifyGeneralMessage& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyGeneralMessage *_param_1 = &tmp;
	soap_default___ns1__NotifyGeneralMessage(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyGeneralMessage(soap, _param_1, "-ns1:NotifyGeneralMessage", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifyFacilityMonitoring(const char *endpoint, const char *soap_action, ns1__WsFacilityMonitoringNotificationStructure *ns1__NotifyFacilityMonitoring)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifyFacilityMonitoring soap_tmp___ns1__NotifyFacilityMonitoring;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetFacilityMonitoring";
	soap_tmp___ns1__NotifyFacilityMonitoring.ns1__NotifyFacilityMonitoring = ns1__NotifyFacilityMonitoring;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifyFacilityMonitoring(soap, &soap_tmp___ns1__NotifyFacilityMonitoring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifyFacilityMonitoring(soap, &soap_tmp___ns1__NotifyFacilityMonitoring, "-ns1:NotifyFacilityMonitoring", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifyFacilityMonitoring(soap, &soap_tmp___ns1__NotifyFacilityMonitoring, "-ns1:NotifyFacilityMonitoring", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifyFacilityMonitoring(struct __ns1__NotifyFacilityMonitoring& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifyFacilityMonitoring *_param_1 = &tmp;
	soap_default___ns1__NotifyFacilityMonitoring(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifyFacilityMonitoring(soap, _param_1, "-ns1:NotifyFacilityMonitoring", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SiriProducerDocBindingProxy::send_NotifySituationExchange(const char *endpoint, const char *soap_action, ns1__WsSituationExchangeNotificationStructure *ns1__NotifySituationExchange)
{
	struct soap *soap = this->soap;
	struct __ns1__NotifySituationExchange soap_tmp___ns1__NotifySituationExchange;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.siri-service-location.com";
	if (soap_action == NULL)
		soap_action = "GetSituationExchange";
	soap_tmp___ns1__NotifySituationExchange.ns1__NotifySituationExchange = ns1__NotifySituationExchange;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__NotifySituationExchange(soap, &soap_tmp___ns1__NotifySituationExchange);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put___ns1__NotifySituationExchange(soap, &soap_tmp___ns1__NotifySituationExchange, "-ns1:NotifySituationExchange", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put___ns1__NotifySituationExchange(soap, &soap_tmp___ns1__NotifySituationExchange, "-ns1:NotifySituationExchange", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int SiriProducerDocBindingProxy::recv_NotifySituationExchange(struct __ns1__NotifySituationExchange& tmp)
{
	struct soap *soap = this->soap;

	struct __ns1__NotifySituationExchange *_param_1 = &tmp;
	soap_default___ns1__NotifySituationExchange(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__NotifySituationExchange(soap, _param_1, "-ns1:NotifySituationExchange", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
		|| soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
