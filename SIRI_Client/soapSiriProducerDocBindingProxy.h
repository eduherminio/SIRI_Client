/* soapSiriProducerDocBindingProxy.h
Generated by gSOAP 2.8.44 for SIRI.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapSiriProducerDocBindingProxy_H
#define soapSiriProducerDocBindingProxy_H
#include "soapH.h"

class SOAP_CMAC SiriProducerDocBindingProxy {
public:
	/// Context to manage proxy IO and data
	struct soap *soap;
	bool soap_own; ///< flag indicating that this context is owned by this proxy when context is shared
				   /// Endpoint URL of service 'SiriProducerDocBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in SIRI.h, if any
	/// Construct a proxy with new managing context
	SiriProducerDocBindingProxy();
	/// Copy constructor
	SiriProducerDocBindingProxy(const SiriProducerDocBindingProxy& rhs);
	/// Construct proxy given a shared managing context
	SiriProducerDocBindingProxy(struct soap*);
	/// Constructor taking an endpoint URL
	SiriProducerDocBindingProxy(const char *endpoint);
	/// Constructor taking input and output mode flags for the new managing context
	SiriProducerDocBindingProxy(soap_mode iomode);
	/// Constructor taking endpoint URL and input and output mode flags for the new managing context
	SiriProducerDocBindingProxy(const char *endpoint, soap_mode iomode);
	/// Constructor taking input and output mode flags for the new managing context
	SiriProducerDocBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor deletes non-shared managing context only (use destroy() to delete deserialized data)
	virtual ~SiriProducerDocBindingProxy();
	/// Initializer used by constructors
	virtual void SiriProducerDocBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Return a copy that has a new managing context with the same engine state
	virtual SiriProducerDocBindingProxy *copy() SOAP_PURE_VIRTUAL;
	/// Copy assignment
	SiriProducerDocBindingProxy& operator=(const SiriProducerDocBindingProxy&);
	/// Delete all deserialized data (uses soap_destroy() and soap_end())
	virtual void destroy();
	/// Delete all deserialized data and reset to default
	virtual void reset();
	/// Disables and removes SOAP Header from message by setting soap->header = NULL
	virtual void soap_noheader();
	/// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
	virtual ::SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
	virtual ::SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual int soap_force_close_socket();
	/// Print fault
	virtual void soap_print_fault(FILE*);
#ifndef WITH_LEAN
#ifndef WITH_COMPAT
	/// Print fault to stream
	virtual void soap_stream_fault(std::ostream&);
#endif
	/// Write fault to buffer
	virtual char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Web service operation 'Subscribe' (returns SOAP_OK or error code)
	virtual int Subscribe(ns1__WsSubscriptionRequestStructure *ns1__Subscribe, ns1__WsSubscriptionAnswerStructure &ns1__SubscribeResponse)
	{
		return this->Subscribe(NULL, NULL, ns1__Subscribe, ns1__SubscribeResponse);
	}
	virtual int Subscribe(const char *soap_endpoint, const char *soap_action, ns1__WsSubscriptionRequestStructure *ns1__Subscribe, ns1__WsSubscriptionAnswerStructure &ns1__SubscribeResponse);
	/// Web service operation 'DeleteSubscription' (returns SOAP_OK or error code)
	virtual int DeleteSubscription(ns1__WsDeleteSubscriptionRequestStructure *ns1__DeleteSubscription, ns1__WsDeleteSubscriptionAnswerStructure &ns1__DeleteSubscriptionResponse)
	{
		return this->DeleteSubscription(NULL, NULL, ns1__DeleteSubscription, ns1__DeleteSubscriptionResponse);
	}
	virtual int DeleteSubscription(const char *soap_endpoint, const char *soap_action, ns1__WsDeleteSubscriptionRequestStructure *ns1__DeleteSubscription, ns1__WsDeleteSubscriptionAnswerStructure &ns1__DeleteSubscriptionResponse);
	/// Web service operation 'DataSupply' (returns SOAP_OK or error code)
	virtual int DataSupply(ns1__WsDataSupplyRequestStructure *ns1__DataSupply, ns1__WsDataSupplyAnswerStructure &ns1__DataSupplyResponse)
	{
		return this->DataSupply(NULL, NULL, ns1__DataSupply, ns1__DataSupplyResponse);
	}
	virtual int DataSupply(const char *soap_endpoint, const char *soap_action, ns1__WsDataSupplyRequestStructure *ns1__DataSupply, ns1__WsDataSupplyAnswerStructure &ns1__DataSupplyResponse);
	/// Web service operation 'CheckStatus' (returns SOAP_OK or error code)
	virtual int CheckStatus(ns1__WsCheckStatusStructure *ns1__CheckStatus, ns1__WsCheckStatusResponseStructure &ns1__CheckStatusResponse)
	{
		return this->CheckStatus(NULL, NULL, ns1__CheckStatus, ns1__CheckStatusResponse);
	}
	virtual int CheckStatus(const char *soap_endpoint, const char *soap_action, ns1__WsCheckStatusStructure *ns1__CheckStatus, ns1__WsCheckStatusResponseStructure &ns1__CheckStatusResponse);
	/// Web service operation 'GetProductionTimetable' (returns SOAP_OK or error code)
	virtual int GetProductionTimetable(ns1__ProductionTimetableRequestStructure *ns1__GetProductionTimetable, ns1__ProductionTimetableAnswerStructure &ns1__GetProductionTimetableResponse)
	{
		return this->GetProductionTimetable(NULL, NULL, ns1__GetProductionTimetable, ns1__GetProductionTimetableResponse);
	}
	virtual int GetProductionTimetable(const char *soap_endpoint, const char *soap_action, ns1__ProductionTimetableRequestStructure *ns1__GetProductionTimetable, ns1__ProductionTimetableAnswerStructure &ns1__GetProductionTimetableResponse);
	/// Web service operation 'GetEstimatedTimetable' (returns SOAP_OK or error code)
	virtual int GetEstimatedTimetable(ns1__WsEstimatedTimetableRequestStructure *ns1__GetEstimatedTimetable, ns1__WsEstimatedTimetableAnswerStructure &ns1__GetEstimatedTimetableResponse)
	{
		return this->GetEstimatedTimetable(NULL, NULL, ns1__GetEstimatedTimetable, ns1__GetEstimatedTimetableResponse);
	}
	virtual int GetEstimatedTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsEstimatedTimetableRequestStructure *ns1__GetEstimatedTimetable, ns1__WsEstimatedTimetableAnswerStructure &ns1__GetEstimatedTimetableResponse);
	/// Web service operation 'GetStopTimetable' (returns SOAP_OK or error code)
	virtual int GetStopTimetable(ns1__StopTimetableRequestStructure *ns1__GetStopTimetable, ns1__StopTimetableAnswerStructure &ns1__GetStopTimetableResponse)
	{
		return this->GetStopTimetable(NULL, NULL, ns1__GetStopTimetable, ns1__GetStopTimetableResponse);
	}
	virtual int GetStopTimetable(const char *soap_endpoint, const char *soap_action, ns1__StopTimetableRequestStructure *ns1__GetStopTimetable, ns1__StopTimetableAnswerStructure &ns1__GetStopTimetableResponse);
	/// Web service operation 'GetStopMonitoring' (returns SOAP_OK or error code)
	virtual int GetStopMonitoring(ns1__StopMonitoringRequestStructure *ns1__GetStopMonitoring, ns1__StopMonitoringAnswerStructure &ns1__GetStopMonitoringResponse)
	{
		return this->GetStopMonitoring(NULL, NULL, ns1__GetStopMonitoring, ns1__GetStopMonitoringResponse);
	}
	virtual int GetStopMonitoring(const char *soap_endpoint, const char *soap_action, ns1__StopMonitoringRequestStructure *ns1__GetStopMonitoring, ns1__StopMonitoringAnswerStructure &ns1__GetStopMonitoringResponse);
	/// Web service operation 'GetMultipleStopMonitoring' (returns SOAP_OK or error code)
	virtual int GetMultipleStopMonitoring(ns1__StopMonitoringMultipleRequestStructure *ns1__GetMultipleStopMonitoring, ns1__StopMonitoringAnswerStructure &ns1__GetMultipleStopMonitoringResponse)
	{
		return this->GetMultipleStopMonitoring(NULL, NULL, ns1__GetMultipleStopMonitoring, ns1__GetMultipleStopMonitoringResponse);
	}
	virtual int GetMultipleStopMonitoring(const char *soap_endpoint, const char *soap_action, ns1__StopMonitoringMultipleRequestStructure *ns1__GetMultipleStopMonitoring, ns1__StopMonitoringAnswerStructure &ns1__GetMultipleStopMonitoringResponse);
	/// Web service operation 'GetVehicleMonitoring' (returns SOAP_OK or error code)
	virtual int GetVehicleMonitoring(ns1__VehicleMonitoringRequestStructure *ns1__GetVehicleMonitoring, ns1__VehicleMonitoringAnswerStructure &ns1__GetVehicleMonitoringResponse)
	{
		return this->GetVehicleMonitoring(NULL, NULL, ns1__GetVehicleMonitoring, ns1__GetVehicleMonitoringResponse);
	}
	virtual int GetVehicleMonitoring(const char *soap_endpoint, const char *soap_action, ns1__VehicleMonitoringRequestStructure *ns1__GetVehicleMonitoring, ns1__VehicleMonitoringAnswerStructure &ns1__GetVehicleMonitoringResponse);
	/// Web service operation 'GetConnectionTimetable' (returns SOAP_OK or error code)
	virtual int GetConnectionTimetable(ns1__WsConnectionTimetableRequestStructure *ns1__GetConnectionTimetable, ns1__WsConnectionTimetableAnswerStructure &ns1__GetConnectionTimetableResponse)
	{
		return this->GetConnectionTimetable(NULL, NULL, ns1__GetConnectionTimetable, ns1__GetConnectionTimetableResponse);
	}
	virtual int GetConnectionTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsConnectionTimetableRequestStructure *ns1__GetConnectionTimetable, ns1__WsConnectionTimetableAnswerStructure &ns1__GetConnectionTimetableResponse);
	/// Web service operation 'GetConnectionMonitoring' (returns SOAP_OK or error code)
	virtual int GetConnectionMonitoring(ns1__WsConnectionMonitoringRequestStructure *ns1__GetConnectionMonitoring, ns1__WsConnectionMonitoringAnswerStructure &ns1__GetConnectionMonitoringResponse)
	{
		return this->GetConnectionMonitoring(NULL, NULL, ns1__GetConnectionMonitoring, ns1__GetConnectionMonitoringResponse);
	}
	virtual int GetConnectionMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsConnectionMonitoringRequestStructure *ns1__GetConnectionMonitoring, ns1__WsConnectionMonitoringAnswerStructure &ns1__GetConnectionMonitoringResponse);
	/// Web service operation 'GetGeneralMessage' (returns SOAP_OK or error code)
	virtual int GetGeneralMessage(ns1__GeneralMessageRequestStructure *ns1__GetGeneralMessage, ns1__GeneralMessageAnswerStructure &ns1__GetGeneralMessageResponse)
	{
		return this->GetGeneralMessage(NULL, NULL, ns1__GetGeneralMessage, ns1__GetGeneralMessageResponse);
	}
	virtual int GetGeneralMessage(const char *soap_endpoint, const char *soap_action, ns1__GeneralMessageRequestStructure *ns1__GetGeneralMessage, ns1__GeneralMessageAnswerStructure &ns1__GetGeneralMessageResponse);
	/// Web service operation 'GetFacilityMonitoring' (returns SOAP_OK or error code)
	virtual int GetFacilityMonitoring(ns1__WsFacilityMonitoringRequestStructure *ns1__GetFacilityMonitoring, ns1__WsFacilityMonitoringAnswerStructure &ns1__GetFacilityMonitoringResponse)
	{
		return this->GetFacilityMonitoring(NULL, NULL, ns1__GetFacilityMonitoring, ns1__GetFacilityMonitoringResponse);
	}
	virtual int GetFacilityMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsFacilityMonitoringRequestStructure *ns1__GetFacilityMonitoring, ns1__WsFacilityMonitoringAnswerStructure &ns1__GetFacilityMonitoringResponse);
	/// Web service operation 'GetSituationExchange' (returns SOAP_OK or error code)
	virtual int GetSituationExchange(ns1__SituationExchangeRequestStructure *ns1__GetSituationExchange, ns1__SituationExchangeAnswerStructure &ns1__GetSituationExchangeResponse)
	{
		return this->GetSituationExchange(NULL, NULL, ns1__GetSituationExchange, ns1__GetSituationExchangeResponse);
	}
	virtual int GetSituationExchange(const char *soap_endpoint, const char *soap_action, ns1__SituationExchangeRequestStructure *ns1__GetSituationExchange, ns1__SituationExchangeAnswerStructure &ns1__GetSituationExchangeResponse);
	/// Web service operation 'GetCapabilities' (returns SOAP_OK or error code)
	virtual int GetCapabilities(ns1__WsGetCapabilitiesRequestStructure *ns1__GetCapabilities, ns1__WsGetCapabilitiesAnswerStructure &ns1__GetCapabilitiesResponse)
	{
		return this->GetCapabilities(NULL, NULL, ns1__GetCapabilities, ns1__GetCapabilitiesResponse);
	}
	virtual int GetCapabilities(const char *soap_endpoint, const char *soap_action, ns1__WsGetCapabilitiesRequestStructure *ns1__GetCapabilities, ns1__WsGetCapabilitiesAnswerStructure &ns1__GetCapabilitiesResponse);
	/// Web service operation 'GetSiriService' (returns SOAP_OK or error code)
	virtual int GetSiriService(ns1__GetSiriServiceRequestStructure *ns1__GetSiriService, ns1__GetSiriServiceAnswerStructure &ns1__GetSiriServiceResponse)
	{
		return this->GetSiriService(NULL, NULL, ns1__GetSiriService, ns1__GetSiriServiceResponse);
	}
	virtual int GetSiriService(const char *soap_endpoint, const char *soap_action, ns1__GetSiriServiceRequestStructure *ns1__GetSiriService, ns1__GetSiriServiceAnswerStructure &ns1__GetSiriServiceResponse);
	/// Web service operation 'StopPointsDiscovery' (returns SOAP_OK or error code)
	virtual int StopPointsDiscovery(ns1__WsStopPointsDiscoveryStructure *ns1__StopPointsDiscovery, ns1__WsStopPointsDiscoveryAnswerStructure &ns1__StopPointsDiscoveryResponse)
	{
		return this->StopPointsDiscovery(NULL, NULL, ns1__StopPointsDiscovery, ns1__StopPointsDiscoveryResponse);
	}
	virtual int StopPointsDiscovery(const char *soap_endpoint, const char *soap_action, ns1__WsStopPointsDiscoveryStructure *ns1__StopPointsDiscovery, ns1__WsStopPointsDiscoveryAnswerStructure &ns1__StopPointsDiscoveryResponse);
	/// Web service operation 'LinesDiscovery' (returns SOAP_OK or error code)
	virtual int LinesDiscovery(ns1__WsLinesDiscoveryStructure *ns1__LinesDiscovery, ns1__WsLinesDiscoveryAnswerStructure &ns1__LinesDiscoveryResponse)
	{
		return this->LinesDiscovery(NULL, NULL, ns1__LinesDiscovery, ns1__LinesDiscoveryResponse);
	}
	virtual int LinesDiscovery(const char *soap_endpoint, const char *soap_action, ns1__WsLinesDiscoveryStructure *ns1__LinesDiscovery, ns1__WsLinesDiscoveryAnswerStructure &ns1__LinesDiscoveryResponse);
	/// Web service operation 'ConnectionLinksDiscovery' (returns SOAP_OK or error code)
	virtual int ConnectionLinksDiscovery(ns1__WsConnectionLinksDiscoveryStructure *ns1__ConnectionLinksDiscovery, ns1__WsConnectionLinksDiscoveryAnswerStructure &ns1__ConnectionLinksDiscoveryResponse)
	{
		return this->ConnectionLinksDiscovery(NULL, NULL, ns1__ConnectionLinksDiscovery, ns1__ConnectionLinksDiscoveryResponse);
	}
	virtual int ConnectionLinksDiscovery(const char *soap_endpoint, const char *soap_action, ns1__WsConnectionLinksDiscoveryStructure *ns1__ConnectionLinksDiscovery, ns1__WsConnectionLinksDiscoveryAnswerStructure &ns1__ConnectionLinksDiscoveryResponse);
	/// Web service one-way send operation 'send_NotifySubscriptionTerminated' (returns SOAP_OK or error code)
	virtual int send_NotifySubscriptionTerminated(ns1__WsSubscriptionTerminatedNotificationStructure *ns1__NotifySubscriptionTerminated)
	{
		return this->send_NotifySubscriptionTerminated(NULL, NULL, ns1__NotifySubscriptionTerminated);
	}
	virtual int send_NotifySubscriptionTerminated(const char *soap_endpoint, const char *soap_action, ns1__WsSubscriptionTerminatedNotificationStructure *ns1__NotifySubscriptionTerminated);
	/// Web service one-way receive operation 'recv_NotifySubscriptionTerminated' (returns SOAP_OK or error code);
	virtual int recv_NotifySubscriptionTerminated(struct __ns1__NotifySubscriptionTerminated&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifySubscriptionTerminated' (returns SOAP_OK or error code)
	virtual int recv_NotifySubscriptionTerminated_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifySubscriptionTerminated' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifySubscriptionTerminated(ns1__WsSubscriptionTerminatedNotificationStructure *ns1__NotifySubscriptionTerminated)
	{
		return this->NotifySubscriptionTerminated(NULL, NULL, ns1__NotifySubscriptionTerminated);
	}
	virtual int NotifySubscriptionTerminated(const char *soap_endpoint, const char *soap_action, ns1__WsSubscriptionTerminatedNotificationStructure *ns1__NotifySubscriptionTerminated)
	{
		if (this->send_NotifySubscriptionTerminated(soap_endpoint, soap_action, ns1__NotifySubscriptionTerminated) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyDataReady' (returns SOAP_OK or error code)
	virtual int send_NotifyDataReady(ns1__WsDataReadyNotificationStructure *ns1__NotifyDataReady)
	{
		return this->send_NotifyDataReady(NULL, NULL, ns1__NotifyDataReady);
	}
	virtual int send_NotifyDataReady(const char *soap_endpoint, const char *soap_action, ns1__WsDataReadyNotificationStructure *ns1__NotifyDataReady);
	/// Web service one-way receive operation 'recv_NotifyDataReady' (returns SOAP_OK or error code);
	virtual int recv_NotifyDataReady(struct __ns1__NotifyDataReady&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyDataReady' (returns SOAP_OK or error code)
	virtual int recv_NotifyDataReady_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyDataReady' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyDataReady(ns1__WsDataReadyNotificationStructure *ns1__NotifyDataReady)
	{
		return this->NotifyDataReady(NULL, NULL, ns1__NotifyDataReady);
	}
	virtual int NotifyDataReady(const char *soap_endpoint, const char *soap_action, ns1__WsDataReadyNotificationStructure *ns1__NotifyDataReady)
	{
		if (this->send_NotifyDataReady(soap_endpoint, soap_action, ns1__NotifyDataReady) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyHeartbeat' (returns SOAP_OK or error code)
	virtual int send_NotifyHeartbeat(ns1__WsHeartbeatNotificationStructure *ns1__NotifyHeartbeat)
	{
		return this->send_NotifyHeartbeat(NULL, NULL, ns1__NotifyHeartbeat);
	}
	virtual int send_NotifyHeartbeat(const char *soap_endpoint, const char *soap_action, ns1__WsHeartbeatNotificationStructure *ns1__NotifyHeartbeat);
	/// Web service one-way receive operation 'recv_NotifyHeartbeat' (returns SOAP_OK or error code);
	virtual int recv_NotifyHeartbeat(struct __ns1__NotifyHeartbeat&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyHeartbeat' (returns SOAP_OK or error code)
	virtual int recv_NotifyHeartbeat_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyHeartbeat' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyHeartbeat(ns1__WsHeartbeatNotificationStructure *ns1__NotifyHeartbeat)
	{
		return this->NotifyHeartbeat(NULL, NULL, ns1__NotifyHeartbeat);
	}
	virtual int NotifyHeartbeat(const char *soap_endpoint, const char *soap_action, ns1__WsHeartbeatNotificationStructure *ns1__NotifyHeartbeat)
	{
		if (this->send_NotifyHeartbeat(soap_endpoint, soap_action, ns1__NotifyHeartbeat) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyProductionTimetable' (returns SOAP_OK or error code)
	virtual int send_NotifyProductionTimetable(ns1__WsProductionTimetableNotificationStructure *ns1__NotifyProductionTimetable)
	{
		return this->send_NotifyProductionTimetable(NULL, NULL, ns1__NotifyProductionTimetable);
	}
	virtual int send_NotifyProductionTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsProductionTimetableNotificationStructure *ns1__NotifyProductionTimetable);
	/// Web service one-way receive operation 'recv_NotifyProductionTimetable' (returns SOAP_OK or error code);
	virtual int recv_NotifyProductionTimetable(struct __ns1__NotifyProductionTimetable&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyProductionTimetable' (returns SOAP_OK or error code)
	virtual int recv_NotifyProductionTimetable_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyProductionTimetable' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyProductionTimetable(ns1__WsProductionTimetableNotificationStructure *ns1__NotifyProductionTimetable)
	{
		return this->NotifyProductionTimetable(NULL, NULL, ns1__NotifyProductionTimetable);
	}
	virtual int NotifyProductionTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsProductionTimetableNotificationStructure *ns1__NotifyProductionTimetable)
	{
		if (this->send_NotifyProductionTimetable(soap_endpoint, soap_action, ns1__NotifyProductionTimetable) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyEstimatedTimetable' (returns SOAP_OK or error code)
	virtual int send_NotifyEstimatedTimetable(ns1__WsEstimatedTimetableNotificationStructure *ns1__NotifyEstimatedTimetable)
	{
		return this->send_NotifyEstimatedTimetable(NULL, NULL, ns1__NotifyEstimatedTimetable);
	}
	virtual int send_NotifyEstimatedTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsEstimatedTimetableNotificationStructure *ns1__NotifyEstimatedTimetable);
	/// Web service one-way receive operation 'recv_NotifyEstimatedTimetable' (returns SOAP_OK or error code);
	virtual int recv_NotifyEstimatedTimetable(struct __ns1__NotifyEstimatedTimetable&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyEstimatedTimetable' (returns SOAP_OK or error code)
	virtual int recv_NotifyEstimatedTimetable_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyEstimatedTimetable' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyEstimatedTimetable(ns1__WsEstimatedTimetableNotificationStructure *ns1__NotifyEstimatedTimetable)
	{
		return this->NotifyEstimatedTimetable(NULL, NULL, ns1__NotifyEstimatedTimetable);
	}
	virtual int NotifyEstimatedTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsEstimatedTimetableNotificationStructure *ns1__NotifyEstimatedTimetable)
	{
		if (this->send_NotifyEstimatedTimetable(soap_endpoint, soap_action, ns1__NotifyEstimatedTimetable) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyStopTimetable' (returns SOAP_OK or error code)
	virtual int send_NotifyStopTimetable(ns1__WsStopTimetableNotificationStructure *ns1__NotifyStopTimetable)
	{
		return this->send_NotifyStopTimetable(NULL, NULL, ns1__NotifyStopTimetable);
	}
	virtual int send_NotifyStopTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsStopTimetableNotificationStructure *ns1__NotifyStopTimetable);
	/// Web service one-way receive operation 'recv_NotifyStopTimetable' (returns SOAP_OK or error code);
	virtual int recv_NotifyStopTimetable(struct __ns1__NotifyStopTimetable&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyStopTimetable' (returns SOAP_OK or error code)
	virtual int recv_NotifyStopTimetable_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyStopTimetable' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyStopTimetable(ns1__WsStopTimetableNotificationStructure *ns1__NotifyStopTimetable)
	{
		return this->NotifyStopTimetable(NULL, NULL, ns1__NotifyStopTimetable);
	}
	virtual int NotifyStopTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsStopTimetableNotificationStructure *ns1__NotifyStopTimetable)
	{
		if (this->send_NotifyStopTimetable(soap_endpoint, soap_action, ns1__NotifyStopTimetable) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyStopMonitoring' (returns SOAP_OK or error code)
	virtual int send_NotifyStopMonitoring(ns1__WsStopMonitoringNotificationStructure *ns1__NotifyStopMonitoring)
	{
		return this->send_NotifyStopMonitoring(NULL, NULL, ns1__NotifyStopMonitoring);
	}
	virtual int send_NotifyStopMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsStopMonitoringNotificationStructure *ns1__NotifyStopMonitoring);
	/// Web service one-way receive operation 'recv_NotifyStopMonitoring' (returns SOAP_OK or error code);
	virtual int recv_NotifyStopMonitoring(struct __ns1__NotifyStopMonitoring&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyStopMonitoring' (returns SOAP_OK or error code)
	virtual int recv_NotifyStopMonitoring_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyStopMonitoring' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyStopMonitoring(ns1__WsStopMonitoringNotificationStructure *ns1__NotifyStopMonitoring)
	{
		return this->NotifyStopMonitoring(NULL, NULL, ns1__NotifyStopMonitoring);
	}
	virtual int NotifyStopMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsStopMonitoringNotificationStructure *ns1__NotifyStopMonitoring)
	{
		if (this->send_NotifyStopMonitoring(soap_endpoint, soap_action, ns1__NotifyStopMonitoring) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyVehicleMonitoring' (returns SOAP_OK or error code)
	virtual int send_NotifyVehicleMonitoring(ns1__WsVehicleMonitoringNotificationStructure *ns1__NotifyVehicleMonitoring)
	{
		return this->send_NotifyVehicleMonitoring(NULL, NULL, ns1__NotifyVehicleMonitoring);
	}
	virtual int send_NotifyVehicleMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsVehicleMonitoringNotificationStructure *ns1__NotifyVehicleMonitoring);
	/// Web service one-way receive operation 'recv_NotifyVehicleMonitoring' (returns SOAP_OK or error code);
	virtual int recv_NotifyVehicleMonitoring(struct __ns1__NotifyVehicleMonitoring&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyVehicleMonitoring' (returns SOAP_OK or error code)
	virtual int recv_NotifyVehicleMonitoring_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyVehicleMonitoring' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyVehicleMonitoring(ns1__WsVehicleMonitoringNotificationStructure *ns1__NotifyVehicleMonitoring)
	{
		return this->NotifyVehicleMonitoring(NULL, NULL, ns1__NotifyVehicleMonitoring);
	}
	virtual int NotifyVehicleMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsVehicleMonitoringNotificationStructure *ns1__NotifyVehicleMonitoring)
	{
		if (this->send_NotifyVehicleMonitoring(soap_endpoint, soap_action, ns1__NotifyVehicleMonitoring) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyConnectionTimetable' (returns SOAP_OK or error code)
	virtual int send_NotifyConnectionTimetable(ns1__WsConnectionTimetableNotificationStructure *ns1__NotifyConnectionTimetable)
	{
		return this->send_NotifyConnectionTimetable(NULL, NULL, ns1__NotifyConnectionTimetable);
	}
	virtual int send_NotifyConnectionTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsConnectionTimetableNotificationStructure *ns1__NotifyConnectionTimetable);
	/// Web service one-way receive operation 'recv_NotifyConnectionTimetable' (returns SOAP_OK or error code);
	virtual int recv_NotifyConnectionTimetable(struct __ns1__NotifyConnectionTimetable&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyConnectionTimetable' (returns SOAP_OK or error code)
	virtual int recv_NotifyConnectionTimetable_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyConnectionTimetable' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyConnectionTimetable(ns1__WsConnectionTimetableNotificationStructure *ns1__NotifyConnectionTimetable)
	{
		return this->NotifyConnectionTimetable(NULL, NULL, ns1__NotifyConnectionTimetable);
	}
	virtual int NotifyConnectionTimetable(const char *soap_endpoint, const char *soap_action, ns1__WsConnectionTimetableNotificationStructure *ns1__NotifyConnectionTimetable)
	{
		if (this->send_NotifyConnectionTimetable(soap_endpoint, soap_action, ns1__NotifyConnectionTimetable) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyConnectionMonitoring' (returns SOAP_OK or error code)
	virtual int send_NotifyConnectionMonitoring(ns1__WsConnectionMonitoringNotificationStructure *ns1__NotifyConnectionMonitoring)
	{
		return this->send_NotifyConnectionMonitoring(NULL, NULL, ns1__NotifyConnectionMonitoring);
	}
	virtual int send_NotifyConnectionMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsConnectionMonitoringNotificationStructure *ns1__NotifyConnectionMonitoring);
	/// Web service one-way receive operation 'recv_NotifyConnectionMonitoring' (returns SOAP_OK or error code);
	virtual int recv_NotifyConnectionMonitoring(struct __ns1__NotifyConnectionMonitoring&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyConnectionMonitoring' (returns SOAP_OK or error code)
	virtual int recv_NotifyConnectionMonitoring_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyConnectionMonitoring' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyConnectionMonitoring(ns1__WsConnectionMonitoringNotificationStructure *ns1__NotifyConnectionMonitoring)
	{
		return this->NotifyConnectionMonitoring(NULL, NULL, ns1__NotifyConnectionMonitoring);
	}
	virtual int NotifyConnectionMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsConnectionMonitoringNotificationStructure *ns1__NotifyConnectionMonitoring)
	{
		if (this->send_NotifyConnectionMonitoring(soap_endpoint, soap_action, ns1__NotifyConnectionMonitoring) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyGeneralMessage' (returns SOAP_OK or error code)
	virtual int send_NotifyGeneralMessage(ns1__WsGeneralMessageNotificationStructure *ns1__NotifyGeneralMessage)
	{
		return this->send_NotifyGeneralMessage(NULL, NULL, ns1__NotifyGeneralMessage);
	}
	virtual int send_NotifyGeneralMessage(const char *soap_endpoint, const char *soap_action, ns1__WsGeneralMessageNotificationStructure *ns1__NotifyGeneralMessage);
	/// Web service one-way receive operation 'recv_NotifyGeneralMessage' (returns SOAP_OK or error code);
	virtual int recv_NotifyGeneralMessage(struct __ns1__NotifyGeneralMessage&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyGeneralMessage' (returns SOAP_OK or error code)
	virtual int recv_NotifyGeneralMessage_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyGeneralMessage' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyGeneralMessage(ns1__WsGeneralMessageNotificationStructure *ns1__NotifyGeneralMessage)
	{
		return this->NotifyGeneralMessage(NULL, NULL, ns1__NotifyGeneralMessage);
	}
	virtual int NotifyGeneralMessage(const char *soap_endpoint, const char *soap_action, ns1__WsGeneralMessageNotificationStructure *ns1__NotifyGeneralMessage)
	{
		if (this->send_NotifyGeneralMessage(soap_endpoint, soap_action, ns1__NotifyGeneralMessage) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifyFacilityMonitoring' (returns SOAP_OK or error code)
	virtual int send_NotifyFacilityMonitoring(ns1__WsFacilityMonitoringNotificationStructure *ns1__NotifyFacilityMonitoring)
	{
		return this->send_NotifyFacilityMonitoring(NULL, NULL, ns1__NotifyFacilityMonitoring);
	}
	virtual int send_NotifyFacilityMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsFacilityMonitoringNotificationStructure *ns1__NotifyFacilityMonitoring);
	/// Web service one-way receive operation 'recv_NotifyFacilityMonitoring' (returns SOAP_OK or error code);
	virtual int recv_NotifyFacilityMonitoring(struct __ns1__NotifyFacilityMonitoring&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifyFacilityMonitoring' (returns SOAP_OK or error code)
	virtual int recv_NotifyFacilityMonitoring_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifyFacilityMonitoring' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifyFacilityMonitoring(ns1__WsFacilityMonitoringNotificationStructure *ns1__NotifyFacilityMonitoring)
	{
		return this->NotifyFacilityMonitoring(NULL, NULL, ns1__NotifyFacilityMonitoring);
	}
	virtual int NotifyFacilityMonitoring(const char *soap_endpoint, const char *soap_action, ns1__WsFacilityMonitoringNotificationStructure *ns1__NotifyFacilityMonitoring)
	{
		if (this->send_NotifyFacilityMonitoring(soap_endpoint, soap_action, ns1__NotifyFacilityMonitoring) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
	/// Web service one-way send operation 'send_NotifySituationExchange' (returns SOAP_OK or error code)
	virtual int send_NotifySituationExchange(ns1__WsSituationExchangeNotificationStructure *ns1__NotifySituationExchange)
	{
		return this->send_NotifySituationExchange(NULL, NULL, ns1__NotifySituationExchange);
	}
	virtual int send_NotifySituationExchange(const char *soap_endpoint, const char *soap_action, ns1__WsSituationExchangeNotificationStructure *ns1__NotifySituationExchange);
	/// Web service one-way receive operation 'recv_NotifySituationExchange' (returns SOAP_OK or error code);
	virtual int recv_NotifySituationExchange(struct __ns1__NotifySituationExchange&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_NotifySituationExchange' (returns SOAP_OK or error code)
	virtual int recv_NotifySituationExchange_empty_response()
	{
		return soap_recv_empty_response(this->soap);
	}
	/// Web service one-way synchronous send operation 'NotifySituationExchange' with HTTP Accept/OK response receive (returns SOAP_OK or error code)
	virtual int NotifySituationExchange(ns1__WsSituationExchangeNotificationStructure *ns1__NotifySituationExchange)
	{
		return this->NotifySituationExchange(NULL, NULL, ns1__NotifySituationExchange);
	}
	virtual int NotifySituationExchange(const char *soap_endpoint, const char *soap_action, ns1__WsSituationExchangeNotificationStructure *ns1__NotifySituationExchange)
	{
		if (this->send_NotifySituationExchange(soap_endpoint, soap_action, ns1__NotifySituationExchange) || soap_recv_empty_response(this->soap))
			return this->soap->error;
		return SOAP_OK;
	}
};
#endif
