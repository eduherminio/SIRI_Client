// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* ../SIRI.h
   Generated by wsdl2h 2.8.44 from siri_wsProducer-Document.wsdl and C:\Desarrollo\externo\gsoap\gsoap\gsoap\typemap.dat
   2017-03-28 11:12:24 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on ../SIRI.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://wsdl.siri.org.uk/siri                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://wsdl.siri.org.uk/siri"
ns2 = "http://www.siri.org.uk/siri"
ns3 = "http://www.ifopt.org.uk/acsb"
ns4 = "http://www.ifopt.org.uk/ifopt"
ns5 = "http://datex2.eu/schema/2_0RC1/2_0"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://wsdl.siri.org.uk/siri"
//gsoap ns1   schema namespace:	http://wsdl.siri.org.uk/siri
//gsoap ns1   schema form:	unqualified

/// <PRE><BLOCKQUOTE>
///   SIRI Service Interface for Real-time Information relating to Public Transport Operations. - XML Schema with explicit functional services
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns2	"http://www.siri.org.uk/siri"
//gsoap ns2   schema namespace:	http://www.siri.org.uk/siri
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://www.ifopt.org.uk/acsb"
//gsoap ns3   schema namespace:	http://www.ifopt.org.uk/acsb
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

/// <PRE><BLOCKQUOTE>
///   Equipment types for IFOPT Fixed Objects in Public Transport.
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns4	"http://www.ifopt.org.uk/ifopt"
//gsoap ns4   schema namespace:	http://www.ifopt.org.uk/ifopt
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns5	"http://datex2.eu/schema/2_0RC1/2_0"
//gsoap ns5   schema namespace:	http://datex2.eu/schema/2_0RC1/2_0
//gsoap ns5   schema elementForm:	qualified
//gsoap ns5   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:anyType".
class xsd__anyType { _XML __item; struct soap *soap; };

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Built-in XSD type "xs:dateTime".
#import "custom/struct_tm.h"

/// Built-in XSD type "xs:duration".
#import "custom/duration.h"

/// Primitive built-in type "xs:ID".
typedef std::wstring xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__ID_ to check runtime type (see soapStub.h).
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:NMTOKEN".
typedef std::wstring xsd__NMTOKEN;

/// Class wrapper for built-in type "xs:NMTOKEN" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__NMTOKEN_ to check runtime type (see soapStub.h).
class xsd__NMTOKEN_ : public xsd__anyType
{ public:
    xsd__NMTOKEN                         __item;                       
};

/// Primitive built-in type "xs:NMTOKENS".
typedef std::wstring xsd__NMTOKENS;

/// Class wrapper for built-in type "xs:NMTOKENS" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__NMTOKENS_ to check runtime type (see soapStub.h).
class xsd__NMTOKENS_ : public xsd__anyType
{ public:
    xsd__NMTOKENS                        __item;                       
};

/// Primitive built-in type "xs:anyURI".
typedef std::wstring xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h).
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h).
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h).
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__dateTime_ to check runtime type (see soapStub.h).
class xsd__dateTime_ : public xsd__anyType
{ public:
    xsd__dateTime                        __item;                       
};

/// Primitive built-in type "xs:decimal".
typedef std::wstring xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__decimal_ to check runtime type (see soapStub.h).
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h).
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h).
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h).
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Primitive built-in type "xs:integer".
typedef std::wstring xsd__integer;

/// Class wrapper for built-in type "xs:integer" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__integer_ to check runtime type (see soapStub.h).
class xsd__integer_ : public xsd__anyType
{ public:
    xsd__integer                         __item;                       
};

/// Primitive built-in type "xs:language".
typedef std::wstring xsd__language;

/// Class wrapper for built-in type "xs:language" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__language_ to check runtime type (see soapStub.h).
class xsd__language_ : public xsd__anyType
{ public:
    xsd__language                        __item;                       
};

/// Primitive built-in type "xs:nonNegativeInteger".
typedef std::wstring xsd__nonNegativeInteger;

/// Class wrapper for built-in type "xs:nonNegativeInteger" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__nonNegativeInteger_ to check runtime type (see soapStub.h).
class xsd__nonNegativeInteger_ : public xsd__anyType
{ public:
    xsd__nonNegativeInteger              __item;                       
};

/// Primitive built-in type "xs:normalizedString".
typedef std::wstring xsd__normalizedString;

/// Class wrapper for built-in type "xs:normalizedString" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__normalizedString_ to check runtime type (see soapStub.h).
class xsd__normalizedString_ : public xsd__anyType
{ public:
    xsd__normalizedString                __item;                       
};

/// Primitive built-in type "xs:positiveInteger".
typedef std::wstring xsd__positiveInteger;

/// Class wrapper for built-in type "xs:positiveInteger" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__positiveInteger_ to check runtime type (see soapStub.h).
class xsd__positiveInteger_ : public xsd__anyType
{ public:
    xsd__positiveInteger                 __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h).
class xsd__string : public xsd__anyType
{ public:
    std::wstring                         __item;                       
};

/// Primitive built-in type "xs:time".
typedef std::wstring xsd__time;

/// Class wrapper for built-in type "xs:time" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__time_ to check runtime type (see soapStub.h).
class xsd__time_ : public xsd__anyType
{ public:
    xsd__time                            __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedInt to check runtime type (see soapStub.h).
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Built-in attribute "xml:lang".
typedef std::wstring _xml__lang;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__WsSubscriptionRequestInfoStructure.
class ns1__WsSubscriptionRequestInfoStructure;

//  Forward declaration of class ns1__WsSubscriptionRequestStructure.
class ns1__WsSubscriptionRequestStructure;

//  Forward declaration of class ns1__WsSubscriptionAnswerStructure.
class ns1__WsSubscriptionAnswerStructure;

//  Forward declaration of class ns1__WsDeleteSubscriptionRequestStructure.
class ns1__WsDeleteSubscriptionRequestStructure;

//  Forward declaration of class ns1__WsDeleteSubscriptionAnswerStructure.
class ns1__WsDeleteSubscriptionAnswerStructure;

//  Forward declaration of class ns1__WsCheckStatusStructure.
class ns1__WsCheckStatusStructure;

//  Forward declaration of class ns1__WsCheckStatusResponseStructure.
class ns1__WsCheckStatusResponseStructure;

//  Forward declaration of class ns1__WsDataSupplyRequestStructure.
class ns1__WsDataSupplyRequestStructure;

//  Forward declaration of class ns1__WsDataSupplyAnswerStructure.
class ns1__WsDataSupplyAnswerStructure;

//  Forward declaration of class ns1__WsGetCapabilitiesRequestStructure.
class ns1__WsGetCapabilitiesRequestStructure;

//  Forward declaration of class ns1__WsGetCapabilitiesAnswerStructure.
class ns1__WsGetCapabilitiesAnswerStructure;

//  Forward declaration of class ns1__WsStopPointsDiscoveryStructure.
class ns1__WsStopPointsDiscoveryStructure;

//  Forward declaration of class ns1__WsStopPointsDiscoveryAnswerStructure.
class ns1__WsStopPointsDiscoveryAnswerStructure;

//  Forward declaration of class ns1__WsLinesDiscoveryStructure.
class ns1__WsLinesDiscoveryStructure;

//  Forward declaration of class ns1__WsLinesDiscoveryAnswerStructure.
class ns1__WsLinesDiscoveryAnswerStructure;

//  Forward declaration of class ns1__WsServiceRequestInfoStructure.
class ns1__WsServiceRequestInfoStructure;

//  Forward declaration of class ns1__WsConnectionMonitoringRequestStructure.
class ns1__WsConnectionMonitoringRequestStructure;

//  Forward declaration of class ns1__WsConnectionMonitoringAnswerStructure.
class ns1__WsConnectionMonitoringAnswerStructure;

//  Forward declaration of class ns1__WsConnectionTimetableRequestStructure.
class ns1__WsConnectionTimetableRequestStructure;

//  Forward declaration of class ns1__WsConnectionTimetableAnswerStructure.
class ns1__WsConnectionTimetableAnswerStructure;

//  Forward declaration of class ns1__WsEstimatedTimetableRequestStructure.
class ns1__WsEstimatedTimetableRequestStructure;

//  Forward declaration of class ns1__WsEstimatedTimetableAnswerStructure.
class ns1__WsEstimatedTimetableAnswerStructure;

//  Forward declaration of class ns1__WsFacilityMonitoringRequestStructure.
class ns1__WsFacilityMonitoringRequestStructure;

//  Forward declaration of class ns1__WsFacilityMonitoringAnswerStructure.
class ns1__WsFacilityMonitoringAnswerStructure;

//  Forward declaration of class ns1__GeneralMessageRequestStructure.
class ns1__GeneralMessageRequestStructure;

//  Forward declaration of class ns1__GeneralMessageAnswerStructure.
class ns1__GeneralMessageAnswerStructure;

//  Forward declaration of class ns1__ProductionTimetableRequestStructure.
class ns1__ProductionTimetableRequestStructure;

//  Forward declaration of class ns1__ProductionTimetableAnswerStructure.
class ns1__ProductionTimetableAnswerStructure;

//  Forward declaration of class ns1__SituationExchangeRequestStructure.
class ns1__SituationExchangeRequestStructure;

//  Forward declaration of class ns1__SituationExchangeAnswerStructure.
class ns1__SituationExchangeAnswerStructure;

//  Forward declaration of class ns1__StopMonitoringRequestStructure.
class ns1__StopMonitoringRequestStructure;

//  Forward declaration of class ns1__StopMonitoringMultipleRequestStructure.
class ns1__StopMonitoringMultipleRequestStructure;

//  Forward declaration of class ns1__StopMonitoringAnswerStructure.
class ns1__StopMonitoringAnswerStructure;

//  Forward declaration of class ns1__StopTimetableRequestStructure.
class ns1__StopTimetableRequestStructure;

//  Forward declaration of class ns1__StopTimetableAnswerStructure.
class ns1__StopTimetableAnswerStructure;

//  Forward declaration of class ns1__VehicleMonitoringRequestStructure.
class ns1__VehicleMonitoringRequestStructure;

//  Forward declaration of class ns1__VehicleMonitoringAnswerStructure.
class ns1__VehicleMonitoringAnswerStructure;

//  Forward declaration of class ns2__ServiceRequestStructure.
class ns2__ServiceRequestStructure;

//  Forward declaration of class ns2__SubscriptionRequestStructure.
class ns2__SubscriptionRequestStructure;

//  Forward declaration of class ns2__SiriSubscriptionRequestStructure.
class ns2__SiriSubscriptionRequestStructure;

//  Forward declaration of class ns2__ServiceDeliveryStructure.
class ns2__ServiceDeliveryStructure;

//  Forward declaration of class ns2__ServiceDeliveryBodyStructure.
class ns2__ServiceDeliveryBodyStructure;

//  Forward declaration of class ns2__SiriServiceDeliveryStructure.
class ns2__SiriServiceDeliveryStructure;

//  Forward declaration of class ns2__CapabilitiesRequestStructure.
class ns2__CapabilitiesRequestStructure;

//  Forward declaration of class ns2__CapabilitiesResponseStructure.
class ns2__CapabilitiesResponseStructure;

//  Forward declaration of class ns2__ContextualisedRequestStructure.
class ns2__ContextualisedRequestStructure;

//  Forward declaration of class ns2__ServiceRequestContextStructure.
class ns2__ServiceRequestContextStructure;

//  Forward declaration of class ns2__DataNameSpacesStructure.
class ns2__DataNameSpacesStructure;

//  Forward declaration of class ns2__TerminateSubscriptionRequestStructure.
class ns2__TerminateSubscriptionRequestStructure;

//  Forward declaration of class ns2__TerminateSubscriptionResponseStructure.
class ns2__TerminateSubscriptionResponseStructure;

//  Forward declaration of class ns2__TerminationResponseStatusStructure.
class ns2__TerminationResponseStatusStructure;

//  Forward declaration of class ns2__StatusResponseStructure.
class ns2__StatusResponseStructure;

//  Forward declaration of class ns2__SubscriptionResponseStructure.
class ns2__SubscriptionResponseStructure;

//  Forward declaration of class ns2__DataReadyRequestStructure.
class ns2__DataReadyRequestStructure;

//  Forward declaration of class ns2__DataReadyResponseStructure.
class ns2__DataReadyResponseStructure;

//  Forward declaration of class ns2__DataSupplyRequestStructure.
class ns2__DataSupplyRequestStructure;

//  Forward declaration of class ns2__DataReceivedResponseStructure.
class ns2__DataReceivedResponseStructure;

//  Forward declaration of class ns2__CheckStatusRequestStructure.
class ns2__CheckStatusRequestStructure;

//  Forward declaration of class ns2__CheckStatusResponseStructure.
class ns2__CheckStatusResponseStructure;

//  Forward declaration of class ns2__HeartbeatNotificationStructure.
class ns2__HeartbeatNotificationStructure;

//  Forward declaration of class ns2__SubscriptionResponseBodyStructure.
class ns2__SubscriptionResponseBodyStructure;

//  Forward declaration of class ns2__TerminateSubscriptionRequestBodyStructure.
class ns2__TerminateSubscriptionRequestBodyStructure;

//  Forward declaration of class ns2__DataSupplyRequestBodyStructure.
class ns2__DataSupplyRequestBodyStructure;

//  Forward declaration of class ns2__CheckStatusResponseBodyStructure.
class ns2__CheckStatusResponseBodyStructure;

//  Forward declaration of class ns2__AbstractRequestStructure.
class ns2__AbstractRequestStructure;

//  Forward declaration of class ns2__AuthenticatedRequestStructure.
class ns2__AuthenticatedRequestStructure;

//  Forward declaration of class ns2__RequestStructure.
class ns2__RequestStructure;

//  Forward declaration of class ns2__AbstractServiceRequestStructure.
class ns2__AbstractServiceRequestStructure;

//  Forward declaration of class ns2__AbstractFunctionalServiceRequestStructure.
class ns2__AbstractFunctionalServiceRequestStructure;

//  Forward declaration of class ns2__AbstractSubscriptionStructure.
class ns2__AbstractSubscriptionStructure;

//  Forward declaration of class ns2__SubscriptionContextStructure.
class ns2__SubscriptionContextStructure;

//  Forward declaration of class ns2__AbstractSubscriptionRequestStructure.
class ns2__AbstractSubscriptionRequestStructure;

//  Forward declaration of class ns2__ResponseStructure.
class ns2__ResponseStructure;

//  Forward declaration of class ns2__ProducerResponseStructure.
class ns2__ProducerResponseStructure;

//  Forward declaration of class ns2__AbstractNotificationStructure.
class ns2__AbstractNotificationStructure;

//  Forward declaration of class ns2__AbstractServiceDeliveryStructure.
class ns2__AbstractServiceDeliveryStructure;

//  Forward declaration of class ns2__ConsumerRequestEndpointStructure.
class ns2__ConsumerRequestEndpointStructure;

//  Forward declaration of class ns2__ConsumerResponseEndpointStructure.
class ns2__ConsumerResponseEndpointStructure;

//  Forward declaration of class ns2__ProducerRequestEndpointStructure.
class ns2__ProducerRequestEndpointStructure;

//  Forward declaration of class ns2__ResponseEndpointStructure.
class ns2__ResponseEndpointStructure;

//  Forward declaration of class ns2__ProducerResponseEndpointStructure.
class ns2__ProducerResponseEndpointStructure;

//  Forward declaration of class ns2__AbstractItemStructure.
class ns2__AbstractItemStructure;

//  Forward declaration of class ns2__AbstractIdentifiedItemStructure.
class ns2__AbstractIdentifiedItemStructure;

//  Forward declaration of class ns2__AbstractRequiredIdentifiedItemStructure.
class ns2__AbstractRequiredIdentifiedItemStructure;

//  Forward declaration of class ns2__AbstractReferencingItemStructure.
class ns2__AbstractReferencingItemStructure;

//  Forward declaration of class ns2__AbstractRequiredReferencingItemStructure.
class ns2__AbstractRequiredReferencingItemStructure;

//  Forward declaration of class ns2__ServiceCapabilitiesRequestStructure.
class ns2__ServiceCapabilitiesRequestStructure;

//  Forward declaration of class ns2__AbstractServiceCapabilitiesResponseStructure.
class ns2__AbstractServiceCapabilitiesResponseStructure;

//  Forward declaration of class ns2__AbstractCapabilitiesStructure.
class ns2__AbstractCapabilitiesStructure;

//  Forward declaration of class ns2__CapabilityGeneralInteractionStructure.
class ns2__CapabilityGeneralInteractionStructure;

//  Forward declaration of class ns2__CapabilityRequestPolicyStructure.
class ns2__CapabilityRequestPolicyStructure;

//  Forward declaration of class ns2__CapabilitySubscriptionPolicyStructure.
class ns2__CapabilitySubscriptionPolicyStructure;

//  Forward declaration of class ns2__TransportDescriptionStructure.
class ns2__TransportDescriptionStructure;

//  Forward declaration of class ns2__AbstractDiscoveryRequestStructure.
class ns2__AbstractDiscoveryRequestStructure;

//  Forward declaration of class ns2__AbstractDiscoveryDeliveryStructure.
class ns2__AbstractDiscoveryDeliveryStructure;

//  Forward declaration of class ns2__ExtensionsStructure.
class ns2__ExtensionsStructure;

//  Forward declaration of class ns2__CoordinatesStructure.
class ns2__CoordinatesStructure;

//  Forward declaration of class ns2__LocationStructure.
class ns2__LocationStructure;

//  Forward declaration of class ns2__BoundingBoxStructure.
class ns2__BoundingBoxStructure;

//  Forward declaration of class ns2__LineShapeStructure.
class ns2__LineShapeStructure;

//  Forward declaration of class ns2__ErrorConditionStructure.
class ns2__ErrorConditionStructure;

//  Forward declaration of class ns2__ErrorConditionElementStructure.
class ns2__ErrorConditionElementStructure;

//  Forward declaration of class ns2__ErrorDescriptionStructure.
class ns2__ErrorDescriptionStructure;

//  Forward declaration of class ns2__ErrorCodeStructure.
class ns2__ErrorCodeStructure;

//  Forward declaration of class ns2__ServiceDeliveryErrorConditionStructure.
class ns2__ServiceDeliveryErrorConditionStructure;

//  Forward declaration of class ns2__UnapprovedKeyAccessStructure.
class ns2__UnapprovedKeyAccessStructure;

//  Forward declaration of class ns2__UnknownParticipantErrorStructure.
class ns2__UnknownParticipantErrorStructure;

//  Forward declaration of class ns2__UnknownEndpointErrorStructure.
class ns2__UnknownEndpointErrorStructure;

//  Forward declaration of class ns2__EndpointDeniedAccessStructure.
class ns2__EndpointDeniedAccessStructure;

//  Forward declaration of class ns2__EndpointNotAvailableAccessStructure.
class ns2__EndpointNotAvailableAccessStructure;

//  Forward declaration of class ns2__ServiceNotAvailableErrorStructure.
class ns2__ServiceNotAvailableErrorStructure;

//  Forward declaration of class ns2__CapabilityNotSupportedErrorStructure.
class ns2__CapabilityNotSupportedErrorStructure;

//  Forward declaration of class ns2__BeyondDataHorizonErrorStructure.
class ns2__BeyondDataHorizonErrorStructure;

//  Forward declaration of class ns2__AccessNotAllowedErrorStructure.
class ns2__AccessNotAllowedErrorStructure;

//  Forward declaration of class ns2__NoInfoForTopicErrorStructure.
class ns2__NoInfoForTopicErrorStructure;

//  Forward declaration of class ns2__InvalidDataReferencesErrorStructure.
class ns2__InvalidDataReferencesErrorStructure;

//  Forward declaration of class ns2__ParametersIgnoredErrorStructure.
class ns2__ParametersIgnoredErrorStructure;

//  Forward declaration of class ns2__UnknownExtensionsErrorStructure.
class ns2__UnknownExtensionsErrorStructure;

//  Forward declaration of class ns2__AllowedResourceUsageExceededErrorStructure.
class ns2__AllowedResourceUsageExceededErrorStructure;

//  Forward declaration of class ns2__UnknownSubscriberErrorStructure.
class ns2__UnknownSubscriberErrorStructure;

//  Forward declaration of class ns2__UnknownSubscriptionErrorStructure.
class ns2__UnknownSubscriptionErrorStructure;

//  Forward declaration of class ns2__OtherErrorStructure.
class ns2__OtherErrorStructure;

//  Forward declaration of class ns2__NaturalLanguageStringStructure.
class ns2__NaturalLanguageStringStructure;

//  Forward declaration of class ns2__NaturalLanguagePlaceNameStructure.
class ns2__NaturalLanguagePlaceNameStructure;

//  Forward declaration of class ns2__MessageQualifierStructure.
class ns2__MessageQualifierStructure;

//  Forward declaration of class ns2__MessageRefStructure.
class ns2__MessageRefStructure;

//  Forward declaration of class ns2__SubscriptionQualifierStructure.
class ns2__SubscriptionQualifierStructure;

//  Forward declaration of class ns2__SubscriptionFilterStructure.
class ns2__SubscriptionFilterStructure;

//  Forward declaration of class ns2__SubscriptionFilterRefStructure.
class ns2__SubscriptionFilterRefStructure;

//  Forward declaration of class ns2__ItemRefStructure.
class ns2__ItemRefStructure;

//  Forward declaration of class ns2__CapabilityRefStructure.
class ns2__CapabilityRefStructure;

//  Forward declaration of class ns2__ParticipantRefStructure.
class ns2__ParticipantRefStructure;

//  Forward declaration of class ns2__SiriSchema.
class ns2__SiriSchema;

//  Forward declaration of class ns2__AllFacilitiesFeatureStructure.
class ns2__AllFacilitiesFeatureStructure;

//  Forward declaration of class ns2__FacilityRefStructure.
class ns2__FacilityRefStructure;

//  Forward declaration of class ns2__FacilityStructure.
class ns2__FacilityStructure;

//  Forward declaration of class ns2__AnnotatedFacilityStructure.
class ns2__AnnotatedFacilityStructure;

//  Forward declaration of class ns2__FacilityStatusStructure.
class ns2__FacilityStatusStructure;

//  Forward declaration of class ns2__FacilityLocationStructure.
class ns2__FacilityLocationStructure;

//  Forward declaration of class ns2__FacilityConditionStructure.
class ns2__FacilityConditionStructure;

//  Forward declaration of class ns2__RemedyStructure.
class ns2__RemedyStructure;

//  Forward declaration of class ns2__MonitoringInformationStructure.
class ns2__MonitoringInformationStructure;

//  Forward declaration of class ns2__MonitoringValidityConditionStructure.
class ns2__MonitoringValidityConditionStructure;

//  Forward declaration of class ns2__EquipmentAvailabilityStructure.
class ns2__EquipmentAvailabilityStructure;

//  Forward declaration of class ns2__FacilityChangeStructure.
class ns2__FacilityChangeStructure;

//  Forward declaration of class ns2__MobilityDisruptionStructure.
class ns2__MobilityDisruptionStructure;

//  Forward declaration of class ns2__VehicleJourneyRefStructure.
class ns2__VehicleJourneyRefStructure;

//  Forward declaration of class ns2__DatedVehicleJourneyRefStructure.
class ns2__DatedVehicleJourneyRefStructure;

//  Forward declaration of class ns2__ConnectingJourneyRefStructure.
class ns2__ConnectingJourneyRefStructure;

//  Forward declaration of class ns2__InterchangeRefStructure.
class ns2__InterchangeRefStructure;

//  Forward declaration of class ns2__FramedVehicleJourneyRefStructure.
class ns2__FramedVehicleJourneyRefStructure;

//  Forward declaration of class ns2__DataFrameRefStructure.
class ns2__DataFrameRefStructure;

//  Forward declaration of class ns2__TrainPartRefStructure.
class ns2__TrainPartRefStructure;

//  Forward declaration of class ns2__BlockRefStructure.
class ns2__BlockRefStructure;

//  Forward declaration of class ns2__CourseOfJourneyRefStructure.
class ns2__CourseOfJourneyRefStructure;

//  Forward declaration of class ns2__JourneyPartRefStructure.
class ns2__JourneyPartRefStructure;

//  Forward declaration of class ns2__TrainNumberRefStructure.
class ns2__TrainNumberRefStructure;

//  Forward declaration of class ns2__DestinationRefStructure.
class ns2__DestinationRefStructure;

//  Forward declaration of class ns2__VersionRefStructure.
class ns2__VersionRefStructure;

//  Forward declaration of class ns2__StopPointRefStructure.
class ns2__StopPointRefStructure;

//  Forward declaration of class ns2__ClearDownRefStructure.
class ns2__ClearDownRefStructure;

//  Forward declaration of class ns2__StopAreaRefStructure.
class ns2__StopAreaRefStructure;

//  Forward declaration of class ns2__QuayRefStructure.
class ns2__QuayRefStructure;

//  Forward declaration of class ns2__MonitoringRefStructure.
class ns2__MonitoringRefStructure;

//  Forward declaration of class ns2__ConnectionLinkRefStructure.
class ns2__ConnectionLinkRefStructure;

//  Forward declaration of class ns2__ModesStructure.
class ns2__ModesStructure;

//  Forward declaration of class ns2__JourneyPatternRefStructure.
class ns2__JourneyPatternRefStructure;

//  Forward declaration of class ns2__LineDirectionStructure.
class ns2__LineDirectionStructure;

//  Forward declaration of class ns2__LineRefStructure.
class ns2__LineRefStructure;

//  Forward declaration of class ns2__GroupOfLinesRefStructure.
class ns2__GroupOfLinesRefStructure;

//  Forward declaration of class ns2__RouteRefStructure.
class ns2__RouteRefStructure;

//  Forward declaration of class ns2__DirectionRefStructure.
class ns2__DirectionRefStructure;

//  Forward declaration of class ns2__RouteLinkRefStructure.
class ns2__RouteLinkRefStructure;

//  Forward declaration of class ns2__JourneyPlaceRefStructure.
class ns2__JourneyPlaceRefStructure;

//  Forward declaration of class ns2__PlaceNameStructure.
class ns2__PlaceNameStructure;

//  Forward declaration of class ns2__VehicleRefStructure.
class ns2__VehicleRefStructure;

//  Forward declaration of class ns2__DriverRefStructure.
class ns2__DriverRefStructure;

//  Forward declaration of class ns2__NoteStructure.
class ns2__NoteStructure;

//  Forward declaration of class ns2__InfoChannelRefStructure.
class ns2__InfoChannelRefStructure;

//  Forward declaration of class ns2__OperatorRefStructure.
class ns2__OperatorRefStructure;

//  Forward declaration of class ns2__OrganisationRefStructure.
class ns2__OrganisationRefStructure;

//  Forward declaration of class ns2__ClosedTimestampRangeStructure.
class ns2__ClosedTimestampRangeStructure;

//  Forward declaration of class ns2__ClosedTimeRangeStructure.
class ns2__ClosedTimeRangeStructure;

//  Forward declaration of class ns2__HalfOpenTimeRangeStructure.
class ns2__HalfOpenTimeRangeStructure;

//  Forward declaration of class ns2__HalfOpenTimestampRangeStructure.
class ns2__HalfOpenTimestampRangeStructure;

//  Forward declaration of class ns2__SituationRefStructure.
class ns2__SituationRefStructure;

//  Forward declaration of class ns2__SituationSimpleRefStructure.
class ns2__SituationSimpleRefStructure;

//  Forward declaration of class ns2__EntryQualifierStructure.
class ns2__EntryQualifierStructure;

//  Forward declaration of class ns2__SituationVersion.
class ns2__SituationVersion;

//  Forward declaration of class ns2__SituationFullRefStructure.
class ns2__SituationFullRefStructure;

//  Forward declaration of class ns2__SituationSharedRefStructure.
class ns2__SituationSharedRefStructure;

//  Forward declaration of class ns2__ProductCategoryRefStructure.
class ns2__ProductCategoryRefStructure;

//  Forward declaration of class ns2__ServiceFeatureRefStructure.
class ns2__ServiceFeatureRefStructure;

//  Forward declaration of class ns2__VehicleFeatureRefStructure.
class ns2__VehicleFeatureRefStructure;

//  Forward declaration of class ns2__FeatureRefStructure.
class ns2__FeatureRefStructure;

//  Forward declaration of class ns2__SimpleContactStructure.
class ns2__SimpleContactStructure;

//  Forward declaration of class ns2__ViaNameStructure.
class ns2__ViaNameStructure;

//  Forward declaration of class ns2__DestinationStructure.
class ns2__DestinationStructure;

//  Forward declaration of class ns2__DirectionStructure.
class ns2__DirectionStructure;

//  Forward declaration of class ns2__ProgressBetweenStopsStructure.
class ns2__ProgressBetweenStopsStructure;

//  Forward declaration of class ns2__AbstractCallStructure.
class ns2__AbstractCallStructure;

//  Forward declaration of class ns2__AbstractMonitoredCallStructure.
class ns2__AbstractMonitoredCallStructure;

//  Forward declaration of class ns2__OnwardCallsStructure.
class ns2__OnwardCallsStructure;

//  Forward declaration of class ns2__OnwardCallStructure.
class ns2__OnwardCallStructure;

//  Forward declaration of class ns2__PredictionQualityStructure.
class ns2__PredictionQualityStructure;

//  Forward declaration of class ns2__StopAssignmentStructure.
class ns2__StopAssignmentStructure;

//  Forward declaration of class ns2__PlannedStopAssignmentStructure.
class ns2__PlannedStopAssignmentStructure;

//  Forward declaration of class ns2__MonitoredVehicleJourneyStructure.
class ns2__MonitoredVehicleJourneyStructure;

//  Forward declaration of class ns2__JourneyPartInfoStructure.
class ns2__JourneyPartInfoStructure;

//  Forward declaration of class ns2__TrainBlockPartStructure.
class ns2__TrainBlockPartStructure;

//  Forward declaration of class ns2__PreviousCallsStructure.
class ns2__PreviousCallsStructure;

//  Forward declaration of class ns2__PreviousCallStructure.
class ns2__PreviousCallStructure;

//  Forward declaration of class ns2__MonitoredCallStructure.
class ns2__MonitoredCallStructure;

//  Forward declaration of class ns2__ActionsStructure.
class ns2__ActionsStructure;

//  Forward declaration of class ns2__SimpleActionStructure.
class ns2__SimpleActionStructure;

//  Forward declaration of class ns2__ParameterisedActionStructure.
class ns2__ParameterisedActionStructure;

//  Forward declaration of class ns2__PushedActionStructure.
class ns2__PushedActionStructure;

//  Forward declaration of class ns2__ActionDataStructure.
class ns2__ActionDataStructure;

//  Forward declaration of class ns2__PublishToWebActionStructure.
class ns2__PublishToWebActionStructure;

//  Forward declaration of class ns2__PublishToMobileActionStructure.
class ns2__PublishToMobileActionStructure;

//  Forward declaration of class ns2__PublishToDisplayActionStructure.
class ns2__PublishToDisplayActionStructure;

//  Forward declaration of class ns2__PublishToAlertsActionStructure.
class ns2__PublishToAlertsActionStructure;

//  Forward declaration of class ns2__PublishToTvActionStructure.
class ns2__PublishToTvActionStructure;

//  Forward declaration of class ns2__ManualActionStructure.
class ns2__ManualActionStructure;

//  Forward declaration of class ns2__NotifyBySmsActionStructure.
class ns2__NotifyBySmsActionStructure;

//  Forward declaration of class ns2__NotifyByEmailActionStructure.
class ns2__NotifyByEmailActionStructure;

//  Forward declaration of class ns2__NotifyByPagerActionStructure.
class ns2__NotifyByPagerActionStructure;

//  Forward declaration of class ns2__NotifyUserActionStructure.
class ns2__NotifyUserActionStructure;

//  Forward declaration of class ns2__AffectedStopPointStructure.
class ns2__AffectedStopPointStructure;

//  Forward declaration of class ns2__AffectedModesStructure.
class ns2__AffectedModesStructure;

//  Forward declaration of class ns2__ZoneRefStructure.
class ns2__ZoneRefStructure;

//  Forward declaration of class ns2__AffectedConnectionLinkStructure.
class ns2__AffectedConnectionLinkStructure;

//  Forward declaration of class ns2__AffectedPathLinkStructure.
class ns2__AffectedPathLinkStructure;

//  Forward declaration of class ns2__AffectedInterchangeStructure.
class ns2__AffectedInterchangeStructure;

//  Forward declaration of class ns2__NetworkRefStructure.
class ns2__NetworkRefStructure;

//  Forward declaration of class ns2__OperationalUnitRefStructure.
class ns2__OperationalUnitRefStructure;

//  Forward declaration of class ns2__AffectedOperatorStructure.
class ns2__AffectedOperatorStructure;

//  Forward declaration of class ns2__NetworkStructure.
class ns2__NetworkStructure;

//  Forward declaration of class ns2__SectionRefStructure.
class ns2__SectionRefStructure;

//  Forward declaration of class ns2__AdviceRefStructure.
class ns2__AdviceRefStructure;

//  Forward declaration of class ns2__OffsetStructure.
class ns2__OffsetStructure;

//  Forward declaration of class ns2__AffectedNetworkStructure.
class ns2__AffectedNetworkStructure;

//  Forward declaration of class ns2__AffectedLineStructure.
class ns2__AffectedLineStructure;

//  Forward declaration of class ns2__AffectedSectionStructure.
class ns2__AffectedSectionStructure;

//  Forward declaration of class ns2__AffectedRouteStructure.
class ns2__AffectedRouteStructure;

//  Forward declaration of class ns2__AffectedVehicleJourneyStructure.
class ns2__AffectedVehicleJourneyStructure;

//  Forward declaration of class ns2__AffectedCallStructure.
class ns2__AffectedCallStructure;

//  Forward declaration of class ns2__AffectedPlaceStructure.
class ns2__AffectedPlaceStructure;

//  Forward declaration of class ns2__AffectedStopPlaceElementStructure.
class ns2__AffectedStopPlaceElementStructure;

//  Forward declaration of class ns2__AffectedStopPlaceStructure.
class ns2__AffectedStopPlaceStructure;

//  Forward declaration of class ns2__AffectedStopPlaceComponentStructure.
class ns2__AffectedStopPlaceComponentStructure;

//  Forward declaration of class ns2__CasualtiesStructure.
class ns2__CasualtiesStructure;

//  Forward declaration of class ns2__AbstractSituationElementStructure.
class ns2__AbstractSituationElementStructure;

//  Forward declaration of class ns2__SituationElementStructure.
class ns2__SituationElementStructure;

//  Forward declaration of class ns2__ReferencesStructure.
class ns2__ReferencesStructure;

//  Forward declaration of class ns2__RelatedSituationStructure.
class ns2__RelatedSituationStructure;

//  Forward declaration of class ns2__PtSituationElementStructure.
class ns2__PtSituationElementStructure;

//  Forward declaration of class ns2__RoadSituationElementStructure.
class ns2__RoadSituationElementStructure;

//  Forward declaration of class ns2__AffectedRoadStructure.
class ns2__AffectedRoadStructure;

//  Forward declaration of class ns2__OptionalTrafficElementStructure.
class ns2__OptionalTrafficElementStructure;

//  Forward declaration of class ns2__SituationSourceStructure.
class ns2__SituationSourceStructure;

//  Forward declaration of class ns2__AffectsScopeStructure.
class ns2__AffectsScopeStructure;

//  Forward declaration of class ns2__AffectedRoadsStructure.
class ns2__AffectedRoadsStructure;

//  Forward declaration of class ns2__ImageStructure.
class ns2__ImageStructure;

//  Forward declaration of class ns2__DefaultedTextStructure.
class ns2__DefaultedTextStructure;

//  Forward declaration of class ns2__InfoLinkStructure.
class ns2__InfoLinkStructure;

//  Forward declaration of class ns2__PtConsequencesStructure.
class ns2__PtConsequencesStructure;

//  Forward declaration of class ns2__PtConsequenceStructure.
class ns2__PtConsequenceStructure;

//  Forward declaration of class ns2__BoardingStructure.
class ns2__BoardingStructure;

//  Forward declaration of class ns2__PtAdviceStructure.
class ns2__PtAdviceStructure;

//  Forward declaration of class ns2__BlockingStructure.
class ns2__BlockingStructure;

//  Forward declaration of class ns2__EasementsStructure.
class ns2__EasementsStructure;

//  Forward declaration of class ns2__DelaysStructure.
class ns2__DelaysStructure;

//  Forward declaration of class ns2__ProductionTimetableRequestStructure.
class ns2__ProductionTimetableRequestStructure;

//  Forward declaration of class ns2__ProductionTimetableSubscriptionStructure.
class ns2__ProductionTimetableSubscriptionStructure;

//  Forward declaration of class ns2__ProductionTimetableDeliveryStructure.
class ns2__ProductionTimetableDeliveryStructure;

//  Forward declaration of class ns2__DatedTimetableVersionFrameStructure.
class ns2__DatedTimetableVersionFrameStructure;

//  Forward declaration of class ns2__ProductionTimetableDeliveriesStructure.
class ns2__ProductionTimetableDeliveriesStructure;

//  Forward declaration of class ns2__ProductionTimetableCapabilitiesResponseStructure.
class ns2__ProductionTimetableCapabilitiesResponseStructure;

//  Forward declaration of class ns2__ProductionTimetableCapabilityRequestPolicyStructure.
class ns2__ProductionTimetableCapabilityRequestPolicyStructure;

//  Forward declaration of class ns2__ProductionTimetableServiceCapabilitiesStructure.
class ns2__ProductionTimetableServiceCapabilitiesStructure;

//  Forward declaration of class ns2__DatedVehicleJourneyStructure.
class ns2__DatedVehicleJourneyStructure;

//  Forward declaration of class ns2__AbstractServiceJourneyInterchangeStructure.
class ns2__AbstractServiceJourneyInterchangeStructure;

//  Forward declaration of class ns2__FromServiceJourneyInterchangeStructure.
class ns2__FromServiceJourneyInterchangeStructure;

//  Forward declaration of class ns2__ToServiceJourneyInterchangeStructure.
class ns2__ToServiceJourneyInterchangeStructure;

//  Forward declaration of class ns2__ServiceJourneyInterchangeStructure.
class ns2__ServiceJourneyInterchangeStructure;

//  Forward declaration of class ns2__DatedCallStructure.
class ns2__DatedCallStructure;

//  Forward declaration of class ns2__TargetedInterchangeStructure.
class ns2__TargetedInterchangeStructure;

//  Forward declaration of class ns2__ContextualisedConnectionLinkStructure.
class ns2__ContextualisedConnectionLinkStructure;

//  Forward declaration of class ns2__PermissionsStructure.
class ns2__PermissionsStructure;

//  Forward declaration of class ns2__LinePermissionStructure.
class ns2__LinePermissionStructure;

//  Forward declaration of class ns2__OperatorPermissionStructure.
class ns2__OperatorPermissionStructure;

//  Forward declaration of class ns2__ConnectionLinkPermissionStructure.
class ns2__ConnectionLinkPermissionStructure;

//  Forward declaration of class ns2__StopMonitorPermissionStructure.
class ns2__StopMonitorPermissionStructure;

//  Forward declaration of class ns2__MonitoringCapabilityAccessControlStructure.
class ns2__MonitoringCapabilityAccessControlStructure;

//  Forward declaration of class ns2__ConnectionServicePermissionStructure.
class ns2__ConnectionServicePermissionStructure;

//  Forward declaration of class ns2__ConnectionCapabilityAccessControlStructure.
class ns2__ConnectionCapabilityAccessControlStructure;

//  Forward declaration of class ns2__AbstractTopicPermissionStructure.
class ns2__AbstractTopicPermissionStructure;

//  Forward declaration of class ns2__CapabilityAccessControlStructure.
class ns2__CapabilityAccessControlStructure;

//  Forward declaration of class ns2__AbstractPermissionStructure.
class ns2__AbstractPermissionStructure;

//  Forward declaration of class ns2__EstimatedTimetableRequestStructure.
class ns2__EstimatedTimetableRequestStructure;

//  Forward declaration of class ns2__EstimatedTimetableSubscriptionStructure.
class ns2__EstimatedTimetableSubscriptionStructure;

//  Forward declaration of class ns2__EstimatedTimetableDeliveryStructure.
class ns2__EstimatedTimetableDeliveryStructure;

//  Forward declaration of class ns2__EstimatedVersionFrameStructure.
class ns2__EstimatedVersionFrameStructure;

//  Forward declaration of class ns2__EstimatedTimetableDeliveriesStructure.
class ns2__EstimatedTimetableDeliveriesStructure;

//  Forward declaration of class ns2__EstimatedTimetableCapabilitiesResponseStructure.
class ns2__EstimatedTimetableCapabilitiesResponseStructure;

//  Forward declaration of class ns2__EstimatedTimetableCapabilityRequestPolicyStructure.
class ns2__EstimatedTimetableCapabilityRequestPolicyStructure;

//  Forward declaration of class ns2__EstimatedTimetableServiceCapabilitiesStructure.
class ns2__EstimatedTimetableServiceCapabilitiesStructure;

//  Forward declaration of class ns2__DatedVehicleJourneyIndirectRefStructure.
class ns2__DatedVehicleJourneyIndirectRefStructure;

//  Forward declaration of class ns2__EstimatedServiceJourneyInterchangeStructure.
class ns2__EstimatedServiceJourneyInterchangeStructure;

//  Forward declaration of class ns2__WillWaitStructure.
class ns2__WillWaitStructure;

//  Forward declaration of class ns2__EstimatedVehicleJourneyStructure.
class ns2__EstimatedVehicleJourneyStructure;

//  Forward declaration of class ns2__EstimatedCallStructure.
class ns2__EstimatedCallStructure;

//  Forward declaration of class ns2__RecordedCallStructure.
class ns2__RecordedCallStructure;

//  Forward declaration of class ns2__StopTimetableRequestStructure.
class ns2__StopTimetableRequestStructure;

//  Forward declaration of class ns2__StopTimetableSubscriptionStructure.
class ns2__StopTimetableSubscriptionStructure;

//  Forward declaration of class ns2__StopTimetableDeliveryStructure.
class ns2__StopTimetableDeliveryStructure;

//  Forward declaration of class ns2__TimetabledStopVisitStructure.
class ns2__TimetabledStopVisitStructure;

//  Forward declaration of class ns2__TimetabledStopVisitCancellationStructure.
class ns2__TimetabledStopVisitCancellationStructure;

//  Forward declaration of class ns2__StopTimetableDeliveriesStructure.
class ns2__StopTimetableDeliveriesStructure;

//  Forward declaration of class ns2__StopTimetableCapabilitiesResponseStructure.
class ns2__StopTimetableCapabilitiesResponseStructure;

//  Forward declaration of class ns2__StopTimetableServiceCapabilitiesStructure.
class ns2__StopTimetableServiceCapabilitiesStructure;

//  Forward declaration of class ns2__StopTimetableCapabilityRequestPolicyStructure.
class ns2__StopTimetableCapabilityRequestPolicyStructure;

//  Forward declaration of class ns2__StopTimetableServicePermissionStructure.
class ns2__StopTimetableServicePermissionStructure;

//  Forward declaration of class ns2__TargetedVehicleJourneyStructure.
class ns2__TargetedVehicleJourneyStructure;

//  Forward declaration of class ns2__TargetedCallStructure.
class ns2__TargetedCallStructure;

//  Forward declaration of class ns2__StopMonitoringRequestStructure.
class ns2__StopMonitoringRequestStructure;

//  Forward declaration of class ns2__StopMonitoringMultipleRequestStructure.
class ns2__StopMonitoringMultipleRequestStructure;

//  Forward declaration of class ns2__StopMonitoringFilterStructure.
class ns2__StopMonitoringFilterStructure;

//  Forward declaration of class ns2__StopMonitoringSubscriptionStructure.
class ns2__StopMonitoringSubscriptionStructure;

//  Forward declaration of class ns2__StopMonitoringDeliveryStructure.
class ns2__StopMonitoringDeliveryStructure;

//  Forward declaration of class ns2__MonitoredStopVisitStructure.
class ns2__MonitoredStopVisitStructure;

//  Forward declaration of class ns2__MonitoredStopVisitCancellationStructure.
class ns2__MonitoredStopVisitCancellationStructure;

//  Forward declaration of class ns2__StopLineNoticeStructure.
class ns2__StopLineNoticeStructure;

//  Forward declaration of class ns2__DeliveryVariantStructure.
class ns2__DeliveryVariantStructure;

//  Forward declaration of class ns2__StopLineNoticeCancellationStructure.
class ns2__StopLineNoticeCancellationStructure;

//  Forward declaration of class ns2__StopNoticeStructure.
class ns2__StopNoticeStructure;

//  Forward declaration of class ns2__StopNoticeCancellationStructure.
class ns2__StopNoticeCancellationStructure;

//  Forward declaration of class ns2__ServiceExceptionStructure.
class ns2__ServiceExceptionStructure;

//  Forward declaration of class ns2__StopMonitoringDeliveriesStructure.
class ns2__StopMonitoringDeliveriesStructure;

//  Forward declaration of class ns2__StopMonitoringCapabilitiesResponseStructure.
class ns2__StopMonitoringCapabilitiesResponseStructure;

//  Forward declaration of class ns2__StopMonitoringServiceCapabilitiesStructure.
class ns2__StopMonitoringServiceCapabilitiesStructure;

//  Forward declaration of class ns2__StopMonitoringCapabilityRequestPolicyStructure.
class ns2__StopMonitoringCapabilityRequestPolicyStructure;

//  Forward declaration of class ns2__StopMonitoringServicePermissionStructure.
class ns2__StopMonitoringServicePermissionStructure;

//  Forward declaration of class ns2__VehicleMonitoringRequestStructure.
class ns2__VehicleMonitoringRequestStructure;

//  Forward declaration of class ns2__VehicleMonitoringSubscriptionStructure.
class ns2__VehicleMonitoringSubscriptionStructure;

//  Forward declaration of class ns2__VehicleMonitoringDeliveryStructure.
class ns2__VehicleMonitoringDeliveryStructure;

//  Forward declaration of class ns2__VehicleActivityStructure.
class ns2__VehicleActivityStructure;

//  Forward declaration of class ns2__VehicleMonitoringRefStructure.
class ns2__VehicleMonitoringRefStructure;

//  Forward declaration of class ns2__VehicleActivityCancellationStructure.
class ns2__VehicleActivityCancellationStructure;

//  Forward declaration of class ns2__VehicleMonitoringDeliveriesStructure.
class ns2__VehicleMonitoringDeliveriesStructure;

//  Forward declaration of class ns2__VehicleMonitoringCapabilityRequestPolicyStructure.
class ns2__VehicleMonitoringCapabilityRequestPolicyStructure;

//  Forward declaration of class ns2__VehicleMonitoringCapabilitiesResponseStructure.
class ns2__VehicleMonitoringCapabilitiesResponseStructure;

//  Forward declaration of class ns2__VehicleMonitoringServiceCapabilitiesStructure.
class ns2__VehicleMonitoringServiceCapabilitiesStructure;

//  Forward declaration of class ns2__VehicleMonitoringServicePermissionStructure.
class ns2__VehicleMonitoringServicePermissionStructure;

//  Forward declaration of class ns2__VehicleMonitorPermissionStructure.
class ns2__VehicleMonitorPermissionStructure;

//  Forward declaration of class ns2__ConnectionTimetableRequestStructure.
class ns2__ConnectionTimetableRequestStructure;

//  Forward declaration of class ns2__ConnectionTimetableSubscriptionStructure.
class ns2__ConnectionTimetableSubscriptionStructure;

//  Forward declaration of class ns2__ConnectionTimetableDeliveryStructure.
class ns2__ConnectionTimetableDeliveryStructure;

//  Forward declaration of class ns2__AbstractFeederItemStructure.
class ns2__AbstractFeederItemStructure;

//  Forward declaration of class ns2__TimetabledFeederArrivalStructure.
class ns2__TimetabledFeederArrivalStructure;

//  Forward declaration of class ns2__TimetabledFeederArrivalCancellationStructure.
class ns2__TimetabledFeederArrivalCancellationStructure;

//  Forward declaration of class ns2__ConnectionTimetableDeliveriesStructure.
class ns2__ConnectionTimetableDeliveriesStructure;

//  Forward declaration of class ns2__ConnectionTimetableCapabilitiesResponseStructure.
class ns2__ConnectionTimetableCapabilitiesResponseStructure;

//  Forward declaration of class ns2__ConnectionTimetableCapabilityRequestPolicyStructure.
class ns2__ConnectionTimetableCapabilityRequestPolicyStructure;

//  Forward declaration of class ns2__ConnectionTimetableServiceCapabilitiesStructure.
class ns2__ConnectionTimetableServiceCapabilitiesStructure;

//  Forward declaration of class ns2__InterchangeJourneyStructure.
class ns2__InterchangeJourneyStructure;

//  Forward declaration of class ns2__ConnectionMonitoringRequestStructure.
class ns2__ConnectionMonitoringRequestStructure;

//  Forward declaration of class ns2__ConnectingJourneyFilterStructure.
class ns2__ConnectingJourneyFilterStructure;

//  Forward declaration of class ns2__ConnectingTimeFilterStructure.
class ns2__ConnectingTimeFilterStructure;

//  Forward declaration of class ns2__ConnectionMonitoringSubscriptionRequestStructure.
class ns2__ConnectionMonitoringSubscriptionRequestStructure;

//  Forward declaration of class ns2__ConnectionMonitoringFeederDeliveryStructure.
class ns2__ConnectionMonitoringFeederDeliveryStructure;

//  Forward declaration of class ns2__MonitoredFeederArrivalStructure.
class ns2__MonitoredFeederArrivalStructure;

//  Forward declaration of class ns2__MonitoredFeederArrivalCancellationStructure.
class ns2__MonitoredFeederArrivalCancellationStructure;

//  Forward declaration of class ns2__ConnectionMonitoringDistributorDeliveryStructure.
class ns2__ConnectionMonitoringDistributorDeliveryStructure;

//  Forward declaration of class ns2__AbstractDistributorItemStructure.
class ns2__AbstractDistributorItemStructure;

//  Forward declaration of class ns2__DistributorDepartureCancellationStructure.
class ns2__DistributorDepartureCancellationStructure;

//  Forward declaration of class ns2__WaitProlongedDepartureStructure.
class ns2__WaitProlongedDepartureStructure;

//  Forward declaration of class ns2__StoppingPositionChangedDepartureStructure.
class ns2__StoppingPositionChangedDepartureStructure;

//  Forward declaration of class ns2__ConnectionMonitoringDeliveriesStructure.
class ns2__ConnectionMonitoringDeliveriesStructure;

//  Forward declaration of class ns2__ConnectionMonitoringCapabilitiesResponseStructure.
class ns2__ConnectionMonitoringCapabilitiesResponseStructure;

//  Forward declaration of class ns2__ConnectionMonitoringCapabilityRequestPolicyStructure.
class ns2__ConnectionMonitoringCapabilityRequestPolicyStructure;

//  Forward declaration of class ns2__ConnectionMonitoringServiceCapabilitiesStructure.
class ns2__ConnectionMonitoringServiceCapabilitiesStructure;

//  Forward declaration of class ns2__GeneralMessageRequestStructure.
class ns2__GeneralMessageRequestStructure;

//  Forward declaration of class ns2__GeneralMessageSubscriptionStructure.
class ns2__GeneralMessageSubscriptionStructure;

//  Forward declaration of class ns2__GeneralMessageDeliveryStructure.
class ns2__GeneralMessageDeliveryStructure;

//  Forward declaration of class ns2__InfoMessageStructure.
class ns2__InfoMessageStructure;

//  Forward declaration of class ns2__InfoMessageCancellationStructure.
class ns2__InfoMessageCancellationStructure;

//  Forward declaration of class ns2__InfoMessageRefStructure.
class ns2__InfoMessageRefStructure;

//  Forward declaration of class ns2__GeneralMessageDeliveriesStructure.
class ns2__GeneralMessageDeliveriesStructure;

//  Forward declaration of class ns2__GeneralMessageCapabilitiesResponseStructure.
class ns2__GeneralMessageCapabilitiesResponseStructure;

//  Forward declaration of class ns2__GeneralMessageServiceCapabilitiesStructure.
class ns2__GeneralMessageServiceCapabilitiesStructure;

//  Forward declaration of class ns2__GeneralMessageServicePermissionStructure.
class ns2__GeneralMessageServicePermissionStructure;

//  Forward declaration of class ns2__GeneralMessageCapabilityAccessControlStructure.
class ns2__GeneralMessageCapabilityAccessControlStructure;

//  Forward declaration of class ns2__InfoChannelPermissionStructure.
class ns2__InfoChannelPermissionStructure;

//  Forward declaration of class ns2__FacilityMonitoringRequestStructure.
class ns2__FacilityMonitoringRequestStructure;

//  Forward declaration of class ns2__AccessibilityNeedsFilterStructure.
class ns2__AccessibilityNeedsFilterStructure;

//  Forward declaration of class ns2__FacilityMonitoringSubscriptionStructure.
class ns2__FacilityMonitoringSubscriptionStructure;

//  Forward declaration of class ns2__FacilityMonitoringDeliveryStructure.
class ns2__FacilityMonitoringDeliveryStructure;

//  Forward declaration of class ns2__FacilityMonitoringDeliveriesStructure.
class ns2__FacilityMonitoringDeliveriesStructure;

//  Forward declaration of class ns2__FacilityMonitoringCapabilitiesResponseStructure.
class ns2__FacilityMonitoringCapabilitiesResponseStructure;

//  Forward declaration of class ns2__FacilityMonitoringServiceCapabilitiesStructure.
class ns2__FacilityMonitoringServiceCapabilitiesStructure;

//  Forward declaration of class ns2__FacilityMonitoringServicePermissionStructure.
class ns2__FacilityMonitoringServicePermissionStructure;

//  Forward declaration of class ns2__SituationExchangeRequestStructure.
class ns2__SituationExchangeRequestStructure;

//  Forward declaration of class ns2__RoadFilterStructure.
class ns2__RoadFilterStructure;

//  Forward declaration of class ns2__SituationExchangeSubscriptionStructure.
class ns2__SituationExchangeSubscriptionStructure;

//  Forward declaration of class ns2__SituationExchangeDeliveryStructure.
class ns2__SituationExchangeDeliveryStructure;

//  Forward declaration of class ns2__ContextStructure.
class ns2__ContextStructure;

//  Forward declaration of class ns2__NetworkContextStructure.
class ns2__NetworkContextStructure;

//  Forward declaration of class ns2__SituationExchangeDeliveriesStructure.
class ns2__SituationExchangeDeliveriesStructure;

//  Forward declaration of class ns2__SituationExchangeCapabilitiesResponseStructure.
class ns2__SituationExchangeCapabilitiesResponseStructure;

//  Forward declaration of class ns2__SituationExchangeServiceCapabilitiesStructure.
class ns2__SituationExchangeServiceCapabilitiesStructure;

//  Forward declaration of class ns2__SituationExchangeServicePermissionStructure.
class ns2__SituationExchangeServicePermissionStructure;

//  Forward declaration of class ns2__StopPointsDiscoveryRequestStructure.
class ns2__StopPointsDiscoveryRequestStructure;

//  Forward declaration of class ns2__StopPointsDeliveryStructure.
class ns2__StopPointsDeliveryStructure;

//  Forward declaration of class ns2__LinesDiscoveryRequestStructure.
class ns2__LinesDiscoveryRequestStructure;

//  Forward declaration of class ns2__LinesDeliveryStructure.
class ns2__LinesDeliveryStructure;

//  Forward declaration of class ns2__ProductCategoriesDiscoveryRequestStructure.
class ns2__ProductCategoriesDiscoveryRequestStructure;

//  Forward declaration of class ns2__ProductCategoriesDeliveryStructure.
class ns2__ProductCategoriesDeliveryStructure;

//  Forward declaration of class ns2__VehicleFeaturesRequestStructure.
class ns2__VehicleFeaturesRequestStructure;

//  Forward declaration of class ns2__VehicleFeaturesDeliveryStructure.
class ns2__VehicleFeaturesDeliveryStructure;

//  Forward declaration of class ns2__InfoChannelDiscoveryRequestStructure.
class ns2__InfoChannelDiscoveryRequestStructure;

//  Forward declaration of class ns2__InfoChannelDeliveryStructure.
class ns2__InfoChannelDeliveryStructure;

//  Forward declaration of class ns2__FacilityRequestStructure.
class ns2__FacilityRequestStructure;

//  Forward declaration of class ns2__FacilityDeliveryStructure.
class ns2__FacilityDeliveryStructure;

//  Forward declaration of class ns2__ServiceFeaturesDiscoveryRequestStructure.
class ns2__ServiceFeaturesDiscoveryRequestStructure;

//  Forward declaration of class ns2__ServiceFeaturesDeliveryStructure.
class ns2__ServiceFeaturesDeliveryStructure;

//  Forward declaration of class ns2__ConnectionLinksDiscoveryRequestStructure.
class ns2__ConnectionLinksDiscoveryRequestStructure;

//  Forward declaration of class ns2__ConnectionLinksDeliveryStructure.
class ns2__ConnectionLinksDeliveryStructure;

//  Forward declaration of class ns2__AnnotatedLineStructure.
class ns2__AnnotatedLineStructure;

//  Forward declaration of class ns2__RouteDirectionStructure.
class ns2__RouteDirectionStructure;

//  Forward declaration of class ns2__StopPointInPatternStructure.
class ns2__StopPointInPatternStructure;

//  Forward declaration of class ns2__AnnotatedDestinationStructure.
class ns2__AnnotatedDestinationStructure;

//  Forward declaration of class ns2__AnnotatedStopPointStructure.
class ns2__AnnotatedStopPointStructure;

//  Forward declaration of class ns2__ProductCategoryStructure.
class ns2__ProductCategoryStructure;

//  Forward declaration of class ns2__ServiceFeatureStructure.
class ns2__ServiceFeatureStructure;

//  Forward declaration of class ns2__VehicleFeaturesStructure.
class ns2__VehicleFeaturesStructure;

//  Forward declaration of class ns2__InfoChannelStructure.
class ns2__InfoChannelStructure;

//  Forward declaration of class ns2__AnnotatedConnectionLinkStructure.
class ns2__AnnotatedConnectionLinkStructure;

//  Forward declaration of class _ns2__Siri.
class _ns2__Siri;

//  Forward declaration of class _ns2__ServiceRequest.
class _ns2__ServiceRequest;

//  Forward declaration of class _ns2__SubscriptionRequest.
class _ns2__SubscriptionRequest;

//  Forward declaration of class _ns2__ServiceDelivery.
class _ns2__ServiceDelivery;

//  Forward declaration of class _ns2__ManualAction.
class _ns2__ManualAction;

//  Forward declaration of class _ns2__ProductionTimetableSubscriptionRequest.
class _ns2__ProductionTimetableSubscriptionRequest;

//  Forward declaration of class _ns2__ProductionTimetableCapabilitiesRequest.
class _ns2__ProductionTimetableCapabilitiesRequest;

//  Forward declaration of class _ns2__ProductionTimetablePermissions.
class _ns2__ProductionTimetablePermissions;

//  Forward declaration of class _ns2__LinePermissions.
class _ns2__LinePermissions;

//  Forward declaration of class _ns2__OperatorPermissions.
class _ns2__OperatorPermissions;

//  Forward declaration of class _ns2__ConnectionLinkPermissions.
class _ns2__ConnectionLinkPermissions;

//  Forward declaration of class _ns2__EstimatedTimetablePermissions.
class _ns2__EstimatedTimetablePermissions;

//  Forward declaration of class _ns2__StopTimetablePermissions.
class _ns2__StopTimetablePermissions;

//  Forward declaration of class _ns2__StopMonitoringPermissions.
class _ns2__StopMonitoringPermissions;

//  Forward declaration of class _ns2__VehicleMonitoringPermissions.
class _ns2__VehicleMonitoringPermissions;

//  Forward declaration of class _ns2__ConnectionMonitoringPermissions.
class _ns2__ConnectionMonitoringPermissions;

//  Forward declaration of class _ns2__GeneralMessagePermissions.
class _ns2__GeneralMessagePermissions;

//  Forward declaration of class _ns2__FacilityMonitoringPermissions.
class _ns2__FacilityMonitoringPermissions;

//  Forward declaration of class _ns2__SituationExchangePermissions.
class _ns2__SituationExchangePermissions;

//  Forward declaration of class _ns2__StopPointsRequest.
class _ns2__StopPointsRequest;

//  Forward declaration of class _ns2__ServiceFeaturesRequest.
class _ns2__ServiceFeaturesRequest;

//  Forward declaration of class ns3__LimitationRefStructure.
class ns3__LimitationRefStructure;

//  Forward declaration of class ns3__AccessibilityLimitationStructure.
class ns3__AccessibilityLimitationStructure;

//  Forward declaration of class ns3__AccessibilityAssessmentStructure.
class ns3__AccessibilityAssessmentStructure;

//  Forward declaration of class ns3__AccessibilityStructure.
class ns3__AccessibilityStructure;

//  Forward declaration of class ns3__PassengerAccessibilityNeedsStructure.
class ns3__PassengerAccessibilityNeedsStructure;

//  Forward declaration of class ns3__UserNeedStructure.
class ns3__UserNeedStructure;

//  Forward declaration of class ns3__SuitabilityStructure.
class ns3__SuitabilityStructure;

//  Forward declaration of class ns4__EquipmentRefStructure.
class ns4__EquipmentRefStructure;

//  Forward declaration of class ns4__EquipmentTypeRefStructure.
class ns4__EquipmentTypeRefStructure;

//  Forward declaration of class ns4__AbstractEquipmentStructure.
class ns4__AbstractEquipmentStructure;

//  Forward declaration of class ns4__InstalledEquipmentStructure.
class ns4__InstalledEquipmentStructure;

//  Forward declaration of class ns4__PlaceEquipmentStructure.
class ns4__PlaceEquipmentStructure;

//  Forward declaration of class ns4__LocalServiceStructure.
class ns4__LocalServiceStructure;

//  Forward declaration of class ns4__HalfOpenTimeRangeStructure.
class ns4__HalfOpenTimeRangeStructure;

//  Forward declaration of class ns4__ValidityConditionStructure.
class ns4__ValidityConditionStructure;

//  Forward declaration of class ns4__TimebandStructure.
class ns4__TimebandStructure;

//  Forward declaration of class ns4__ValidityConditionsStructure.
class ns4__ValidityConditionsStructure;

//  Forward declaration of class ns4__InfoLinkStructure.
class ns4__InfoLinkStructure;

//  Forward declaration of class ns4__InfoLinksStructure.
class ns4__InfoLinksStructure;

//  Forward declaration of class ns4__AdministratorRefStructure.
class ns4__AdministratorRefStructure;

//  Forward declaration of class ns4__AdministratorVersionedRefStructure.
class ns4__AdministratorVersionedRefStructure;

//  Forward declaration of class ns4__AdministrativeAreaRefStructure.
class ns4__AdministrativeAreaRefStructure;

//  Forward declaration of class ns4__AdministrativeAreaVersionedRefStructure.
class ns4__AdministrativeAreaVersionedRefStructure;

//  Forward declaration of class ns4__AdministrativeAreaRefsStructure.
class ns4__AdministrativeAreaRefsStructure;

//  Forward declaration of class ns4__NamespaceTypeRefStructure.
class ns4__NamespaceTypeRefStructure;

//  Forward declaration of class ns4__RegionRefStructure.
class ns4__RegionRefStructure;

//  Forward declaration of class ns4__AuthorityRefStructure.
class ns4__AuthorityRefStructure;

//  Forward declaration of class ns4__VersionedObjectStructure.
class ns4__VersionedObjectStructure;

//  Forward declaration of class ns4__DataManagedObjectStructure.
class ns4__DataManagedObjectStructure;

//  Forward declaration of class ns4__CountryRefStructure.
class ns4__CountryRefStructure;

//  Forward declaration of class ns4__AbstractProjection.
class ns4__AbstractProjection;

//  Forward declaration of class ns4__FeatureRefStructure.
class ns4__FeatureRefStructure;

//  Forward declaration of class ns4__FeatureIdRefStructure.
class ns4__FeatureIdRefStructure;

//  Forward declaration of class ns4__PointProjectionStructure.
class ns4__PointProjectionStructure;

//  Forward declaration of class ns4__LinkProjectionStructure.
class ns4__LinkProjectionStructure;

//  Forward declaration of class ns4__ZoneProjectionStructure.
class ns4__ZoneProjectionStructure;

//  Forward declaration of class ns4__PathJunctionRefStructure.
class ns4__PathJunctionRefStructure;

//  Forward declaration of class ns4__AccessLinkRefStructure.
class ns4__AccessLinkRefStructure;

//  Forward declaration of class ns4__NavigationPathRefStructure.
class ns4__NavigationPathRefStructure;

//  Forward declaration of class ns4__StopPlaceRefStructure.
class ns4__StopPlaceRefStructure;

//  Forward declaration of class ns4__StopPlaceRefsStructure.
class ns4__StopPlaceRefsStructure;

//  Forward declaration of class ns4__StopPlaceComponentRefStructure.
class ns4__StopPlaceComponentRefStructure;

//  Forward declaration of class ns4__StopPlaceSpaceRefStructure.
class ns4__StopPlaceSpaceRefStructure;

//  Forward declaration of class ns4__QuayRefStructure.
class ns4__QuayRefStructure;

//  Forward declaration of class ns4__AccessSpaceRefStructure.
class ns4__AccessSpaceRefStructure;

//  Forward declaration of class ns4__BoardingPositionRefStructure.
class ns4__BoardingPositionRefStructure;

//  Forward declaration of class ns4__StopPlaceEntranceRefStructure.
class ns4__StopPlaceEntranceRefStructure;

//  Forward declaration of class ns4__VehicleStoppingPlaceRefStructure.
class ns4__VehicleStoppingPlaceRefStructure;

//  Forward declaration of class ns4__VehicleStoppingPositionRefStructure.
class ns4__VehicleStoppingPositionRefStructure;

//  Forward declaration of class ns4__LevelRefStructure.
class ns4__LevelRefStructure;

//  Forward declaration of class ns4__AccessPathLinkRefStructure.
class ns4__AccessPathLinkRefStructure;

//  Forward declaration of class ns4__StopPathLinkRefStructure.
class ns4__StopPathLinkRefStructure;

//  Forward declaration of class ns4__AliasStructure.
class ns4__AliasStructure;

//  Forward declaration of class ns4__CheckPointRefStructure.
class ns4__CheckPointRefStructure;

//  Forward declaration of class ns4__CheckPointStructure.
class ns4__CheckPointStructure;

//  Forward declaration of class _ns4__Extensions.
class _ns4__Extensions;

//  Forward declaration of class ns5__AbnormalTraffic.
class ns5__AbnormalTraffic;

//  Forward declaration of class ns5__Accident.
class ns5__Accident;

//  Forward declaration of class ns5__Activity.
class ns5__Activity;

//  Forward declaration of class ns5__AlertCArea.
class ns5__AlertCArea;

//  Forward declaration of class ns5__AlertCDirection.
class ns5__AlertCDirection;

//  Forward declaration of class ns5__AlertCLinear.
class ns5__AlertCLinear;

//  Forward declaration of class ns5__AlertCLinearByCode.
class ns5__AlertCLinearByCode;

//  Forward declaration of class ns5__AlertCLocation.
class ns5__AlertCLocation;

//  Forward declaration of class ns5__AlertCMethod2Linear.
class ns5__AlertCMethod2Linear;

//  Forward declaration of class ns5__AlertCMethod2Point.
class ns5__AlertCMethod2Point;

//  Forward declaration of class ns5__AlertCMethod2PrimaryPointLocation.
class ns5__AlertCMethod2PrimaryPointLocation;

//  Forward declaration of class ns5__AlertCMethod2SecondaryPointLocation.
class ns5__AlertCMethod2SecondaryPointLocation;

//  Forward declaration of class ns5__AlertCMethod4Linear.
class ns5__AlertCMethod4Linear;

//  Forward declaration of class ns5__AlertCMethod4Point.
class ns5__AlertCMethod4Point;

//  Forward declaration of class ns5__AlertCMethod4PrimaryPointLocation.
class ns5__AlertCMethod4PrimaryPointLocation;

//  Forward declaration of class ns5__AlertCMethod4SecondaryPointLocation.
class ns5__AlertCMethod4SecondaryPointLocation;

//  Forward declaration of class ns5__AlertCPoint.
class ns5__AlertCPoint;

//  Forward declaration of class ns5__AnimalPresenceObstruction.
class ns5__AnimalPresenceObstruction;

//  Forward declaration of class ns5__Area.
class ns5__Area;

//  Forward declaration of class ns5__AreaDestination.
class ns5__AreaDestination;

//  Forward declaration of class ns5__AuthorityOperation.
class ns5__AuthorityOperation;

//  Forward declaration of class ns5__AxleSpacing.
class ns5__AxleSpacing;

//  Forward declaration of class ns5__AxleWeight.
class ns5__AxleWeight;

//  Forward declaration of class ns5__BasicDataValue.
class ns5__BasicDataValue;

//  Forward declaration of class ns5__CarParks.
class ns5__CarParks;

//  Forward declaration of class ns5__CatalogueReference.
class ns5__CatalogueReference;

//  Forward declaration of class ns5__Cause.
class ns5__Cause;

//  Forward declaration of class ns5__Comment.
class ns5__Comment;

//  Forward declaration of class ns5__Conditions.
class ns5__Conditions;

//  Forward declaration of class ns5__ConstructionWorks.
class ns5__ConstructionWorks;

//  Forward declaration of class ns5__D2LogicalModel.
class ns5__D2LogicalModel;

//  Forward declaration of class ns5__DayWeekMonth.
class ns5__DayWeekMonth;

//  Forward declaration of class ns5__Delays.
class ns5__Delays;

//  Forward declaration of class ns5__Destination.
class ns5__Destination;

//  Forward declaration of class ns5__DisturbanceActivity.
class ns5__DisturbanceActivity;

//  Forward declaration of class ns5__ElaboratedData.
class ns5__ElaboratedData;

//  Forward declaration of class ns5__ElaboratedDataPublication.
class ns5__ElaboratedDataPublication;

//  Forward declaration of class ns5__EnvironmentalObstruction.
class ns5__EnvironmentalObstruction;

//  Forward declaration of class ns5__EquipmentOrSystemFault.
class ns5__EquipmentOrSystemFault;

//  Forward declaration of class ns5__Exchange.
class ns5__Exchange;

//  Forward declaration of class ns5__ExtensionType.
class ns5__ExtensionType;

//  Forward declaration of class ns5__ExternalReferencing.
class ns5__ExternalReferencing;

//  Forward declaration of class ns5__FilterExitManagement.
class ns5__FilterExitManagement;

//  Forward declaration of class ns5__FilterReference.
class ns5__FilterReference;

//  Forward declaration of class ns5__GeneralInstructionToRoadUsers.
class ns5__GeneralInstructionToRoadUsers;

//  Forward declaration of class ns5__GeneralNetworkManagement.
class ns5__GeneralNetworkManagement;

//  Forward declaration of class ns5__GeneralObstruction.
class ns5__GeneralObstruction;

//  Forward declaration of class ns5__GenericPublication.
class ns5__GenericPublication;

//  Forward declaration of class ns5__GenericSituationRecord.
class ns5__GenericSituationRecord;

//  Forward declaration of class ns5__GrossWeightCharacteristic.
class ns5__GrossWeightCharacteristic;

//  Forward declaration of class ns5__GroupOfLocations.
class ns5__GroupOfLocations;

//  Forward declaration of class ns5__GroupOfLocationsByReference.
class ns5__GroupOfLocationsByReference;

//  Forward declaration of class ns5__GroupOfNonOrderedLocations.
class ns5__GroupOfNonOrderedLocations;

//  Forward declaration of class ns5__GroupOfPeopleInvolved.
class ns5__GroupOfPeopleInvolved;

//  Forward declaration of class ns5__GroupOfVehiclesInvolved.
class ns5__GroupOfVehiclesInvolved;

//  Forward declaration of class ns5__HazardousMaterials.
class ns5__HazardousMaterials;

//  Forward declaration of class ns5__HeaderInformation.
class ns5__HeaderInformation;

//  Forward declaration of class ns5__HeaviestAxleWeightCharacteristic.
class ns5__HeaviestAxleWeightCharacteristic;

//  Forward declaration of class ns5__HeightCharacteristic.
class ns5__HeightCharacteristic;

//  Forward declaration of class ns5__Humidity.
class ns5__Humidity;

//  Forward declaration of class ns5__HumidityInformation.
class ns5__HumidityInformation;

//  Forward declaration of class ns5__Impact.
class ns5__Impact;

//  Forward declaration of class ns5__IndividualVehicleMeasurements.
class ns5__IndividualVehicleMeasurements;

//  Forward declaration of class ns5__InfrastructureDamageObstruction.
class ns5__InfrastructureDamageObstruction;

//  Forward declaration of class ns5__InternationalIdentifier.
class ns5__InternationalIdentifier;

//  Forward declaration of class ns5__Itinerary.
class ns5__Itinerary;

//  Forward declaration of class ns5__LengthCharacteristic.
class ns5__LengthCharacteristic;

//  Forward declaration of class ns5__LifeCycleManagement.
class ns5__LifeCycleManagement;

//  Forward declaration of class ns5__Linear.
class ns5__Linear;

//  Forward declaration of class ns5__LinearTrafficView.
class ns5__LinearTrafficView;

//  Forward declaration of class ns5__Location.
class ns5__Location;

//  Forward declaration of class ns5__LocationByReference.
class ns5__LocationByReference;

//  Forward declaration of class ns5__LocationCharacteristicsOverride.
class ns5__LocationCharacteristicsOverride;

//  Forward declaration of class ns5__MaintenanceVehicles.
class ns5__MaintenanceVehicles;

//  Forward declaration of class ns5__MaintenanceWorks.
class ns5__MaintenanceWorks;

//  Forward declaration of class ns5__ManagedCause.
class ns5__ManagedCause;

//  Forward declaration of class ns5__Management.
class ns5__Management;

//  Forward declaration of class ns5__MatrixSignSetting.
class ns5__MatrixSignSetting;

//  Forward declaration of class ns5__MeasuredDataPublication.
class ns5__MeasuredDataPublication;

//  Forward declaration of class ns5__MeasuredValue.
class ns5__MeasuredValue;

//  Forward declaration of class ns5__MeasurementSiteRecord.
class ns5__MeasurementSiteRecord;

//  Forward declaration of class ns5__MeasurementSiteTable.
class ns5__MeasurementSiteTable;

//  Forward declaration of class ns5__MeasurementSiteTablePublication.
class ns5__MeasurementSiteTablePublication;

//  Forward declaration of class ns5__MeasurementSpecificCharacteristics.
class ns5__MeasurementSpecificCharacteristics;

//  Forward declaration of class ns5__Mobility.
class ns5__Mobility;

//  Forward declaration of class ns5__MultilingualString.
class ns5__MultilingualString;

//  Forward declaration of class ns5__MultilingualStringValue.
class ns5__MultilingualStringValue;

//  Forward declaration of class ns5__NetworkLocation.
class ns5__NetworkLocation;

//  Forward declaration of class ns5__NetworkManagement.
class ns5__NetworkManagement;

//  Forward declaration of class ns5__NonManagedCause.
class ns5__NonManagedCause;

//  Forward declaration of class ns5__NonRoadEventInformation.
class ns5__NonRoadEventInformation;

//  Forward declaration of class ns5__NonWeatherRelatedRoadConditions.
class ns5__NonWeatherRelatedRoadConditions;

//  Forward declaration of class ns5__NumberOfAxlesCharacteristic.
class ns5__NumberOfAxlesCharacteristic;

//  Forward declaration of class ns5__Obstruction.
class ns5__Obstruction;

//  Forward declaration of class ns5__OffsetDistance.
class ns5__OffsetDistance;

//  Forward declaration of class ns5__OperatorAction.
class ns5__OperatorAction;

//  Forward declaration of class ns5__OverallPeriod.
class ns5__OverallPeriod;

//  Forward declaration of class ns5__PayloadPublication.
class ns5__PayloadPublication;

//  Forward declaration of class ns5__Period.
class ns5__Period;

//  Forward declaration of class ns5__Point.
class ns5__Point;

//  Forward declaration of class ns5__PointByCoordinates.
class ns5__PointByCoordinates;

//  Forward declaration of class ns5__PointCoordinates.
class ns5__PointCoordinates;

//  Forward declaration of class ns5__PointDestination.
class ns5__PointDestination;

//  Forward declaration of class ns5__PollutionInformation.
class ns5__PollutionInformation;

//  Forward declaration of class ns5__PollutionMeasurement.
class ns5__PollutionMeasurement;

//  Forward declaration of class ns5__PoorEnvironmentConditions.
class ns5__PoorEnvironmentConditions;

//  Forward declaration of class ns5__PrecipitationDetail.
class ns5__PrecipitationDetail;

//  Forward declaration of class ns5__PrecipitationInformation.
class ns5__PrecipitationInformation;

//  Forward declaration of class ns5__PredefinedLocation.
class ns5__PredefinedLocation;

//  Forward declaration of class ns5__PredefinedLocationSet.
class ns5__PredefinedLocationSet;

//  Forward declaration of class ns5__PredefinedLocationsPublication.
class ns5__PredefinedLocationsPublication;

//  Forward declaration of class ns5__PublicEvent.
class ns5__PublicEvent;

//  Forward declaration of class ns5__ReferenceSettings.
class ns5__ReferenceSettings;

//  Forward declaration of class ns5__ReroutingManagement.
class ns5__ReroutingManagement;

//  Forward declaration of class ns5__RoadConditions.
class ns5__RoadConditions;

//  Forward declaration of class ns5__RoadOperatorServiceDisruption.
class ns5__RoadOperatorServiceDisruption;

//  Forward declaration of class ns5__RoadOrCarriagewayOrLaneManagement.
class ns5__RoadOrCarriagewayOrLaneManagement;

//  Forward declaration of class ns5__RoadsideAssistance.
class ns5__RoadsideAssistance;

//  Forward declaration of class ns5__RoadsideReferencePoint.
class ns5__RoadsideReferencePoint;

//  Forward declaration of class ns5__RoadsideReferencePointLinear.
class ns5__RoadsideReferencePointLinear;

//  Forward declaration of class ns5__RoadsideReferencePointPrimaryLocation.
class ns5__RoadsideReferencePointPrimaryLocation;

//  Forward declaration of class ns5__RoadsideReferencePointSecondaryLocation.
class ns5__RoadsideReferencePointSecondaryLocation;

//  Forward declaration of class ns5__RoadsideServiceDisruption.
class ns5__RoadsideServiceDisruption;

//  Forward declaration of class ns5__RoadSurfaceConditionInformation.
class ns5__RoadSurfaceConditionInformation;

//  Forward declaration of class ns5__RoadSurfaceConditionMeasurements.
class ns5__RoadSurfaceConditionMeasurements;

//  Forward declaration of class ns5__Roadworks.
class ns5__Roadworks;

//  Forward declaration of class ns5__SignSetting.
class ns5__SignSetting;

//  Forward declaration of class ns5__SiteMeasurements.
class ns5__SiteMeasurements;

//  Forward declaration of class ns5__Situation.
class ns5__Situation;

//  Forward declaration of class ns5__SituationPublication.
class ns5__SituationPublication;

//  Forward declaration of class ns5__SituationRecord.
class ns5__SituationRecord;

//  Forward declaration of class ns5__Source.
class ns5__Source;

//  Forward declaration of class ns5__SpeedManagement.
class ns5__SpeedManagement;

//  Forward declaration of class ns5__SpeedPercentile.
class ns5__SpeedPercentile;

//  Forward declaration of class ns5__Subjects.
class ns5__Subjects;

//  Forward declaration of class ns5__Subscription.
class ns5__Subscription;

//  Forward declaration of class ns5__SupplementaryPositionalDescription.
class ns5__SupplementaryPositionalDescription;

//  Forward declaration of class ns5__Target.
class ns5__Target;

//  Forward declaration of class ns5__Temperature.
class ns5__Temperature;

//  Forward declaration of class ns5__TemperatureInformation.
class ns5__TemperatureInformation;

//  Forward declaration of class ns5__TimePeriodByHour.
class ns5__TimePeriodByHour;

//  Forward declaration of class ns5__TimePeriodOfDay.
class ns5__TimePeriodOfDay;

//  Forward declaration of class ns5__TpegAreaDescriptor.
class ns5__TpegAreaDescriptor;

//  Forward declaration of class ns5__TpegAreaLocation.
class ns5__TpegAreaLocation;

//  Forward declaration of class ns5__TpegDescriptor.
class ns5__TpegDescriptor;

//  Forward declaration of class ns5__TpegFramedPoint.
class ns5__TpegFramedPoint;

//  Forward declaration of class ns5__TpegGeometricArea.
class ns5__TpegGeometricArea;

//  Forward declaration of class ns5__TpegHeight.
class ns5__TpegHeight;

//  Forward declaration of class ns5__TpegIlcPointDescriptor.
class ns5__TpegIlcPointDescriptor;

//  Forward declaration of class ns5__TpegJunction.
class ns5__TpegJunction;

//  Forward declaration of class ns5__TpegJunctionPointDescriptor.
class ns5__TpegJunctionPointDescriptor;

//  Forward declaration of class ns5__TpegLinearLocation.
class ns5__TpegLinearLocation;

//  Forward declaration of class ns5__TpegNamedOnlyArea.
class ns5__TpegNamedOnlyArea;

//  Forward declaration of class ns5__TpegNonJunctionPoint.
class ns5__TpegNonJunctionPoint;

//  Forward declaration of class ns5__TpegOtherPointDescriptor.
class ns5__TpegOtherPointDescriptor;

//  Forward declaration of class ns5__TpegPoint.
class ns5__TpegPoint;

//  Forward declaration of class ns5__TpegPointDescriptor.
class ns5__TpegPointDescriptor;

//  Forward declaration of class ns5__TpegPointLocation.
class ns5__TpegPointLocation;

//  Forward declaration of class ns5__TpegSimplePoint.
class ns5__TpegSimplePoint;

//  Forward declaration of class ns5__TrafficConcentration.
class ns5__TrafficConcentration;

//  Forward declaration of class ns5__TrafficElement.
class ns5__TrafficElement;

//  Forward declaration of class ns5__TrafficFlow.
class ns5__TrafficFlow;

//  Forward declaration of class ns5__TrafficHeadway.
class ns5__TrafficHeadway;

//  Forward declaration of class ns5__TrafficSpeed.
class ns5__TrafficSpeed;

//  Forward declaration of class ns5__TrafficStatusValue.
class ns5__TrafficStatusValue;

//  Forward declaration of class ns5__TrafficValue.
class ns5__TrafficValue;

//  Forward declaration of class ns5__TrafficView.
class ns5__TrafficView;

//  Forward declaration of class ns5__TrafficViewPublication.
class ns5__TrafficViewPublication;

//  Forward declaration of class ns5__TrafficViewRecord.
class ns5__TrafficViewRecord;

//  Forward declaration of class ns5__TransitInformation.
class ns5__TransitInformation;

//  Forward declaration of class ns5__TravelTimeValue.
class ns5__TravelTimeValue;

//  Forward declaration of class ns5__UrlLink.
class ns5__UrlLink;

//  Forward declaration of class ns5__Validity.
class ns5__Validity;

//  Forward declaration of class ns5__VariableMessageSignSetting.
class ns5__VariableMessageSignSetting;

//  Forward declaration of class ns5__Vehicle.
class ns5__Vehicle;

//  Forward declaration of class ns5__VehicleCharacteristics.
class ns5__VehicleCharacteristics;

//  Forward declaration of class ns5__VehicleDetectionTime.
class ns5__VehicleDetectionTime;

//  Forward declaration of class ns5__VehicleHeadway.
class ns5__VehicleHeadway;

//  Forward declaration of class ns5__VehicleObstruction.
class ns5__VehicleObstruction;

//  Forward declaration of class ns5__VehicleSpeed.
class ns5__VehicleSpeed;

//  Forward declaration of class ns5__Visibility.
class ns5__Visibility;

//  Forward declaration of class ns5__VisibilityInformation.
class ns5__VisibilityInformation;

//  Forward declaration of class ns5__WeatherRelatedRoadConditions.
class ns5__WeatherRelatedRoadConditions;

//  Forward declaration of class ns5__WeatherValue.
class ns5__WeatherValue;

//  Forward declaration of class ns5__WidthCharacteristic.
class ns5__WidthCharacteristic;

//  Forward declaration of class ns5__Wind.
class ns5__Wind;

//  Forward declaration of class ns5__WindInformation.
class ns5__WindInformation;

//  Forward declaration of class ns5__WinterDrivingManagement.
class ns5__WinterDrivingManagement;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://wsdl.siri.org.uk/siri                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.siri.org.uk/siri                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.siri.org.uk/siri                                              *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.siri.org.uk/siri":DeliveryMethodEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Delivery Method: Fetched or Direct Delivery.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__DeliveryMethodEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__DeliveryMethodEnumeration
{
	ns2__DeliveryMethodEnumeration__direct,	///< xs:NMTOKEN value="direct"
	ns2__DeliveryMethodEnumeration__fetched,	///< xs:NMTOKEN value="fetched"
};

/// @brief A class wrapper.
///
class ns2__DeliveryMethodEnumeration_ : public xsd__anyType
{ public:
    enum ns2__DeliveryMethodEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PredictorsEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for predictors.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__PredictorsEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__PredictorsEnumeration
{
	ns2__PredictorsEnumeration__avmsOnly,	///< xs:NMTOKEN value="avmsOnly"
	ns2__PredictorsEnumeration__anyone,	///< xs:NMTOKEN value="anyone"
};

/// @brief A class wrapper.
///
class ns2__PredictorsEnumeration_ : public xsd__anyType
{ public:
    enum ns2__PredictorsEnumeration      __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EmptyType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   A type with no allowed content, used when simply the presence of an element is significant.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__EmptyType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__EmptyType
{
	ns2__EmptyType___x0000,	///< xs:string value=""
};

/// @brief A class wrapper.
///
class ns2__EmptyType_ : public xsd__anyType
{ public:
    enum ns2__EmptyType                  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":LongitudeType is a simpleType restriction of XSD type xs:decimal.
///
/// <PRE><BLOCKQUOTE>
///   Longitude from Greenwich.
/// </BLOCKQUOTE></PRE>
/// Value range is -180 to 180.
typedef xsd__decimal ns2__LongitudeType /* from -180 (inclusive) @warning: could not determine if this type is numeric */ /* to 180 (inclusive) @warning: could not determine if this type is numeric */;

/// @brief A class wrapper.
///
class ns2__LongitudeType__ : public xsd__anyType
{ public:
    ns2__LongitudeType                   __item;                       
};

/// @brief "http://www.siri.org.uk/siri":LatitudeType is a simpleType restriction of XSD type xs:decimal.
///
/// <PRE><BLOCKQUOTE>
///   Latitude from equator.
/// </BLOCKQUOTE></PRE>
/// Value range is -90 to 90.
typedef xsd__decimal ns2__LatitudeType /* from -90 (inclusive) @warning: could not determine if this type is numeric */ /* to 90 (inclusive) @warning: could not determine if this type is numeric */;

/// @brief A class wrapper.
///
class ns2__LatitudeType__ : public xsd__anyType
{ public:
    ns2__LatitudeType                    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AltitudeType is a simpleType restriction of XSD type xs:decimal.
///
/// <PRE><BLOCKQUOTE>
///   Altitude metres from sea level.
/// </BLOCKQUOTE></PRE>
/// Value range is -1000 to +5000.
typedef xsd__decimal ns2__AltitudeType /* from -1000 (inclusive) @warning: could not determine if this type is numeric */ /* to +5000 (inclusive) @warning: could not determine if this type is numeric */;

/// @brief A class wrapper.
///
class ns2__AltitudeType__ : public xsd__anyType
{ public:
    ns2__AltitudeType                    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":SrsNameType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Type for coordinate reference system.
/// </BLOCKQUOTE></PRE>
typedef std::wstring ns2__SrsNameType;

/// @brief A class wrapper.
///
class ns2__SrsNameType__ : public xsd__anyType
{ public:
    ns2__SrsNameType                     __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DistanceType is a simpleType restriction of XSD type xs:nonNegativeInteger.
///
/// <PRE><BLOCKQUOTE>
///   Distance (metres) as defined by http://www.ordnancesurvey.co.uk/xml/resource/units.xml#metres. ALternative units may be specifed by context.
/// </BLOCKQUOTE></PRE>
typedef xsd__nonNegativeInteger ns2__DistanceType;

/// @brief A class wrapper.
///
class ns2__DistanceType__ : public xsd__anyType
{ public:
    ns2__DistanceType                    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VelocityType is a simpleType restriction of XSD type xs:nonNegativeInteger.
///
/// <PRE><BLOCKQUOTE>
///   Distance (metres per second) ALternative unist may be specifed by context.
/// </BLOCKQUOTE></PRE>
typedef xsd__nonNegativeInteger ns2__VelocityType;

/// @brief A class wrapper.
///
class ns2__VelocityType__ : public xsd__anyType
{ public:
    ns2__VelocityType                    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AbsoluteBearingType is a simpleType restriction of XSD type xs:float.
///
/// <PRE><BLOCKQUOTE>
///   Type for absolute bearing.
/// </BLOCKQUOTE></PRE>
typedef float ns2__AbsoluteBearingType;

/// @brief A class wrapper.
///
class ns2__AbsoluteBearingType__ : public xsd__anyType
{ public:
    ns2__AbsoluteBearingType             __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VersionString is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   A string indicating the versioin of a SIRI data structure.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__VersionString;

/// @brief A class wrapper.
///
class ns2__VersionString__ : public xsd__anyType
{ public:
    ns2__VersionString                   __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PopulatedStringType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   A restriction of W3C XML Schema's string that requires at least one character of text.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 1 to unbounded.
typedef std::wstring ns2__PopulatedStringType 1;

/// @brief A class wrapper.
///
class ns2__PopulatedStringType__ : public xsd__anyType
{ public:
    ns2__PopulatedStringType             __item;                       
};

/// @brief "http://www.siri.org.uk/siri":IdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Id type for document references.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__IdType;

/// @brief A class wrapper.
///
class ns2__IdType__ : public xsd__anyType
{ public:
    ns2__IdType                          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DurationType is a simpleType restriction of XSD type xs:duration.
///
/// <PRE><BLOCKQUOTE>
///   Limited version of duration that allows for precise time arithmetic. Only Month, Day, Hour, Minute Second terms should be used. Milliseconds should not be used. Year should not be used. Negative values allowed. e.g. PT1004199059S", "PT130S", "PT2M10S", "P1DT2S", "-P1DT2S".
/// </BLOCKQUOTE></PRE>
typedef xsd__duration ns2__DurationType;

/// @brief A class wrapper.
///
class ns2__DurationType__ : public xsd__anyType
{ public:
    ns2__DurationType                    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PhoneType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   International phonenumber +41675601 etc.
/// </BLOCKQUOTE></PRE>
typedef std::wstring ns2__PhoneType;

/// @brief A class wrapper.
///
class ns2__PhoneType__ : public xsd__anyType
{ public:
    ns2__PhoneType                       __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EmailAddressType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Email address type.
/// </BLOCKQUOTE></PRE>
typedef std::wstring ns2__EmailAddressType;

/// @brief A class wrapper.
///
class ns2__EmailAddressType__ : public xsd__anyType
{ public:
    ns2__EmailAddressType                __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EndpointAddress is a simpleType restriction of XSD type xs:anyURI.
///
/// <PRE><BLOCKQUOTE>
///   Type for a endpoint.
/// </BLOCKQUOTE></PRE>
typedef xsd__anyURI ns2__EndpointAddress;

/// @brief A class wrapper.
///
class ns2__EndpointAddress__ : public xsd__anyType
{ public:
    ns2__EndpointAddress                 __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ItemIdentifierType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an Item. A transient reference for efficient handling of events.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__ItemIdentifierType;

/// @brief A class wrapper.
///
class ns2__ItemIdentifierType__ : public xsd__anyType
{ public:
    ns2__ItemIdentifierType              __item;                       
};

/// @brief "http://www.siri.org.uk/siri":CapabilityCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for capability code.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__CapabilityCodeType;

/// @brief A class wrapper.
///
class ns2__CapabilityCodeType__ : public xsd__anyType
{ public:
    ns2__CapabilityCodeType              __item;                       
};

/// @brief "http://www.siri.org.uk/siri":CommunicationsTransportMethodEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of communications transport method usage.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__CommunicationsTransportMethodEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__CommunicationsTransportMethodEnumeration
{
	ns2__CommunicationsTransportMethodEnumeration__httpPost,	///< xs:NMTOKEN value="httpPost"
	ns2__CommunicationsTransportMethodEnumeration__other,	///< xs:NMTOKEN value="other"
	ns2__CommunicationsTransportMethodEnumeration__wsdlSoap,	///< xs:NMTOKEN value="wsdlSoap"
	ns2__CommunicationsTransportMethodEnumeration__wsdlSoapDocumentLiteral,	///< xs:NMTOKEN value="wsdlSoapDocumentLiteral"
	ns2__CommunicationsTransportMethodEnumeration__httpUrlJSON,	///< xs:NMTOKEN value="httpUrlJSON"
	ns2__CommunicationsTransportMethodEnumeration__httpUrlProtoBuffers,	///< xs:NMTOKEN value="httpUrlProtoBuffers"
};

/// @brief A class wrapper.
///
class ns2__CommunicationsTransportMethodEnumeration_ : public xsd__anyType
{ public:
    enum ns2__CommunicationsTransportMethodEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":CompressionMethodEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of compression usage.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__CompressionMethodEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__CompressionMethodEnumeration
{
	ns2__CompressionMethodEnumeration__gzip,	///< xs:NMTOKEN value="gzip"
	ns2__CompressionMethodEnumeration__none,	///< xs:NMTOKEN value="none"
	ns2__CompressionMethodEnumeration__other,	///< xs:NMTOKEN value="other"
};

/// @brief A class wrapper.
///
class ns2__CompressionMethodEnumeration_ : public xsd__anyType
{ public:
    enum ns2__CompressionMethodEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ParticipantCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for Unique identifier of participant.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__ParticipantCodeType;

/// @brief A class wrapper.
///
class ns2__ParticipantCodeType__ : public xsd__anyType
{ public:
    ns2__ParticipantCodeType             __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AccessFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Access Facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__AccessFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__AccessFacilityEnumeration
{
	ns2__AccessFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__AccessFacilityEnumeration__lift,	///< xs:NMTOKEN value="lift"
	ns2__AccessFacilityEnumeration__escalator,	///< xs:NMTOKEN value="escalator"
	ns2__AccessFacilityEnumeration__travelator,	///< xs:NMTOKEN value="travelator"
	ns2__AccessFacilityEnumeration__ramp,	///< xs:NMTOKEN value="ramp"
	ns2__AccessFacilityEnumeration__stairs,	///< xs:NMTOKEN value="stairs"
	ns2__AccessFacilityEnumeration__shuttle,	///< xs:NMTOKEN value="shuttle"
	ns2__AccessFacilityEnumeration__narrowEntrance,	///< xs:NMTOKEN value="narrowEntrance"
	ns2__AccessFacilityEnumeration__barrier,	///< xs:NMTOKEN value="barrier"
	ns2__AccessFacilityEnumeration__palletAccess_USCORElowFloor,	///< xs:NMTOKEN value="palletAccess_lowFloor"
	ns2__AccessFacilityEnumeration__validator,	///< xs:NMTOKEN value="validator"
};

/// @brief A class wrapper.
///
class ns2__AccessFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__AccessFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AccommodationFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Accomodation Facility: TPEG pti_table 23.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__AccommodationFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__AccommodationFacilityEnumeration
{
	ns2__AccommodationFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__AccommodationFacilityEnumeration__pti23_USCORE3,	///< xs:NMTOKEN value="pti23_3"
	ns2__AccommodationFacilityEnumeration__sleeper,	///< xs:NMTOKEN value="sleeper"
	ns2__AccommodationFacilityEnumeration__pti23_USCORE4,	///< xs:NMTOKEN value="pti23_4"
	ns2__AccommodationFacilityEnumeration__couchette,	///< xs:NMTOKEN value="couchette"
	ns2__AccommodationFacilityEnumeration__pti23_USCORE5,	///< xs:NMTOKEN value="pti23_5"
	ns2__AccommodationFacilityEnumeration__specialSeating,	///< xs:NMTOKEN value="specialSeating"
	ns2__AccommodationFacilityEnumeration__pti23_USCORE11,	///< xs:NMTOKEN value="pti23_11"
	ns2__AccommodationFacilityEnumeration__freeSeating,	///< xs:NMTOKEN value="freeSeating"
	ns2__AccommodationFacilityEnumeration__pti23_USCORE12,	///< xs:NMTOKEN value="pti23_12"
	ns2__AccommodationFacilityEnumeration__recliningSeats,	///< xs:NMTOKEN value="recliningSeats"
	ns2__AccommodationFacilityEnumeration__pti23_USCORE13,	///< xs:NMTOKEN value="pti23_13"
	ns2__AccommodationFacilityEnumeration__babyCompartment,	///< xs:NMTOKEN value="babyCompartment"
	ns2__AccommodationFacilityEnumeration__familyCarriage,	///< xs:NMTOKEN value="familyCarriage"
};

/// @brief A class wrapper.
///
class ns2__AccommodationFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__AccommodationFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AssistanceFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Assistance Facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__AssistanceFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__AssistanceFacilityEnumeration
{
	ns2__AssistanceFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__AssistanceFacilityEnumeration__police,	///< xs:NMTOKEN value="police"
	ns2__AssistanceFacilityEnumeration__firstAid,	///< xs:NMTOKEN value="firstAid"
	ns2__AssistanceFacilityEnumeration__sosPoint,	///< xs:NMTOKEN value="sosPoint"
	ns2__AssistanceFacilityEnumeration__specificAssistance,	///< xs:NMTOKEN value="specificAssistance"
	ns2__AssistanceFacilityEnumeration__unaccompaniedMinorAssistance,	///< xs:NMTOKEN value="unaccompaniedMinorAssistance"
	ns2__AssistanceFacilityEnumeration__boardingAssistance,	///< xs:NMTOKEN value="boardingAssistance"
};

/// @brief A class wrapper.
///
class ns2__AssistanceFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__AssistanceFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FareClassFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for FareClass Facility: TPEG pti_table 23.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__FareClassFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__FareClassFacilityEnumeration
{
	ns2__FareClassFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__FareClassFacilityEnumeration__pti23_USCORE0,	///< xs:NMTOKEN value="pti23_0"
	ns2__FareClassFacilityEnumeration__pti23_USCORE6,	///< xs:NMTOKEN value="pti23_6"
	ns2__FareClassFacilityEnumeration__firstClass,	///< xs:NMTOKEN value="firstClass"
	ns2__FareClassFacilityEnumeration__pti23_USCORE7,	///< xs:NMTOKEN value="pti23_7"
	ns2__FareClassFacilityEnumeration__secondClass,	///< xs:NMTOKEN value="secondClass"
	ns2__FareClassFacilityEnumeration__pti23_USCORE8,	///< xs:NMTOKEN value="pti23_8"
	ns2__FareClassFacilityEnumeration__thirdClass,	///< xs:NMTOKEN value="thirdClass"
	ns2__FareClassFacilityEnumeration__pti23_USCORE9,	///< xs:NMTOKEN value="pti23_9"
	ns2__FareClassFacilityEnumeration__economyClass,	///< xs:NMTOKEN value="economyClass"
	ns2__FareClassFacilityEnumeration__pti23_USCORE10,	///< xs:NMTOKEN value="pti23_10"
	ns2__FareClassFacilityEnumeration__businessClass,	///< xs:NMTOKEN value="businessClass"
};

/// @brief A class wrapper.
///
class ns2__FareClassFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__FareClassFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":HireFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Hire Facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__HireFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__HireFacilityEnumeration
{
	ns2__HireFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__HireFacilityEnumeration__carHire,	///< xs:NMTOKEN value="carHire"
	ns2__HireFacilityEnumeration__motorCycleHire,	///< xs:NMTOKEN value="motorCycleHire"
	ns2__HireFacilityEnumeration__cycleHire,	///< xs:NMTOKEN value="cycleHire"
	ns2__HireFacilityEnumeration__taxi,	///< xs:NMTOKEN value="taxi"
	ns2__HireFacilityEnumeration__recreationDeviceHire,	///< xs:NMTOKEN value="recreationDeviceHire"
};

/// @brief A class wrapper.
///
class ns2__HireFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__HireFacilityEnumeration    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":LuggageFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Luggage Facility: TPEG pti_table 23.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__LuggageFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__LuggageFacilityEnumeration
{
	ns2__LuggageFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__LuggageFacilityEnumeration__pti23_USCORE17,	///< xs:NMTOKEN value="pti23_17"
	ns2__LuggageFacilityEnumeration__bikeCarriage,	///< xs:NMTOKEN value="bikeCarriage"
	ns2__LuggageFacilityEnumeration__baggageStorage,	///< xs:NMTOKEN value="baggageStorage"
	ns2__LuggageFacilityEnumeration__leftLuggage,	///< xs:NMTOKEN value="leftLuggage"
	ns2__LuggageFacilityEnumeration__porterage,	///< xs:NMTOKEN value="porterage"
	ns2__LuggageFacilityEnumeration__baggageTrolleys,	///< xs:NMTOKEN value="baggageTrolleys"
};

/// @brief A class wrapper.
///
class ns2__LuggageFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__LuggageFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":MobilityFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Mobility Facility: TPEG pti_table 23.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__MobilityFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__MobilityFacilityEnumeration
{
	ns2__MobilityFacilityEnumeration__pti23_USCORE255_USCORE4,	///< xs:NMTOKEN value="pti23_255_4"
	ns2__MobilityFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__MobilityFacilityEnumeration__pti23_USCORE16,	///< xs:NMTOKEN value="pti23_16"
	ns2__MobilityFacilityEnumeration__suitableForWheelChairs,	///< xs:NMTOKEN value="suitableForWheelChairs"
	ns2__MobilityFacilityEnumeration__pti23_USCORE16_USCORE1,	///< xs:NMTOKEN value="pti23_16_1"
	ns2__MobilityFacilityEnumeration__lowFloor,	///< xs:NMTOKEN value="lowFloor"
	ns2__MobilityFacilityEnumeration__pti23_USCORE16_USCORE2,	///< xs:NMTOKEN value="pti23_16_2"
	ns2__MobilityFacilityEnumeration__boardingAssistance,	///< xs:NMTOKEN value="boardingAssistance"
	ns2__MobilityFacilityEnumeration__pti23_USCORE16_USCORE3,	///< xs:NMTOKEN value="pti23_16_3"
	ns2__MobilityFacilityEnumeration__stepFreeAccess,	///< xs:NMTOKEN value="stepFreeAccess"
	ns2__MobilityFacilityEnumeration__tactilePatformEdges,	///< xs:NMTOKEN value="tactilePatformEdges"
	ns2__MobilityFacilityEnumeration__onboardAssistance,	///< xs:NMTOKEN value="onboardAssistance"
	ns2__MobilityFacilityEnumeration__unaccompaniedMinorAssistance,	///< xs:NMTOKEN value="unaccompaniedMinorAssistance"
	ns2__MobilityFacilityEnumeration__audioInformation,	///< xs:NMTOKEN value="audioInformation"
	ns2__MobilityFacilityEnumeration__visualInformation,	///< xs:NMTOKEN value="visualInformation"
	ns2__MobilityFacilityEnumeration__displaysForVisuallyImpaired,	///< xs:NMTOKEN value="displaysForVisuallyImpaired"
	ns2__MobilityFacilityEnumeration__audioForHearingImpaired,	///< xs:NMTOKEN value="audioForHearingImpaired"
};

/// @brief A class wrapper.
///
class ns2__MobilityFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__MobilityFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":NuisanceFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Nuisance Facility: TPEG pti_table 23.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__NuisanceFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__NuisanceFacilityEnumeration
{
	ns2__NuisanceFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__NuisanceFacilityEnumeration__smoking,	///< xs:NMTOKEN value="smoking"
	ns2__NuisanceFacilityEnumeration__noSmoking,	///< xs:NMTOKEN value="noSmoking"
	ns2__NuisanceFacilityEnumeration__mobilePhoneUseZone,	///< xs:NMTOKEN value="mobilePhoneUseZone"
	ns2__NuisanceFacilityEnumeration__mobilePhoneFreeZone,	///< xs:NMTOKEN value="mobilePhoneFreeZone"
};

/// @brief A class wrapper.
///
class ns2__NuisanceFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__NuisanceFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ParkingFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Access Facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ParkingFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ParkingFacilityEnumeration
{
	ns2__ParkingFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__ParkingFacilityEnumeration__carPark,	///< xs:NMTOKEN value="carPark"
	ns2__ParkingFacilityEnumeration__parkAndRidePark,	///< xs:NMTOKEN value="parkAndRidePark"
	ns2__ParkingFacilityEnumeration__motorcyclePark,	///< xs:NMTOKEN value="motorcyclePark"
	ns2__ParkingFacilityEnumeration__cyclePark,	///< xs:NMTOKEN value="cyclePark"
	ns2__ParkingFacilityEnumeration__rentalCarPark,	///< xs:NMTOKEN value="rentalCarPark"
	ns2__ParkingFacilityEnumeration__coachPark,	///< xs:NMTOKEN value="coachPark"
};

/// @brief A class wrapper.
///
class ns2__ParkingFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ParkingFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PassengerInformationFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Passenger Information Facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__PassengerInformationFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__PassengerInformationFacilityEnumeration
{
	ns2__PassengerInformationFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__PassengerInformationFacilityEnumeration__nextStopIndicator,	///< xs:NMTOKEN value="nextStopIndicator"
	ns2__PassengerInformationFacilityEnumeration__stopAnnouncements,	///< xs:NMTOKEN value="stopAnnouncements"
	ns2__PassengerInformationFacilityEnumeration__passengerInformationDisplay,	///< xs:NMTOKEN value="passengerInformationDisplay"
	ns2__PassengerInformationFacilityEnumeration__audioInformation,	///< xs:NMTOKEN value="audioInformation"
	ns2__PassengerInformationFacilityEnumeration__visualInformation,	///< xs:NMTOKEN value="visualInformation"
	ns2__PassengerInformationFacilityEnumeration__tactilePlatformEdges,	///< xs:NMTOKEN value="tactilePlatformEdges"
	ns2__PassengerInformationFacilityEnumeration__tactileInformation,	///< xs:NMTOKEN value="tactileInformation"
	ns2__PassengerInformationFacilityEnumeration__walkingGuidance,	///< xs:NMTOKEN value="walkingGuidance"
	ns2__PassengerInformationFacilityEnumeration__journeyPlanning,	///< xs:NMTOKEN value="journeyPlanning"
	ns2__PassengerInformationFacilityEnumeration__lostFound,	///< xs:NMTOKEN value="lostFound"
	ns2__PassengerInformationFacilityEnumeration__informationDesk,	///< xs:NMTOKEN value="informationDesk"
	ns2__PassengerInformationFacilityEnumeration__interactiveKiosk_Display,	///< xs:NMTOKEN value="interactiveKiosk-Display"
	ns2__PassengerInformationFacilityEnumeration__printedPublicNotice,	///< xs:NMTOKEN value="printedPublicNotice"
};

/// @brief A class wrapper.
///
class ns2__PassengerInformationFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__PassengerInformationFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PassengerCommsFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for PassengerComms Facility: TPEG pti_table 23.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__PassengerCommsFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__PassengerCommsFacilityEnumeration
{
	ns2__PassengerCommsFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__PassengerCommsFacilityEnumeration__faccomms_USCORE1,	///< xs:NMTOKEN value="faccomms_1"
	ns2__PassengerCommsFacilityEnumeration__passengerWifi,	///< xs:NMTOKEN value="passengerWifi"
	ns2__PassengerCommsFacilityEnumeration__pti23_USCORE21,	///< xs:NMTOKEN value="pti23_21"
	ns2__PassengerCommsFacilityEnumeration__telephone,	///< xs:NMTOKEN value="telephone"
	ns2__PassengerCommsFacilityEnumeration__pti23_USCORE14,	///< xs:NMTOKEN value="pti23_14"
	ns2__PassengerCommsFacilityEnumeration__audioServices,	///< xs:NMTOKEN value="audioServices"
	ns2__PassengerCommsFacilityEnumeration__pti23_USCORE15,	///< xs:NMTOKEN value="pti23_15"
	ns2__PassengerCommsFacilityEnumeration__videoServices,	///< xs:NMTOKEN value="videoServices"
	ns2__PassengerCommsFacilityEnumeration__pti23_USCORE25,	///< xs:NMTOKEN value="pti23_25"
	ns2__PassengerCommsFacilityEnumeration__businessServices,	///< xs:NMTOKEN value="businessServices"
	ns2__PassengerCommsFacilityEnumeration__internet,	///< xs:NMTOKEN value="internet"
	ns2__PassengerCommsFacilityEnumeration__postoffice,	///< xs:NMTOKEN value="postoffice"
	ns2__PassengerCommsFacilityEnumeration__letterbox,	///< xs:NMTOKEN value="letterbox"
};

/// @brief A class wrapper.
///
class ns2__PassengerCommsFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__PassengerCommsFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":RefreshmentFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Refreshment Facility: TPEG pti_table 23.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__RefreshmentFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__RefreshmentFacilityEnumeration
{
	ns2__RefreshmentFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__RefreshmentFacilityEnumeration__pti23_USCORE1,	///< xs:NMTOKEN value="pti23_1"
	ns2__RefreshmentFacilityEnumeration__restaurantService,	///< xs:NMTOKEN value="restaurantService"
	ns2__RefreshmentFacilityEnumeration__pti23_USCORE2,	///< xs:NMTOKEN value="pti23_2"
	ns2__RefreshmentFacilityEnumeration__snacksService,	///< xs:NMTOKEN value="snacksService"
	ns2__RefreshmentFacilityEnumeration__pti23,	///< xs:NMTOKEN value="pti23"
	ns2__RefreshmentFacilityEnumeration__trolley,	///< xs:NMTOKEN value="trolley"
	ns2__RefreshmentFacilityEnumeration__pti23_USCORE18,	///< xs:NMTOKEN value="pti23_18"
	ns2__RefreshmentFacilityEnumeration__bar,	///< xs:NMTOKEN value="bar"
	ns2__RefreshmentFacilityEnumeration__pti23_USCORE19,	///< xs:NMTOKEN value="pti23_19"
	ns2__RefreshmentFacilityEnumeration__foodNotAvailable,	///< xs:NMTOKEN value="foodNotAvailable"
	ns2__RefreshmentFacilityEnumeration__pti23_USCORE20,	///< xs:NMTOKEN value="pti23_20"
	ns2__RefreshmentFacilityEnumeration__beveragesNotAvailable,	///< xs:NMTOKEN value="beveragesNotAvailable"
	ns2__RefreshmentFacilityEnumeration__pti23_USCORE26,	///< xs:NMTOKEN value="pti23_26"
	ns2__RefreshmentFacilityEnumeration__bistro,	///< xs:NMTOKEN value="bistro"
	ns2__RefreshmentFacilityEnumeration__foodVendingMachine,	///< xs:NMTOKEN value="foodVendingMachine"
	ns2__RefreshmentFacilityEnumeration__beverageVendingMachine,	///< xs:NMTOKEN value="beverageVendingMachine"
};

/// @brief A class wrapper.
///
class ns2__RefreshmentFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__RefreshmentFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ReservedSpaceFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Reserved Space Facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ReservedSpaceFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ReservedSpaceFacilityEnumeration
{
	ns2__ReservedSpaceFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__ReservedSpaceFacilityEnumeration__lounge,	///< xs:NMTOKEN value="lounge"
	ns2__ReservedSpaceFacilityEnumeration__hall,	///< xs:NMTOKEN value="hall"
	ns2__ReservedSpaceFacilityEnumeration__meetingpoint,	///< xs:NMTOKEN value="meetingpoint"
	ns2__ReservedSpaceFacilityEnumeration__groupPoint,	///< xs:NMTOKEN value="groupPoint"
	ns2__ReservedSpaceFacilityEnumeration__reception,	///< xs:NMTOKEN value="reception"
	ns2__ReservedSpaceFacilityEnumeration__shelter,	///< xs:NMTOKEN value="shelter"
	ns2__ReservedSpaceFacilityEnumeration__seats,	///< xs:NMTOKEN value="seats"
};

/// @brief A class wrapper.
///
class ns2__ReservedSpaceFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ReservedSpaceFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":RetailFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Retail Facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__RetailFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__RetailFacilityEnumeration
{
	ns2__RetailFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__RetailFacilityEnumeration__food,	///< xs:NMTOKEN value="food"
	ns2__RetailFacilityEnumeration__newspaperTobacco,	///< xs:NMTOKEN value="newspaperTobacco"
	ns2__RetailFacilityEnumeration__recreationTravel,	///< xs:NMTOKEN value="recreationTravel"
	ns2__RetailFacilityEnumeration__hygieneHealthBeauty,	///< xs:NMTOKEN value="hygieneHealthBeauty"
	ns2__RetailFacilityEnumeration__fashionAccessories,	///< xs:NMTOKEN value="fashionAccessories"
	ns2__RetailFacilityEnumeration__bankFinanceInsurance,	///< xs:NMTOKEN value="bankFinanceInsurance"
	ns2__RetailFacilityEnumeration__cashMachine,	///< xs:NMTOKEN value="cashMachine"
	ns2__RetailFacilityEnumeration__currencyExchange,	///< xs:NMTOKEN value="currencyExchange"
	ns2__RetailFacilityEnumeration__tourismService,	///< xs:NMTOKEN value="tourismService"
	ns2__RetailFacilityEnumeration__photoBooth,	///< xs:NMTOKEN value="photoBooth"
};

/// @brief A class wrapper.
///
class ns2__RetailFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__RetailFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":SanitaryFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Sanitary Facility: TPEG pti_table 23.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__SanitaryFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__SanitaryFacilityEnumeration
{
	ns2__SanitaryFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__SanitaryFacilityEnumeration__pti23_USCORE22,	///< xs:NMTOKEN value="pti23_22"
	ns2__SanitaryFacilityEnumeration__toilet,	///< xs:NMTOKEN value="toilet"
	ns2__SanitaryFacilityEnumeration__pti23_USCORE23,	///< xs:NMTOKEN value="pti23_23"
	ns2__SanitaryFacilityEnumeration__noToilet,	///< xs:NMTOKEN value="noToilet"
	ns2__SanitaryFacilityEnumeration__shower,	///< xs:NMTOKEN value="shower"
	ns2__SanitaryFacilityEnumeration__wheelchairAcccessToilet,	///< xs:NMTOKEN value="wheelchairAcccessToilet"
	ns2__SanitaryFacilityEnumeration__babyChange,	///< xs:NMTOKEN value="babyChange"
};

/// @brief A class wrapper.
///
class ns2__SanitaryFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__SanitaryFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":TicketingFacilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Ticketing Facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__TicketingFacilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__TicketingFacilityEnumeration
{
	ns2__TicketingFacilityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__TicketingFacilityEnumeration__ticketMachines,	///< xs:NMTOKEN value="ticketMachines"
	ns2__TicketingFacilityEnumeration__ticketOffice,	///< xs:NMTOKEN value="ticketOffice"
	ns2__TicketingFacilityEnumeration__ticketOnDemandMachines,	///< xs:NMTOKEN value="ticketOnDemandMachines"
	ns2__TicketingFacilityEnumeration__ticketSales,	///< xs:NMTOKEN value="ticketSales"
	ns2__TicketingFacilityEnumeration__mobileTicketing,	///< xs:NMTOKEN value="mobileTicketing"
	ns2__TicketingFacilityEnumeration__ticketCollection,	///< xs:NMTOKEN value="ticketCollection"
	ns2__TicketingFacilityEnumeration__centralReservations,	///< xs:NMTOKEN value="centralReservations"
	ns2__TicketingFacilityEnumeration__localTickets,	///< xs:NMTOKEN value="localTickets"
	ns2__TicketingFacilityEnumeration__nationalTickets,	///< xs:NMTOKEN value="nationalTickets"
	ns2__TicketingFacilityEnumeration__internationalTickets,	///< xs:NMTOKEN value="internationalTickets"
};

/// @brief A class wrapper.
///
class ns2__TicketingFacilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__TicketingFacilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FacilityCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a Faclility.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__FacilityCodeType;

/// @brief A class wrapper.
///
class ns2__FacilityCodeType__ : public xsd__anyType
{ public:
    ns2__FacilityCodeType                __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FacilityCategoryEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Generic catgory of a facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__FacilityCategoryEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__FacilityCategoryEnumeration
{
	ns2__FacilityCategoryEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__FacilityCategoryEnumeration__fixedEquipment,	///< xs:NMTOKEN value="fixedEquipment"
	ns2__FacilityCategoryEnumeration__serviceProvidedByIndividual,	///< xs:NMTOKEN value="serviceProvidedByIndividual"
	ns2__FacilityCategoryEnumeration__serviceForPersonalDevice,	///< xs:NMTOKEN value="serviceForPersonalDevice"
	ns2__FacilityCategoryEnumeration__reservedArea,	///< xs:NMTOKEN value="reservedArea"
};

/// @brief A class wrapper.
///
class ns2__FacilityCategoryEnumeration_ : public xsd__anyType
{ public:
    enum ns2__FacilityCategoryEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FacilityStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for the status of a MONITORED FACILITY.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__FacilityStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__FacilityStatusEnumeration
{
	ns2__FacilityStatusEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__FacilityStatusEnumeration__available,	///< xs:NMTOKEN value="available"
	ns2__FacilityStatusEnumeration__notAvailable,	///< xs:NMTOKEN value="notAvailable"
	ns2__FacilityStatusEnumeration__partiallyAvailable,	///< xs:NMTOKEN value="partiallyAvailable"
	ns2__FacilityStatusEnumeration__added,	///< xs:NMTOKEN value="added"
	ns2__FacilityStatusEnumeration__removed,	///< xs:NMTOKEN value="removed"
};

/// @brief A class wrapper.
///
class ns2__FacilityStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns2__FacilityStatusEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FacilityStatusChangeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for changes to the status of a facility.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__FacilityStatusChangeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__FacilityStatusChangeEnumeration
{
	ns2__FacilityStatusChangeEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__FacilityStatusChangeEnumeration__added,	///< xs:NMTOKEN value="added"
	ns2__FacilityStatusChangeEnumeration__removed,	///< xs:NMTOKEN value="removed"
};

/// @brief A class wrapper.
///
class ns2__FacilityStatusChangeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__FacilityStatusChangeEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":RemedyTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for actions to remedy a faclity change.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__RemedyTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__RemedyTypeEnumeration
{
	ns2__RemedyTypeEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__RemedyTypeEnumeration__replace,	///< xs:NMTOKEN value="replace"
	ns2__RemedyTypeEnumeration__repair,	///< xs:NMTOKEN value="repair"
	ns2__RemedyTypeEnumeration__remove,	///< xs:NMTOKEN value="remove"
	ns2__RemedyTypeEnumeration__otherRoute,	///< xs:NMTOKEN value="otherRoute"
	ns2__RemedyTypeEnumeration__otherLocation,	///< xs:NMTOKEN value="otherLocation"
};

/// @brief A class wrapper.
///
class ns2__RemedyTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__RemedyTypeEnumeration      __item;                       
};

/// @brief "http://www.siri.org.uk/siri":MonitoringTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for the types of monitoring: automatic or manual - describing the hardware transducer (video, GPS/Radio, in-road sensors, etc.) doesn't seeme useful for SIRi.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__MonitoringTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__MonitoringTypeEnumeration
{
	ns2__MonitoringTypeEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__MonitoringTypeEnumeration__manual,	///< xs:NMTOKEN value="manual"
	ns2__MonitoringTypeEnumeration__automatic,	///< xs:NMTOKEN value="automatic"
};

/// @brief A class wrapper.
///
class ns2__MonitoringTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__MonitoringTypeEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VehicleJourneyCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__VehicleJourneyCodeType;

/// @brief A class wrapper.
///
class ns2__VehicleJourneyCodeType__ : public xsd__anyType
{ public:
    ns2__VehicleJourneyCodeType          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DatedVehicleJourneyCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a Dated VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__DatedVehicleJourneyCodeType;

/// @brief A class wrapper.
///
class ns2__DatedVehicleJourneyCodeType__ : public xsd__anyType
{ public:
    ns2__DatedVehicleJourneyCodeType     __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EstimatedVehicleJourneyCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a Realtime VEHICLE JOURNEY. Used for adhoc journeys.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__EstimatedVehicleJourneyCodeType;

/// @brief A class wrapper.
///
class ns2__EstimatedVehicleJourneyCodeType__ : public xsd__anyType
{ public:
    ns2__EstimatedVehicleJourneyCodeType  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":InterchangeCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifer of a SERVCIE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__InterchangeCodeType;

/// @brief A class wrapper.
///
class ns2__InterchangeCodeType__ : public xsd__anyType
{ public:
    ns2__InterchangeCodeType             __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DataFrameQualifierType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a data VERSION FRAME.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__DataFrameQualifierType;

/// @brief A class wrapper.
///
class ns2__DataFrameQualifierType__ : public xsd__anyType
{ public:
    ns2__DataFrameQualifierType          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":TrainPartCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of Train Part.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__TrainPartCodeType;

/// @brief A class wrapper.
///
class ns2__TrainPartCodeType__ : public xsd__anyType
{ public:
    ns2__TrainPartCodeType               __item;                       
};

/// @brief "http://www.siri.org.uk/siri":BlockNumber is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an BLOCK.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__BlockNumber;

/// @brief A class wrapper.
///
class ns2__BlockNumber__ : public xsd__anyType
{ public:
    ns2__BlockNumber                     __item;                       
};

/// @brief "http://www.siri.org.uk/siri":CourseOfJourneyNumber is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a COURSE OF JOURNEY (Run).
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__CourseOfJourneyNumber;

/// @brief A class wrapper.
///
class ns2__CourseOfJourneyNumber__ : public xsd__anyType
{ public:
    ns2__CourseOfJourneyNumber           __item;                       
};

/// @brief "http://www.siri.org.uk/siri":JourneyPartIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an JOURNEY PART
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__JourneyPartIdType;

/// @brief A class wrapper.
///
class ns2__JourneyPartIdType__ : public xsd__anyType
{ public:
    ns2__JourneyPartIdType               __item;                       
};

/// @brief "http://www.siri.org.uk/siri":TrainNumber is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an TRAIN NUMBER
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__TrainNumber;

/// @brief A class wrapper.
///
class ns2__TrainNumber__ : public xsd__anyType
{ public:
    ns2__TrainNumber                     __item;                       
};

/// @brief "http://www.siri.org.uk/siri":BoardingActivityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed types activity for Boarding and Alighting.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__BoardingActivityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__BoardingActivityEnumeration
{
	ns2__BoardingActivityEnumeration__boardingAndAlighting,	///< xs:NMTOKEN value="boardingAndAlighting"
	ns2__BoardingActivityEnumeration__noBoarding,	///< xs:NMTOKEN value="noBoarding"
	ns2__BoardingActivityEnumeration__noAlighting,	///< xs:NMTOKEN value="noAlighting"
	ns2__BoardingActivityEnumeration__passThru,	///< xs:NMTOKEN value="passThru"
};

/// @brief A class wrapper.
///
class ns2__BoardingActivityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__BoardingActivityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ArrivalBoardingActivityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed types activity for Alighting.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ArrivalBoardingActivityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ArrivalBoardingActivityEnumeration
{
	ns2__ArrivalBoardingActivityEnumeration__alighting,	///< xs:NMTOKEN value="alighting"
	ns2__ArrivalBoardingActivityEnumeration__noAlighting,	///< xs:NMTOKEN value="noAlighting"
	ns2__ArrivalBoardingActivityEnumeration__passThru,	///< xs:NMTOKEN value="passThru"
};

/// @brief A class wrapper.
///
class ns2__ArrivalBoardingActivityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ArrivalBoardingActivityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DepartureBoardingActivityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed types activity for Boarding.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__DepartureBoardingActivityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__DepartureBoardingActivityEnumeration
{
	ns2__DepartureBoardingActivityEnumeration__boarding,	///< xs:NMTOKEN value="boarding"
	ns2__DepartureBoardingActivityEnumeration__noBoarding,	///< xs:NMTOKEN value="noBoarding"
	ns2__DepartureBoardingActivityEnumeration__passThru,	///< xs:NMTOKEN value="passThru"
};

/// @brief A class wrapper.
///
class ns2__DepartureBoardingActivityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__DepartureBoardingActivityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ProgressRateEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Classification of the rate of progress of VEHICLE according a fixed list of values.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ProgressRateEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ProgressRateEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Vehicle is stationary.
/// </BLOCKQUOTE></PRE>
	ns2__ProgressRateEnumeration__noProgress,	///< xs:NMTOKEN value="noProgress"
/// <PRE><BLOCKQUOTE>
///   Vehicle is proceeding slower than normal.
/// </BLOCKQUOTE></PRE>
	ns2__ProgressRateEnumeration__slowProgress,	///< xs:NMTOKEN value="slowProgress"
/// <PRE><BLOCKQUOTE>
///   Vehicle is proceeding at a normal rate.
/// </BLOCKQUOTE></PRE>
	ns2__ProgressRateEnumeration__normalProgress,	///< xs:NMTOKEN value="normalProgress"
/// <PRE><BLOCKQUOTE>
///   Vehicle is proceeding faster than normal.
/// </BLOCKQUOTE></PRE>
	ns2__ProgressRateEnumeration__fastProgress,	///< xs:NMTOKEN value="fastProgress"
/// <PRE><BLOCKQUOTE>
///   There is no data.
/// </BLOCKQUOTE></PRE>
	ns2__ProgressRateEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
};

/// @brief A class wrapper.
///
class ns2__ProgressRateEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ProgressRateEnumeration    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":CallStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the CALL, according to a fixed list of values. This may reflect a presentation policy, for example CALLs less than one minute behind target time are still classified as on-time. Applications may use this to guide their own presentation of times.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__CallStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__CallStatusEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Service is on time.
/// </BLOCKQUOTE></PRE>
	ns2__CallStatusEnumeration__onTime,	///< xs:NMTOKEN value="onTime"
/// <PRE><BLOCKQUOTE>
///   Service is earlier than expected.
/// </BLOCKQUOTE></PRE>
	ns2__CallStatusEnumeration__early,	///< xs:NMTOKEN value="early"
/// <PRE><BLOCKQUOTE>
///   Service is delayed.
/// </BLOCKQUOTE></PRE>
	ns2__CallStatusEnumeration__delayed,	///< xs:NMTOKEN value="delayed"
/// <PRE><BLOCKQUOTE>
///   Service is cancelled.
/// </BLOCKQUOTE></PRE>
	ns2__CallStatusEnumeration__cancelled,	///< xs:NMTOKEN value="cancelled"
/// <PRE><BLOCKQUOTE>
///   Service has arrived.
/// </BLOCKQUOTE></PRE>
	ns2__CallStatusEnumeration__arrived,	///< xs:NMTOKEN value="arrived"
	ns2__CallStatusEnumeration__departed,	///< xs:NMTOKEN value="departed"
	ns2__CallStatusEnumeration__missed,	///< xs:NMTOKEN value="missed"
/// <PRE><BLOCKQUOTE>
///   There is no information about the service.
/// </BLOCKQUOTE></PRE>
	ns2__CallStatusEnumeration__noReport,	///< xs:NMTOKEN value="noReport"
/// <PRE><BLOCKQUOTE>
///   Service is not expected to call this stop. For instance a flexible service that has not yet been preordered.
/// </BLOCKQUOTE></PRE>
	ns2__CallStatusEnumeration__notExpected,	///< xs:NMTOKEN value="notExpected"
};

/// @brief A class wrapper.
///
class ns2__CallStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns2__CallStatusEnumeration      __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VehicleStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Classification of the State of the VEHICLE JORUNEY according to a fixed list of values. This may reflect a presentation policy, for example CALLs less than one minute behind target time are still classified as on-time. Applications may use this to guide their own presentation of times.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__VehicleStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__VehicleStatusEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Service is expected to be performed.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleStatusEnumeration__expected,	///< xs:NMTOKEN value="expected"
/// <PRE><BLOCKQUOTE>
///   Service is not expected to be run. For instance a flexible service that has not yet been preordered.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleStatusEnumeration__notExpected,	///< xs:NMTOKEN value="notExpected"
	ns2__VehicleStatusEnumeration__cancelled,	///< xs:NMTOKEN value="cancelled"
	ns2__VehicleStatusEnumeration__assigned,	///< xs:NMTOKEN value="assigned"
	ns2__VehicleStatusEnumeration__signedOn,	///< xs:NMTOKEN value="signedOn"
	ns2__VehicleStatusEnumeration__atOrigin,	///< xs:NMTOKEN value="atOrigin"
/// <PRE><BLOCKQUOTE>
///   Service has departed from first stop.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleStatusEnumeration__inProgress,	///< xs:NMTOKEN value="inProgress"
	ns2__VehicleStatusEnumeration__aborted,	///< xs:NMTOKEN value="aborted"
	ns2__VehicleStatusEnumeration__offRoute,	///< xs:NMTOKEN value="offRoute"
/// <PRE><BLOCKQUOTE>
///   It has been detected that the Service was completed.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleStatusEnumeration__completed,	///< xs:NMTOKEN value="completed"
/// <PRE><BLOCKQUOTE>
///   It is assumed that the Service has completed.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleStatusEnumeration__assumedCompleted,	///< xs:NMTOKEN value="assumedCompleted"
	ns2__VehicleStatusEnumeration__notRun,	///< xs:NMTOKEN value="notRun"
};

/// @brief A class wrapper.
///
class ns2__VehicleStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns2__VehicleStatusEnumeration   __item;                       
};

/// @brief "http://www.siri.org.uk/siri":QualityIndexEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Classification of the quality of the prediction of the CALL, according to a fixed list of values. This may reflect a presentation policy, for example CALLs less than one minute behind target time are stiull classified as on-time. Applications may use this to guide their own presentation of times.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__QualityIndexEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__QualityIndexEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Data is certain (1/5).
/// </BLOCKQUOTE></PRE>
	ns2__QualityIndexEnumeration__certain,	///< xs:NMTOKEN value="certain"
/// <PRE><BLOCKQUOTE>
///   Data has confidence level of very reliable (2/5).
/// </BLOCKQUOTE></PRE>
	ns2__QualityIndexEnumeration__veryReliable,	///< xs:NMTOKEN value="veryReliable"
/// <PRE><BLOCKQUOTE>
///   Data has confidence lvel of reliabel (3/5).
/// </BLOCKQUOTE></PRE>
	ns2__QualityIndexEnumeration__reliable,	///< xs:NMTOKEN value="reliable"
/// <PRE><BLOCKQUOTE>
///   Data is thought to be reliable (4/5)
/// </BLOCKQUOTE></PRE>
	ns2__QualityIndexEnumeration__probablyReliable,	///< xs:NMTOKEN value="probablyReliable"
/// <PRE><BLOCKQUOTE>
///   Data is unconfirmed (5/5).
/// </BLOCKQUOTE></PRE>
	ns2__QualityIndexEnumeration__unconfirmed,	///< xs:NMTOKEN value="unconfirmed"
};

/// @brief A class wrapper.
///
class ns2__QualityIndexEnumeration_ : public xsd__anyType
{ public:
    enum ns2__QualityIndexEnumeration    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FirstOrLastJourneyEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed types activity for FirstOrLastJourney.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__FirstOrLastJourneyEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__FirstOrLastJourneyEnumeration
{
	ns2__FirstOrLastJourneyEnumeration__firstServiceOfDay,	///< xs:NMTOKEN value="firstServiceOfDay"
	ns2__FirstOrLastJourneyEnumeration__otherService,	///< xs:NMTOKEN value="otherService"
	ns2__FirstOrLastJourneyEnumeration__lastServiceOfDay,	///< xs:NMTOKEN value="lastServiceOfDay"
	ns2__FirstOrLastJourneyEnumeration__unspecified,	///< xs:NMTOKEN value="unspecified"
};

/// @brief A class wrapper.
///
class ns2__FirstOrLastJourneyEnumeration_ : public xsd__anyType
{ public:
    enum ns2__FirstOrLastJourneyEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VersionCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a Version.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__VersionCodeType;

/// @brief A class wrapper.
///
class ns2__VersionCodeType__ : public xsd__anyType
{ public:
    ns2__VersionCodeType                 __item;                       
};

/// @brief "http://www.siri.org.uk/siri":StopPointCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__StopPointCodeType;

/// @brief A class wrapper.
///
class ns2__StopPointCodeType__ : public xsd__anyType
{ public:
    ns2__StopPointCodeType               __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VisitNumberType is a simpleType restriction of XSD type xs:positiveInteger.
///
/// <PRE><BLOCKQUOTE>
///   Type for Stop Visit.
/// </BLOCKQUOTE></PRE>
typedef xsd__positiveInteger ns2__VisitNumberType;

/// @brief A class wrapper.
///
class ns2__VisitNumberType__ : public xsd__anyType
{ public:
    ns2__VisitNumberType                 __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ClearDownCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a Stop for Direct Cleardown. Suitable for radio transmission over a constrained bandwidth channel. This may be a separate code from the full stop identifier.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__ClearDownCodeType;

/// @brief A class wrapper.
///
class ns2__ClearDownCodeType__ : public xsd__anyType
{ public:
    ns2__ClearDownCodeType               __item;                       
};

/// @brief "http://www.siri.org.uk/siri":StopAreaCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a STOP AREA.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__StopAreaCodeType;

/// @brief A class wrapper.
///
class ns2__StopAreaCodeType__ : public xsd__anyType
{ public:
    ns2__StopAreaCodeType                __item;                       
};

/// @brief "http://www.siri.org.uk/siri":QuayCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a QUAY (Platform, Bay, etc).
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__QuayCodeType;

/// @brief A class wrapper.
///
class ns2__QuayCodeType__ : public xsd__anyType
{ public:
    ns2__QuayCodeType                    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":MonitoringCode is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a monitoring point. May correspond to a SCHEDULED STOP POINT or represent a group of Stops other Timing Points (i.e. LOGICAL DISPLAY)
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__MonitoringCode;

/// @brief A class wrapper.
///
class ns2__MonitoringCode__ : public xsd__anyType
{ public:
    ns2__MonitoringCode                  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ConnectionLinkCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a CONNECTION link
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__ConnectionLinkCodeType;

/// @brief A class wrapper.
///
class ns2__ConnectionLinkCodeType__ : public xsd__anyType
{ public:
    ns2__ConnectionLinkCodeType          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VehicleModesEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   MODEs of transport applicable to timetabled public transport.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__VehicleModesEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__VehicleModesEnumeration
{
	ns2__VehicleModesEnumeration__air,	///< xs:NMTOKEN value="air"
	ns2__VehicleModesEnumeration__bus,	///< xs:NMTOKEN value="bus"
	ns2__VehicleModesEnumeration__coach,	///< xs:NMTOKEN value="coach"
	ns2__VehicleModesEnumeration__ferry,	///< xs:NMTOKEN value="ferry"
	ns2__VehicleModesEnumeration__metro,	///< xs:NMTOKEN value="metro"
	ns2__VehicleModesEnumeration__rail,	///< xs:NMTOKEN value="rail"
	ns2__VehicleModesEnumeration__tram,	///< xs:NMTOKEN value="tram"
	ns2__VehicleModesEnumeration__underground,	///< xs:NMTOKEN value="underground"
};

/// @brief A class wrapper.
///
class ns2__VehicleModesEnumeration_ : public xsd__anyType
{ public:
    enum ns2__VehicleModesEnumeration    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ContinuousModesEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   MODEs of transport applicable to private and non-timetabled transport.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ContinuousModesEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ContinuousModesEnumeration
{
	ns2__ContinuousModesEnumeration__walk,	///< xs:NMTOKEN value="walk"
	ns2__ContinuousModesEnumeration__car,	///< xs:NMTOKEN value="car"
	ns2__ContinuousModesEnumeration__taxi,	///< xs:NMTOKEN value="taxi"
	ns2__ContinuousModesEnumeration__cycle,	///< xs:NMTOKEN value="cycle"
	ns2__ContinuousModesEnumeration__drt,	///< xs:NMTOKEN value="drt"
	ns2__ContinuousModesEnumeration__movingWalkway,	///< xs:NMTOKEN value="movingWalkway"
	ns2__ContinuousModesEnumeration__through,	///< xs:NMTOKEN value="through"
};

/// @brief A class wrapper.
///
class ns2__ContinuousModesEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ContinuousModesEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AllModesEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Union of VEHICLE and continuous MODEs.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__AllModesEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__AllModesEnumeration
{
	ns2__AllModesEnumeration__walk,	///< xs:NMTOKEN value="walk"
	ns2__AllModesEnumeration__car,	///< xs:NMTOKEN value="car"
	ns2__AllModesEnumeration__taxi,	///< xs:NMTOKEN value="taxi"
	ns2__AllModesEnumeration__cycle,	///< xs:NMTOKEN value="cycle"
	ns2__AllModesEnumeration__drt,	///< xs:NMTOKEN value="drt"
	ns2__AllModesEnumeration__movingWalkway,	///< xs:NMTOKEN value="movingWalkway"
	ns2__AllModesEnumeration__through,	///< xs:NMTOKEN value="through"
};

/// @brief A class wrapper.
///
class ns2__AllModesEnumeration_ : public xsd__anyType
{ public:
    enum ns2__AllModesEnumeration        __item;                       
};

/// @brief "http://www.siri.org.uk/siri":JourneyPatternCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__JourneyPatternCodeType;

/// @brief A class wrapper.
///
class ns2__JourneyPatternCodeType__ : public xsd__anyType
{ public:
    ns2__JourneyPatternCodeType          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":LineRefCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a LINE
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__LineRefCodeType;

/// @brief A class wrapper.
///
class ns2__LineRefCodeType__ : public xsd__anyType
{ public:
    ns2__LineRefCodeType                 __item;                       
};

/// @brief "http://www.siri.org.uk/siri":GroupOfLinesCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a GROUP OF LINEs
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__GroupOfLinesCodeType;

/// @brief A class wrapper.
///
class ns2__GroupOfLinesCodeType__ : public xsd__anyType
{ public:
    ns2__GroupOfLinesCodeType            __item;                       
};

/// @brief "http://www.siri.org.uk/siri":RouteCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a Route.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__RouteCodeType;

/// @brief A class wrapper.
///
class ns2__RouteCodeType__ : public xsd__anyType
{ public:
    ns2__RouteCodeType                   __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DirectionCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a DIRECTION.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__DirectionCodeType;

/// @brief A class wrapper.
///
class ns2__DirectionCodeType__ : public xsd__anyType
{ public:
    ns2__DirectionCodeType               __item;                       
};

/// @brief "http://www.siri.org.uk/siri":RouteLinkCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a ROUTE LINk.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__RouteLinkCodeType;

/// @brief A class wrapper.
///
class ns2__RouteLinkCodeType__ : public xsd__anyType
{ public:
    ns2__RouteLinkCodeType               __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DestinationCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a DESTINATION.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__DestinationCodeType;

/// @brief A class wrapper.
///
class ns2__DestinationCodeType__ : public xsd__anyType
{ public:
    ns2__DestinationCodeType             __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VehicleCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a VEHICLE.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__VehicleCodeType;

/// @brief A class wrapper.
///
class ns2__VehicleCodeType__ : public xsd__anyType
{ public:
    ns2__VehicleCodeType                 __item;                       
};

/// @brief "http://www.siri.org.uk/siri":OccupancyEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Passenger load status of a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__OccupancyEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__OccupancyEnumeration
{
	ns2__OccupancyEnumeration__full,	///< xs:NMTOKEN value="full"
	ns2__OccupancyEnumeration__seatsAvailable,	///< xs:NMTOKEN value="seatsAvailable"
	ns2__OccupancyEnumeration__standingAvailable,	///< xs:NMTOKEN value="standingAvailable"
};

/// @brief A class wrapper.
///
class ns2__OccupancyEnumeration_ : public xsd__anyType
{ public:
    enum ns2__OccupancyEnumeration       __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DriverCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a DRIVER
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__DriverCodeType;

/// @brief A class wrapper.
///
class ns2__DriverCodeType__ : public xsd__anyType
{ public:
    ns2__DriverCodeType                  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":InfoChannelCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an Info Channel.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__InfoChannelCodeType;

/// @brief A class wrapper.
///
class ns2__InfoChannelCodeType__ : public xsd__anyType
{ public:
    ns2__InfoChannelCodeType             __item;                       
};

/// @brief "http://www.siri.org.uk/siri":OperatorCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an OPERATOR Code.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__OperatorCodeType;

/// @brief A class wrapper.
///
class ns2__OperatorCodeType__ : public xsd__anyType
{ public:
    ns2__OperatorCodeType                __item;                       
};

/// @brief "http://www.siri.org.uk/siri":OrganisationCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an OrganisationCode.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__OrganisationCodeType;

/// @brief A class wrapper.
///
class ns2__OrganisationCodeType__ : public xsd__anyType
{ public:
    ns2__OrganisationCodeType            __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DayTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Day Type TPEG pti_table 34
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__DayTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__DayTypeEnumeration
{
	ns2__DayTypeEnumeration__pti34_USCORE0,	///< xs:NMTOKEN value="pti34_0"
	ns2__DayTypeEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__DayTypeEnumeration__pti34_USCORE1,	///< xs:NMTOKEN value="pti34_1"
	ns2__DayTypeEnumeration__monday,	///< xs:NMTOKEN value="monday"
	ns2__DayTypeEnumeration__pti34_USCORE2,	///< xs:NMTOKEN value="pti34_2"
	ns2__DayTypeEnumeration__tuesday,	///< xs:NMTOKEN value="tuesday"
	ns2__DayTypeEnumeration__pti34_USCORE3,	///< xs:NMTOKEN value="pti34_3"
	ns2__DayTypeEnumeration__wednesday,	///< xs:NMTOKEN value="wednesday"
	ns2__DayTypeEnumeration__pti34_USCORE4,	///< xs:NMTOKEN value="pti34_4"
	ns2__DayTypeEnumeration__thursday,	///< xs:NMTOKEN value="thursday"
	ns2__DayTypeEnumeration__pti34_USCORE5,	///< xs:NMTOKEN value="pti34_5"
	ns2__DayTypeEnumeration__friday,	///< xs:NMTOKEN value="friday"
	ns2__DayTypeEnumeration__pti34_USCORE6,	///< xs:NMTOKEN value="pti34_6"
	ns2__DayTypeEnumeration__saturday,	///< xs:NMTOKEN value="saturday"
	ns2__DayTypeEnumeration__pti34_USCORE7,	///< xs:NMTOKEN value="pti34_7"
	ns2__DayTypeEnumeration__sunday,	///< xs:NMTOKEN value="sunday"
	ns2__DayTypeEnumeration__pti34_USCORE8,	///< xs:NMTOKEN value="pti34_8"
	ns2__DayTypeEnumeration__weekdays,	///< xs:NMTOKEN value="weekdays"
	ns2__DayTypeEnumeration__pti34_USCORE9,	///< xs:NMTOKEN value="pti34_9"
	ns2__DayTypeEnumeration__weekends,	///< xs:NMTOKEN value="weekends"
	ns2__DayTypeEnumeration__pti34_USCORE10,	///< xs:NMTOKEN value="pti34_10"
	ns2__DayTypeEnumeration__holiday,	///< xs:NMTOKEN value="holiday"
	ns2__DayTypeEnumeration__pti34_USCORE11,	///< xs:NMTOKEN value="pti34_11"
	ns2__DayTypeEnumeration__publicHoliday,	///< xs:NMTOKEN value="publicHoliday"
	ns2__DayTypeEnumeration__pti34_USCORE12,	///< xs:NMTOKEN value="pti34_12"
	ns2__DayTypeEnumeration__religiousHoliday,	///< xs:NMTOKEN value="religiousHoliday"
	ns2__DayTypeEnumeration__pti34_USCORE13,	///< xs:NMTOKEN value="pti34_13"
	ns2__DayTypeEnumeration__federalHoliday,	///< xs:NMTOKEN value="federalHoliday"
	ns2__DayTypeEnumeration__pti34_USCORE14,	///< xs:NMTOKEN value="pti34_14"
	ns2__DayTypeEnumeration__regionalHoliday,	///< xs:NMTOKEN value="regionalHoliday"
	ns2__DayTypeEnumeration__pti34_USCORE15,	///< xs:NMTOKEN value="pti34_15"
	ns2__DayTypeEnumeration__nationalHoliday,	///< xs:NMTOKEN value="nationalHoliday"
	ns2__DayTypeEnumeration__pti34_USCORE16,	///< xs:NMTOKEN value="pti34_16"
	ns2__DayTypeEnumeration__mondayToFriday,	///< xs:NMTOKEN value="mondayToFriday"
	ns2__DayTypeEnumeration__pti34_USCORE17,	///< xs:NMTOKEN value="pti34_17"
	ns2__DayTypeEnumeration__mondayToSaturday,	///< xs:NMTOKEN value="mondayToSaturday"
	ns2__DayTypeEnumeration__pti34_USCORE18,	///< xs:NMTOKEN value="pti34_18"
	ns2__DayTypeEnumeration__sundaysAndPublicHolidays,	///< xs:NMTOKEN value="sundaysAndPublicHolidays"
	ns2__DayTypeEnumeration__pti34_USCORE19,	///< xs:NMTOKEN value="pti34_19"
	ns2__DayTypeEnumeration__schoolDays,	///< xs:NMTOKEN value="schoolDays"
	ns2__DayTypeEnumeration__pti34_USCORE20,	///< xs:NMTOKEN value="pti34_20"
	ns2__DayTypeEnumeration__everyDay,	///< xs:NMTOKEN value="everyDay"
	ns2__DayTypeEnumeration__pti34_USCORE255,	///< xs:NMTOKEN value="pti34_255"
	ns2__DayTypeEnumeration__undefinedDayType,	///< xs:NMTOKEN value="undefinedDayType"
};

/// @brief A class wrapper.
///
class ns2__DayTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__DayTypeEnumeration         __item;                       
};

/// @brief "http://www.siri.org.uk/siri":SituationCodeType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a SITUATION. Includes the Participant identifier and version components of the identifier.
/// </BLOCKQUOTE></PRE>
typedef std::wstring ns2__SituationCodeType;

/// @brief A class wrapper.
///
class ns2__SituationCodeType__ : public xsd__anyType
{ public:
    ns2__SituationCodeType               __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ProductCategoryCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a TYPE OF PRODUCT CATEGORY.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__ProductCategoryCodeType;

/// @brief A class wrapper.
///
class ns2__ProductCategoryCodeType__ : public xsd__anyType
{ public:
    ns2__ProductCategoryCodeType         __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ServiceFeatureCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a ServiceCategory. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__ServiceFeatureCodeType;

/// @brief A class wrapper.
///
class ns2__ServiceFeatureCodeType__ : public xsd__anyType
{ public:
    ns2__ServiceFeatureCodeType          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VehicleFeatureCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a Vehicle Feature. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__VehicleFeatureCodeType;

/// @brief A class wrapper.
///
class ns2__VehicleFeatureCodeType__ : public xsd__anyType
{ public:
    ns2__VehicleFeatureCodeType          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FeatureCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a StopFeature. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__FeatureCodeType;

/// @brief A class wrapper.
///
class ns2__FeatureCodeType__ : public xsd__anyType
{ public:
    ns2__FeatureCodeType                 __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VehicleModesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for ModesOfTransport : TPEG pti_table 01.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__VehicleModesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__VehicleModesOfTransportEnumeration
{
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE0,	///< xs:NMTOKEN value="pti1_0"
	ns2__VehicleModesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE1,	///< xs:NMTOKEN value="pti1_1"
/// <PRE><BLOCKQUOTE>
///   See pti2_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__railwayService,	///< xs:NMTOKEN value="railwayService"
	ns2__VehicleModesOfTransportEnumeration__rail,	///< xs:NMTOKEN value="rail"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE2,	///< xs:NMTOKEN value="pti1_2"
/// <PRE><BLOCKQUOTE>
///   See pti3_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__coachService,	///< xs:NMTOKEN value="coachService"
	ns2__VehicleModesOfTransportEnumeration__coach,	///< xs:NMTOKEN value="coach"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE3,	///< xs:NMTOKEN value="pti1_3"
	ns2__VehicleModesOfTransportEnumeration__suburbanRailwayService,	///< xs:NMTOKEN value="suburbanRailwayService"
	ns2__VehicleModesOfTransportEnumeration__suburbanRail,	///< xs:NMTOKEN value="suburbanRail"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE4,	///< xs:NMTOKEN value="pti1_4"
/// <PRE><BLOCKQUOTE>
///   See pti4_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__urbanRailwayService,	///< xs:NMTOKEN value="urbanRailwayService"
	ns2__VehicleModesOfTransportEnumeration__urbanRail,	///< xs:NMTOKEN value="urbanRail"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE5,	///< xs:NMTOKEN value="pti1_5"
	ns2__VehicleModesOfTransportEnumeration__metroService,	///< xs:NMTOKEN value="metroService"
	ns2__VehicleModesOfTransportEnumeration__metro,	///< xs:NMTOKEN value="metro"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE6,	///< xs:NMTOKEN value="pti1_6"
	ns2__VehicleModesOfTransportEnumeration__undergroundService,	///< xs:NMTOKEN value="undergroundService"
	ns2__VehicleModesOfTransportEnumeration__underground,	///< xs:NMTOKEN value="underground"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE7,	///< xs:NMTOKEN value="pti1_7"
/// <PRE><BLOCKQUOTE>
///   See pti5_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__busService,	///< xs:NMTOKEN value="busService"
	ns2__VehicleModesOfTransportEnumeration__bus,	///< xs:NMTOKEN value="bus"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE8,	///< xs:NMTOKEN value="pti1_8"
	ns2__VehicleModesOfTransportEnumeration__trolleyBusService,	///< xs:NMTOKEN value="trolleyBusService"
	ns2__VehicleModesOfTransportEnumeration__trolleyBus,	///< xs:NMTOKEN value="trolleyBus"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE9,	///< xs:NMTOKEN value="pti1_9"
/// <PRE><BLOCKQUOTE>
///   See pti6_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__tramService,	///< xs:NMTOKEN value="tramService"
	ns2__VehicleModesOfTransportEnumeration__tram,	///< xs:NMTOKEN value="tram"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE10,	///< xs:NMTOKEN value="pti1_10"
/// <PRE><BLOCKQUOTE>
///   See pti7_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__waterTransportService,	///< xs:NMTOKEN value="waterTransportService"
	ns2__VehicleModesOfTransportEnumeration__waterTransport,	///< xs:NMTOKEN value="waterTransport"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE11,	///< xs:NMTOKEN value="pti1_11"
/// <PRE><BLOCKQUOTE>
///   See pti8_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__airService,	///< xs:NMTOKEN value="airService"
	ns2__VehicleModesOfTransportEnumeration__air,	///< xs:NMTOKEN value="air"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE12,	///< xs:NMTOKEN value="pti1_12"
	ns2__VehicleModesOfTransportEnumeration__ferryService,	///< xs:NMTOKEN value="ferryService"
	ns2__VehicleModesOfTransportEnumeration__water,	///< xs:NMTOKEN value="water"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE13,	///< xs:NMTOKEN value="pti1_13"
/// <PRE><BLOCKQUOTE>
///   See pti9_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__telecabinService,	///< xs:NMTOKEN value="telecabinService"
	ns2__VehicleModesOfTransportEnumeration__telecabin,	///< xs:NMTOKEN value="telecabin"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE14,	///< xs:NMTOKEN value="pti1_14"
/// <PRE><BLOCKQUOTE>
///   See pti10_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__funicularService,	///< xs:NMTOKEN value="funicularService"
	ns2__VehicleModesOfTransportEnumeration__funicular,	///< xs:NMTOKEN value="funicular"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE15,	///< xs:NMTOKEN value="pti1_15"
/// <PRE><BLOCKQUOTE>
///   pti11_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__taxiService,	///< xs:NMTOKEN value="taxiService"
	ns2__VehicleModesOfTransportEnumeration__taxi,	///< xs:NMTOKEN value="taxi"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE16,	///< xs:NMTOKEN value="pti1_16"
/// <PRE><BLOCKQUOTE>
///   See pti12_x.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleModesOfTransportEnumeration__selfDrive,	///< xs:NMTOKEN value="selfDrive"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE17,	///< xs:NMTOKEN value="pti1_17"
	ns2__VehicleModesOfTransportEnumeration__allServices,	///< xs:NMTOKEN value="allServices"
	ns2__VehicleModesOfTransportEnumeration__all,	///< xs:NMTOKEN value="all"
	ns2__VehicleModesOfTransportEnumeration__pti1_USCORE18,	///< xs:NMTOKEN value="pti1_18"
	ns2__VehicleModesOfTransportEnumeration__allServicesExcept,	///< xs:NMTOKEN value="allServicesExcept"
};

/// @brief A class wrapper.
///
class ns2__VehicleModesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__VehicleModesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":RailSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Rail ModesOfTransport: TPEG pti_table_02, train link loc_table_13.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__RailSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__RailSubmodesOfTransportEnumeration
{
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE0,	///< xs:NMTOKEN value="pti2_0"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE0,	///< xs:NMTOKEN value="loc13_0"
	ns2__RailSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE1,	///< xs:NMTOKEN value="pti2_1"
	ns2__RailSubmodesOfTransportEnumeration__highSpeedRailService,	///< xs:NMTOKEN value="highSpeedRailService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE2,	///< xs:NMTOKEN value="pti2_2"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE3,	///< xs:NMTOKEN value="loc13_3"
	ns2__RailSubmodesOfTransportEnumeration__longDistanceTrain,	///< xs:NMTOKEN value="longDistanceTrain"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE3,	///< xs:NMTOKEN value="pti2_3"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE2,	///< xs:NMTOKEN value="loc13_2"
	ns2__RailSubmodesOfTransportEnumeration__interRegionalRailService,	///< xs:NMTOKEN value="interRegionalRailService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE4,	///< xs:NMTOKEN value="pti2_4"
	ns2__RailSubmodesOfTransportEnumeration__carTransportRailService,	///< xs:NMTOKEN value="carTransportRailService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE5,	///< xs:NMTOKEN value="pti2_5"
	ns2__RailSubmodesOfTransportEnumeration__sleeperRailService,	///< xs:NMTOKEN value="sleeperRailService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE6,	///< xs:NMTOKEN value="pti2_6"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE4,	///< xs:NMTOKEN value="loc13_4"
	ns2__RailSubmodesOfTransportEnumeration__regionalRail,	///< xs:NMTOKEN value="regionalRail"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE7,	///< xs:NMTOKEN value="pti2_7"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE7,	///< xs:NMTOKEN value="loc13_7"
	ns2__RailSubmodesOfTransportEnumeration__touristRailway,	///< xs:NMTOKEN value="touristRailway"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE8,	///< xs:NMTOKEN value="pti2_8"
	ns2__RailSubmodesOfTransportEnumeration__railShuttle,	///< xs:NMTOKEN value="railShuttle"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE9,	///< xs:NMTOKEN value="pti2_9"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE5,	///< xs:NMTOKEN value="loc13_5"
	ns2__RailSubmodesOfTransportEnumeration__suburbanRailway,	///< xs:NMTOKEN value="suburbanRailway"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE10,	///< xs:NMTOKEN value="pti2_10"
	ns2__RailSubmodesOfTransportEnumeration__replacementRailService,	///< xs:NMTOKEN value="replacementRailService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE11,	///< xs:NMTOKEN value="pti2_11"
	ns2__RailSubmodesOfTransportEnumeration__specialTrainService,	///< xs:NMTOKEN value="specialTrainService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE12,	///< xs:NMTOKEN value="pti2_12"
	ns2__RailSubmodesOfTransportEnumeration__lorryTransportRailService,	///< xs:NMTOKEN value="lorryTransportRailService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE13,	///< xs:NMTOKEN value="pti2_13"
	ns2__RailSubmodesOfTransportEnumeration__allRailServices,	///< xs:NMTOKEN value="allRailServices"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE14,	///< xs:NMTOKEN value="pti2_14"
	ns2__RailSubmodesOfTransportEnumeration__crossCountryRailService,	///< xs:NMTOKEN value="crossCountryRailService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE15,	///< xs:NMTOKEN value="pti2_15"
	ns2__RailSubmodesOfTransportEnumeration__vehicleRailTransportService,	///< xs:NMTOKEN value="vehicleRailTransportService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE16,	///< xs:NMTOKEN value="pti2_16"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE8,	///< xs:NMTOKEN value="loc13_8"
	ns2__RailSubmodesOfTransportEnumeration__rackAndPinionRailway,	///< xs:NMTOKEN value="rackAndPinionRailway"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE17,	///< xs:NMTOKEN value="pti2_17"
	ns2__RailSubmodesOfTransportEnumeration__additionalTrainService,	///< xs:NMTOKEN value="additionalTrainService"
	ns2__RailSubmodesOfTransportEnumeration__pti2_USCORE255,	///< xs:NMTOKEN value="pti2_255"
	ns2__RailSubmodesOfTransportEnumeration__undefined,	///< xs:NMTOKEN value="undefined"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE6,	///< xs:NMTOKEN value="loc13_6"
	ns2__RailSubmodesOfTransportEnumeration__local,	///< xs:NMTOKEN value="local"
	ns2__RailSubmodesOfTransportEnumeration__loc13_USCORE1,	///< xs:NMTOKEN value="loc13_1"
	ns2__RailSubmodesOfTransportEnumeration__interbational,	///< xs:NMTOKEN value="interbational"
};

/// @brief A class wrapper.
///
class ns2__RailSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__RailSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":CoachSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Coach ModesOfTransport: TPEG pti_table_03.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__CoachSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__CoachSubmodesOfTransportEnumeration
{
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE0,	///< xs:NMTOKEN value="pti3_0"
	ns2__CoachSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE1,	///< xs:NMTOKEN value="pti3_1"
	ns2__CoachSubmodesOfTransportEnumeration__internationalCoachService,	///< xs:NMTOKEN value="internationalCoachService"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE2,	///< xs:NMTOKEN value="pti3_2"
	ns2__CoachSubmodesOfTransportEnumeration__nationalCoachService,	///< xs:NMTOKEN value="nationalCoachService"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE3,	///< xs:NMTOKEN value="pti3_3"
	ns2__CoachSubmodesOfTransportEnumeration__shuttleCoachService,	///< xs:NMTOKEN value="shuttleCoachService"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE4,	///< xs:NMTOKEN value="pti3_4"
	ns2__CoachSubmodesOfTransportEnumeration__regionalCoachService,	///< xs:NMTOKEN value="regionalCoachService"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE5,	///< xs:NMTOKEN value="pti3_5"
	ns2__CoachSubmodesOfTransportEnumeration__specialCoachService,	///< xs:NMTOKEN value="specialCoachService"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE6,	///< xs:NMTOKEN value="pti3_6"
	ns2__CoachSubmodesOfTransportEnumeration__sightseeingCoachService,	///< xs:NMTOKEN value="sightseeingCoachService"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE7,	///< xs:NMTOKEN value="pti3_7"
	ns2__CoachSubmodesOfTransportEnumeration__touristCoachService,	///< xs:NMTOKEN value="touristCoachService"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE8,	///< xs:NMTOKEN value="pti3_8"
	ns2__CoachSubmodesOfTransportEnumeration__commuterCoachService,	///< xs:NMTOKEN value="commuterCoachService"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE9,	///< xs:NMTOKEN value="pti3_9"
	ns2__CoachSubmodesOfTransportEnumeration__allCoachServices,	///< xs:NMTOKEN value="allCoachServices"
	ns2__CoachSubmodesOfTransportEnumeration__pti3_USCORE255,	///< xs:NMTOKEN value="pti3_255"
	ns2__CoachSubmodesOfTransportEnumeration__undefined,	///< xs:NMTOKEN value="undefined"
};

/// @brief A class wrapper.
///
class ns2__CoachSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__CoachSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":MetroSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Metro ModesOfTransport: TPEG pti_table_04.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__MetroSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__MetroSubmodesOfTransportEnumeration
{
	ns2__MetroSubmodesOfTransportEnumeration__pti4_USCORE0,	///< xs:NMTOKEN value="pti4_0"
	ns2__MetroSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__MetroSubmodesOfTransportEnumeration__pti4_USCORE1,	///< xs:NMTOKEN value="pti4_1"
	ns2__MetroSubmodesOfTransportEnumeration__metro,	///< xs:NMTOKEN value="metro"
	ns2__MetroSubmodesOfTransportEnumeration__pti4_USCORE2,	///< xs:NMTOKEN value="pti4_2"
	ns2__MetroSubmodesOfTransportEnumeration__tube,	///< xs:NMTOKEN value="tube"
	ns2__MetroSubmodesOfTransportEnumeration__pti4_USCORE3,	///< xs:NMTOKEN value="pti4_3"
	ns2__MetroSubmodesOfTransportEnumeration__urbanRailway,	///< xs:NMTOKEN value="urbanRailway"
	ns2__MetroSubmodesOfTransportEnumeration__pti4_USCORE4,	///< xs:NMTOKEN value="pti4_4"
	ns2__MetroSubmodesOfTransportEnumeration__allRailServices,	///< xs:NMTOKEN value="allRailServices"
	ns2__MetroSubmodesOfTransportEnumeration__pti4_USCORE255,	///< xs:NMTOKEN value="pti4_255"
	ns2__MetroSubmodesOfTransportEnumeration__undefined,	///< xs:NMTOKEN value="undefined"
};

/// @brief A class wrapper.
///
class ns2__MetroSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__MetroSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":BusSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Bus ModesOfTransport: TPEG pti_table_05, loc_table_10.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__BusSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__BusSubmodesOfTransportEnumeration
{
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE0,	///< xs:NMTOKEN value="pti5_0"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE0,	///< xs:NMTOKEN value="loc10_0"
	ns2__BusSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE1,	///< xs:NMTOKEN value="pti5_1"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE6,	///< xs:NMTOKEN value="loc10_6"
	ns2__BusSubmodesOfTransportEnumeration__regionalBus,	///< xs:NMTOKEN value="regionalBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE2,	///< xs:NMTOKEN value="pti5_2"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE1,	///< xs:NMTOKEN value="loc10_1"
	ns2__BusSubmodesOfTransportEnumeration__expressBus,	///< xs:NMTOKEN value="expressBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE3,	///< xs:NMTOKEN value="pti5_3"
	ns2__BusSubmodesOfTransportEnumeration__bus,	///< xs:NMTOKEN value="bus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE4,	///< xs:NMTOKEN value="pti5_4"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE5,	///< xs:NMTOKEN value="loc10_5"
	ns2__BusSubmodesOfTransportEnumeration__localBusService,	///< xs:NMTOKEN value="localBusService"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE5,	///< xs:NMTOKEN value="pti5_5"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE2,	///< xs:NMTOKEN value="loc10_2"
	ns2__BusSubmodesOfTransportEnumeration__nightBus,	///< xs:NMTOKEN value="nightBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE6,	///< xs:NMTOKEN value="pti5_6"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE4,	///< xs:NMTOKEN value="loc10_4"
	ns2__BusSubmodesOfTransportEnumeration__postBus,	///< xs:NMTOKEN value="postBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE7,	///< xs:NMTOKEN value="pti5_7"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE8,	///< xs:NMTOKEN value="loc10_8"
	ns2__BusSubmodesOfTransportEnumeration__specialNeedsBus,	///< xs:NMTOKEN value="specialNeedsBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE8,	///< xs:NMTOKEN value="pti5_8"
	ns2__BusSubmodesOfTransportEnumeration__mobilityBus,	///< xs:NMTOKEN value="mobilityBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE9,	///< xs:NMTOKEN value="pti5_9"
	ns2__BusSubmodesOfTransportEnumeration__mobilityBusForRegisteredDisabled,	///< xs:NMTOKEN value="mobilityBusForRegisteredDisabled"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE10,	///< xs:NMTOKEN value="pti5_10"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE9,	///< xs:NMTOKEN value="loc10_9"
	ns2__BusSubmodesOfTransportEnumeration__sightseeingBus,	///< xs:NMTOKEN value="sightseeingBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE11,	///< xs:NMTOKEN value="pti5_11"
	ns2__BusSubmodesOfTransportEnumeration__shuttleBus,	///< xs:NMTOKEN value="shuttleBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE12,	///< xs:NMTOKEN value="pti5_12"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE7,	///< xs:NMTOKEN value="loc10_7"
	ns2__BusSubmodesOfTransportEnumeration__schoolBus,	///< xs:NMTOKEN value="schoolBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE13,	///< xs:NMTOKEN value="pti5_13"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE13,	///< xs:NMTOKEN value="loc10_13"
	ns2__BusSubmodesOfTransportEnumeration__schoolAndPublicServiceBus,	///< xs:NMTOKEN value="schoolAndPublicServiceBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE14,	///< xs:NMTOKEN value="pti5_14"
	ns2__BusSubmodesOfTransportEnumeration__railReplacementBus,	///< xs:NMTOKEN value="railReplacementBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE15,	///< xs:NMTOKEN value="pti5_15"
	ns2__BusSubmodesOfTransportEnumeration__demandAndResponseBus,	///< xs:NMTOKEN value="demandAndResponseBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE16,	///< xs:NMTOKEN value="pti5_16"
	ns2__BusSubmodesOfTransportEnumeration__allBusServices,	///< xs:NMTOKEN value="allBusServices"
	ns2__BusSubmodesOfTransportEnumeration__loc_USCORE10,	///< xs:NMTOKEN value="loc_10"
	ns2__BusSubmodesOfTransportEnumeration__airportLinkBus,	///< xs:NMTOKEN value="airportLinkBus"
	ns2__BusSubmodesOfTransportEnumeration__pti5_USCORE255,	///< xs:NMTOKEN value="pti5_255"
	ns2__BusSubmodesOfTransportEnumeration__loc10_USCORE255,	///< xs:NMTOKEN value="loc10_255"
	ns2__BusSubmodesOfTransportEnumeration__undefined,	///< xs:NMTOKEN value="undefined"
};

/// @brief A class wrapper.
///
class ns2__BusSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__BusSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":TramSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Tram ModesOfTransport: TPEG pti_table_06, loc_table_12.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__TramSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__TramSubmodesOfTransportEnumeration
{
	ns2__TramSubmodesOfTransportEnumeration__pti6_USCORE0,	///< xs:NMTOKEN value="pti6_0"
	ns2__TramSubmodesOfTransportEnumeration__loc12_USCORE0,	///< xs:NMTOKEN value="loc12_0"
	ns2__TramSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__TramSubmodesOfTransportEnumeration__pti6_USCORE1,	///< xs:NMTOKEN value="pti6_1"
	ns2__TramSubmodesOfTransportEnumeration__loc12_USCORE1,	///< xs:NMTOKEN value="loc12_1"
	ns2__TramSubmodesOfTransportEnumeration__cityTram,	///< xs:NMTOKEN value="cityTram"
	ns2__TramSubmodesOfTransportEnumeration__pti6_USCORE2,	///< xs:NMTOKEN value="pti6_2"
	ns2__TramSubmodesOfTransportEnumeration__localTramService,	///< xs:NMTOKEN value="localTramService"
	ns2__TramSubmodesOfTransportEnumeration__pti6_USCORE3,	///< xs:NMTOKEN value="pti6_3"
	ns2__TramSubmodesOfTransportEnumeration__regionalTram,	///< xs:NMTOKEN value="regionalTram"
	ns2__TramSubmodesOfTransportEnumeration__pti6_USCORE4,	///< xs:NMTOKEN value="pti6_4"
	ns2__TramSubmodesOfTransportEnumeration__loc12_USCORE2,	///< xs:NMTOKEN value="loc12_2"
	ns2__TramSubmodesOfTransportEnumeration__sightseeingTram,	///< xs:NMTOKEN value="sightseeingTram"
	ns2__TramSubmodesOfTransportEnumeration__pti6_USCORE5,	///< xs:NMTOKEN value="pti6_5"
	ns2__TramSubmodesOfTransportEnumeration__shuttleTram,	///< xs:NMTOKEN value="shuttleTram"
	ns2__TramSubmodesOfTransportEnumeration__pti6_USCORE6,	///< xs:NMTOKEN value="pti6_6"
	ns2__TramSubmodesOfTransportEnumeration__allTramServices,	///< xs:NMTOKEN value="allTramServices"
	ns2__TramSubmodesOfTransportEnumeration__pti6_USCORE255,	///< xs:NMTOKEN value="pti6_255"
	ns2__TramSubmodesOfTransportEnumeration__loc12_USCORE255,	///< xs:NMTOKEN value="loc12_255"
	ns2__TramSubmodesOfTransportEnumeration__undefinedTramService,	///< xs:NMTOKEN value="undefinedTramService"
};

/// @brief A class wrapper.
///
class ns2__TramSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__TramSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":WaterSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Water ModesOfTransport: TPEG pti_table_07.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__WaterSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__WaterSubmodesOfTransportEnumeration
{
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE0,	///< xs:NMTOKEN value="pti7_0"
	ns2__WaterSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE1,	///< xs:NMTOKEN value="pti7_1"
	ns2__WaterSubmodesOfTransportEnumeration__internationalCarFerryService,	///< xs:NMTOKEN value="internationalCarFerryService"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE2,	///< xs:NMTOKEN value="pti7_2"
	ns2__WaterSubmodesOfTransportEnumeration__nationalCarFerryService,	///< xs:NMTOKEN value="nationalCarFerryService"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE3,	///< xs:NMTOKEN value="pti7_3"
	ns2__WaterSubmodesOfTransportEnumeration__regionalCarFerryService,	///< xs:NMTOKEN value="regionalCarFerryService"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE4,	///< xs:NMTOKEN value="pti7_4"
	ns2__WaterSubmodesOfTransportEnumeration__localCarFerryService,	///< xs:NMTOKEN value="localCarFerryService"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE5,	///< xs:NMTOKEN value="pti7_5"
	ns2__WaterSubmodesOfTransportEnumeration__internationalPassengerFerry,	///< xs:NMTOKEN value="internationalPassengerFerry"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE6,	///< xs:NMTOKEN value="pti7_6"
	ns2__WaterSubmodesOfTransportEnumeration__nationalPassengerFerry,	///< xs:NMTOKEN value="nationalPassengerFerry"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE7,	///< xs:NMTOKEN value="pti7_7"
	ns2__WaterSubmodesOfTransportEnumeration__regionalPassengerFerry,	///< xs:NMTOKEN value="regionalPassengerFerry"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE8,	///< xs:NMTOKEN value="pti7_8"
	ns2__WaterSubmodesOfTransportEnumeration__localPassengerFerry,	///< xs:NMTOKEN value="localPassengerFerry"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE9,	///< xs:NMTOKEN value="pti7_9"
	ns2__WaterSubmodesOfTransportEnumeration__postBoat,	///< xs:NMTOKEN value="postBoat"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE10,	///< xs:NMTOKEN value="pti7_10"
	ns2__WaterSubmodesOfTransportEnumeration__trainFerry,	///< xs:NMTOKEN value="trainFerry"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE11,	///< xs:NMTOKEN value="pti7_11"
	ns2__WaterSubmodesOfTransportEnumeration__roadFerryLink,	///< xs:NMTOKEN value="roadFerryLink"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE12,	///< xs:NMTOKEN value="pti7_12"
	ns2__WaterSubmodesOfTransportEnumeration__airportBoatLink,	///< xs:NMTOKEN value="airportBoatLink"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE13,	///< xs:NMTOKEN value="pti7_13"
	ns2__WaterSubmodesOfTransportEnumeration__highSpeedVehicleService,	///< xs:NMTOKEN value="highSpeedVehicleService"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE14,	///< xs:NMTOKEN value="pti7_14"
	ns2__WaterSubmodesOfTransportEnumeration__highSpeedPassengerService,	///< xs:NMTOKEN value="highSpeedPassengerService"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE15,	///< xs:NMTOKEN value="pti7_15"
	ns2__WaterSubmodesOfTransportEnumeration__sightseeingService,	///< xs:NMTOKEN value="sightseeingService"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE16,	///< xs:NMTOKEN value="pti7_16"
	ns2__WaterSubmodesOfTransportEnumeration__schoolBoat,	///< xs:NMTOKEN value="schoolBoat"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE17,	///< xs:NMTOKEN value="pti7_17"
	ns2__WaterSubmodesOfTransportEnumeration__cableFerry,	///< xs:NMTOKEN value="cableFerry"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE18,	///< xs:NMTOKEN value="pti7_18"
	ns2__WaterSubmodesOfTransportEnumeration__riverBus,	///< xs:NMTOKEN value="riverBus"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE19,	///< xs:NMTOKEN value="pti7_19"
	ns2__WaterSubmodesOfTransportEnumeration__scheduledFerry,	///< xs:NMTOKEN value="scheduledFerry"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE20,	///< xs:NMTOKEN value="pti7_20"
	ns2__WaterSubmodesOfTransportEnumeration__shuttleFerryService,	///< xs:NMTOKEN value="shuttleFerryService"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE21,	///< xs:NMTOKEN value="pti7_21"
	ns2__WaterSubmodesOfTransportEnumeration__allWaterTransportServices,	///< xs:NMTOKEN value="allWaterTransportServices"
	ns2__WaterSubmodesOfTransportEnumeration__pti7_USCORE255,	///< xs:NMTOKEN value="pti7_255"
	ns2__WaterSubmodesOfTransportEnumeration__undefinedWaterTransport,	///< xs:NMTOKEN value="undefinedWaterTransport"
};

/// @brief A class wrapper.
///
class ns2__WaterSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__WaterSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AirSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Air ModesOfTransport: TPEG pti_table_08.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__AirSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__AirSubmodesOfTransportEnumeration
{
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE0,	///< xs:NMTOKEN value="pti8_0"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE0,	///< xs:NMTOKEN value="loc15_0"
	ns2__AirSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE1,	///< xs:NMTOKEN value="pti8_1"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE2,	///< xs:NMTOKEN value="loc15_2"
	ns2__AirSubmodesOfTransportEnumeration__internationalFlight,	///< xs:NMTOKEN value="internationalFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE2,	///< xs:NMTOKEN value="pti8_2"
	ns2__AirSubmodesOfTransportEnumeration__domesticFlight,	///< xs:NMTOKEN value="domesticFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE3,	///< xs:NMTOKEN value="pti8_3"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE1,	///< xs:NMTOKEN value="loc15_1"
	ns2__AirSubmodesOfTransportEnumeration__intercontinentalFlight,	///< xs:NMTOKEN value="intercontinentalFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE4,	///< xs:NMTOKEN value="pti8_4"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE4,	///< xs:NMTOKEN value="loc15_4"
	ns2__AirSubmodesOfTransportEnumeration__domesticScheduledFlight,	///< xs:NMTOKEN value="domesticScheduledFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE5,	///< xs:NMTOKEN value="pti8_5"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE9,	///< xs:NMTOKEN value="loc15_9"
	ns2__AirSubmodesOfTransportEnumeration__shuttleFlight,	///< xs:NMTOKEN value="shuttleFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE6,	///< xs:NMTOKEN value="pti8_6"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE5,	///< xs:NMTOKEN value="loc15_5"
	ns2__AirSubmodesOfTransportEnumeration__intercontinentalCharterFlight,	///< xs:NMTOKEN value="intercontinentalCharterFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE7,	///< xs:NMTOKEN value="pti8_7"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE6,	///< xs:NMTOKEN value="loc15_6"
	ns2__AirSubmodesOfTransportEnumeration__internationalCharterFlight,	///< xs:NMTOKEN value="internationalCharterFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE8,	///< xs:NMTOKEN value="pti8_8"
	ns2__AirSubmodesOfTransportEnumeration__roundTripCharterFlight,	///< xs:NMTOKEN value="roundTripCharterFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE9,	///< xs:NMTOKEN value="pti8_9"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE8,	///< xs:NMTOKEN value="loc15_8"
	ns2__AirSubmodesOfTransportEnumeration__sightseeingFlight,	///< xs:NMTOKEN value="sightseeingFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE10,	///< xs:NMTOKEN value="pti8_10"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE10,	///< xs:NMTOKEN value="loc15_10"
	ns2__AirSubmodesOfTransportEnumeration__helicopterService,	///< xs:NMTOKEN value="helicopterService"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE11,	///< xs:NMTOKEN value="pti8_11"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE7,	///< xs:NMTOKEN value="loc15_7"
	ns2__AirSubmodesOfTransportEnumeration__domesticCharterFlight,	///< xs:NMTOKEN value="domesticCharterFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE12,	///< xs:NMTOKEN value="pti8_12"
	ns2__AirSubmodesOfTransportEnumeration__SchengenAreaFlight,	///< xs:NMTOKEN value="SchengenAreaFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE13,	///< xs:NMTOKEN value="pti8_13"
	ns2__AirSubmodesOfTransportEnumeration__airshipService,	///< xs:NMTOKEN value="airshipService"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE14,	///< xs:NMTOKEN value="pti8_14"
	ns2__AirSubmodesOfTransportEnumeration__allAirServices,	///< xs:NMTOKEN value="allAirServices"
	ns2__AirSubmodesOfTransportEnumeration__loc14_USCORE3,	///< xs:NMTOKEN value="loc14_3"
	ns2__AirSubmodesOfTransportEnumeration__shortHaulInternationalFlight,	///< xs:NMTOKEN value="shortHaulInternationalFlight"
	ns2__AirSubmodesOfTransportEnumeration__pti8_USCORE255,	///< xs:NMTOKEN value="pti8_255"
	ns2__AirSubmodesOfTransportEnumeration__loc15_USCORE255,	///< xs:NMTOKEN value="loc15_255"
	ns2__AirSubmodesOfTransportEnumeration__undefinedAircraftService,	///< xs:NMTOKEN value="undefinedAircraftService"
};

/// @brief A class wrapper.
///
class ns2__AirSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__AirSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":TelecabinSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Telecabin ModesOfTransport: TPEG pti_table_09, loc_table_14.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__TelecabinSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__TelecabinSubmodesOfTransportEnumeration
{
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE0,	///< xs:NMTOKEN value="pti9_0"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE0,	///< xs:NMTOKEN value="loc14_0"
	ns2__TelecabinSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE1,	///< xs:NMTOKEN value="pti9_1"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE1,	///< xs:NMTOKEN value="loc14_1"
	ns2__TelecabinSubmodesOfTransportEnumeration__telecabin,	///< xs:NMTOKEN value="telecabin"
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE2,	///< xs:NMTOKEN value="pti9_2"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE3,	///< xs:NMTOKEN value="loc14_3"
	ns2__TelecabinSubmodesOfTransportEnumeration__cableCar,	///< xs:NMTOKEN value="cableCar"
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE3,	///< xs:NMTOKEN value="pti9_3"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE4,	///< xs:NMTOKEN value="loc14_4"
	ns2__TelecabinSubmodesOfTransportEnumeration__lift,	///< xs:NMTOKEN value="lift"
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE4,	///< xs:NMTOKEN value="pti9_4"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE52,	///< xs:NMTOKEN value="loc14_52"
	ns2__TelecabinSubmodesOfTransportEnumeration__chairLift,	///< xs:NMTOKEN value="chairLift"
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE5,	///< xs:NMTOKEN value="pti9_5"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE6,	///< xs:NMTOKEN value="loc14_6"
	ns2__TelecabinSubmodesOfTransportEnumeration__dragLift,	///< xs:NMTOKEN value="dragLift"
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE6,	///< xs:NMTOKEN value="pti9_6"
	ns2__TelecabinSubmodesOfTransportEnumeration__smallTelecabin,	///< xs:NMTOKEN value="smallTelecabin"
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE7,	///< xs:NMTOKEN value="pti9_7"
	ns2__TelecabinSubmodesOfTransportEnumeration__allTelecabinServices,	///< xs:NMTOKEN value="allTelecabinServices"
	ns2__TelecabinSubmodesOfTransportEnumeration__pti9_USCORE255,	///< xs:NMTOKEN value="pti9_255"
	ns2__TelecabinSubmodesOfTransportEnumeration__undefined,	///< xs:NMTOKEN value="undefined"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE7,	///< xs:NMTOKEN value="loc14_7"
	ns2__TelecabinSubmodesOfTransportEnumeration__eggLift,	///< xs:NMTOKEN value="eggLift"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE8,	///< xs:NMTOKEN value="loc14_8"
	ns2__TelecabinSubmodesOfTransportEnumeration__mineralBuckets,	///< xs:NMTOKEN value="mineralBuckets"
	ns2__TelecabinSubmodesOfTransportEnumeration__loc14_USCORE255,	///< xs:NMTOKEN value="loc14_255"
	ns2__TelecabinSubmodesOfTransportEnumeration__telecabinLink,	///< xs:NMTOKEN value="telecabinLink"
};

/// @brief A class wrapper.
///
class ns2__TelecabinSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__TelecabinSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FunicularSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Funicular ModesOfTransport: TPEG pti_table_10.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__FunicularSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__FunicularSubmodesOfTransportEnumeration
{
	ns2__FunicularSubmodesOfTransportEnumeration__pti10_USCORE0,	///< xs:NMTOKEN value="pti10_0"
	ns2__FunicularSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__FunicularSubmodesOfTransportEnumeration__pti10_USCORE1,	///< xs:NMTOKEN value="pti10_1"
	ns2__FunicularSubmodesOfTransportEnumeration__loc14_USCORE2,	///< xs:NMTOKEN value="loc14_2"
	ns2__FunicularSubmodesOfTransportEnumeration__funicular,	///< xs:NMTOKEN value="funicular"
	ns2__FunicularSubmodesOfTransportEnumeration__pti10_USCORE2,	///< xs:NMTOKEN value="pti10_2"
	ns2__FunicularSubmodesOfTransportEnumeration__allFunicularServices,	///< xs:NMTOKEN value="allFunicularServices"
	ns2__FunicularSubmodesOfTransportEnumeration__pti10_USCORE255,	///< xs:NMTOKEN value="pti10_255"
	ns2__FunicularSubmodesOfTransportEnumeration__undefinedFunicular,	///< xs:NMTOKEN value="undefinedFunicular"
};

/// @brief A class wrapper.
///
class ns2__FunicularSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__FunicularSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":TaxiSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Taxi ModesOfTransport: TPEG pti_table_11.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__TaxiSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__TaxiSubmodesOfTransportEnumeration
{
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE0,	///< xs:NMTOKEN value="pti11_0"
	ns2__TaxiSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE1,	///< xs:NMTOKEN value="pti11_1"
	ns2__TaxiSubmodesOfTransportEnumeration__communalTaxi,	///< xs:NMTOKEN value="communalTaxi"
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE2,	///< xs:NMTOKEN value="pti11_2"
	ns2__TaxiSubmodesOfTransportEnumeration__waterTaxi,	///< xs:NMTOKEN value="waterTaxi"
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE3,	///< xs:NMTOKEN value="pti11_3"
	ns2__TaxiSubmodesOfTransportEnumeration__railTaxi,	///< xs:NMTOKEN value="railTaxi"
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE4,	///< xs:NMTOKEN value="pti11_4"
	ns2__TaxiSubmodesOfTransportEnumeration__bikeTaxi,	///< xs:NMTOKEN value="bikeTaxi"
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE5,	///< xs:NMTOKEN value="pti11_5"
	ns2__TaxiSubmodesOfTransportEnumeration__blackCab,	///< xs:NMTOKEN value="blackCab"
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE6,	///< xs:NMTOKEN value="pti11_6"
	ns2__TaxiSubmodesOfTransportEnumeration__miniCab,	///< xs:NMTOKEN value="miniCab"
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE7,	///< xs:NMTOKEN value="pti11_7"
	ns2__TaxiSubmodesOfTransportEnumeration__allTaxiServices,	///< xs:NMTOKEN value="allTaxiServices"
	ns2__TaxiSubmodesOfTransportEnumeration__pti11_USCORE255,	///< xs:NMTOKEN value="pti11_255"
	ns2__TaxiSubmodesOfTransportEnumeration__undefinedTaxiService,	///< xs:NMTOKEN value="undefinedTaxiService"
};

/// @brief A class wrapper.
///
class ns2__TaxiSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__TaxiSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":SelfDriveSubmodesOfTransportEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for SelfDrive ModesOfTransport: TPEG pti_table_12.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__SelfDriveSubmodesOfTransportEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__SelfDriveSubmodesOfTransportEnumeration
{
	ns2__SelfDriveSubmodesOfTransportEnumeration__pti12_USCORE0,	///< xs:NMTOKEN value="pti12_0"
	ns2__SelfDriveSubmodesOfTransportEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__SelfDriveSubmodesOfTransportEnumeration__pti12_USCORE1,	///< xs:NMTOKEN value="pti12_1"
	ns2__SelfDriveSubmodesOfTransportEnumeration__hireCar,	///< xs:NMTOKEN value="hireCar"
	ns2__SelfDriveSubmodesOfTransportEnumeration__pti12_USCORE2,	///< xs:NMTOKEN value="pti12_2"
	ns2__SelfDriveSubmodesOfTransportEnumeration__hireVan,	///< xs:NMTOKEN value="hireVan"
	ns2__SelfDriveSubmodesOfTransportEnumeration__pti12_USCORE3,	///< xs:NMTOKEN value="pti12_3"
	ns2__SelfDriveSubmodesOfTransportEnumeration__hireMotorbike,	///< xs:NMTOKEN value="hireMotorbike"
	ns2__SelfDriveSubmodesOfTransportEnumeration__pti12_USCORE4,	///< xs:NMTOKEN value="pti12_4"
	ns2__SelfDriveSubmodesOfTransportEnumeration__hireCycle,	///< xs:NMTOKEN value="hireCycle"
	ns2__SelfDriveSubmodesOfTransportEnumeration__pti12_USCORE5,	///< xs:NMTOKEN value="pti12_5"
	ns2__SelfDriveSubmodesOfTransportEnumeration__allHireVehicles,	///< xs:NMTOKEN value="allHireVehicles"
	ns2__SelfDriveSubmodesOfTransportEnumeration__pti12_USCORE255,	///< xs:NMTOKEN value="pti12_255"
	ns2__SelfDriveSubmodesOfTransportEnumeration__undefinedHireVehicle,	///< xs:NMTOKEN value="undefinedHireVehicle"
};

/// @brief A class wrapper.
///
class ns2__SelfDriveSubmodesOfTransportEnumeration_ : public xsd__anyType
{ public:
    enum ns2__SelfDriveSubmodesOfTransportEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ActionStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Progress Status.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ActionStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ActionStatusEnumeration
{
	ns2__ActionStatusEnumeration__open,	///< xs:NMTOKEN value="open"
	ns2__ActionStatusEnumeration__published,	///< xs:NMTOKEN value="published"
	ns2__ActionStatusEnumeration__closed,	///< xs:NMTOKEN value="closed"
};

/// @brief A class wrapper.
///
class ns2__ActionStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ActionStatusEnumeration    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AreaOfInterestEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Area Of Interest.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__AreaOfInterestEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__AreaOfInterestEnumeration
{
	ns2__AreaOfInterestEnumeration__continentWide,	///< xs:NMTOKEN value="continentWide"
	ns2__AreaOfInterestEnumeration__national,	///< xs:NMTOKEN value="national"
	ns2__AreaOfInterestEnumeration__neighboroughingCountries,	///< xs:NMTOKEN value="neighboroughingCountries"
	ns2__AreaOfInterestEnumeration__regional,	///< xs:NMTOKEN value="regional"
	ns2__AreaOfInterestEnumeration__notSpecified,	///< xs:NMTOKEN value="notSpecified"
};

/// @brief A class wrapper.
///
class ns2__AreaOfInterestEnumeration_ : public xsd__anyType
{ public:
    enum ns2__AreaOfInterestEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ZoneCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a ZONe.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__ZoneCodeType;

/// @brief A class wrapper.
///
class ns2__ZoneCodeType__ : public xsd__anyType
{ public:
    ns2__ZoneCodeType                    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ConnectionDirectionEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for DIRECTION of CONNECTION link or SERVCIE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ConnectionDirectionEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ConnectionDirectionEnumeration
{
	ns2__ConnectionDirectionEnumeration__to,	///< xs:NMTOKEN value="to"
	ns2__ConnectionDirectionEnumeration__from,	///< xs:NMTOKEN value="from"
	ns2__ConnectionDirectionEnumeration__both,	///< xs:NMTOKEN value="both"
};

/// @brief A class wrapper.
///
class ns2__ConnectionDirectionEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ConnectionDirectionEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":NetworkCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an OPERATOR Code.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__NetworkCodeType;

/// @brief A class wrapper.
///
class ns2__NetworkCodeType__ : public xsd__anyType
{ public:
    ns2__NetworkCodeType                 __item;                       
};

/// @brief "http://www.siri.org.uk/siri":OperationalUnitCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an OPERATOR Code.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__OperationalUnitCodeType;

/// @brief A class wrapper.
///
class ns2__OperationalUnitCodeType__ : public xsd__anyType
{ public:
    ns2__OperationalUnitCodeType         __item;                       
};

/// @brief "http://www.siri.org.uk/siri":SectionCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for ideifier of a Route section.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__SectionCodeType;

/// @brief A class wrapper.
///
class ns2__SectionCodeType__ : public xsd__anyType
{ public:
    ns2__SectionCodeType                 __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AdviceCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an advisory NOTICE
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__AdviceCodeType;

/// @brief A class wrapper.
///
class ns2__AdviceCodeType__ : public xsd__anyType
{ public:
    ns2__AdviceCodeType                  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ReportTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Report Type TPEG pti_table 27.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ReportTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ReportTypeEnumeration
{
	ns2__ReportTypeEnumeration__27_USCORE0,	///< xs:NMTOKEN value="27_0"
	ns2__ReportTypeEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__ReportTypeEnumeration__27_USCORE1,	///< xs:NMTOKEN value="27_1"
	ns2__ReportTypeEnumeration__incident,	///< xs:NMTOKEN value="incident"
	ns2__ReportTypeEnumeration__27_USCORE1_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="27_1_Alias_1"
	ns2__ReportTypeEnumeration__general,	///< xs:NMTOKEN value="general"
	ns2__ReportTypeEnumeration__2_USCORE27_USCORE1_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="2_27_1_Alias_2"
	ns2__ReportTypeEnumeration__operator_,	///< xs:NMTOKEN value="operator"
	ns2__ReportTypeEnumeration__2_USCORE27_USCORE1_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="2_27_1_Alias_3"
	ns2__ReportTypeEnumeration__network,	///< xs:NMTOKEN value="network"
	ns2__ReportTypeEnumeration__27_USCORE3,	///< xs:NMTOKEN value="27_3"
	ns2__ReportTypeEnumeration__route,	///< xs:NMTOKEN value="route"
	ns2__ReportTypeEnumeration__27_USCORE2,	///< xs:NMTOKEN value="27_2"
	ns2__ReportTypeEnumeration__stationTerminal,	///< xs:NMTOKEN value="stationTerminal"
	ns2__ReportTypeEnumeration__27_USCORE2_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="27_2_Alias_1"
	ns2__ReportTypeEnumeration__stopPoint,	///< xs:NMTOKEN value="stopPoint"
	ns2__ReportTypeEnumeration__27_USCORE2_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="27_2_Alias_2"
	ns2__ReportTypeEnumeration__connectionLink,	///< xs:NMTOKEN value="connectionLink"
	ns2__ReportTypeEnumeration__27_USCORE2_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="27_2_Alias_3"
	ns2__ReportTypeEnumeration__point,	///< xs:NMTOKEN value="point"
	ns2__ReportTypeEnumeration__27_USCORE4,	///< xs:NMTOKEN value="27_4"
	ns2__ReportTypeEnumeration__individualService,	///< xs:NMTOKEN value="individualService"
	ns2__ReportTypeEnumeration__27_USCORE255,	///< xs:NMTOKEN value="27_255"
	ns2__ReportTypeEnumeration__undefined,	///< xs:NMTOKEN value="undefined"
};

/// @brief A class wrapper.
///
class ns2__ReportTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ReportTypeEnumeration      __item;                       
};

/// @brief "http://www.siri.org.uk/siri":InterchangeStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Interchange Status TPEG cross reference pti_table 31.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__InterchangeStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__InterchangeStatusEnumeration
{
	ns2__InterchangeStatusEnumeration__pti31_USCORE0,	///< xs:NMTOKEN value="pti31_0"
	ns2__InterchangeStatusEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__InterchangeStatusEnumeration__pti31_USCORE1,	///< xs:NMTOKEN value="pti31_1"
	ns2__InterchangeStatusEnumeration__connection,	///< xs:NMTOKEN value="connection"
	ns2__InterchangeStatusEnumeration__pti31_USCORE2,	///< xs:NMTOKEN value="pti31_2"
	ns2__InterchangeStatusEnumeration__replacement,	///< xs:NMTOKEN value="replacement"
	ns2__InterchangeStatusEnumeration__pti31_USCORE3,	///< xs:NMTOKEN value="pti31_3"
	ns2__InterchangeStatusEnumeration__alternative,	///< xs:NMTOKEN value="alternative"
	ns2__InterchangeStatusEnumeration__pti31_USCORE4,	///< xs:NMTOKEN value="pti31_4"
	ns2__InterchangeStatusEnumeration__connectionNotHeld,	///< xs:NMTOKEN value="connectionNotHeld"
	ns2__InterchangeStatusEnumeration__pti31_USCORE5,	///< xs:NMTOKEN value="pti31_5"
	ns2__InterchangeStatusEnumeration__connectionHeld,	///< xs:NMTOKEN value="connectionHeld"
	ns2__InterchangeStatusEnumeration__pti31_USCORE6,	///< xs:NMTOKEN value="pti31_6"
	ns2__InterchangeStatusEnumeration__statusOfConenctionUndecided,	///< xs:NMTOKEN value="statusOfConenctionUndecided"
	ns2__InterchangeStatusEnumeration__pti31_USCORE255,	///< xs:NMTOKEN value="pti31_255"
	ns2__InterchangeStatusEnumeration__undefinedCrossReferenceInformation,	///< xs:NMTOKEN value="undefinedCrossReferenceInformation"
};

/// @brief A class wrapper.
///
class ns2__InterchangeStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns2__InterchangeStatusEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":TicketRestrictionEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for TicketRestrictionTypeTPEG pti_table 25.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__TicketRestrictionEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__TicketRestrictionEnumeration
{
	ns2__TicketRestrictionEnumeration__pti25_USCORE0,	///< xs:NMTOKEN value="pti25_0"
	ns2__TicketRestrictionEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__TicketRestrictionEnumeration__pti25_USCORE1,	///< xs:NMTOKEN value="pti25_1"
	ns2__TicketRestrictionEnumeration__allTicketClassesValid,	///< xs:NMTOKEN value="allTicketClassesValid"
	ns2__TicketRestrictionEnumeration__pti25_USCORE2,	///< xs:NMTOKEN value="pti25_2"
	ns2__TicketRestrictionEnumeration__fullFareOnly,	///< xs:NMTOKEN value="fullFareOnly"
	ns2__TicketRestrictionEnumeration__pti25_USCORE3,	///< xs:NMTOKEN value="pti25_3"
	ns2__TicketRestrictionEnumeration__certainTicketsOnly,	///< xs:NMTOKEN value="certainTicketsOnly"
	ns2__TicketRestrictionEnumeration__pti25_USCORE4,	///< xs:NMTOKEN value="pti25_4"
	ns2__TicketRestrictionEnumeration__ticketWithReservation,	///< xs:NMTOKEN value="ticketWithReservation"
	ns2__TicketRestrictionEnumeration__pti25_USCORE5,	///< xs:NMTOKEN value="pti25_5"
	ns2__TicketRestrictionEnumeration__specialFare,	///< xs:NMTOKEN value="specialFare"
	ns2__TicketRestrictionEnumeration__pti25_USCORE6,	///< xs:NMTOKEN value="pti25_6"
	ns2__TicketRestrictionEnumeration__onlyTicketsOfSpecifiedOperator,	///< xs:NMTOKEN value="onlyTicketsOfSpecifiedOperator"
	ns2__TicketRestrictionEnumeration__pti25_USCORE7,	///< xs:NMTOKEN value="pti25_7"
	ns2__TicketRestrictionEnumeration__noRestrictions,	///< xs:NMTOKEN value="noRestrictions"
	ns2__TicketRestrictionEnumeration__pti25_USCORE8,	///< xs:NMTOKEN value="pti25_8"
	ns2__TicketRestrictionEnumeration__noOffPeakTickets,	///< xs:NMTOKEN value="noOffPeakTickets"
	ns2__TicketRestrictionEnumeration__pti25_USCORE9,	///< xs:NMTOKEN value="pti25_9"
	ns2__TicketRestrictionEnumeration__noWeekendReturnTickets,	///< xs:NMTOKEN value="noWeekendReturnTickets"
	ns2__TicketRestrictionEnumeration__pti25_USCORE10,	///< xs:NMTOKEN value="pti25_10"
	ns2__TicketRestrictionEnumeration__noReducedFareTickets,	///< xs:NMTOKEN value="noReducedFareTickets"
	ns2__TicketRestrictionEnumeration__pti25_USCORE255,	///< xs:NMTOKEN value="pti25_255"
	ns2__TicketRestrictionEnumeration__unknownTicketRestriction,	///< xs:NMTOKEN value="unknownTicketRestriction"
};

/// @brief A class wrapper.
///
class ns2__TicketRestrictionEnumeration_ : public xsd__anyType
{ public:
    enum ns2__TicketRestrictionEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":BookingStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for TBookingStatus TPEG pti_table 24.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__BookingStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__BookingStatusEnumeration
{
	ns2__BookingStatusEnumeration__pti24_USCORE0,	///< xs:NMTOKEN value="pti24_0"
	ns2__BookingStatusEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__BookingStatusEnumeration__pti17_USCORE1,	///< xs:NMTOKEN value="pti17_1"
	ns2__BookingStatusEnumeration__available,	///< xs:NMTOKEN value="available"
	ns2__BookingStatusEnumeration__pti24_USCORE2,	///< xs:NMTOKEN value="pti24_2"
	ns2__BookingStatusEnumeration__limited,	///< xs:NMTOKEN value="limited"
	ns2__BookingStatusEnumeration__pti24_USCORE3,	///< xs:NMTOKEN value="pti24_3"
	ns2__BookingStatusEnumeration__veryLimited,	///< xs:NMTOKEN value="veryLimited"
	ns2__BookingStatusEnumeration__pti24_USCORE4,	///< xs:NMTOKEN value="pti24_4"
	ns2__BookingStatusEnumeration__full,	///< xs:NMTOKEN value="full"
	ns2__BookingStatusEnumeration__pti24_USCORE5,	///< xs:NMTOKEN value="pti24_5"
	ns2__BookingStatusEnumeration__waitingList,	///< xs:NMTOKEN value="waitingList"
	ns2__BookingStatusEnumeration__pti24_USCORE6,	///< xs:NMTOKEN value="pti24_6"
	ns2__BookingStatusEnumeration__noBookingRequired,	///< xs:NMTOKEN value="noBookingRequired"
	ns2__BookingStatusEnumeration__pti24_USCORE7,	///< xs:NMTOKEN value="pti24_7"
	ns2__BookingStatusEnumeration__bookingRequired,	///< xs:NMTOKEN value="bookingRequired"
	ns2__BookingStatusEnumeration__pti24_USCORE8,	///< xs:NMTOKEN value="pti24_8"
	ns2__BookingStatusEnumeration__bookingOptional,	///< xs:NMTOKEN value="bookingOptional"
	ns2__BookingStatusEnumeration__pti24_USCORE255,	///< xs:NMTOKEN value="pti24_255"
	ns2__BookingStatusEnumeration__undefinedBookingInformation,	///< xs:NMTOKEN value="undefinedBookingInformation"
};

/// @brief A class wrapper.
///
class ns2__BookingStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns2__BookingStatusEnumeration   __item;                       
};

/// @brief "http://www.siri.org.uk/siri":StopPointTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for TBookingStatus TPEG pti_table17.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__StopPointTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__StopPointTypeEnumeration
{
	ns2__StopPointTypeEnumeration__pti17_USCORE0,	///< xs:NMTOKEN value="pti17_0"
	ns2__StopPointTypeEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__StopPointTypeEnumeration__pti17_USCORE1,	///< xs:NMTOKEN value="pti17_1"
	ns2__StopPointTypeEnumeration__platformNumber,	///< xs:NMTOKEN value="platformNumber"
	ns2__StopPointTypeEnumeration__pti17_USCORE2,	///< xs:NMTOKEN value="pti17_2"
	ns2__StopPointTypeEnumeration__terminalGate,	///< xs:NMTOKEN value="terminalGate"
	ns2__StopPointTypeEnumeration__pti17_USCORE3,	///< xs:NMTOKEN value="pti17_3"
	ns2__StopPointTypeEnumeration__ferryBerth,	///< xs:NMTOKEN value="ferryBerth"
	ns2__StopPointTypeEnumeration__pti17_USCORE4,	///< xs:NMTOKEN value="pti17_4"
	ns2__StopPointTypeEnumeration__harbourPier,	///< xs:NMTOKEN value="harbourPier"
	ns2__StopPointTypeEnumeration__pti17_USCORE5,	///< xs:NMTOKEN value="pti17_5"
	ns2__StopPointTypeEnumeration__landingStage,	///< xs:NMTOKEN value="landingStage"
	ns2__StopPointTypeEnumeration__pti17_USCORE6,	///< xs:NMTOKEN value="pti17_6"
	ns2__StopPointTypeEnumeration__busStop,	///< xs:NMTOKEN value="busStop"
	ns2__StopPointTypeEnumeration__pti17_USCORE255,	///< xs:NMTOKEN value="pti17_255"
	ns2__StopPointTypeEnumeration__undefinedBookingInformation,	///< xs:NMTOKEN value="undefinedBookingInformation"
};

/// @brief A class wrapper.
///
class ns2__StopPointTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__StopPointTypeEnumeration   __item;                       
};

/// @brief "http://www.siri.org.uk/siri":RoutePointTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   route_point_type TPEG pti_table15.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__RoutePointTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__RoutePointTypeEnumeration
{
	ns2__RoutePointTypeEnumeration__pti15_USCORE0,	///< xs:NMTOKEN value="pti15_0"
	ns2__RoutePointTypeEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__RoutePointTypeEnumeration__pti15_USCORE1,	///< xs:NMTOKEN value="pti15_1"
	ns2__RoutePointTypeEnumeration__startPoint,	///< xs:NMTOKEN value="startPoint"
	ns2__RoutePointTypeEnumeration__pti15_USCORE2,	///< xs:NMTOKEN value="pti15_2"
	ns2__RoutePointTypeEnumeration__destination,	///< xs:NMTOKEN value="destination"
	ns2__RoutePointTypeEnumeration__pti15_USCORE3,	///< xs:NMTOKEN value="pti15_3"
	ns2__RoutePointTypeEnumeration__stop,	///< xs:NMTOKEN value="stop"
	ns2__RoutePointTypeEnumeration__pti15_USCORE4,	///< xs:NMTOKEN value="pti15_4"
	ns2__RoutePointTypeEnumeration__via,	///< xs:NMTOKEN value="via"
	ns2__RoutePointTypeEnumeration__pti15_USCORE5,	///< xs:NMTOKEN value="pti15_5"
	ns2__RoutePointTypeEnumeration__notStopping,	///< xs:NMTOKEN value="notStopping"
	ns2__RoutePointTypeEnumeration__pti15_USCORE6,	///< xs:NMTOKEN value="pti15_6"
	ns2__RoutePointTypeEnumeration__temporaryStop,	///< xs:NMTOKEN value="temporaryStop"
	ns2__RoutePointTypeEnumeration__pti15_USCORE7,	///< xs:NMTOKEN value="pti15_7"
	ns2__RoutePointTypeEnumeration__temporarilyNotStopping,	///< xs:NMTOKEN value="temporarilyNotStopping"
	ns2__RoutePointTypeEnumeration__pti15_USCORE8,	///< xs:NMTOKEN value="pti15_8"
	ns2__RoutePointTypeEnumeration__exceptionalStop,	///< xs:NMTOKEN value="exceptionalStop"
	ns2__RoutePointTypeEnumeration__pti15_USCORE9,	///< xs:NMTOKEN value="pti15_9"
	ns2__RoutePointTypeEnumeration__additionalStop,	///< xs:NMTOKEN value="additionalStop"
	ns2__RoutePointTypeEnumeration__pti15_USCORE10,	///< xs:NMTOKEN value="pti15_10"
	ns2__RoutePointTypeEnumeration__requestStop,	///< xs:NMTOKEN value="requestStop"
	ns2__RoutePointTypeEnumeration__pti15_USCORE11,	///< xs:NMTOKEN value="pti15_11"
	ns2__RoutePointTypeEnumeration__frontTrainDestination,	///< xs:NMTOKEN value="frontTrainDestination"
	ns2__RoutePointTypeEnumeration__pti15_USCORE12,	///< xs:NMTOKEN value="pti15_12"
	ns2__RoutePointTypeEnumeration__rearTrainDestination,	///< xs:NMTOKEN value="rearTrainDestination"
	ns2__RoutePointTypeEnumeration__pti15_USCORE13,	///< xs:NMTOKEN value="pti15_13"
	ns2__RoutePointTypeEnumeration__throughServiceDestination,	///< xs:NMTOKEN value="throughServiceDestination"
	ns2__RoutePointTypeEnumeration__pti15_USCORE14,	///< xs:NMTOKEN value="pti15_14"
	ns2__RoutePointTypeEnumeration__notVia,	///< xs:NMTOKEN value="notVia"
	ns2__RoutePointTypeEnumeration__pti15_USCORE15,	///< xs:NMTOKEN value="pti15_15"
	ns2__RoutePointTypeEnumeration__alteredStartPoint,	///< xs:NMTOKEN value="alteredStartPoint"
	ns2__RoutePointTypeEnumeration__pti15_USCORE16,	///< xs:NMTOKEN value="pti15_16"
	ns2__RoutePointTypeEnumeration__alteredDestination,	///< xs:NMTOKEN value="alteredDestination"
	ns2__RoutePointTypeEnumeration__pti15_USCORE255,	///< xs:NMTOKEN value="pti15_255"
	ns2__RoutePointTypeEnumeration__undefinedRoutePoint,	///< xs:NMTOKEN value="undefinedRoutePoint"
};

/// @brief A class wrapper.
///
class ns2__RoutePointTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__RoutePointTypeEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":TimetableTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for timetable type TPEG pti_table 33.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__TimetableTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__TimetableTypeEnumeration
{
	ns2__TimetableTypeEnumeration__pti33_USCORE0,	///< xs:NMTOKEN value="pti33_0"
	ns2__TimetableTypeEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__TimetableTypeEnumeration__pti33_USCORE1,	///< xs:NMTOKEN value="pti33_1"
	ns2__TimetableTypeEnumeration__winter,	///< xs:NMTOKEN value="winter"
	ns2__TimetableTypeEnumeration__pti33_USCORE2,	///< xs:NMTOKEN value="pti33_2"
	ns2__TimetableTypeEnumeration__spring,	///< xs:NMTOKEN value="spring"
	ns2__TimetableTypeEnumeration__pti33_USCORE3,	///< xs:NMTOKEN value="pti33_3"
	ns2__TimetableTypeEnumeration__summer,	///< xs:NMTOKEN value="summer"
	ns2__TimetableTypeEnumeration__pti33_USCORE4,	///< xs:NMTOKEN value="pti33_4"
	ns2__TimetableTypeEnumeration__autumn,	///< xs:NMTOKEN value="autumn"
	ns2__TimetableTypeEnumeration__pti33_USCORE5,	///< xs:NMTOKEN value="pti33_5"
	ns2__TimetableTypeEnumeration__special,	///< xs:NMTOKEN value="special"
	ns2__TimetableTypeEnumeration__pti33_USCORE6,	///< xs:NMTOKEN value="pti33_6"
	ns2__TimetableTypeEnumeration__emergency,	///< xs:NMTOKEN value="emergency"
	ns2__TimetableTypeEnumeration__pti33_USCORE255,	///< xs:NMTOKEN value="pti33_255"
	ns2__TimetableTypeEnumeration__undefinedTimetableType,	///< xs:NMTOKEN value="undefinedTimetableType"
};

/// @brief A class wrapper.
///
class ns2__TimetableTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__TimetableTypeEnumeration   __item;                       
};

/// @brief "http://www.siri.org.uk/siri":SeverityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Severity. Correspond to TPEG Pti26 Severity values.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__SeverityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__SeverityEnumeration
{
	ns2__SeverityEnumeration__pti26_USCORE0,	///< xs:NMTOKEN value="pti26_0"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti26_0: unknown.
/// </BLOCKQUOTE></PRE>
	ns2__SeverityEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__SeverityEnumeration__pti26_USCORE1,	///< xs:NMTOKEN value="pti26_1"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti26_1: very slight.
/// </BLOCKQUOTE></PRE>
	ns2__SeverityEnumeration__verySlight,	///< xs:NMTOKEN value="verySlight"
	ns2__SeverityEnumeration__pti26_USCORE2,	///< xs:NMTOKEN value="pti26_2"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti26_2: slight.
/// </BLOCKQUOTE></PRE>
	ns2__SeverityEnumeration__slight,	///< xs:NMTOKEN value="slight"
	ns2__SeverityEnumeration__pti26_USCORE3,	///< xs:NMTOKEN value="pti26_3"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti26_3: normal.
/// </BLOCKQUOTE></PRE>
	ns2__SeverityEnumeration__normal,	///< xs:NMTOKEN value="normal"
	ns2__SeverityEnumeration__pti26_USCORE4,	///< xs:NMTOKEN value="pti26_4"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti26_4: severe.
/// </BLOCKQUOTE></PRE>
	ns2__SeverityEnumeration__severe,	///< xs:NMTOKEN value="severe"
	ns2__SeverityEnumeration__pti26_USCORE5,	///< xs:NMTOKEN value="pti26_5"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti26_5: verySevere.
/// </BLOCKQUOTE></PRE>
	ns2__SeverityEnumeration__verySevere,	///< xs:NMTOKEN value="verySevere"
	ns2__SeverityEnumeration__pti26_USCORE6,	///< xs:NMTOKEN value="pti26_6"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti26_6: noImpact.
/// </BLOCKQUOTE></PRE>
	ns2__SeverityEnumeration__noImpact,	///< xs:NMTOKEN value="noImpact"
	ns2__SeverityEnumeration__pti26_USCORE255,	///< xs:NMTOKEN value="pti26_255"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti26_255: undefined.
/// </BLOCKQUOTE></PRE>
	ns2__SeverityEnumeration__undefined,	///< xs:NMTOKEN value="undefined"
};

/// @brief A class wrapper.
///
class ns2__SeverityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__SeverityEnumeration        __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ServiceConditionEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Service Condition. Corresponds to TPEG Pti13 Service Condition values.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ServiceConditionEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ServiceConditionEnumeration
{
	ns2__ServiceConditionEnumeration__pti13_USCORE0,	///< xs:NMTOKEN value="pti13_0"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_unknown.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__ServiceConditionEnumeration__pti13_USCORE1,	///< xs:NMTOKEN value="pti13_1"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_altered.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__altered,	///< xs:NMTOKEN value="altered"
	ns2__ServiceConditionEnumeration__pti13_USCORE2,	///< xs:NMTOKEN value="pti13_2"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_cancelled.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__cancelled,	///< xs:NMTOKEN value="cancelled"
	ns2__ServiceConditionEnumeration__pti13_USCORE3,	///< xs:NMTOKEN value="pti13_3"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_delayed.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__delayed,	///< xs:NMTOKEN value="delayed"
	ns2__ServiceConditionEnumeration__pti13_USCORE4,	///< xs:NMTOKEN value="pti13_4"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_diverted.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__diverted,	///< xs:NMTOKEN value="diverted"
	ns2__ServiceConditionEnumeration__pti13_USCORE5,	///< xs:NMTOKEN value="pti13_5"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_no service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__noService,	///< xs:NMTOKEN value="noService"
	ns2__ServiceConditionEnumeration__pti13_USCORE6,	///< xs:NMTOKEN value="pti13_6"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_disrupted.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__disrupted,	///< xs:NMTOKEN value="disrupted"
	ns2__ServiceConditionEnumeration__pti13_USCORE7,	///< xs:NMTOKEN value="pti13_7"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_additional service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__additionalService,	///< xs:NMTOKEN value="additionalService"
	ns2__ServiceConditionEnumeration__pti13_USCORE8,	///< xs:NMTOKEN value="pti13_8"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_special service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__specialService,	///< xs:NMTOKEN value="specialService"
	ns2__ServiceConditionEnumeration__pti13_USCORE9,	///< xs:NMTOKEN value="pti13_9"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_on time.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__onTime,	///< xs:NMTOKEN value="onTime"
	ns2__ServiceConditionEnumeration__pti13_USCORE10,	///< xs:NMTOKEN value="pti13_10"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_normal service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__normalService,	///< xs:NMTOKEN value="normalService"
	ns2__ServiceConditionEnumeration__pti13_USCORE11,	///< xs:NMTOKEN value="pti13_11"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_intermittent service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__intermittentService,	///< xs:NMTOKEN value="intermittentService"
	ns2__ServiceConditionEnumeration__pti13_USCORE12,	///< xs:NMTOKEN value="pti13_12"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_short formed service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__shortFormedService,	///< xs:NMTOKEN value="shortFormedService"
	ns2__ServiceConditionEnumeration__pti13_USCORE13,	///< xs:NMTOKEN value="pti13_13"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_full length service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__fullLengthService,	///< xs:NMTOKEN value="fullLengthService"
	ns2__ServiceConditionEnumeration__pti13_USCORE14,	///< xs:NMTOKEN value="pti13_14"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_extended service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__extendedService,	///< xs:NMTOKEN value="extendedService"
	ns2__ServiceConditionEnumeration__pti13_USCORE15,	///< xs:NMTOKEN value="pti13_15"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_splitting train.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__splittingTrain,	///< xs:NMTOKEN value="splittingTrain"
	ns2__ServiceConditionEnumeration__pti13_USCORE16,	///< xs:NMTOKEN value="pti13_16"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_replacement transport.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__replacementTransport,	///< xs:NMTOKEN value="replacementTransport"
	ns2__ServiceConditionEnumeration__pti13_USCORE17,	///< xs:NMTOKEN value="pti13_17"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_arrives early.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__arrivesEarly,	///< xs:NMTOKEN value="arrivesEarly"
	ns2__ServiceConditionEnumeration__pti13_USCORE18,	///< xs:NMTOKEN value="pti13_18"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_shuttle service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__shuttleService,	///< xs:NMTOKEN value="shuttleService"
	ns2__ServiceConditionEnumeration__pti13_USCORE19,	///< xs:NMTOKEN value="pti13_19"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_replacement service.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__replacementService,	///< xs:NMTOKEN value="replacementService"
	ns2__ServiceConditionEnumeration__pti13_USCORE255,	///< xs:NMTOKEN value="pti13_255"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti13_Undefined service information.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceConditionEnumeration__undefinedServiceInformation,	///< xs:NMTOKEN value="undefinedServiceInformation"
};

/// @brief A class wrapper.
///
class ns2__ServiceConditionEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ServiceConditionEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VerificationStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Verification Status Corresponds to TPEG pti_table 32.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__VerificationStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__VerificationStatusEnumeration
{
	ns2__VerificationStatusEnumeration__pti32_USCORE0,	///< xs:NMTOKEN value="pti32_0"
	ns2__VerificationStatusEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__VerificationStatusEnumeration__pti32_USCORE1,	///< xs:NMTOKEN value="pti32_1"
	ns2__VerificationStatusEnumeration__unverified,	///< xs:NMTOKEN value="unverified"
	ns2__VerificationStatusEnumeration__pti32_USCORE255,	///< xs:NMTOKEN value="pti32_255"
	ns2__VerificationStatusEnumeration__verified,	///< xs:NMTOKEN value="verified"
	ns2__VerificationStatusEnumeration__verifiedAsDuplicate,	///< xs:NMTOKEN value="verifiedAsDuplicate"
};

/// @brief A class wrapper.
///
class ns2__VerificationStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns2__VerificationStatusEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PredictabilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Predictability Status.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__PredictabilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__PredictabilityEnumeration
{
	ns2__PredictabilityEnumeration__planned,	///< xs:NMTOKEN value="planned"
	ns2__PredictabilityEnumeration__unplanned,	///< xs:NMTOKEN value="unplanned"
	ns2__PredictabilityEnumeration__all,	///< xs:NMTOKEN value="all"
};

/// @brief A class wrapper.
///
class ns2__PredictabilityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__PredictabilityEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":MiscellaneousReasonEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Miscellaneous incident reason types TPEG Pti18_1/TPEG Pti_19.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__MiscellaneousReasonEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__MiscellaneousReasonEnumeration
{
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE0,	///< xs:NMTOKEN value="pti19_0"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_0 unknown.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE1,	///< xs:NMTOKEN value="pti19_1"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__incident,	///< xs:NMTOKEN value="incident"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE1_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_1_Alias_1"
/// <PRE><BLOCKQUOTE>
///   Near Miss - alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__nearMiss,	///< xs:NMTOKEN value="nearMiss"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE1_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti19_1_Alias_2"
/// <PRE><BLOCKQUOTE>
///   Near Miss - alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__safetyViolation,	///< xs:NMTOKEN value="safetyViolation"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE1_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti19_1_Alias_3"
/// <PRE><BLOCKQUOTE>
///   Signal passed at danger - alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__signalPassedAtDanger,	///< xs:NMTOKEN value="signalPassedAtDanger"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE1_USCOREAlias_USCORE4,	///< xs:NMTOKEN value="pti19_1_Alias_4"
/// <PRE><BLOCKQUOTE>
///   Station overrun - alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__stationOverrun,	///< xs:NMTOKEN value="stationOverrun"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE1_USCOREAlias_USCORE5,	///< xs:NMTOKEN value="pti19_1_Alias_5"
/// <PRE><BLOCKQUOTE>
///   trainDoor- alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__trainDoor,	///< xs:NMTOKEN value="trainDoor"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE1_USCOREAlias_USCORE6,	///< xs:NMTOKEN value="pti19_1_Alias_6"
/// <PRE><BLOCKQUOTE>
///   Unspecified emergency service visit. Alias to pti19
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__emergencyServicesCall,	///< xs:NMTOKEN value="emergencyServicesCall"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE2,	///< xs:NMTOKEN value="pti19_2"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_2 bomb explosion.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__bombExplosion,	///< xs:NMTOKEN value="bombExplosion"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3,	///< xs:NMTOKEN value="pti19_3"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__securityAlert,	///< xs:NMTOKEN value="securityAlert"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_3_Alias_1"
/// <PRE><BLOCKQUOTE>
///   request of the police Alias to TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__policeRequest,	///< xs:NMTOKEN value="policeRequest"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti19_3_Alias_2"
/// <PRE><BLOCKQUOTE>
///   fire brigade safety checksAlias to TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__fireBrigadeSafetyChecks,	///< xs:NMTOKEN value="fireBrigadeSafetyChecks"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti19_3_Alias_3"
/// <PRE><BLOCKQUOTE>
///   an unattended bag TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__unattendedBag,	///< xs:NMTOKEN value="unattendedBag"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE4,	///< xs:NMTOKEN value="pti19_3_Alias_4"
/// <PRE><BLOCKQUOTE>
///   telephoned threat TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__telephonedThreat,	///< xs:NMTOKEN value="telephonedThreat"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE5,	///< xs:NMTOKEN value="pti19_3_Alias_5"
/// <PRE><BLOCKQUOTE>
///   telephoned threat TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__suspectVehicle,	///< xs:NMTOKEN value="suspectVehicle"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE6,	///< xs:NMTOKEN value="pti19_3_Alias_6"
	ns2__MiscellaneousReasonEnumeration__civilEmergency,	///< xs:NMTOKEN value="civilEmergency"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE7,	///< xs:NMTOKEN value="pti19_3_Alias_7"
	ns2__MiscellaneousReasonEnumeration__airRaid,	///< xs:NMTOKEN value="airRaid"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE8,	///< xs:NMTOKEN value="pti19_3_Alias_8"
	ns2__MiscellaneousReasonEnumeration__sabotage,	///< xs:NMTOKEN value="sabotage"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE9,	///< xs:NMTOKEN value="pti19_3_Alias_9"
	ns2__MiscellaneousReasonEnumeration__bombAlert,	///< xs:NMTOKEN value="bombAlert"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE10,	///< xs:NMTOKEN value="pti19_3_Alias_10"
	ns2__MiscellaneousReasonEnumeration__attach,	///< xs:NMTOKEN value="attach"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE11,	///< xs:NMTOKEN value="pti19_3_Alias_11"
	ns2__MiscellaneousReasonEnumeration__evacuation,	///< xs:NMTOKEN value="evacuation"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE12,	///< xs:NMTOKEN value="pti19_3_Alias_12"
	ns2__MiscellaneousReasonEnumeration__terroristIncident,	///< xs:NMTOKEN value="terroristIncident"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE13,	///< xs:NMTOKEN value="pti19_3_Alias_13"
	ns2__MiscellaneousReasonEnumeration__gunfireOnRoadway,	///< xs:NMTOKEN value="gunfireOnRoadway"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE14,	///< xs:NMTOKEN value="pti19_3_Alias_14"
	ns2__MiscellaneousReasonEnumeration__explosion,	///< xs:NMTOKEN value="explosion"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE15,	///< xs:NMTOKEN value="pti19_3_Alias_15"
	ns2__MiscellaneousReasonEnumeration__explosionHazard,	///< xs:NMTOKEN value="explosionHazard"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE3_USCOREAlias_USCORE16,	///< xs:NMTOKEN value="pti19_3_Alias_16"
	ns2__MiscellaneousReasonEnumeration__securityIncident,	///< xs:NMTOKEN value="securityIncident"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE4,	///< xs:NMTOKEN value="pti19_4"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_4 fire.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__fire,	///< xs:NMTOKEN value="fire"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE4_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_4_Alias_1"
/// <PRE><BLOCKQUOTE>
///   linesideFire alias to TPEG Pti_19_4 fire.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__linesideFire,	///< xs:NMTOKEN value="linesideFire"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE5,	///< xs:NMTOKEN value="pti19_5"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_5 vandalism.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__vandalism,	///< xs:NMTOKEN value="vandalism"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE5_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_5_Alias_1"
/// <PRE><BLOCKQUOTE>
///   passengerActionAlias to pti19
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__passengerAction,	///< xs:NMTOKEN value="passengerAction"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE5_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti19_5_Alias_2"
/// <PRE><BLOCKQUOTE>
///   Assault on stafft.Alias to pti19
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__staffAssault,	///< xs:NMTOKEN value="staffAssault"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE5_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti19_5_Alias_3"
/// <PRE><BLOCKQUOTE>
///   Railway Crime Alias to pti19
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__railwayCrime,	///< xs:NMTOKEN value="railwayCrime"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE6,	///< xs:NMTOKEN value="pti19_6"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__accident,	///< xs:NMTOKEN value="accident"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE6_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_6_Alias_1"
/// <PRE><BLOCKQUOTE>
///   fatality alias to TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__fatality,	///< xs:NMTOKEN value="fatality"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE6_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti19_6_Alias_2"
/// <PRE><BLOCKQUOTE>
///   a person under a train - alias to TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__personUnderTrain,	///< xs:NMTOKEN value="personUnderTrain"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE6_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti19_6_Alias_3"
/// <PRE><BLOCKQUOTE>
///   a person hit by a train - alias to TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__personHitByTrain,	///< xs:NMTOKEN value="personHitByTrain"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE6_USCOREAlias_USCORE4,	///< xs:NMTOKEN value="pti19_6_Alias_4"
/// <PRE><BLOCKQUOTE>
///   person ill On Vehicle -Alias to pti19_6
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__personIllOnVehicle,	///< xs:NMTOKEN value="personIllOnVehicle"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE6_USCOREAlias_USCORE5,	///< xs:NMTOKEN value="pti19_6_Alias_5"
/// <PRE><BLOCKQUOTE>
///   emergencyServices - alias to TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__emergencyServices,	///< xs:NMTOKEN value="emergencyServices"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE6_USCOREAlias_USCORE6,	///< xs:NMTOKEN value="pti19_6_Alias_6"
/// <PRE><BLOCKQUOTE>
///   Collision - Alias to pti19_6
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__collision,	///< xs:NMTOKEN value="collision"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE7,	///< xs:NMTOKEN value="pti19_7"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_7 overcrowded.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__overcrowded,	///< xs:NMTOKEN value="overcrowded"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE8,	///< xs:NMTOKEN value="pti19_8"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_8 insufficient demand.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__insufficientDemand,	///< xs:NMTOKEN value="insufficientDemand"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE9,	///< xs:NMTOKEN value="pti19_9"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_9 lighting failure.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__lightingFailure,	///< xs:NMTOKEN value="lightingFailure"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE10,	///< xs:NMTOKEN value="pti19_10"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_10 leader board failure.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__leaderBoardFailure,	///< xs:NMTOKEN value="leaderBoardFailure"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE11,	///< xs:NMTOKEN value="pti19_11"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_11 service indicator failure.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__serviceIndicatorFailure,	///< xs:NMTOKEN value="serviceIndicatorFailure"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE12,	///< xs:NMTOKEN value="pti19_12"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_12 service failure.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__serviceFailure,	///< xs:NMTOKEN value="serviceFailure"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE13,	///< xs:NMTOKEN value="pti19_13"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_13 OPERATOR ceased trading.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__operatorCeasedTrading,	///< xs:NMTOKEN value="operatorCeasedTrading"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE14,	///< xs:NMTOKEN value="pti19_14"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_14 OPERATOR suspended.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__operatorSuspended,	///< xs:NMTOKEN value="operatorSuspended"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE15,	///< xs:NMTOKEN value="pti19_15"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_15 congestion.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__congestion,	///< xs:NMTOKEN value="congestion"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE16,	///< xs:NMTOKEN value="pti19_16"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_16 route blockage.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__routeBlockage,	///< xs:NMTOKEN value="routeBlockage"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE17,	///< xs:NMTOKEN value="pti19_17"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_17 person on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__personOnTheLine,	///< xs:NMTOKEN value="personOnTheLine"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE18,	///< xs:NMTOKEN value="pti19_18"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_18 VEHICLE on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__vehicleOnTheLine,	///< xs:NMTOKEN value="vehicleOnTheLine"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE18_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_18_Alias_1"
/// <PRE><BLOCKQUOTE>
///   Level Crossing Incident - alias to TPEG Pti_19_18 VEHICLE on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__levelCrossingIncident,	///< xs:NMTOKEN value="levelCrossingIncident"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE19,	///< xs:NMTOKEN value="pti19_19"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__objectOnTheLine,	///< xs:NMTOKEN value="objectOnTheLine"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE19_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_19_Alias_1"
/// <PRE><BLOCKQUOTE>
///   fallen tree on line- alias to TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__fallenTreeOnTheLine,	///< xs:NMTOKEN value="fallenTreeOnTheLine"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE19_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti19_19_Alias_2"
/// <PRE><BLOCKQUOTE>
///   vegetation - alias to TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__vegetation,	///< xs:NMTOKEN value="vegetation"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE19_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti19_19_Alias_3"
/// <PRE><BLOCKQUOTE>
///   Train struck animal alias to TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__trainStruckAnimal,	///< xs:NMTOKEN value="trainStruckAnimal"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE19_USCOREAlias_USCORE4,	///< xs:NMTOKEN value="pti19_19_Alias_4"
/// <PRE><BLOCKQUOTE>
///   Train struck object alias to TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__trainStruckObject,	///< xs:NMTOKEN value="trainStruckObject"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE20,	///< xs:NMTOKEN value="pti19_20"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_20 animal on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__animalOnTheLine,	///< xs:NMTOKEN value="animalOnTheLine"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE21,	///< xs:NMTOKEN value="pti19_21"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_21 route diversion.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__routeDiversion,	///< xs:NMTOKEN value="routeDiversion"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE22,	///< xs:NMTOKEN value="pti19_22"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_22 road closed.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__roadClosed,	///< xs:NMTOKEN value="roadClosed"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE23,	///< xs:NMTOKEN value="pti19_23"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_23 roadworks.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__roadworks,	///< xs:NMTOKEN value="roadworks"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE24,	///< xs:NMTOKEN value="pti19_24"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_24 special event.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__specialEvent,	///< xs:NMTOKEN value="specialEvent"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE24_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_24_Alias_1"
	ns2__MiscellaneousReasonEnumeration__march,	///< xs:NMTOKEN value="march"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE24_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti19_24_Alias_2"
	ns2__MiscellaneousReasonEnumeration__procession,	///< xs:NMTOKEN value="procession"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE24_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti19_24_Alias_3"
	ns2__MiscellaneousReasonEnumeration__demonstration,	///< xs:NMTOKEN value="demonstration"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE24_USCOREAlias_USCORE4,	///< xs:NMTOKEN value="pti19_24_Alias_4"
	ns2__MiscellaneousReasonEnumeration__publicDisturbance,	///< xs:NMTOKEN value="publicDisturbance"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE24_USCOREAlias_USCORE5,	///< xs:NMTOKEN value="pti19_24_Alias_5"
	ns2__MiscellaneousReasonEnumeration__filterBlockade,	///< xs:NMTOKEN value="filterBlockade"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE24_USCOREAlias_USCORE6,	///< xs:NMTOKEN value="pti19_24_Alias_6"
	ns2__MiscellaneousReasonEnumeration__sightseersObstructingAccess,	///< xs:NMTOKEN value="sightseersObstructingAccess"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE25,	///< xs:NMTOKEN value="pti19_25"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_25 bridge strike.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__bridgeStrike,	///< xs:NMTOKEN value="bridgeStrike"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE26,	///< xs:NMTOKEN value="pti19_26"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_26 overhead obstruction.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__overheadObstruction,	///< xs:NMTOKEN value="overheadObstruction"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE27,	///< xs:NMTOKEN value="pti19_27"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_255 undefined problem.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousReasonEnumeration__undefinedProblem,	///< xs:NMTOKEN value="undefinedProblem"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE255_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti19_255_Alias_1"
	ns2__MiscellaneousReasonEnumeration__problemsAtBorderPost,	///< xs:NMTOKEN value="problemsAtBorderPost"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE255_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti19_255_Alias_2"
	ns2__MiscellaneousReasonEnumeration__problemsAtCustomsPost,	///< xs:NMTOKEN value="problemsAtCustomsPost"
	ns2__MiscellaneousReasonEnumeration__pti19_USCORE255_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti19_255_Alias_3"
	ns2__MiscellaneousReasonEnumeration__problemsOnLocalRoad,	///< xs:NMTOKEN value="problemsOnLocalRoad"
};

/// @brief A class wrapper.
///
class ns2__MiscellaneousReasonEnumeration_ : public xsd__anyType
{ public:
    enum ns2__MiscellaneousReasonEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":MiscellaneousSubReasonEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Miscellaneous incident sub reason types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__MiscellaneousSubReasonEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__MiscellaneousSubReasonEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Near Miss - alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__nearMiss,	///< xs:NMTOKEN value="nearMiss"
/// <PRE><BLOCKQUOTE>
///   Near Miss - alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__safetyViolation,	///< xs:NMTOKEN value="safetyViolation"
/// <PRE><BLOCKQUOTE>
///   Signal passed at danger - alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__signalPassedAtDanger,	///< xs:NMTOKEN value="signalPassedAtDanger"
/// <PRE><BLOCKQUOTE>
///   Station overrun - alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__stationOverrun,	///< xs:NMTOKEN value="stationOverrun"
/// <PRE><BLOCKQUOTE>
///   trainDoor- alias to TPEG Pti_19_1 incident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__trainDoor,	///< xs:NMTOKEN value="trainDoor"
/// <PRE><BLOCKQUOTE>
///   Unspecified emergency service visit. Alias to pti19
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__emergencyServicesCall,	///< xs:NMTOKEN value="emergencyServicesCall"
/// <PRE><BLOCKQUOTE>
///   request of the police Alias to TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__policeRequest,	///< xs:NMTOKEN value="policeRequest"
/// <PRE><BLOCKQUOTE>
///   fire brigade safety checksAlias to TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__fireBrigadeSafetyChecks,	///< xs:NMTOKEN value="fireBrigadeSafetyChecks"
/// <PRE><BLOCKQUOTE>
///   an unattended bag TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__unattendedBag,	///< xs:NMTOKEN value="unattendedBag"
/// <PRE><BLOCKQUOTE>
///   telephoned threat TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__telephonedThreat,	///< xs:NMTOKEN value="telephonedThreat"
/// <PRE><BLOCKQUOTE>
///   telephoned threat TPEG Pti_19_3 security alert.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__suspectVehicle,	///< xs:NMTOKEN value="suspectVehicle"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_5 vandalism.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__vandalism,	///< xs:NMTOKEN value="vandalism"
/// <PRE><BLOCKQUOTE>
///   passengerActionAlias to pti19
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__passengerAction,	///< xs:NMTOKEN value="passengerAction"
/// <PRE><BLOCKQUOTE>
///   Assault on stafft.Alias to pti19
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__staffAssault,	///< xs:NMTOKEN value="staffAssault"
/// <PRE><BLOCKQUOTE>
///   Railway Crime Alias to pti19
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__railwayCrime,	///< xs:NMTOKEN value="railwayCrime"
	ns2__MiscellaneousSubReasonEnumeration__altercation,	///< xs:NMTOKEN value="altercation"
	ns2__MiscellaneousSubReasonEnumeration__theft,	///< xs:NMTOKEN value="theft"
/// <PRE><BLOCKQUOTE>
///   fatality alias to TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__fatality,	///< xs:NMTOKEN value="fatality"
	ns2__MiscellaneousSubReasonEnumeration__illVehicleOccupants,	///< xs:NMTOKEN value="illVehicleOccupants"
/// <PRE><BLOCKQUOTE>
///   a person under a train - alias to TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__personUnderTrain,	///< xs:NMTOKEN value="personUnderTrain"
/// <PRE><BLOCKQUOTE>
///   a person hit by a train - alias to TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__personHitByTrain,	///< xs:NMTOKEN value="personHitByTrain"
/// <PRE><BLOCKQUOTE>
///   person ill On Vehicle -Alias to pti19_6
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__personIllOnVehicle,	///< xs:NMTOKEN value="personIllOnVehicle"
/// <PRE><BLOCKQUOTE>
///   emergencyServices - alias to TPEG Pti_19_6 accident.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__emergencyServices,	///< xs:NMTOKEN value="emergencyServices"
/// <PRE><BLOCKQUOTE>
///   Collision - Alias to pti19_6
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__collision,	///< xs:NMTOKEN value="collision"
	ns2__MiscellaneousSubReasonEnumeration__linesideFire,	///< xs:NMTOKEN value="linesideFire"
/// <PRE><BLOCKQUOTE>
///   Level Crossing Incident - alias to TPEG Pti_19_18 VEHICLE on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__levelCrossingIncident,	///< xs:NMTOKEN value="levelCrossingIncident"
/// <PRE><BLOCKQUOTE>
///   fallen tree on line- alias to TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__fallenTreeOnTheLine,	///< xs:NMTOKEN value="fallenTreeOnTheLine"
/// <PRE><BLOCKQUOTE>
///   vegetation - alias to TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__vegetation,	///< xs:NMTOKEN value="vegetation"
/// <PRE><BLOCKQUOTE>
///   Train struck animal alias to TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__trainStruckAnimal,	///< xs:NMTOKEN value="trainStruckAnimal"
/// <PRE><BLOCKQUOTE>
///   Train struck object alias to TPEG Pti_19_19 object on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__trainStruckObject,	///< xs:NMTOKEN value="trainStruckObject"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_20 animal on the line.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__animalOnTheLine,	///< xs:NMTOKEN value="animalOnTheLine"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_21 route diversion.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__routeDiversion,	///< xs:NMTOKEN value="routeDiversion"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_22 road closed.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__roadClosed,	///< xs:NMTOKEN value="roadClosed"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_23 roadworks.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__roadworks,	///< xs:NMTOKEN value="roadworks"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_24 special event.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__specialEvent,	///< xs:NMTOKEN value="specialEvent"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_25 bridge strike.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__bridgeStrike,	///< xs:NMTOKEN value="bridgeStrike"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_26 overhead obstruction.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__overheadObstruction,	///< xs:NMTOKEN value="overheadObstruction"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_255 undefined problem.
/// </BLOCKQUOTE></PRE>
	ns2__MiscellaneousSubReasonEnumeration__undefinedProblem,	///< xs:NMTOKEN value="undefinedProblem"
	ns2__MiscellaneousSubReasonEnumeration__march,	///< xs:NMTOKEN value="march"
	ns2__MiscellaneousSubReasonEnumeration__procession,	///< xs:NMTOKEN value="procession"
	ns2__MiscellaneousSubReasonEnumeration__demonstration,	///< xs:NMTOKEN value="demonstration"
	ns2__MiscellaneousSubReasonEnumeration__publicDisturbance,	///< xs:NMTOKEN value="publicDisturbance"
	ns2__MiscellaneousSubReasonEnumeration__filterBlockade,	///< xs:NMTOKEN value="filterBlockade"
	ns2__MiscellaneousSubReasonEnumeration__sightseersObstructingAccess,	///< xs:NMTOKEN value="sightseersObstructingAccess"
	ns2__MiscellaneousSubReasonEnumeration__problemsAtBorderPost,	///< xs:NMTOKEN value="problemsAtBorderPost"
	ns2__MiscellaneousSubReasonEnumeration__problemsAtCustomePost,	///< xs:NMTOKEN value="problemsAtCustomePost"
	ns2__MiscellaneousSubReasonEnumeration__problemsOnLocalRoad,	///< xs:NMTOKEN value="problemsOnLocalRoad"
};

/// @brief A class wrapper.
///
class ns2__MiscellaneousSubReasonEnumeration_ : public xsd__anyType
{ public:
    enum ns2__MiscellaneousSubReasonEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PersonnelReasonEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Personnel incident reason types TPEG Pti18_2/TPEG Pti_20.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__PersonnelReasonEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__PersonnelReasonEnumeration
{
	ns2__PersonnelReasonEnumeration__pti20_USCORE0,	///< xs:NMTOKEN value="pti20_0"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti20_0 unknown.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__PersonnelReasonEnumeration__pti20_USCORE1,	///< xs:NMTOKEN value="pti20_1"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti20_1 staff sickness.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__staffSickness,	///< xs:NMTOKEN value="staffSickness"
	ns2__PersonnelReasonEnumeration__pti20_USCORE1_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti20_1_Alias_1"
/// <PRE><BLOCKQUOTE>
///   staff injury alias to TPEG Pti20_1 staff sickness.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__staffInjury,	///< xs:NMTOKEN value="staffInjury"
	ns2__PersonnelReasonEnumeration__pti20_USCORE1_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti20_1_Alias_2"
/// <PRE><BLOCKQUOTE>
///   contractor staff injury alias to TPEG Pti20_1 staff sickness.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__contractorStaffInjury,	///< xs:NMTOKEN value="contractorStaffInjury"
	ns2__PersonnelReasonEnumeration__pti20_USCORE2,	///< xs:NMTOKEN value="pti20_2"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti20_2 staff absence.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__staffAbsence,	///< xs:NMTOKEN value="staffAbsence"
	ns2__PersonnelReasonEnumeration__pti20_USCORE3,	///< xs:NMTOKEN value="pti20_3"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti20_3 staff in wrong place.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__staffInWrongPlace,	///< xs:NMTOKEN value="staffInWrongPlace"
	ns2__PersonnelReasonEnumeration__pti20_USCORE4,	///< xs:NMTOKEN value="pti20_4"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti20_4 staff shortage.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__staffShortage,	///< xs:NMTOKEN value="staffShortage"
	ns2__PersonnelReasonEnumeration__pti20_USCORE5,	///< xs:NMTOKEN value="pti20_5"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti20_5 industrial action.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__industrialAction,	///< xs:NMTOKEN value="industrialAction"
	ns2__PersonnelReasonEnumeration__pti20_USCORE5_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti20_5_Alias_1"
/// <PRE><BLOCKQUOTE>
///   Unofffical action - alias to TPEG Pti20_5 industrial action.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__unofficialIndustrialAction,	///< xs:NMTOKEN value="unofficialIndustrialAction"
	ns2__PersonnelReasonEnumeration__pti20_USCORE6,	///< xs:NMTOKEN value="pti20_6"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti20_6 work to rule.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__workToRule,	///< xs:NMTOKEN value="workToRule"
	ns2__PersonnelReasonEnumeration__pti20_USCORE255,	///< xs:NMTOKEN value="pti20_255"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti20_255 undefined personnel problem.
/// </BLOCKQUOTE></PRE>
	ns2__PersonnelReasonEnumeration__undefinedPersonnelProblem,	///< xs:NMTOKEN value="undefinedPersonnelProblem"
};

/// @brief A class wrapper.
///
class ns2__PersonnelReasonEnumeration_ : public xsd__anyType
{ public:
    enum ns2__PersonnelReasonEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PersonnelSubReasonEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Personnel incident sub reason types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__PersonnelSubReasonEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__PersonnelSubReasonEnumeration
{
	ns2__PersonnelSubReasonEnumeration__staffSickness,	///< xs:NMTOKEN value="staffSickness"
	ns2__PersonnelSubReasonEnumeration__staffInjury,	///< xs:NMTOKEN value="staffInjury"
	ns2__PersonnelSubReasonEnumeration__unofficialIndustrialAction,	///< xs:NMTOKEN value="unofficialIndustrialAction"
};

/// @brief A class wrapper.
///
class ns2__PersonnelSubReasonEnumeration_ : public xsd__anyType
{ public:
    enum ns2__PersonnelSubReasonEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EquipmentReasonEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Equipment incident reason types TPEG Pti18_3/TPEG Pti_21.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__EquipmentReasonEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__EquipmentReasonEnumeration
{
	ns2__EquipmentReasonEnumeration__pti21_USCORE0,	///< xs:NMTOKEN value="pti21_0"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_0 unknown.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__EquipmentReasonEnumeration__pti21_USCORE1,	///< xs:NMTOKEN value="pti21_1"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_1 points problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__pointsProblem,	///< xs:NMTOKEN value="pointsProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE2,	///< xs:NMTOKEN value="pti21_2"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_2 points failure.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__pointsFailure,	///< xs:NMTOKEN value="pointsFailure"
	ns2__EquipmentReasonEnumeration__pti21_USCORE3,	///< xs:NMTOKEN value="pti21_3"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_3 signal problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__signalProblem,	///< xs:NMTOKEN value="signalProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE3_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti21_3_Alias_1"
/// <PRE><BLOCKQUOTE>
///   Train warning system eg TPWSAlias to TPEG Pti21_3 signal problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__trainWarningSystemProblem,	///< xs:NMTOKEN value="trainWarningSystemProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE3_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti21_3_Alias_2"
/// <PRE><BLOCKQUOTE>
///   Track circuit alias to TPEG Pti21_3 signal problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__trackCircuitProblem,	///< xs:NMTOKEN value="trackCircuitProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE4,	///< xs:NMTOKEN value="pti21_4"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_4 signal failure.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__signalFailure,	///< xs:NMTOKEN value="signalFailure"
	ns2__EquipmentReasonEnumeration__pti21_USCORE5,	///< xs:NMTOKEN value="pti21_5"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_5 derailment.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__derailment,	///< xs:NMTOKEN value="derailment"
	ns2__EquipmentReasonEnumeration__pti21_USCORE6,	///< xs:NMTOKEN value="pti21_6"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_6 engine failure.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__engineFailure,	///< xs:NMTOKEN value="engineFailure"
	ns2__EquipmentReasonEnumeration__pti21_USCORE6_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti21_6_Alias_1"
/// <PRE><BLOCKQUOTE>
///   traction failure alais to TPEG Pti21_6 engine failure.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__tractionFailure,	///< xs:NMTOKEN value="tractionFailure"
	ns2__EquipmentReasonEnumeration__pti21_USCORE7,	///< xs:NMTOKEN value="pti21_7"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_7 break down.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__breakDown,	///< xs:NMTOKEN value="breakDown"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8,	///< xs:NMTOKEN value="pti21_8"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__technicalProblem,	///< xs:NMTOKEN value="technicalProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti21_8_Alias_1"
/// <PRE><BLOCKQUOTE>
///   Broken rail - alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__brokenRail,	///< xs:NMTOKEN value="brokenRail"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti21_8_Alias_2"
/// <PRE><BLOCKQUOTE>
///   poor rail conditions - alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__poorRailConditions,	///< xs:NMTOKEN value="poorRailConditions"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti21_8_Alias_3"
/// <PRE><BLOCKQUOTE>
///   Wheel Impact Load detectedi by trackside equipment alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__wheelImpactLoad,	///< xs:NMTOKEN value="wheelImpactLoad"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE4,	///< xs:NMTOKEN value="pti21_8_Alias_4"
/// <PRE><BLOCKQUOTE>
///   late lack of operational stock - alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__lackOfOperationalStock,	///< xs:NMTOKEN value="lackOfOperationalStock"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE5,	///< xs:NMTOKEN value="pti21_8_Alias_5"
/// <PRE><BLOCKQUOTE>
///   defective fire alarm equipment - alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__defectiveFireAlarmEquipment,	///< xs:NMTOKEN value="defectiveFireAlarmEquipment"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE6,	///< xs:NMTOKEN value="pti21_8_Alias_6"
/// <PRE><BLOCKQUOTE>
///   defective PEDs (platform edge doors) - alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__defectivePlatformEdgeDoors,	///< xs:NMTOKEN value="defectivePlatformEdgeDoors"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE7,	///< xs:NMTOKEN value="pti21_8_Alias_7"
/// <PRE><BLOCKQUOTE>
///   defective CCTV - alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__defectiveCctv,	///< xs:NMTOKEN value="defectiveCctv"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE8,	///< xs:NMTOKEN value="pti21_8_Alias_8"
/// <PRE><BLOCKQUOTE>
///   defective PA - alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__defectivePublicAnnouncementSystem,	///< xs:NMTOKEN value="defectivePublicAnnouncementSystem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE8_USCOREAlias_USCORE9,	///< xs:NMTOKEN value="pti21_8_Alias_9"
/// <PRE><BLOCKQUOTE>
///   ticketing facility unavailable - alias to TPEG Pti21_8 technical problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__ticketingSystemNotAvailable,	///< xs:NMTOKEN value="ticketingSystemNotAvailable"
	ns2__EquipmentReasonEnumeration__pti21_USCORE9,	///< xs:NMTOKEN value="pti21_9"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_9 repair work.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__repairWork,	///< xs:NMTOKEN value="repairWork"
	ns2__EquipmentReasonEnumeration__pti21_USCORE10,	///< xs:NMTOKEN value="pti21_10"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_10 construction work.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__constructionWork,	///< xs:NMTOKEN value="constructionWork"
	ns2__EquipmentReasonEnumeration__pti21_USCORE11,	///< xs:NMTOKEN value="pti21_11"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_11 maintenance work.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__maintenanceWork,	///< xs:NMTOKEN value="maintenanceWork"
	ns2__EquipmentReasonEnumeration__pti21_USCORE11_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti21_11_Alias_1"
/// <PRE><BLOCKQUOTE>
///   emergency engineering work - alias to TPEG Pti21_11 maintenance work.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__emergencyEngineeringWork,	///< xs:NMTOKEN value="emergencyEngineeringWork"
	ns2__EquipmentReasonEnumeration__pti21_USCORE11_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti21_11_Alias_2"
/// <PRE><BLOCKQUOTE>
///   late finish to engineering work - alias to TPEG Pti21_11 maintenance work.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__lateFinishToEngineeringWork,	///< xs:NMTOKEN value="lateFinishToEngineeringWork"
	ns2__EquipmentReasonEnumeration__pti21_USCORE12,	///< xs:NMTOKEN value="pti21_12"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_12 power problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__powerProblem,	///< xs:NMTOKEN value="powerProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE13,	///< xs:NMTOKEN value="pti21_13"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_13 fuel problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__fuelProblem,	///< xs:NMTOKEN value="fuelProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE14,	///< xs:NMTOKEN value="pti21_14"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_14 swing bridge failure.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__swingBridgeFailure,	///< xs:NMTOKEN value="swingBridgeFailure"
	ns2__EquipmentReasonEnumeration__pti21_USCORE15,	///< xs:NMTOKEN value="pti21_15"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_15 escalator failure.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__escalatorFailure,	///< xs:NMTOKEN value="escalatorFailure"
	ns2__EquipmentReasonEnumeration__pti21_USCORE16,	///< xs:NMTOKEN value="pti21_16"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_16 lift failure.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__liftFailure,	///< xs:NMTOKEN value="liftFailure"
	ns2__EquipmentReasonEnumeration__pti21_USCORE17,	///< xs:NMTOKEN value="pti21_17"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_17 gangway problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__gangwayProblem,	///< xs:NMTOKEN value="gangwayProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE18,	///< xs:NMTOKEN value="pti21_18"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_18 closed for maintenance.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__closedForMaintenance,	///< xs:NMTOKEN value="closedForMaintenance"
	ns2__EquipmentReasonEnumeration__pti21_USCORE19,	///< xs:NMTOKEN value="pti21_19"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_19 fuel shortage.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__fuelShortage,	///< xs:NMTOKEN value="fuelShortage"
	ns2__EquipmentReasonEnumeration__pti21_USCORE20,	///< xs:NMTOKEN value="pti21_20"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_20 de-icing work.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__deicingWork,	///< xs:NMTOKEN value="deicingWork"
	ns2__EquipmentReasonEnumeration__pti21_USCORE21,	///< xs:NMTOKEN value="pti21_21"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_21 wheel problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__wheelProblem,	///< xs:NMTOKEN value="wheelProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE22,	///< xs:NMTOKEN value="pti21_22"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_22 luggage carousel problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__luggageCarouselProblem,	///< xs:NMTOKEN value="luggageCarouselProblem"
	ns2__EquipmentReasonEnumeration__pti21_USCORE255,	///< xs:NMTOKEN value="pti21_255"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti21_255 undefined equipment problem.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentReasonEnumeration__undefinedEquipmentProblem,	///< xs:NMTOKEN value="undefinedEquipmentProblem"
};

/// @brief A class wrapper.
///
class ns2__EquipmentReasonEnumeration_ : public xsd__anyType
{ public:
    enum ns2__EquipmentReasonEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EquipmentSubReasonEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Equipment incident sub reason types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__EquipmentSubReasonEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__EquipmentSubReasonEnumeration
{
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_25 bridge strike.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentSubReasonEnumeration__staffSickness,	///< xs:NMTOKEN value="staffSickness"
	ns2__EquipmentSubReasonEnumeration__staffInjury,	///< xs:NMTOKEN value="staffInjury"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti_19_26 overhead obstruction.
/// </BLOCKQUOTE></PRE>
	ns2__EquipmentSubReasonEnumeration__unofficialIndustrialAction,	///< xs:NMTOKEN value="unofficialIndustrialAction"
};

/// @brief A class wrapper.
///
class ns2__EquipmentSubReasonEnumeration_ : public xsd__anyType
{ public:
    enum ns2__EquipmentSubReasonEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EnvironmentReasonEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Environment incident reason types TPEG Pti18_4/TPEG Pti_22.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__EnvironmentReasonEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__EnvironmentReasonEnumeration
{
	ns2__EnvironmentReasonEnumeration__pti22_USCORE0,	///< xs:NMTOKEN value="pti22_0"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_0 unknown.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE1,	///< xs:NMTOKEN value="pti22_1"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_1 fog.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__fog,	///< xs:NMTOKEN value="fog"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE2,	///< xs:NMTOKEN value="pti22_2"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_2 rough sea.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__roughSea,	///< xs:NMTOKEN value="roughSea"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE3,	///< xs:NMTOKEN value="pti22_3"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_3 heavy snow fall.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__heavySnowFall,	///< xs:NMTOKEN value="heavySnowFall"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE3_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti22_3_Alias_1"
/// <PRE><BLOCKQUOTE>
///   drifting snow - Alias to TPEG Pti22_3 heavySnowFall.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__driftingSnow,	///< xs:NMTOKEN value="driftingSnow"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE3_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti22_3_Alias_2"
/// <PRE><BLOCKQUOTE>
///   Blizzard Conditions - Alias to TPEG Pti22_3 heavySnowFall.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__blizzardConditions,	///< xs:NMTOKEN value="blizzardConditions"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE4,	///< xs:NMTOKEN value="pti22_4"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_4 heavy rain.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__heavyRain,	///< xs:NMTOKEN value="heavyRain"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE5,	///< xs:NMTOKEN value="pti22_5"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_5 strong winds.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__strongWinds,	///< xs:NMTOKEN value="strongWinds"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE5_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti22_5_Alias_1"
/// <PRE><BLOCKQUOTE>
///   stormConditions alias to TPEG Pti22_5 strong winds.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__stormConditions,	///< xs:NMTOKEN value="stormConditions"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE5_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti22_5_Alias_2"
/// <PRE><BLOCKQUOTE>
///   storm damage alias to TPEG Pti22_5 strong winds.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__stormDamage,	///< xs:NMTOKEN value="stormDamage"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE6,	///< xs:NMTOKEN value="pti22_6"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_6 tidal restrictions.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__tidalRestrictions,	///< xs:NMTOKEN value="tidalRestrictions"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE7,	///< xs:NMTOKEN value="pti22_7"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_7 high tide.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__highTide,	///< xs:NMTOKEN value="highTide"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE8,	///< xs:NMTOKEN value="pti22_8"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_8 low tide.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__lowTide,	///< xs:NMTOKEN value="lowTide"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE9,	///< xs:NMTOKEN value="pti22_9"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_9 ice.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__ice,	///< xs:NMTOKEN value="ice"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE10,	///< xs:NMTOKEN value="pti22_10"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_10 frozen.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__frozen,	///< xs:NMTOKEN value="frozen"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE11,	///< xs:NMTOKEN value="pti22_11"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_11 hail.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__hail,	///< xs:NMTOKEN value="hail"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE11_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti22_11_Alias_1"
/// <PRE><BLOCKQUOTE>
///   Sleet Alias to TPEG Pti22_11 hail.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__sleet,	///< xs:NMTOKEN value="sleet"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE12,	///< xs:NMTOKEN value="pti22_12"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_12 high temperatures.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__highTemperatures,	///< xs:NMTOKEN value="highTemperatures"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE13,	///< xs:NMTOKEN value="pti22_13"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_13 flooding.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__flooding,	///< xs:NMTOKEN value="flooding"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE14,	///< xs:NMTOKEN value="pti22_14"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_14 waterlogged.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__waterlogged,	///< xs:NMTOKEN value="waterlogged"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE15,	///< xs:NMTOKEN value="pti22_15"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_15 low water level.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__lowWaterLevel,	///< xs:NMTOKEN value="lowWaterLevel"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE16,	///< xs:NMTOKEN value="pti22_16"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_16 high water level.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__highWaterLevel,	///< xs:NMTOKEN value="highWaterLevel"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE17,	///< xs:NMTOKEN value="pti22_17"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_17 fallen leaves.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__fallenLeaves,	///< xs:NMTOKEN value="fallenLeaves"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE18,	///< xs:NMTOKEN value="pti22_18"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_18 fallen tree.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__fallenTree,	///< xs:NMTOKEN value="fallenTree"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE19,	///< xs:NMTOKEN value="pti22_19"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_19 landslide.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__landslide,	///< xs:NMTOKEN value="landslide"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE255,	///< xs:NMTOKEN value="pti22_255"
/// <PRE><BLOCKQUOTE>
///   TPEG Pti22_255 undefined environmental problem.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__undefinedEnvironmentalProblem,	///< xs:NMTOKEN value="undefinedEnvironmentalProblem"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE255_USCOREAlias_USCORE1,	///< xs:NMTOKEN value="pti22_255_Alias_1"
/// <PRE><BLOCKQUOTE>
///   lightningStrike alias to TPEG Pti22_255 undefined environmental problem.
/// </BLOCKQUOTE></PRE>
	ns2__EnvironmentReasonEnumeration__lightningStrike,	///< xs:NMTOKEN value="lightningStrike"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE255_USCOREAlias_USCORE2,	///< xs:NMTOKEN value="pti22_255_Alias_2"
	ns2__EnvironmentReasonEnumeration__sewerOverflow,	///< xs:NMTOKEN value="sewerOverflow"
	ns2__EnvironmentReasonEnumeration__pti22_USCORE255_USCOREAlias_USCORE3,	///< xs:NMTOKEN value="pti22_255_Alias_3"
	ns2__EnvironmentReasonEnumeration__grassFire,	///< xs:NMTOKEN value="grassFire"
};

/// @brief A class wrapper.
///
class ns2__EnvironmentReasonEnumeration_ : public xsd__anyType
{ public:
    enum ns2__EnvironmentReasonEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EnvironmentSubReasonEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Environment incident subreason types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__EnvironmentSubReasonEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__EnvironmentSubReasonEnumeration
{
	ns2__EnvironmentSubReasonEnumeration__heavySnowFall,	///< xs:NMTOKEN value="heavySnowFall"
	ns2__EnvironmentSubReasonEnumeration__strongWinds,	///< xs:NMTOKEN value="strongWinds"
	ns2__EnvironmentSubReasonEnumeration__stormConditions,	///< xs:NMTOKEN value="stormConditions"
	ns2__EnvironmentSubReasonEnumeration__stormDamage,	///< xs:NMTOKEN value="stormDamage"
	ns2__EnvironmentSubReasonEnumeration__hail,	///< xs:NMTOKEN value="hail"
	ns2__EnvironmentSubReasonEnumeration__lighteningStrike,	///< xs:NMTOKEN value="lighteningStrike"
	ns2__EnvironmentSubReasonEnumeration__avalanches,	///< xs:NMTOKEN value="avalanches"
	ns2__EnvironmentSubReasonEnumeration__flashFloods,	///< xs:NMTOKEN value="flashFloods"
	ns2__EnvironmentSubReasonEnumeration__mudslip,	///< xs:NMTOKEN value="mudslip"
	ns2__EnvironmentSubReasonEnumeration__rockfalls,	///< xs:NMTOKEN value="rockfalls"
	ns2__EnvironmentSubReasonEnumeration__subsidence,	///< xs:NMTOKEN value="subsidence"
	ns2__EnvironmentSubReasonEnumeration__earthquakeDamage,	///< xs:NMTOKEN value="earthquakeDamage"
	ns2__EnvironmentSubReasonEnumeration__sewerOverflow,	///< xs:NMTOKEN value="sewerOverflow"
	ns2__EnvironmentSubReasonEnumeration__grassFire,	///< xs:NMTOKEN value="grassFire"
};

/// @brief A class wrapper.
///
class ns2__EnvironmentSubReasonEnumeration_ : public xsd__anyType
{ public:
    enum ns2__EnvironmentSubReasonEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":RelatedToEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Type of Source.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__RelatedToEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__RelatedToEnumeration
{
	ns2__RelatedToEnumeration__cause,	///< xs:NMTOKEN value="cause"
	ns2__RelatedToEnumeration__effect,	///< xs:NMTOKEN value="effect"
	ns2__RelatedToEnumeration__update,	///< xs:NMTOKEN value="update"
	ns2__RelatedToEnumeration__supercedes,	///< xs:NMTOKEN value="supercedes"
	ns2__RelatedToEnumeration__supercededBy,	///< xs:NMTOKEN value="supercededBy"
	ns2__RelatedToEnumeration__associated,	///< xs:NMTOKEN value="associated"
};

/// @brief A class wrapper.
///
class ns2__RelatedToEnumeration_ : public xsd__anyType
{ public:
    enum ns2__RelatedToEnumeration       __item;                       
};

/// @brief "http://www.siri.org.uk/siri":SituationSourceTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Type of Source.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__SituationSourceTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__SituationSourceTypeEnumeration
{
	ns2__SituationSourceTypeEnumeration__directReport,	///< xs:NMTOKEN value="directReport"
	ns2__SituationSourceTypeEnumeration__email,	///< xs:NMTOKEN value="email"
	ns2__SituationSourceTypeEnumeration__phone,	///< xs:NMTOKEN value="phone"
	ns2__SituationSourceTypeEnumeration__fax,	///< xs:NMTOKEN value="fax"
	ns2__SituationSourceTypeEnumeration__post,	///< xs:NMTOKEN value="post"
	ns2__SituationSourceTypeEnumeration__feed,	///< xs:NMTOKEN value="feed"
	ns2__SituationSourceTypeEnumeration__radio,	///< xs:NMTOKEN value="radio"
	ns2__SituationSourceTypeEnumeration__tv,	///< xs:NMTOKEN value="tv"
	ns2__SituationSourceTypeEnumeration__web,	///< xs:NMTOKEN value="web"
	ns2__SituationSourceTypeEnumeration__pager,	///< xs:NMTOKEN value="pager"
	ns2__SituationSourceTypeEnumeration__text,	///< xs:NMTOKEN value="text"
	ns2__SituationSourceTypeEnumeration__other,	///< xs:NMTOKEN value="other"
};

/// @brief A class wrapper.
///
class ns2__SituationSourceTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__SituationSourceTypeEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":WorkflowStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Entry Status.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__WorkflowStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__WorkflowStatusEnumeration
{
	ns2__WorkflowStatusEnumeration__draft,	///< xs:NMTOKEN value="draft"
	ns2__WorkflowStatusEnumeration__approvedDraft,	///< xs:NMTOKEN value="approvedDraft"
	ns2__WorkflowStatusEnumeration__open,	///< xs:NMTOKEN value="open"
	ns2__WorkflowStatusEnumeration__published,	///< xs:NMTOKEN value="published"
	ns2__WorkflowStatusEnumeration__closing,	///< xs:NMTOKEN value="closing"
	ns2__WorkflowStatusEnumeration__closed,	///< xs:NMTOKEN value="closed"
};

/// @brief A class wrapper.
///
class ns2__WorkflowStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns2__WorkflowStatusEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PublicationStatusType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for Publication status.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__PublicationStatusType;

/// @brief A class wrapper.
///
class ns2__PublicationStatusType__ : public xsd__anyType
{ public:
    ns2__PublicationStatusType           __item;                       
};

/// @brief "http://www.siri.org.uk/siri":QualityEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Type for Quality of data indication.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__QualityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__QualityEnumeration
{
	ns2__QualityEnumeration__certain,	///< xs:string value="certain"
	ns2__QualityEnumeration__veryReliable,	///< xs:string value="veryReliable"
	ns2__QualityEnumeration__reliable,	///< xs:string value="reliable"
	ns2__QualityEnumeration__probablyReliable,	///< xs:string value="probablyReliable"
	ns2__QualityEnumeration__unconfirmed,	///< xs:string value="unconfirmed"
};

/// @brief A class wrapper.
///
class ns2__QualityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__QualityEnumeration         __item;                       
};

/// @brief "http://www.siri.org.uk/siri":SensitivityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Sensitivity.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__SensitivityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__SensitivityEnumeration
{
	ns2__SensitivityEnumeration__veryHigh,	///< xs:NMTOKEN value="veryHigh"
	ns2__SensitivityEnumeration__high,	///< xs:NMTOKEN value="high"
	ns2__SensitivityEnumeration__medium,	///< xs:NMTOKEN value="medium"
	ns2__SensitivityEnumeration__low,	///< xs:NMTOKEN value="low"
	ns2__SensitivityEnumeration__veryLow,	///< xs:NMTOKEN value="veryLow"
};

/// @brief A class wrapper.
///
class ns2__SensitivityEnumeration_ : public xsd__anyType
{ public:
    enum ns2__SensitivityEnumeration     __item;                       
};

/// @brief "http://www.siri.org.uk/siri":AudienceEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for Audience.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__AudienceEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__AudienceEnumeration
{
	ns2__AudienceEnumeration__public_,	///< xs:NMTOKEN value="public"
	ns2__AudienceEnumeration__emergencyServices,	///< xs:NMTOKEN value="emergencyServices"
	ns2__AudienceEnumeration__staff,	///< xs:NMTOKEN value="staff"
	ns2__AudienceEnumeration__stationStaff,	///< xs:NMTOKEN value="stationStaff"
	ns2__AudienceEnumeration__management,	///< xs:NMTOKEN value="management"
	ns2__AudienceEnumeration__infoServices,	///< xs:NMTOKEN value="infoServices"
};

/// @brief A class wrapper.
///
class ns2__AudienceEnumeration_ : public xsd__anyType
{ public:
    enum ns2__AudienceEnumeration        __item;                       
};

/// @brief "http://www.siri.org.uk/siri":NatureEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Type for Quality of data indication.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__NatureEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__NatureEnumeration
{
	ns2__NatureEnumeration__plannedOnly,	///< xs:string value="plannedOnly"
	ns2__NatureEnumeration__unplannedOnly,	///< xs:string value="unplannedOnly"
	ns2__NatureEnumeration__both,	///< xs:string value="both"
};

/// @brief A class wrapper.
///
class ns2__NatureEnumeration_ : public xsd__anyType
{ public:
    enum ns2__NatureEnumeration          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ScopeTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for ScopeType.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ScopeTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ScopeTypeEnumeration
{
	ns2__ScopeTypeEnumeration__general,	///< xs:NMTOKEN value="general"
	ns2__ScopeTypeEnumeration__operator_,	///< xs:NMTOKEN value="operator"
	ns2__ScopeTypeEnumeration__network,	///< xs:NMTOKEN value="network"
	ns2__ScopeTypeEnumeration__route,	///< xs:NMTOKEN value="route"
	ns2__ScopeTypeEnumeration__line,	///< xs:NMTOKEN value="line"
	ns2__ScopeTypeEnumeration__place,	///< xs:NMTOKEN value="place"
	ns2__ScopeTypeEnumeration__stopPlace,	///< xs:NMTOKEN value="stopPlace"
	ns2__ScopeTypeEnumeration__stopPlaceComponent,	///< xs:NMTOKEN value="stopPlaceComponent"
	ns2__ScopeTypeEnumeration__stopPoint,	///< xs:NMTOKEN value="stopPoint"
	ns2__ScopeTypeEnumeration__vehicleJourney,	///< xs:NMTOKEN value="vehicleJourney"
	ns2__ScopeTypeEnumeration__datedVehicleJourney,	///< xs:NMTOKEN value="datedVehicleJourney"
	ns2__ScopeTypeEnumeration__connectionLink,	///< xs:NMTOKEN value="connectionLink"
	ns2__ScopeTypeEnumeration__interchange,	///< xs:NMTOKEN value="interchange"
	ns2__ScopeTypeEnumeration__road,	///< xs:NMTOKEN value="road"
};

/// @brief A class wrapper.
///
class ns2__ScopeTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ScopeTypeEnumeration       __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ImageContentEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for image content.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ImageContentEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ImageContentEnumeration
{
	ns2__ImageContentEnumeration__map,	///< xs:NMTOKEN value="map"
	ns2__ImageContentEnumeration__graphic,	///< xs:NMTOKEN value="graphic"
	ns2__ImageContentEnumeration__logo,	///< xs:NMTOKEN value="logo"
};

/// @brief A class wrapper.
///
class ns2__ImageContentEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ImageContentEnumeration    __item;                       
};

/// @brief "http://www.siri.org.uk/siri":LinkContentEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for image content.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__LinkContentEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__LinkContentEnumeration
{
	ns2__LinkContentEnumeration__timetable,	///< xs:NMTOKEN value="timetable"
	ns2__LinkContentEnumeration__relatedSite,	///< xs:NMTOKEN value="relatedSite"
	ns2__LinkContentEnumeration__details,	///< xs:NMTOKEN value="details"
	ns2__LinkContentEnumeration__advice,	///< xs:NMTOKEN value="advice"
	ns2__LinkContentEnumeration__other,	///< xs:NMTOKEN value="other"
};

/// @brief A class wrapper.
///
class ns2__LinkContentEnumeration_ : public xsd__anyType
{ public:
    enum ns2__LinkContentEnumeration     __item;                       
};

/// @brief "http://www.siri.org.uk/siri":InterchangeManagementEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Nature of Interchange management.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__InterchangeManagementEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__InterchangeManagementEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Interchange is considered a possible connection between journeys.
/// </BLOCKQUOTE></PRE>
	ns2__InterchangeManagementEnumeration__Planned,	///< xs:NMTOKEN value="Planned"
/// <PRE><BLOCKQUOTE>
///   Interchange is advertised to public as a possible connection between journeys.
/// </BLOCKQUOTE></PRE>
	ns2__InterchangeManagementEnumeration__Advertised,	///< xs:NMTOKEN value="Advertised"
/// <PRE><BLOCKQUOTE>
///   Interchange is actively managed as a possible connection between journeys and passengers are informed of real-time alterations.
/// </BLOCKQUOTE></PRE>
	ns2__InterchangeManagementEnumeration__Controlled,	///< xs:NMTOKEN value="Controlled"
/// <PRE><BLOCKQUOTE>
///   Interchange is actively managed as a possible connection between journeys and distributor may be delayed in order to make a transfer possible.
/// </BLOCKQUOTE></PRE>
	ns2__InterchangeManagementEnumeration__Guaranteed,	///< xs:NMTOKEN value="Guaranteed"
};

/// @brief A class wrapper.
///
class ns2__InterchangeManagementEnumeration_ : public xsd__anyType
{ public:
    enum ns2__InterchangeManagementEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":EstimatedTimetableDetailEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Detail Levels for Estimated Timetable Request.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__EstimatedTimetableDetailEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__EstimatedTimetableDetailEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return only the minimum amount of optional data for each Stop Visit to provide a display, A time at stop, LINE name and destination name.
/// </BLOCKQUOTE></PRE>
	ns2__EstimatedTimetableDetailEnumeration__minimum,	///< xs:NMTOKEN value="minimum"
/// <PRE><BLOCKQUOTE>
///   Return minimum and other available basic details for each Stop Visit. Do not include data on times at next stop or destination.
/// </BLOCKQUOTE></PRE>
	ns2__EstimatedTimetableDetailEnumeration__basic,	///< xs:NMTOKEN value="basic"
/// <PRE><BLOCKQUOTE>
///   Return all basic data, and also origin VIA points and destination.
/// </BLOCKQUOTE></PRE>
	ns2__EstimatedTimetableDetailEnumeration__normal,	///< xs:NMTOKEN value="normal"
/// <PRE><BLOCKQUOTE>
///   Return in addition to normal data, the CALL data for each Stop Visit, including PREVIOUS and ONWARD CALLs with passing times.
/// </BLOCKQUOTE></PRE>
	ns2__EstimatedTimetableDetailEnumeration__calls,	///< xs:NMTOKEN value="calls"
/// <PRE><BLOCKQUOTE>
///   Return all available data for each Stop Visit, including calls.
/// </BLOCKQUOTE></PRE>
	ns2__EstimatedTimetableDetailEnumeration__full,	///< xs:NMTOKEN value="full"
};

/// @brief A class wrapper.
///
class ns2__EstimatedTimetableDetailEnumeration_ : public xsd__anyType
{ public:
    enum ns2__EstimatedTimetableDetailEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringDetailEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Detail Levels for Stop Monitoring Request.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__StopMonitoringDetailEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__StopMonitoringDetailEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return only the minimum amount of optional data for each Stop Visit to provide a display, A time at stop, LINE name and destination name.
/// </BLOCKQUOTE></PRE>
	ns2__StopMonitoringDetailEnumeration__minimum,	///< xs:NMTOKEN value="minimum"
/// <PRE><BLOCKQUOTE>
///   Return minimum and other available basic details for each Stop Visit. Do not include data on times at next stop or destination.
/// </BLOCKQUOTE></PRE>
	ns2__StopMonitoringDetailEnumeration__basic,	///< xs:NMTOKEN value="basic"
/// <PRE><BLOCKQUOTE>
///   Return all basic data, and also origin VIA points and destination.
/// </BLOCKQUOTE></PRE>
	ns2__StopMonitoringDetailEnumeration__normal,	///< xs:NMTOKEN value="normal"
/// <PRE><BLOCKQUOTE>
///   Return in addition to normal data, the CALL data for each Stop Visit, including PREVIOUS and ONWARD CALLs with passing times.
/// </BLOCKQUOTE></PRE>
	ns2__StopMonitoringDetailEnumeration__calls,	///< xs:NMTOKEN value="calls"
/// <PRE><BLOCKQUOTE>
///   Return all available data for each Stop Visit, including calls.
/// </BLOCKQUOTE></PRE>
	ns2__StopMonitoringDetailEnumeration__full,	///< xs:NMTOKEN value="full"
};

/// @brief A class wrapper.
///
class ns2__StopMonitoringDetailEnumeration_ : public xsd__anyType
{ public:
    enum ns2__StopMonitoringDetailEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":StopVisitTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Visit Types to Return.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__StopVisitTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__StopVisitTypeEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return all Stop Visits.
/// </BLOCKQUOTE></PRE>
	ns2__StopVisitTypeEnumeration__all,	///< xs:NMTOKEN value="all"
/// <PRE><BLOCKQUOTE>
///   Return only arrival Stop Visits.
/// </BLOCKQUOTE></PRE>
	ns2__StopVisitTypeEnumeration__arrivals,	///< xs:NMTOKEN value="arrivals"
/// <PRE><BLOCKQUOTE>
///   Return only departure Stop Visits.
/// </BLOCKQUOTE></PRE>
	ns2__StopVisitTypeEnumeration__departures,	///< xs:NMTOKEN value="departures"
};

/// @brief A class wrapper.
///
class ns2__StopVisitTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns2__StopVisitTypeEnumeration   __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ServiceExceptionEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Classification of the service exception
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ServiceExceptionEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ServiceExceptionEnumeration
{
/// <PRE><BLOCKQUOTE>
///   No transport services returned because currently before first journey of day.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceExceptionEnumeration__beforeFirstJourney,	///< xs:NMTOKEN value="beforeFirstJourney"
/// <PRE><BLOCKQUOTE>
///   No transport services returned because currently after first journey of day.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceExceptionEnumeration__afterLastJourney,	///< xs:NMTOKEN value="afterLastJourney"
/// <PRE><BLOCKQUOTE>
///   No transport services returned because no services today.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceExceptionEnumeration__noServiceToday,	///< xs:NMTOKEN value="noServiceToday"
/// <PRE><BLOCKQUOTE>
///   No transport services returned because services currently suspended.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceExceptionEnumeration__transportTemporarilySuspended,	///< xs:NMTOKEN value="transportTemporarilySuspended"
/// <PRE><BLOCKQUOTE>
///   No transport services returned because prolonged suspension of services.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceExceptionEnumeration__transportLongtermSuspended,	///< xs:NMTOKEN value="transportLongtermSuspended"
/// <PRE><BLOCKQUOTE>
///   Transport services returned subject to severe disruptions.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceExceptionEnumeration__transportSeverlyDisrupted,	///< xs:NMTOKEN value="transportSeverlyDisrupted"
/// <PRE><BLOCKQUOTE>
///   No transport services returned because real-time services not available.
/// </BLOCKQUOTE></PRE>
	ns2__ServiceExceptionEnumeration__realtimeDataNotAvailable,	///< xs:NMTOKEN value="realtimeDataNotAvailable"
	ns2__ServiceExceptionEnumeration__realtimeDataAvailable,	///< xs:NMTOKEN value="realtimeDataAvailable"
};

/// @brief A class wrapper.
///
class ns2__ServiceExceptionEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ServiceExceptionEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringDetailEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Detail Levels for Request.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__VehicleMonitoringDetailEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__VehicleMonitoringDetailEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return only the minimum amount of optional data for each stop event to provide a display, A time, line name and destination name.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleMonitoringDetailEnumeration__minimum,	///< xs:NMTOKEN value="minimum"
/// <PRE><BLOCKQUOTE>
///   Return minimum and other available basic details for each stop event. Do not include data on time at next stop or destination.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleMonitoringDetailEnumeration__basic,	///< xs:NMTOKEN value="basic"
/// <PRE><BLOCKQUOTE>
///   Return all basic data, and also arrival times at DESTINATION.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleMonitoringDetailEnumeration__normal,	///< xs:NMTOKEN value="normal"
/// <PRE><BLOCKQUOTE>
///   Return all available data for each stop event, including previous and onward CALLs with passing times for JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
	ns2__VehicleMonitoringDetailEnumeration__calls,	///< xs:NMTOKEN value="calls"
};

/// @brief A class wrapper.
///
class ns2__VehicleMonitoringDetailEnumeration_ : public xsd__anyType
{ public:
    enum ns2__VehicleMonitoringDetailEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a Vehicle Monitoring scope.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__VehicleMonitoringCodeType;

/// @brief A class wrapper.
///
class ns2__VehicleMonitoringCodeType__ : public xsd__anyType
{ public:
    ns2__VehicleMonitoringCodeType       __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringDetailEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Detail Levels for Connection Monitoring Request.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ConnectionMonitoringDetailEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ConnectionMonitoringDetailEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return only the minimum amount of optional data for each Stop Visit to provide a display, A time at stop, LINE name and destination name.
/// </BLOCKQUOTE></PRE>
	ns2__ConnectionMonitoringDetailEnumeration__minimum,	///< xs:NMTOKEN value="minimum"
/// <PRE><BLOCKQUOTE>
///   Return minimum and other available basic details for each Stop Visit. Do not include data on times at next stop or destination.
/// </BLOCKQUOTE></PRE>
	ns2__ConnectionMonitoringDetailEnumeration__basic,	///< xs:NMTOKEN value="basic"
/// <PRE><BLOCKQUOTE>
///   Return all basic data, and also origin VIA points and destination.
/// </BLOCKQUOTE></PRE>
	ns2__ConnectionMonitoringDetailEnumeration__normal,	///< xs:NMTOKEN value="normal"
/// <PRE><BLOCKQUOTE>
///   Return all available data for each Stop Visit, including calls.
/// </BLOCKQUOTE></PRE>
	ns2__ConnectionMonitoringDetailEnumeration__full,	///< xs:NMTOKEN value="full"
};

/// @brief A class wrapper.
///
class ns2__ConnectionMonitoringDetailEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ConnectionMonitoringDetailEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":InfoMessageIdentifierType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an Info Message.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns2__InfoMessageIdentifierType;

/// @brief A class wrapper.
///
class ns2__InfoMessageIdentifierType__ : public xsd__anyType
{ public:
    ns2__InfoMessageIdentifierType       __item;                       
};

/// @brief "http://www.siri.org.uk/siri":StopPointsDetailEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Detail Levels for Stop Points Discovery Request. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__StopPointsDetailEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__StopPointsDetailEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return only the name and identifier of the stop.
/// </BLOCKQUOTE></PRE>
	ns2__StopPointsDetailEnumeration__minimum,	///< xs:NMTOKEN value="minimum"
/// <PRE><BLOCKQUOTE>
///   Return name, dientifier and coordinates of the stop.
/// </BLOCKQUOTE></PRE>
	ns2__StopPointsDetailEnumeration__normal,	///< xs:NMTOKEN value="normal"
/// <PRE><BLOCKQUOTE>
///   Return all available data for each stop.
/// </BLOCKQUOTE></PRE>
	ns2__StopPointsDetailEnumeration__full,	///< xs:NMTOKEN value="full"
};

/// @brief A class wrapper.
///
class ns2__StopPointsDetailEnumeration_ : public xsd__anyType
{ public:
    enum ns2__StopPointsDetailEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":LinesDetailEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Detail Levels for Lines Discovery Request. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__LinesDetailEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__LinesDetailEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return only the name and identifier of the stop.
/// </BLOCKQUOTE></PRE>
	ns2__LinesDetailEnumeration__minimum,	///< xs:NMTOKEN value="minimum"
/// <PRE><BLOCKQUOTE>
///   Return name, dientifier and coordinates of the stop.
/// </BLOCKQUOTE></PRE>
	ns2__LinesDetailEnumeration__normal,	///< xs:NMTOKEN value="normal"
	ns2__LinesDetailEnumeration__stops,	///< xs:NMTOKEN value="stops"
/// <PRE><BLOCKQUOTE>
///   Return all available data for each stop.
/// </BLOCKQUOTE></PRE>
	ns2__LinesDetailEnumeration__full,	///< xs:NMTOKEN value="full"
};

/// @brief A class wrapper.
///
class ns2__LinesDetailEnumeration_ : public xsd__anyType
{ public:
    enum ns2__LinesDetailEnumeration     __item;                       
};

/// @brief "http://www.siri.org.uk/siri":FacilityDetailEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Detail Levels for Facility Points Request. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__FacilityDetailEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__FacilityDetailEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return only the name and identifier of the Facility.
/// </BLOCKQUOTE></PRE>
	ns2__FacilityDetailEnumeration__minimum,	///< xs:NMTOKEN value="minimum"
/// <PRE><BLOCKQUOTE>
///   Return name, identifier and coordinates of the Facility.
/// </BLOCKQUOTE></PRE>
	ns2__FacilityDetailEnumeration__normal,	///< xs:NMTOKEN value="normal"
/// <PRE><BLOCKQUOTE>
///   Return all available data for each Facility.
/// </BLOCKQUOTE></PRE>
	ns2__FacilityDetailEnumeration__full,	///< xs:NMTOKEN value="full"
};

/// @brief A class wrapper.
///
class ns2__FacilityDetailEnumeration_ : public xsd__anyType
{ public:
    enum ns2__FacilityDetailEnumeration  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":ConnectionLinksDetailEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Detail Levels for CONNECTION LINKs Discovery Request. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__ConnectionLinksDetailEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__ConnectionLinksDetailEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Return only the name and identifier of the connection link.
/// </BLOCKQUOTE></PRE>
	ns2__ConnectionLinksDetailEnumeration__minimum,	///< xs:NMTOKEN value="minimum"
/// <PRE><BLOCKQUOTE>
///   Return name, identifier of the connection link and connected stops's identifiers.
/// </BLOCKQUOTE></PRE>
	ns2__ConnectionLinksDetailEnumeration__normal,	///< xs:NMTOKEN value="normal"
/// <PRE><BLOCKQUOTE>
///   Return all available data for each connection link.
/// </BLOCKQUOTE></PRE>
	ns2__ConnectionLinksDetailEnumeration__full,	///< xs:NMTOKEN value="full"
};

/// @brief A class wrapper.
///
class ns2__ConnectionLinksDetailEnumeration_ : public xsd__anyType
{ public:
    enum ns2__ConnectionLinksDetailEnumeration  __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.ifopt.org.uk/acsb":LimitationIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a hazard within a stop place.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns3__LimitationIdType;

/// @brief A class wrapper.
///
class ns3__LimitationIdType__ : public xsd__anyType
{ public:
    ns3__LimitationIdType                __item;                       
};

/// @brief "http://www.ifopt.org.uk/acsb":AccessibilityEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of values for an accessibility value.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__AccessibilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__AccessibilityEnumeration
{
	ns3__AccessibilityEnumeration__unknown,	///< xs:string value="unknown"
	ns3__AccessibilityEnumeration__false_,	///< xs:string value="false"
	ns3__AccessibilityEnumeration__true_,	///< xs:string value="true"
};

/// @brief A class wrapper.
///
class ns3__AccessibilityEnumeration_ : public xsd__anyType
{ public:
    enum ns3__AccessibilityEnumeration   __item;                       
};

/// @brief "http://www.ifopt.org.uk/acsb":MobilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identification of mobility USER NEEDs.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MobilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MobilityEnumeration
{
	ns3__MobilityEnumeration__wheelchair,	///< xs:NMTOKEN value="wheelchair"
	ns3__MobilityEnumeration__assistedWheelchair,	///< xs:NMTOKEN value="assistedWheelchair"
	ns3__MobilityEnumeration__motorizedWheelchair,	///< xs:NMTOKEN value="motorizedWheelchair"
	ns3__MobilityEnumeration__walkingFrame,	///< xs:NMTOKEN value="walkingFrame"
	ns3__MobilityEnumeration__restrictedMobility,	///< xs:NMTOKEN value="restrictedMobility"
	ns3__MobilityEnumeration__otherMobilityNeed,	///< xs:NMTOKEN value="otherMobilityNeed"
};

/// @brief A class wrapper.
///
class ns3__MobilityEnumeration_ : public xsd__anyType
{ public:
    enum ns3__MobilityEnumeration        __item;                       
};

/// @brief "http://www.ifopt.org.uk/acsb":PyschosensoryNeedEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of specific psychosensory USER NEEDs.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__PyschosensoryNeedEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__PyschosensoryNeedEnumeration
{
	ns3__PyschosensoryNeedEnumeration__visualImpairment,	///< xs:NMTOKEN value="visualImpairment"
	ns3__PyschosensoryNeedEnumeration__auditoryImpairment,	///< xs:NMTOKEN value="auditoryImpairment"
	ns3__PyschosensoryNeedEnumeration__cognitiveInputImpairment,	///< xs:NMTOKEN value="cognitiveInputImpairment"
	ns3__PyschosensoryNeedEnumeration__averseToLifts,	///< xs:NMTOKEN value="averseToLifts"
	ns3__PyschosensoryNeedEnumeration__averseToEscalators,	///< xs:NMTOKEN value="averseToEscalators"
	ns3__PyschosensoryNeedEnumeration__averseToConfinedSpaces,	///< xs:NMTOKEN value="averseToConfinedSpaces"
	ns3__PyschosensoryNeedEnumeration__averseToCrowds,	///< xs:NMTOKEN value="averseToCrowds"
	ns3__PyschosensoryNeedEnumeration__otherPsychosensoryNeed,	///< xs:NMTOKEN value="otherPsychosensoryNeed"
};

/// @brief A class wrapper.
///
class ns3__PyschosensoryNeedEnumeration_ : public xsd__anyType
{ public:
    enum ns3__PyschosensoryNeedEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/acsb":MedicalNeedEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of specific Medical USER NEEDs.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__MedicalNeedEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__MedicalNeedEnumeration
{
	ns3__MedicalNeedEnumeration__allergic,	///< xs:NMTOKEN value="allergic"
	ns3__MedicalNeedEnumeration__heartCondition,	///< xs:NMTOKEN value="heartCondition"
	ns3__MedicalNeedEnumeration__otherMedicalNeed,	///< xs:NMTOKEN value="otherMedicalNeed"
};

/// @brief A class wrapper.
///
class ns3__MedicalNeedEnumeration_ : public xsd__anyType
{ public:
    enum ns3__MedicalNeedEnumeration     __item;                       
};

/// @brief "http://www.ifopt.org.uk/acsb":EncumbranceEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of specific encumbrances USER NEEDs.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__EncumbranceEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__EncumbranceEnumeration
{
	ns3__EncumbranceEnumeration__luggageEncumbered,	///< xs:NMTOKEN value="luggageEncumbered"
	ns3__EncumbranceEnumeration__pushchair,	///< xs:NMTOKEN value="pushchair"
	ns3__EncumbranceEnumeration__baggageTrolley,	///< xs:NMTOKEN value="baggageTrolley"
	ns3__EncumbranceEnumeration__oversizeBaggage,	///< xs:NMTOKEN value="oversizeBaggage"
	ns3__EncumbranceEnumeration__guideDog,	///< xs:NMTOKEN value="guideDog"
	ns3__EncumbranceEnumeration__otherAnimal,	///< xs:NMTOKEN value="otherAnimal"
	ns3__EncumbranceEnumeration__otherEncumbrance,	///< xs:NMTOKEN value="otherEncumbrance"
};

/// @brief A class wrapper.
///
class ns3__EncumbranceEnumeration_ : public xsd__anyType
{ public:
    enum ns3__EncumbranceEnumeration     __item;                       
};

/// @brief "http://www.ifopt.org.uk/acsb":SuitabilityEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identification of specific SUITABILITY.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__SuitabilityEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__SuitabilityEnumeration
{
	ns3__SuitabilityEnumeration__suitable,	///< xs:NMTOKEN value="suitable"
	ns3__SuitabilityEnumeration__notSuitable,	///< xs:NMTOKEN value="notSuitable"
};

/// @brief A class wrapper.
///
class ns3__SuitabilityEnumeration_ : public xsd__anyType
{ public:
    enum ns3__SuitabilityEnumeration     __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.ifopt.org.uk/ifopt":EquipmentIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__EquipmentIdType;

/// @brief A class wrapper.
///
class ns4__EquipmentIdType__ : public xsd__anyType
{ public:
    ns4__EquipmentIdType                 __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":EquipmentTypeCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for a identifier of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__EquipmentTypeCodeType;

/// @brief A class wrapper.
///
class ns4__EquipmentTypeCodeType__ : public xsd__anyType
{ public:
    ns4__EquipmentTypeCodeType           __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":EquipmentStatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Availabilityload status of a EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__EquipmentStatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__EquipmentStatusEnumeration
{
	ns4__EquipmentStatusEnumeration__unknown,	///< xs:NMTOKEN value="unknown"
	ns4__EquipmentStatusEnumeration__available,	///< xs:NMTOKEN value="available"
	ns4__EquipmentStatusEnumeration__notAvailable,	///< xs:NMTOKEN value="notAvailable"
};

/// @brief A class wrapper.
///
class ns4__EquipmentStatusEnumeration_ : public xsd__anyType
{ public:
    enum ns4__EquipmentStatusEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":Metres is a simpleType restriction of XSD type xs:decimal.
///
/// <PRE><BLOCKQUOTE>
///   Distance in metres.
/// </BLOCKQUOTE></PRE>
typedef xsd__decimal ns4__Metres;

/// @brief A class wrapper.
///
class ns4__Metres__ : public xsd__anyType
{ public:
    ns4__Metres                          __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":AdministratorCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an ORGANISATION with administrative responsibility.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__AdministratorCodeType;

/// @brief A class wrapper.
///
class ns4__AdministratorCodeType__ : public xsd__anyType
{ public:
    ns4__AdministratorCodeType           __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":AdministrativeAreaCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of ADMINISTRATIVE ZONE.
/// </BLOCKQUOTE></PRE>
/// Content pattern is "[0-9]{3}".
typedef xsd__NMTOKEN ns4__AdministrativeAreaCodeType "[0-9]{3}";

/// @brief A class wrapper.
///
class ns4__AdministrativeAreaCodeType__ : public xsd__anyType
{ public:
    ns4__AdministrativeAreaCodeType      __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":AdministrativeRoleTypeEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of allowed values for RESPONSIBILITY ROLEs.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__AdministrativeRoleTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__AdministrativeRoleTypeEnumeration
{
	ns4__AdministrativeRoleTypeEnumeration__all,	///< xs:string value="all"
	ns4__AdministrativeRoleTypeEnumeration__collects,	///< xs:string value="collects"
	ns4__AdministrativeRoleTypeEnumeration__validates,	///< xs:string value="validates"
	ns4__AdministrativeRoleTypeEnumeration__aggregates,	///< xs:string value="aggregates"
	ns4__AdministrativeRoleTypeEnumeration__distributes,	///< xs:string value="distributes"
	ns4__AdministrativeRoleTypeEnumeration__redistributes,	///< xs:string value="redistributes"
};

/// @brief A class wrapper.
///
class ns4__AdministrativeRoleTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns4__AdministrativeRoleTypeEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":NamespaceTypeCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of type of Namespace.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__NamespaceTypeCodeType;

/// @brief A class wrapper.
///
class ns4__NamespaceTypeCodeType__ : public xsd__anyType
{ public:
    ns4__NamespaceTypeCodeType           __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":NamespaceIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   The type for identifier of Namespace.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__NamespaceIdType;

/// @brief A class wrapper.
///
class ns4__NamespaceIdType__ : public xsd__anyType
{ public:
    ns4__NamespaceIdType                 __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":NamespaceValueType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Type for a value of a namespace.
/// </BLOCKQUOTE></PRE>
typedef std::wstring ns4__NamespaceValueType;

/// @brief A class wrapper.
///
class ns4__NamespaceValueType__ : public xsd__anyType
{ public:
    ns4__NamespaceValueType              __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":RegionCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for a Identifier of Region.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__RegionCodeType;

/// @brief A class wrapper.
///
class ns4__RegionCodeType__ : public xsd__anyType
{ public:
    ns4__RegionCodeType                  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":AuthorityCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of AUTHORITY.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0 to 2.
typedef xsd__NMTOKEN ns4__AuthorityCodeType : 2;

/// @brief A class wrapper.
///
class ns4__AuthorityCodeType__ : public xsd__anyType
{ public:
    ns4__AuthorityCodeType               __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":ModificationEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Classification of modification as addition, deletion or revision. Enumerated value.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__ModificationEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__ModificationEnumeration
{
/// <PRE><BLOCKQUOTE>
///   This is a definition of a new entity.
/// </BLOCKQUOTE></PRE>
	ns4__ModificationEnumeration__new_,	///< xs:NMTOKEN value="new"
/// <PRE><BLOCKQUOTE>
///   This is a deletion of an existing entity.
/// </BLOCKQUOTE></PRE>
	ns4__ModificationEnumeration__delete_,	///< xs:NMTOKEN value="delete"
/// <PRE><BLOCKQUOTE>
///   This is a revision to an existing entity. All values are replaced.
/// </BLOCKQUOTE></PRE>
	ns4__ModificationEnumeration__revise,	///< xs:NMTOKEN value="revise"
};

/// @brief A class wrapper.
///
class ns4__ModificationEnumeration_ : public xsd__anyType
{ public:
    enum ns4__ModificationEnumeration    __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":DeltaModificationEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Classification of modification as addition, deletion, revision or delta only. Enumerated value.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__DeltaModificationEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__DeltaModificationEnumeration
{
/// <PRE><BLOCKQUOTE>
///   This is a definition of a new entity.
/// </BLOCKQUOTE></PRE>
	ns4__DeltaModificationEnumeration__new_,	///< xs:NMTOKEN value="new"
/// <PRE><BLOCKQUOTE>
///   This is a deletion of an existing entity.
/// </BLOCKQUOTE></PRE>
	ns4__DeltaModificationEnumeration__delete_,	///< xs:NMTOKEN value="delete"
/// <PRE><BLOCKQUOTE>
///   This is a revision to an existing entity. All values are replaced.
/// </BLOCKQUOTE></PRE>
	ns4__DeltaModificationEnumeration__revise,	///< xs:NMTOKEN value="revise"
/// <PRE><BLOCKQUOTE>
///   This is a change to an existing enity. Only those values expliciitly supplied will be changed.
/// </BLOCKQUOTE></PRE>
	ns4__DeltaModificationEnumeration__delta,	///< xs:NMTOKEN value="delta"
};

/// @brief A class wrapper.
///
class ns4__DeltaModificationEnumeration_ : public xsd__anyType
{ public:
    enum ns4__DeltaModificationEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":RevisionNumberType is a simpleType restriction of XSD type xs:nonNegativeInteger.
///
/// <PRE><BLOCKQUOTE>
///   A revision number is an integer that should be increased by one each time the unit that is refers to is modified.
/// </BLOCKQUOTE></PRE>
typedef xsd__nonNegativeInteger ns4__RevisionNumberType;

/// @brief A class wrapper.
///
class ns4__RevisionNumberType__ : public xsd__anyType
{ public:
    ns4__RevisionNumberType              __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":StatusEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Indicates whether the entity this annotates is available for use. Use of this attribute allows entities to be retired without deleting the details from the dataset.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__StatusEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__StatusEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Entity is active.
/// </BLOCKQUOTE></PRE>
	ns4__StatusEnumeration__active,	///< xs:NMTOKEN value="active"
/// <PRE><BLOCKQUOTE>
///   Entity is inactive.
/// </BLOCKQUOTE></PRE>
	ns4__StatusEnumeration__inactive,	///< xs:NMTOKEN value="inactive"
/// <PRE><BLOCKQUOTE>
///   Entity is still active but is in the process of being made inactive.
/// </BLOCKQUOTE></PRE>
	ns4__StatusEnumeration__pending,	///< xs:NMTOKEN value="pending"
};

/// @brief A class wrapper.
///
class ns4__StatusEnumeration_ : public xsd__anyType
{ public:
    enum ns4__StatusEnumeration          __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":IanaCountryTldEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for classifying NPTG Localities.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__IanaCountryTldEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__IanaCountryTldEnumeration
{
/// <PRE><BLOCKQUOTE>
///   Ascension Island.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ac,	///< xs:NMTOKEN value="ac"
/// <PRE><BLOCKQUOTE>
///   Andorra.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ad,	///< xs:NMTOKEN value="ad"
/// <PRE><BLOCKQUOTE>
///   United Arab Emirates.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ae,	///< xs:NMTOKEN value="ae"
/// <PRE><BLOCKQUOTE>
///   Afghanistan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__af,	///< xs:NMTOKEN value="af"
/// <PRE><BLOCKQUOTE>
///   Antigua and Barbuda.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ag,	///< xs:NMTOKEN value="ag"
/// <PRE><BLOCKQUOTE>
///   Anguilla.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ai,	///< xs:NMTOKEN value="ai"
/// <PRE><BLOCKQUOTE>
///   Albania.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__al,	///< xs:NMTOKEN value="al"
/// <PRE><BLOCKQUOTE>
///   Armenia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__am,	///< xs:NMTOKEN value="am"
/// <PRE><BLOCKQUOTE>
///   Netherlands Antilles.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__an,	///< xs:NMTOKEN value="an"
/// <PRE><BLOCKQUOTE>
///   Angola.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ao,	///< xs:NMTOKEN value="ao"
/// <PRE><BLOCKQUOTE>
///   Antarctica.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__aq,	///< xs:NMTOKEN value="aq"
/// <PRE><BLOCKQUOTE>
///   Argentina.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ar,	///< xs:NMTOKEN value="ar"
/// <PRE><BLOCKQUOTE>
///   American Samoa.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__as,	///< xs:NMTOKEN value="as"
/// <PRE><BLOCKQUOTE>
///   Austria.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__at,	///< xs:NMTOKEN value="at"
/// <PRE><BLOCKQUOTE>
///   Australia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__au,	///< xs:NMTOKEN value="au"
/// <PRE><BLOCKQUOTE>
///   Aruba.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__aw,	///< xs:NMTOKEN value="aw"
/// <PRE><BLOCKQUOTE>
///   Azerbaijan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__az,	///< xs:NMTOKEN value="az"
/// <PRE><BLOCKQUOTE>
///   Aland Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ax,	///< xs:NMTOKEN value="ax"
/// <PRE><BLOCKQUOTE>
///   Bosnia and Herzegovina.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ba,	///< xs:NMTOKEN value="ba"
/// <PRE><BLOCKQUOTE>
///   Barbados.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bb,	///< xs:NMTOKEN value="bb"
/// <PRE><BLOCKQUOTE>
///   Bangladesh.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bd,	///< xs:NMTOKEN value="bd"
/// <PRE><BLOCKQUOTE>
///   Belgium.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__be,	///< xs:NMTOKEN value="be"
/// <PRE><BLOCKQUOTE>
///   Burkina Faso.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bf,	///< xs:NMTOKEN value="bf"
/// <PRE><BLOCKQUOTE>
///   Bulgaria.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bg,	///< xs:NMTOKEN value="bg"
/// <PRE><BLOCKQUOTE>
///   Bahrain.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bh,	///< xs:NMTOKEN value="bh"
/// <PRE><BLOCKQUOTE>
///   Burundi.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bi,	///< xs:NMTOKEN value="bi"
/// <PRE><BLOCKQUOTE>
///   Benin.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bj,	///< xs:NMTOKEN value="bj"
/// <PRE><BLOCKQUOTE>
///   Bermuda.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bm,	///< xs:NMTOKEN value="bm"
/// <PRE><BLOCKQUOTE>
///   Brunei Darussalam.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bn,	///< xs:NMTOKEN value="bn"
/// <PRE><BLOCKQUOTE>
///   Bolivia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bo,	///< xs:NMTOKEN value="bo"
/// <PRE><BLOCKQUOTE>
///   Brazil.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__br,	///< xs:NMTOKEN value="br"
/// <PRE><BLOCKQUOTE>
///   Bahamas.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bs,	///< xs:NMTOKEN value="bs"
/// <PRE><BLOCKQUOTE>
///   Bhutan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bt,	///< xs:NMTOKEN value="bt"
/// <PRE><BLOCKQUOTE>
///   Bouvet Island.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bv,	///< xs:NMTOKEN value="bv"
/// <PRE><BLOCKQUOTE>
///   Botswana.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bw,	///< xs:NMTOKEN value="bw"
/// <PRE><BLOCKQUOTE>
///   Belarus.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__by,	///< xs:NMTOKEN value="by"
/// <PRE><BLOCKQUOTE>
///   Belize.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__bz,	///< xs:NMTOKEN value="bz"
/// <PRE><BLOCKQUOTE>
///   Canada.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ca,	///< xs:NMTOKEN value="ca"
/// <PRE><BLOCKQUOTE>
///   Cocos (Keeling) Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cc,	///< xs:NMTOKEN value="cc"
/// <PRE><BLOCKQUOTE>
///   Congo, The Democratic Republic of the.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cd,	///< xs:NMTOKEN value="cd"
/// <PRE><BLOCKQUOTE>
///   Central African Republic.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cf,	///< xs:NMTOKEN value="cf"
/// <PRE><BLOCKQUOTE>
///   Congo, Republic of.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cg,	///< xs:NMTOKEN value="cg"
/// <PRE><BLOCKQUOTE>
///   Switzerland.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ch,	///< xs:NMTOKEN value="ch"
/// <PRE><BLOCKQUOTE>
///   Cote d'Ivoire.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ci,	///< xs:NMTOKEN value="ci"
/// <PRE><BLOCKQUOTE>
///   Cook Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ck,	///< xs:NMTOKEN value="ck"
/// <PRE><BLOCKQUOTE>
///   Chile.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cl,	///< xs:NMTOKEN value="cl"
/// <PRE><BLOCKQUOTE>
///   Cameroon.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cm,	///< xs:NMTOKEN value="cm"
/// <PRE><BLOCKQUOTE>
///   China.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cn,	///< xs:NMTOKEN value="cn"
/// <PRE><BLOCKQUOTE>
///   Colombia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__co,	///< xs:NMTOKEN value="co"
/// <PRE><BLOCKQUOTE>
///   Costa Rica.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cr,	///< xs:NMTOKEN value="cr"
/// <PRE><BLOCKQUOTE>
///   Serbia and Montenegro.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cs,	///< xs:NMTOKEN value="cs"
/// <PRE><BLOCKQUOTE>
///   Cuba.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cu,	///< xs:NMTOKEN value="cu"
/// <PRE><BLOCKQUOTE>
///   Cape Verde.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cv,	///< xs:NMTOKEN value="cv"
/// <PRE><BLOCKQUOTE>
///   Christmas Island.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cx,	///< xs:NMTOKEN value="cx"
/// <PRE><BLOCKQUOTE>
///   Cyprus.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cy,	///< xs:NMTOKEN value="cy"
/// <PRE><BLOCKQUOTE>
///   Czech Republic.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__cz,	///< xs:NMTOKEN value="cz"
/// <PRE><BLOCKQUOTE>
///   Germany.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__de,	///< xs:NMTOKEN value="de"
/// <PRE><BLOCKQUOTE>
///   Djibouti.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__dj,	///< xs:NMTOKEN value="dj"
/// <PRE><BLOCKQUOTE>
///   Denmark.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__dk,	///< xs:NMTOKEN value="dk"
/// <PRE><BLOCKQUOTE>
///   Dominica.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__dm,	///< xs:NMTOKEN value="dm"
/// <PRE><BLOCKQUOTE>
///   Dominican Republic.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__do_,	///< xs:NMTOKEN value="do"
/// <PRE><BLOCKQUOTE>
///   Algeria.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__dz,	///< xs:NMTOKEN value="dz"
/// <PRE><BLOCKQUOTE>
///   Ecuador.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ec,	///< xs:NMTOKEN value="ec"
/// <PRE><BLOCKQUOTE>
///   Estonia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ee,	///< xs:NMTOKEN value="ee"
/// <PRE><BLOCKQUOTE>
///   Egypt.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__eg,	///< xs:NMTOKEN value="eg"
/// <PRE><BLOCKQUOTE>
///   Western Sahara.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__eh,	///< xs:NMTOKEN value="eh"
/// <PRE><BLOCKQUOTE>
///   Eritrea.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__er,	///< xs:NMTOKEN value="er"
/// <PRE><BLOCKQUOTE>
///   Spain.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__es,	///< xs:NMTOKEN value="es"
/// <PRE><BLOCKQUOTE>
///   Ethiopia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__et,	///< xs:NMTOKEN value="et"
/// <PRE><BLOCKQUOTE>
///   European Union.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__eu,	///< xs:NMTOKEN value="eu"
/// <PRE><BLOCKQUOTE>
///   Finland.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__fi,	///< xs:NMTOKEN value="fi"
/// <PRE><BLOCKQUOTE>
///   Fiji.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__fj,	///< xs:NMTOKEN value="fj"
/// <PRE><BLOCKQUOTE>
///   Falkland Islands (Malvinas)
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__fk,	///< xs:NMTOKEN value="fk"
/// <PRE><BLOCKQUOTE>
///   Micronesia, Federal State of.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__fm,	///< xs:NMTOKEN value="fm"
/// <PRE><BLOCKQUOTE>
///   Faroe Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__fo,	///< xs:NMTOKEN value="fo"
/// <PRE><BLOCKQUOTE>
///   France.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__fr,	///< xs:NMTOKEN value="fr"
/// <PRE><BLOCKQUOTE>
///   Gabon.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ga,	///< xs:NMTOKEN value="ga"
/// <PRE><BLOCKQUOTE>
///   United Kingdom.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gb,	///< xs:NMTOKEN value="gb"
/// <PRE><BLOCKQUOTE>
///   Grenada.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gd,	///< xs:NMTOKEN value="gd"
/// <PRE><BLOCKQUOTE>
///   Georgia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ge,	///< xs:NMTOKEN value="ge"
/// <PRE><BLOCKQUOTE>
///   French Guiana.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gf,	///< xs:NMTOKEN value="gf"
/// <PRE><BLOCKQUOTE>
///   Guernsey.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gg,	///< xs:NMTOKEN value="gg"
/// <PRE><BLOCKQUOTE>
///   Ghana.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gh,	///< xs:NMTOKEN value="gh"
/// <PRE><BLOCKQUOTE>
///   Gibraltar.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gi,	///< xs:NMTOKEN value="gi"
/// <PRE><BLOCKQUOTE>
///   Greenland.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gl,	///< xs:NMTOKEN value="gl"
/// <PRE><BLOCKQUOTE>
///   Gambia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gm,	///< xs:NMTOKEN value="gm"
/// <PRE><BLOCKQUOTE>
///   Guinea.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gn,	///< xs:NMTOKEN value="gn"
/// <PRE><BLOCKQUOTE>
///   Guadeloupe.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gp,	///< xs:NMTOKEN value="gp"
/// <PRE><BLOCKQUOTE>
///   Equatorial Guinea.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gq,	///< xs:NMTOKEN value="gq"
/// <PRE><BLOCKQUOTE>
///   Greece.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gr,	///< xs:NMTOKEN value="gr"
/// <PRE><BLOCKQUOTE>
///   South Georgia and the South Sandwich Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gs,	///< xs:NMTOKEN value="gs"
/// <PRE><BLOCKQUOTE>
///   Guatemala.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gt,	///< xs:NMTOKEN value="gt"
/// <PRE><BLOCKQUOTE>
///   Guam.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gu,	///< xs:NMTOKEN value="gu"
/// <PRE><BLOCKQUOTE>
///   Guinea-Bissau.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gw,	///< xs:NMTOKEN value="gw"
/// <PRE><BLOCKQUOTE>
///   Guyana.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__gy,	///< xs:NMTOKEN value="gy"
/// <PRE><BLOCKQUOTE>
///   Hong Kong.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__hk,	///< xs:NMTOKEN value="hk"
/// <PRE><BLOCKQUOTE>
///   Heard and McDonald Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__hm,	///< xs:NMTOKEN value="hm"
/// <PRE><BLOCKQUOTE>
///   Honduras.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__hn,	///< xs:NMTOKEN value="hn"
/// <PRE><BLOCKQUOTE>
///   Croatia/Hrvatska.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__hr,	///< xs:NMTOKEN value="hr"
/// <PRE><BLOCKQUOTE>
///   Haiti.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ht,	///< xs:NMTOKEN value="ht"
/// <PRE><BLOCKQUOTE>
///   Hungary.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__hu,	///< xs:NMTOKEN value="hu"
/// <PRE><BLOCKQUOTE>
///   Indonesia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__id,	///< xs:NMTOKEN value="id"
/// <PRE><BLOCKQUOTE>
///   Ireland.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ie,	///< xs:NMTOKEN value="ie"
/// <PRE><BLOCKQUOTE>
///   Israel.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__il,	///< xs:NMTOKEN value="il"
/// <PRE><BLOCKQUOTE>
///   Isle of Man.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__im,	///< xs:NMTOKEN value="im"
/// <PRE><BLOCKQUOTE>
///   India.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__in,	///< xs:NMTOKEN value="in"
/// <PRE><BLOCKQUOTE>
///   British Indian Ocean Territory.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__io,	///< xs:NMTOKEN value="io"
/// <PRE><BLOCKQUOTE>
///   Iraq
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__iq,	///< xs:NMTOKEN value="iq"
/// <PRE><BLOCKQUOTE>
///   Iran, Islamic Republic of.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ir,	///< xs:NMTOKEN value="ir"
/// <PRE><BLOCKQUOTE>
///   Iceland.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__is,	///< xs:NMTOKEN value="is"
/// <PRE><BLOCKQUOTE>
///   Italy.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__it,	///< xs:NMTOKEN value="it"
/// <PRE><BLOCKQUOTE>
///   Jersey.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__je,	///< xs:NMTOKEN value="je"
/// <PRE><BLOCKQUOTE>
///   Jamaica.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__jm,	///< xs:NMTOKEN value="jm"
/// <PRE><BLOCKQUOTE>
///   Jordan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__jo,	///< xs:NMTOKEN value="jo"
/// <PRE><BLOCKQUOTE>
///   Japan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__jp,	///< xs:NMTOKEN value="jp"
/// <PRE><BLOCKQUOTE>
///   Kenya.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ke,	///< xs:NMTOKEN value="ke"
/// <PRE><BLOCKQUOTE>
///   Kyrgyzstan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__kg,	///< xs:NMTOKEN value="kg"
/// <PRE><BLOCKQUOTE>
///   Cambodia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__kh,	///< xs:NMTOKEN value="kh"
/// <PRE><BLOCKQUOTE>
///   Kiribati.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ki,	///< xs:NMTOKEN value="ki"
/// <PRE><BLOCKQUOTE>
///   Comoros.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__km,	///< xs:NMTOKEN value="km"
/// <PRE><BLOCKQUOTE>
///   Saint Kitts and Nevis.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__kn,	///< xs:NMTOKEN value="kn"
/// <PRE><BLOCKQUOTE>
///   Korea, Democratic People's Republic.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__kp,	///< xs:NMTOKEN value="kp"
/// <PRE><BLOCKQUOTE>
///   Korea, Republic of.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__kr,	///< xs:NMTOKEN value="kr"
/// <PRE><BLOCKQUOTE>
///   Kuwait.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__kw,	///< xs:NMTOKEN value="kw"
/// <PRE><BLOCKQUOTE>
///   Cayman Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ky,	///< xs:NMTOKEN value="ky"
/// <PRE><BLOCKQUOTE>
///   Kazakhstan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__kz,	///< xs:NMTOKEN value="kz"
/// <PRE><BLOCKQUOTE>
///   Lao People's Democratic Republic.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__la,	///< xs:NMTOKEN value="la"
/// <PRE><BLOCKQUOTE>
///   Lebanon.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__lb,	///< xs:NMTOKEN value="lb"
/// <PRE><BLOCKQUOTE>
///   Saint Lucia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__lc,	///< xs:NMTOKEN value="lc"
/// <PRE><BLOCKQUOTE>
///   Liechtenstein.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__li,	///< xs:NMTOKEN value="li"
/// <PRE><BLOCKQUOTE>
///   Sri Lanka.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__lk,	///< xs:NMTOKEN value="lk"
/// <PRE><BLOCKQUOTE>
///   Liberia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__lr,	///< xs:NMTOKEN value="lr"
/// <PRE><BLOCKQUOTE>
///   Lesotho.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ls,	///< xs:NMTOKEN value="ls"
/// <PRE><BLOCKQUOTE>
///   Lithuania.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__lt,	///< xs:NMTOKEN value="lt"
/// <PRE><BLOCKQUOTE>
///   Luxembourg.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__lu,	///< xs:NMTOKEN value="lu"
/// <PRE><BLOCKQUOTE>
///   Latvia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__lv,	///< xs:NMTOKEN value="lv"
/// <PRE><BLOCKQUOTE>
///   Libyan Arab Jamahiriya.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ly,	///< xs:NMTOKEN value="ly"
/// <PRE><BLOCKQUOTE>
///   Morocco.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ma,	///< xs:NMTOKEN value="ma"
/// <PRE><BLOCKQUOTE>
///   Monaco.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mc,	///< xs:NMTOKEN value="mc"
/// <PRE><BLOCKQUOTE>
///   Moldova, Republic of.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__md,	///< xs:NMTOKEN value="md"
/// <PRE><BLOCKQUOTE>
///   Madagascar.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mg,	///< xs:NMTOKEN value="mg"
/// <PRE><BLOCKQUOTE>
///   Marshall Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mh,	///< xs:NMTOKEN value="mh"
/// <PRE><BLOCKQUOTE>
///   Macedonia, The Former Yugoslav Republic of.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mk,	///< xs:NMTOKEN value="mk"
/// <PRE><BLOCKQUOTE>
///   Mali.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ml,	///< xs:NMTOKEN value="ml"
/// <PRE><BLOCKQUOTE>
///   Myanmar.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mm,	///< xs:NMTOKEN value="mm"
/// <PRE><BLOCKQUOTE>
///   Mongolia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mn,	///< xs:NMTOKEN value="mn"
/// <PRE><BLOCKQUOTE>
///   Macau.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mo,	///< xs:NMTOKEN value="mo"
/// <PRE><BLOCKQUOTE>
///   Northern Mariana Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mp,	///< xs:NMTOKEN value="mp"
/// <PRE><BLOCKQUOTE>
///   Martinique.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mq,	///< xs:NMTOKEN value="mq"
/// <PRE><BLOCKQUOTE>
///   Mauritania.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mr,	///< xs:NMTOKEN value="mr"
/// <PRE><BLOCKQUOTE>
///   Montserrat.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ms,	///< xs:NMTOKEN value="ms"
/// <PRE><BLOCKQUOTE>
///   Malta.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mt,	///< xs:NMTOKEN value="mt"
/// <PRE><BLOCKQUOTE>
///   Mauritius.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mu,	///< xs:NMTOKEN value="mu"
/// <PRE><BLOCKQUOTE>
///   Maldives.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mv,	///< xs:NMTOKEN value="mv"
/// <PRE><BLOCKQUOTE>
///   Malawi.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mw,	///< xs:NMTOKEN value="mw"
/// <PRE><BLOCKQUOTE>
///   Mexico.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mx,	///< xs:NMTOKEN value="mx"
/// <PRE><BLOCKQUOTE>
///   Malaysia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__my,	///< xs:NMTOKEN value="my"
/// <PRE><BLOCKQUOTE>
///   Mozambique.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__mz,	///< xs:NMTOKEN value="mz"
/// <PRE><BLOCKQUOTE>
///   Namibia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__na,	///< xs:NMTOKEN value="na"
/// <PRE><BLOCKQUOTE>
///   New Caledonia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__nc,	///< xs:NMTOKEN value="nc"
/// <PRE><BLOCKQUOTE>
///   Niger.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ne,	///< xs:NMTOKEN value="ne"
/// <PRE><BLOCKQUOTE>
///   Norfolk Island.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__nf,	///< xs:NMTOKEN value="nf"
/// <PRE><BLOCKQUOTE>
///   Nigeria.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ng,	///< xs:NMTOKEN value="ng"
/// <PRE><BLOCKQUOTE>
///   Nicaragua.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ni,	///< xs:NMTOKEN value="ni"
/// <PRE><BLOCKQUOTE>
///   Netherlands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__nl,	///< xs:NMTOKEN value="nl"
/// <PRE><BLOCKQUOTE>
///   Norway.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__no,	///< xs:NMTOKEN value="no"
/// <PRE><BLOCKQUOTE>
///   Nepal.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__np,	///< xs:NMTOKEN value="np"
/// <PRE><BLOCKQUOTE>
///   Nauru.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__nr,	///< xs:NMTOKEN value="nr"
/// <PRE><BLOCKQUOTE>
///   Niue.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__nu,	///< xs:NMTOKEN value="nu"
/// <PRE><BLOCKQUOTE>
///   New Zealand.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__nz,	///< xs:NMTOKEN value="nz"
/// <PRE><BLOCKQUOTE>
///   Oman.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__om,	///< xs:NMTOKEN value="om"
/// <PRE><BLOCKQUOTE>
///   Panama.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pa,	///< xs:NMTOKEN value="pa"
/// <PRE><BLOCKQUOTE>
///   Peru.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pe,	///< xs:NMTOKEN value="pe"
/// <PRE><BLOCKQUOTE>
///   French Polynesia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pf,	///< xs:NMTOKEN value="pf"
/// <PRE><BLOCKQUOTE>
///   Papua New Guinea.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pg,	///< xs:NMTOKEN value="pg"
/// <PRE><BLOCKQUOTE>
///   Philippines.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ph,	///< xs:NMTOKEN value="ph"
/// <PRE><BLOCKQUOTE>
///   Pakistan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pk,	///< xs:NMTOKEN value="pk"
/// <PRE><BLOCKQUOTE>
///   Poland.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pl,	///< xs:NMTOKEN value="pl"
/// <PRE><BLOCKQUOTE>
///   Saint Pierre and Miquelon.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pm,	///< xs:NMTOKEN value="pm"
/// <PRE><BLOCKQUOTE>
///   Pitcairn Island.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pn,	///< xs:NMTOKEN value="pn"
/// <PRE><BLOCKQUOTE>
///   Puerto Rico.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pr,	///< xs:NMTOKEN value="pr"
/// <PRE><BLOCKQUOTE>
///   Palestinian Territories.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ps,	///< xs:NMTOKEN value="ps"
/// <PRE><BLOCKQUOTE>
///   Portugal.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pt,	///< xs:NMTOKEN value="pt"
/// <PRE><BLOCKQUOTE>
///   Palau.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__pw,	///< xs:NMTOKEN value="pw"
/// <PRE><BLOCKQUOTE>
///   Paraguay.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__py,	///< xs:NMTOKEN value="py"
/// <PRE><BLOCKQUOTE>
///   Qatar.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__qa,	///< xs:NMTOKEN value="qa"
/// <PRE><BLOCKQUOTE>
///   Reunion Island.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__re,	///< xs:NMTOKEN value="re"
/// <PRE><BLOCKQUOTE>
///   Romania.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ro,	///< xs:NMTOKEN value="ro"
/// <PRE><BLOCKQUOTE>
///   Russian Federation.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ru,	///< xs:NMTOKEN value="ru"
/// <PRE><BLOCKQUOTE>
///   Rwanda.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__rw,	///< xs:NMTOKEN value="rw"
/// <PRE><BLOCKQUOTE>
///   Saudi Arabia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sa,	///< xs:NMTOKEN value="sa"
/// <PRE><BLOCKQUOTE>
///   Solomon Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sb,	///< xs:NMTOKEN value="sb"
/// <PRE><BLOCKQUOTE>
///   Seychelles.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sc,	///< xs:NMTOKEN value="sc"
/// <PRE><BLOCKQUOTE>
///   Sudan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sd,	///< xs:NMTOKEN value="sd"
/// <PRE><BLOCKQUOTE>
///   Sweden.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__se,	///< xs:NMTOKEN value="se"
/// <PRE><BLOCKQUOTE>
///   Singapore.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sg,	///< xs:NMTOKEN value="sg"
/// <PRE><BLOCKQUOTE>
///   Saint Helena.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sh,	///< xs:NMTOKEN value="sh"
/// <PRE><BLOCKQUOTE>
///   Slovenia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__si,	///< xs:NMTOKEN value="si"
/// <PRE><BLOCKQUOTE>
///   Svalbard and Jan Mayen Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sj,	///< xs:NMTOKEN value="sj"
/// <PRE><BLOCKQUOTE>
///   Slovak Republic.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sk,	///< xs:NMTOKEN value="sk"
/// <PRE><BLOCKQUOTE>
///   Sierra Leone.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sl,	///< xs:NMTOKEN value="sl"
/// <PRE><BLOCKQUOTE>
///   San Marino.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sm,	///< xs:NMTOKEN value="sm"
/// <PRE><BLOCKQUOTE>
///   Senegal.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sn,	///< xs:NMTOKEN value="sn"
/// <PRE><BLOCKQUOTE>
///   Somalia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__so,	///< xs:NMTOKEN value="so"
/// <PRE><BLOCKQUOTE>
///   Suriname.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sr,	///< xs:NMTOKEN value="sr"
/// <PRE><BLOCKQUOTE>
///   Sao Tome and Principe.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__st,	///< xs:NMTOKEN value="st"
/// <PRE><BLOCKQUOTE>
///   El Salvador.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sv,	///< xs:NMTOKEN value="sv"
/// <PRE><BLOCKQUOTE>
///   Syrian Arab Republic.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sy,	///< xs:NMTOKEN value="sy"
/// <PRE><BLOCKQUOTE>
///   Swaziland.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__sz,	///< xs:NMTOKEN value="sz"
/// <PRE><BLOCKQUOTE>
///   Turks and Caicos Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tc,	///< xs:NMTOKEN value="tc"
/// <PRE><BLOCKQUOTE>
///   Chad.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__td,	///< xs:NMTOKEN value="td"
/// <PRE><BLOCKQUOTE>
///   French Southern Territories.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tf,	///< xs:NMTOKEN value="tf"
/// <PRE><BLOCKQUOTE>
///   Togo.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tg,	///< xs:NMTOKEN value="tg"
/// <PRE><BLOCKQUOTE>
///   Thailand.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__th,	///< xs:NMTOKEN value="th"
/// <PRE><BLOCKQUOTE>
///   Tajikistan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tj,	///< xs:NMTOKEN value="tj"
/// <PRE><BLOCKQUOTE>
///   Tokelau.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tk,	///< xs:NMTOKEN value="tk"
/// <PRE><BLOCKQUOTE>
///   Timor-Leste.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tl,	///< xs:NMTOKEN value="tl"
/// <PRE><BLOCKQUOTE>
///   Turkmenistan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tm,	///< xs:NMTOKEN value="tm"
/// <PRE><BLOCKQUOTE>
///   Tunisia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tn,	///< xs:NMTOKEN value="tn"
/// <PRE><BLOCKQUOTE>
///   Tonga.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__to,	///< xs:NMTOKEN value="to"
/// <PRE><BLOCKQUOTE>
///   East Timor.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tp,	///< xs:NMTOKEN value="tp"
/// <PRE><BLOCKQUOTE>
///   Turkey.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tr,	///< xs:NMTOKEN value="tr"
/// <PRE><BLOCKQUOTE>
///   Trinidad and Tobago.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tt,	///< xs:NMTOKEN value="tt"
/// <PRE><BLOCKQUOTE>
///   Tuvalu.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tv,	///< xs:NMTOKEN value="tv"
/// <PRE><BLOCKQUOTE>
///   Taiwan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tw,	///< xs:NMTOKEN value="tw"
/// <PRE><BLOCKQUOTE>
///   Tanzania.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__tz,	///< xs:NMTOKEN value="tz"
/// <PRE><BLOCKQUOTE>
///   Ukraine.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ua,	///< xs:NMTOKEN value="ua"
/// <PRE><BLOCKQUOTE>
///   Uganda.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ug,	///< xs:NMTOKEN value="ug"
/// <PRE><BLOCKQUOTE>
///   United Kingdom.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__uk,	///< xs:NMTOKEN value="uk"
/// <PRE><BLOCKQUOTE>
///   United States Minor Outlying Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__um,	///< xs:NMTOKEN value="um"
/// <PRE><BLOCKQUOTE>
///   United States.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__us,	///< xs:NMTOKEN value="us"
/// <PRE><BLOCKQUOTE>
///   Uruguay.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__uy,	///< xs:NMTOKEN value="uy"
/// <PRE><BLOCKQUOTE>
///   Uzbekistan.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__uz,	///< xs:NMTOKEN value="uz"
/// <PRE><BLOCKQUOTE>
///   Holy See (Vatican City State)
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__va,	///< xs:NMTOKEN value="va"
/// <PRE><BLOCKQUOTE>
///   Saint Vincent and the Grenadines.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__vc,	///< xs:NMTOKEN value="vc"
/// <PRE><BLOCKQUOTE>
///   Venezuela.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ve,	///< xs:NMTOKEN value="ve"
/// <PRE><BLOCKQUOTE>
///   Virgin Islands, British.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__vg,	///< xs:NMTOKEN value="vg"
/// <PRE><BLOCKQUOTE>
///   Virgin Islands, Us.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__vi,	///< xs:NMTOKEN value="vi"
/// <PRE><BLOCKQUOTE>
///   Vietnam.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__vn,	///< xs:NMTOKEN value="vn"
/// <PRE><BLOCKQUOTE>
///   Vanuatu.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__vu,	///< xs:NMTOKEN value="vu"
/// <PRE><BLOCKQUOTE>
///   Wallis and Futuna Islands.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__wf,	///< xs:NMTOKEN value="wf"
/// <PRE><BLOCKQUOTE>
///   Samoa.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ws,	///< xs:NMTOKEN value="ws"
/// <PRE><BLOCKQUOTE>
///   Yemen.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__ye,	///< xs:NMTOKEN value="ye"
/// <PRE><BLOCKQUOTE>
///   Mayotte.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__yt,	///< xs:NMTOKEN value="yt"
/// <PRE><BLOCKQUOTE>
///   Yugoslavia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__yu,	///< xs:NMTOKEN value="yu"
/// <PRE><BLOCKQUOTE>
///   South Africa.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__za,	///< xs:NMTOKEN value="za"
/// <PRE><BLOCKQUOTE>
///   Zambia.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__zm,	///< xs:NMTOKEN value="zm"
/// <PRE><BLOCKQUOTE>
///   Zimbabwe.
/// </BLOCKQUOTE></PRE>
	ns4__IanaCountryTldEnumeration__zw,	///< xs:NMTOKEN value="zw"
};

/// @brief A class wrapper.
///
class ns4__IanaCountryTldEnumeration_ : public xsd__anyType
{ public:
    enum ns4__IanaCountryTldEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":FeatureIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a GIS FEATURe.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__FeatureIdType;

/// @brief A class wrapper.
///
class ns4__FeatureIdType__ : public xsd__anyType
{ public:
    ns4__FeatureIdType                   __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":CompassBearing8Enumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   8 point compass.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__CompassBearing8Enumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__CompassBearing8Enumeration
{
	ns4__CompassBearing8Enumeration__W = 'W',	///< xs:string value="W"
	ns4__CompassBearing8Enumeration__E = 'E',	///< xs:string value="E"
	ns4__CompassBearing8Enumeration__S = 'S',	///< xs:string value="S"
	ns4__CompassBearing8Enumeration__N = 'N',	///< xs:string value="N"
	ns4__CompassBearing8Enumeration__SW = 88,	///< xs:string value="SW"
	ns4__CompassBearing8Enumeration__SE = 89,	///< xs:string value="SE"
	ns4__CompassBearing8Enumeration__NW = 90,	///< xs:string value="NW"
	ns4__CompassBearing8Enumeration__NE = 91,	///< xs:string value="NE"
};

/// @brief A class wrapper.
///
class ns4__CompassBearing8Enumeration_ : public xsd__anyType
{ public:
    enum ns4__CompassBearing8Enumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":CompassBearing16Enumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   16 point compass.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__CompassBearing16Enumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__CompassBearing16Enumeration
{
	ns4__CompassBearing16Enumeration__W = 'W',	///< xs:string value="W"
	ns4__CompassBearing16Enumeration__E = 'E',	///< xs:string value="E"
	ns4__CompassBearing16Enumeration__S = 'S',	///< xs:string value="S"
	ns4__CompassBearing16Enumeration__N = 'N',	///< xs:string value="N"
	ns4__CompassBearing16Enumeration___x0000 = 88,	///< xs:string value=""
	ns4__CompassBearing16Enumeration__SW = 89,	///< xs:string value="SW"
	ns4__CompassBearing16Enumeration__SE = 90,	///< xs:string value="SE"
	ns4__CompassBearing16Enumeration__NW = 91,	///< xs:string value="NW"
	ns4__CompassBearing16Enumeration__NE = 92,	///< xs:string value="NE"
};

/// @brief A class wrapper.
///
class ns4__CompassBearing16Enumeration_ : public xsd__anyType
{ public:
    enum ns4__CompassBearing16Enumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":PathJunctionIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of PATH JUNCTION.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__PathJunctionIdType;

/// @brief A class wrapper.
///
class ns4__PathJunctionIdType__ : public xsd__anyType
{ public:
    ns4__PathJunctionIdType              __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":AccessLinkIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of an ACCESS link.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__AccessLinkIdType;

/// @brief A class wrapper.
///
class ns4__AccessLinkIdType__ : public xsd__anyType
{ public:
    ns4__AccessLinkIdType                __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":NavigationPathIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of NAVIGATION PATH.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__NavigationPathIdType;

/// @brief A class wrapper.
///
class ns4__NavigationPathIdType__ : public xsd__anyType
{ public:
    ns4__NavigationPathIdType            __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":PathDirectionEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for flow DIRECTION along PATH LINk.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__PathDirectionEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__PathDirectionEnumeration
{
	ns4__PathDirectionEnumeration__oneWay,	///< xs:NMTOKEN value="oneWay"
	ns4__PathDirectionEnumeration__twoWay,	///< xs:NMTOKEN value="twoWay"
};

/// @brief A class wrapper.
///
class ns4__PathDirectionEnumeration_ : public xsd__anyType
{ public:
    enum ns4__PathDirectionEnumeration   __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":PathUpDownEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for path heading.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__PathUpDownEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__PathUpDownEnumeration
{
	ns4__PathUpDownEnumeration__up,	///< xs:NMTOKEN value="up"
	ns4__PathUpDownEnumeration__down,	///< xs:NMTOKEN value="down"
	ns4__PathUpDownEnumeration__level,	///< xs:NMTOKEN value="level"
	ns4__PathUpDownEnumeration__upAndDown,	///< xs:NMTOKEN value="upAndDown"
	ns4__PathUpDownEnumeration__downAndUp,	///< xs:NMTOKEN value="downAndUp"
};

/// @brief A class wrapper.
///
class ns4__PathUpDownEnumeration_ : public xsd__anyType
{ public:
    enum ns4__PathUpDownEnumeration      __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":PathHeadingEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for path heading.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__PathHeadingEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__PathHeadingEnumeration
{
	ns4__PathHeadingEnumeration__left,	///< xs:NMTOKEN value="left"
	ns4__PathHeadingEnumeration__right,	///< xs:NMTOKEN value="right"
	ns4__PathHeadingEnumeration__forward,	///< xs:NMTOKEN value="forward"
	ns4__PathHeadingEnumeration__back,	///< xs:NMTOKEN value="back"
};

/// @brief A class wrapper.
///
class ns4__PathHeadingEnumeration_ : public xsd__anyType
{ public:
    enum ns4__PathHeadingEnumeration     __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":NavigationTypeEnumeration is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Values for NAVIGATION PATH. type.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__NavigationTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__NavigationTypeEnumeration
{
	ns4__NavigationTypeEnumeration__hallToQuay,	///< xs:NMTOKEN value="hallToQuay"
	ns4__NavigationTypeEnumeration__hallToStreet,	///< xs:NMTOKEN value="hallToStreet"
	ns4__NavigationTypeEnumeration__quayToHall,	///< xs:NMTOKEN value="quayToHall"
	ns4__NavigationTypeEnumeration__quayToQuay,	///< xs:NMTOKEN value="quayToQuay"
	ns4__NavigationTypeEnumeration__quayToStreet,	///< xs:NMTOKEN value="quayToStreet"
	ns4__NavigationTypeEnumeration__streetToHall,	///< xs:NMTOKEN value="streetToHall"
	ns4__NavigationTypeEnumeration__streetToQuay,	///< xs:NMTOKEN value="streetToQuay"
	ns4__NavigationTypeEnumeration__other,	///< xs:NMTOKEN value="other"
};

/// @brief A class wrapper.
///
class ns4__NavigationTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns4__NavigationTypeEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of STOP PLACE.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__StopPlaceIdType;

/// @brief A class wrapper.
///
class ns4__StopPlaceIdType__ : public xsd__anyType
{ public:
    ns4__StopPlaceIdType                 __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceComponentIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of STOP PLACE.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__StopPlaceComponentIdType;

/// @brief A class wrapper.
///
class ns4__StopPlaceComponentIdType__ : public xsd__anyType
{ public:
    ns4__StopPlaceComponentIdType        __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":LevelCodeType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a building LEVEL within a STOP PLACE.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__LevelCodeType;

/// @brief A class wrapper.
///
class ns4__LevelCodeType__ : public xsd__anyType
{ public:
    ns4__LevelCodeType                   __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":PublicCodeType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Identifier of a stop for SMS and other customer facing delivery channels.
/// </BLOCKQUOTE></PRE>
typedef std::wstring ns4__PublicCodeType;

/// @brief A class wrapper.
///
class ns4__PublicCodeType__ : public xsd__anyType
{ public:
    ns4__PublicCodeType                  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":PrivateCodeType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Private code alternative identifier that may be associated with element.
/// </BLOCKQUOTE></PRE>
typedef std::wstring ns4__PrivateCodeType;

/// @brief A class wrapper.
///
class ns4__PrivateCodeType__ : public xsd__anyType
{ public:
    ns4__PrivateCodeType                 __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":PlateCodeType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   The plate identifier placed on the stop.
/// </BLOCKQUOTE></PRE>
typedef std::wstring ns4__PlateCodeType;

/// @brief A class wrapper.
///
class ns4__PlateCodeType__ : public xsd__anyType
{ public:
    ns4__PlateCodeType                   __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":CleardownCodeType is a simpleType restriction of XSD type xs:positiveInteger.
///
/// <PRE><BLOCKQUOTE>
///   Number associated with stop used for wireless cleardown systems. 20 bit number.
/// </BLOCKQUOTE></PRE>
typedef xsd__positiveInteger ns4__CleardownCodeType;

/// @brief A class wrapper.
///
class ns4__CleardownCodeType__ : public xsd__anyType
{ public:
    ns4__CleardownCodeType               __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceTypeEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of STOP PLACE types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__StopPlaceTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__StopPlaceTypeEnumeration
{
	ns4__StopPlaceTypeEnumeration__airport,	///< xs:string value="airport"
	ns4__StopPlaceTypeEnumeration__railStation,	///< xs:string value="railStation"
	ns4__StopPlaceTypeEnumeration__metroStation,	///< xs:string value="metroStation"
	ns4__StopPlaceTypeEnumeration__coachStation,	///< xs:string value="coachStation"
	ns4__StopPlaceTypeEnumeration__busStation,	///< xs:string value="busStation"
	ns4__StopPlaceTypeEnumeration__harbourPort,	///< xs:string value="harbourPort"
	ns4__StopPlaceTypeEnumeration__ferrytPort,	///< xs:string value="ferrytPort"
	ns4__StopPlaceTypeEnumeration__ferryStop,	///< xs:string value="ferryStop"
	ns4__StopPlaceTypeEnumeration__onStreetBus,	///< xs:string value="onStreetBus"
	ns4__StopPlaceTypeEnumeration__onStreetTram,	///< xs:string value="onStreetTram"
	ns4__StopPlaceTypeEnumeration__skiLift,	///< xs:string value="skiLift"
	ns4__StopPlaceTypeEnumeration__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns4__StopPlaceTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns4__StopPlaceTypeEnumeration   __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceComponentTypeEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of SITE COMPONENT Types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__StopPlaceComponentTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__StopPlaceComponentTypeEnumeration
{
	ns4__StopPlaceComponentTypeEnumeration__quay,	///< xs:string value="quay"
	ns4__StopPlaceComponentTypeEnumeration__accessSpace,	///< xs:string value="accessSpace"
	ns4__StopPlaceComponentTypeEnumeration__entrance,	///< xs:string value="entrance"
	ns4__StopPlaceComponentTypeEnumeration__boardingPosition,	///< xs:string value="boardingPosition"
	ns4__StopPlaceComponentTypeEnumeration__stoppingPlace,	///< xs:string value="stoppingPlace"
};

/// @brief A class wrapper.
///
class ns4__StopPlaceComponentTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns4__StopPlaceComponentTypeEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":QuayTypeEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of QUAY Types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__QuayTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__QuayTypeEnumeration
{
	ns4__QuayTypeEnumeration__airlineGate,	///< xs:string value="airlineGate"
	ns4__QuayTypeEnumeration__railPlatform,	///< xs:string value="railPlatform"
	ns4__QuayTypeEnumeration__metroPlatform,	///< xs:string value="metroPlatform"
	ns4__QuayTypeEnumeration__coachStop,	///< xs:string value="coachStop"
	ns4__QuayTypeEnumeration__busStop,	///< xs:string value="busStop"
	ns4__QuayTypeEnumeration__tramStop,	///< xs:string value="tramStop"
	ns4__QuayTypeEnumeration__boatQuay,	///< xs:string value="boatQuay"
	ns4__QuayTypeEnumeration__ferryLanding,	///< xs:string value="ferryLanding"
	ns4__QuayTypeEnumeration__telecabinePlatfrom,	///< xs:string value="telecabinePlatfrom"
	ns4__QuayTypeEnumeration__taxiStand,	///< xs:string value="taxiStand"
	ns4__QuayTypeEnumeration__setDownPlace,	///< xs:string value="setDownPlace"
	ns4__QuayTypeEnumeration__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns4__QuayTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns4__QuayTypeEnumeration        __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":AccessSpaceTypeEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of ACCESS SPACE Types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__AccessSpaceTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__AccessSpaceTypeEnumeration
{
	ns4__AccessSpaceTypeEnumeration__concours,	///< xs:string value="concours"
	ns4__AccessSpaceTypeEnumeration__bookingHall,	///< xs:string value="bookingHall"
	ns4__AccessSpaceTypeEnumeration__forecourt,	///< xs:string value="forecourt"
	ns4__AccessSpaceTypeEnumeration__underpass,	///< xs:string value="underpass"
	ns4__AccessSpaceTypeEnumeration__overpass,	///< xs:string value="overpass"
	ns4__AccessSpaceTypeEnumeration__passage,	///< xs:string value="passage"
	ns4__AccessSpaceTypeEnumeration__passageSection,	///< xs:string value="passageSection"
	ns4__AccessSpaceTypeEnumeration__gallery,	///< xs:string value="gallery"
	ns4__AccessSpaceTypeEnumeration__garage,	///< xs:string value="garage"
	ns4__AccessSpaceTypeEnumeration__shop,	///< xs:string value="shop"
	ns4__AccessSpaceTypeEnumeration__waitingRoom,	///< xs:string value="waitingRoom"
	ns4__AccessSpaceTypeEnumeration__restaurant,	///< xs:string value="restaurant"
	ns4__AccessSpaceTypeEnumeration__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns4__AccessSpaceTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns4__AccessSpaceTypeEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":PassageTypeEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of Passage Types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__PassageTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__PassageTypeEnumeration
{
	ns4__PassageTypeEnumeration__none,	///< xs:string value="none"
	ns4__PassageTypeEnumeration__pathway,	///< xs:string value="pathway"
	ns4__PassageTypeEnumeration__corridor,	///< xs:string value="corridor"
	ns4__PassageTypeEnumeration__overpass,	///< xs:string value="overpass"
	ns4__PassageTypeEnumeration__underpass,	///< xs:string value="underpass"
	ns4__PassageTypeEnumeration__tunnel,	///< xs:string value="tunnel"
	ns4__PassageTypeEnumeration__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns4__PassageTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns4__PassageTypeEnumeration     __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":BoardingPositionTypeEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of BOARDING POSITION Types.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__BoardingPositionTypeEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__BoardingPositionTypeEnumeration
{
	ns4__BoardingPositionTypeEnumeration__unknown,	///< xs:string value="unknown"
	ns4__BoardingPositionTypeEnumeration__doorFromAirlineGate,	///< xs:string value="doorFromAirlineGate"
	ns4__BoardingPositionTypeEnumeration__positionOnRailPlatform,	///< xs:string value="positionOnRailPlatform"
	ns4__BoardingPositionTypeEnumeration__positionOnMetroPlatform,	///< xs:string value="positionOnMetroPlatform"
	ns4__BoardingPositionTypeEnumeration__positionAtCoachStop,	///< xs:string value="positionAtCoachStop"
	ns4__BoardingPositionTypeEnumeration__positionAtBusStop,	///< xs:string value="positionAtBusStop"
	ns4__BoardingPositionTypeEnumeration__boatGangway,	///< xs:string value="boatGangway"
	ns4__BoardingPositionTypeEnumeration__ferryGangway,	///< xs:string value="ferryGangway"
	ns4__BoardingPositionTypeEnumeration__telecabinePlatfrom,	///< xs:string value="telecabinePlatfrom"
	ns4__BoardingPositionTypeEnumeration__setDownPoint,	///< xs:string value="setDownPoint"
	ns4__BoardingPositionTypeEnumeration__taxiBay,	///< xs:string value="taxiBay"
	ns4__BoardingPositionTypeEnumeration__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns4__BoardingPositionTypeEnumeration_ : public xsd__anyType
{ public:
    enum ns4__BoardingPositionTypeEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":RelationToVehicleEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of Relation to VEHICLE of STOPPING POSITION.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__RelationToVehicleEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__RelationToVehicleEnumeration
{
	ns4__RelationToVehicleEnumeration__frontLeft,	///< xs:string value="frontLeft"
	ns4__RelationToVehicleEnumeration__frontRight,	///< xs:string value="frontRight"
	ns4__RelationToVehicleEnumeration__backRight,	///< xs:string value="backRight"
	ns4__RelationToVehicleEnumeration__driverLeft,	///< xs:string value="driverLeft"
	ns4__RelationToVehicleEnumeration__driverRight,	///< xs:string value="driverRight"
};

/// @brief A class wrapper.
///
class ns4__RelationToVehicleEnumeration_ : public xsd__anyType
{ public:
    enum ns4__RelationToVehicleEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":InterchangeWeightingEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration of Interchange Weighting.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__InterchangeWeightingEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__InterchangeWeightingEnumeration
{
	ns4__InterchangeWeightingEnumeration__noInterchange,	///< xs:string value="noInterchange"
	ns4__InterchangeWeightingEnumeration__interchangeAllowed,	///< xs:string value="interchangeAllowed"
	ns4__InterchangeWeightingEnumeration__recommendedInterchange,	///< xs:string value="recommendedInterchange"
	ns4__InterchangeWeightingEnumeration__preferredInterchange,	///< xs:string value="preferredInterchange"
};

/// @brief A class wrapper.
///
class ns4__InterchangeWeightingEnumeration_ : public xsd__anyType
{ public:
    enum ns4__InterchangeWeightingEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":CheckPointIdType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a CHECK CONSTRAINT.within a STOP PLACE.
/// </BLOCKQUOTE></PRE>
typedef xsd__NMTOKEN ns4__CheckPointIdType;

/// @brief A class wrapper.
///
class ns4__CheckPointIdType__ : public xsd__anyType
{ public:
    ns4__CheckPointIdType                __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":CheckPointProcessEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for a CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__CheckPointProcessEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__CheckPointProcessEnumeration
{
	ns4__CheckPointProcessEnumeration__none,	///< xs:string value="none"
	ns4__CheckPointProcessEnumeration__unknown,	///< xs:string value="unknown"
	ns4__CheckPointProcessEnumeration__ticketPurchase,	///< xs:string value="ticketPurchase"
	ns4__CheckPointProcessEnumeration__ticketCollection,	///< xs:string value="ticketCollection"
	ns4__CheckPointProcessEnumeration__ticketValidation,	///< xs:string value="ticketValidation"
	ns4__CheckPointProcessEnumeration__baggageCheckIn,	///< xs:string value="baggageCheckIn"
	ns4__CheckPointProcessEnumeration__oversizeBaggageCheckIn,	///< xs:string value="oversizeBaggageCheckIn"
	ns4__CheckPointProcessEnumeration__oversizeBaggageReclaim,	///< xs:string value="oversizeBaggageReclaim"
	ns4__CheckPointProcessEnumeration__baggageReclaim,	///< xs:string value="baggageReclaim"
	ns4__CheckPointProcessEnumeration__leftLuggageDeposit,	///< xs:string value="leftLuggageDeposit"
	ns4__CheckPointProcessEnumeration__leftLuggageReclaim,	///< xs:string value="leftLuggageReclaim"
	ns4__CheckPointProcessEnumeration__firstclassCheckin,	///< xs:string value="firstclassCheckin"
	ns4__CheckPointProcessEnumeration__specialNeedsCheckin,	///< xs:string value="specialNeedsCheckin"
	ns4__CheckPointProcessEnumeration__baggageSecurityCheck,	///< xs:string value="baggageSecurityCheck"
	ns4__CheckPointProcessEnumeration__securityCheck,	///< xs:string value="securityCheck"
	ns4__CheckPointProcessEnumeration__outgoingPassportControl,	///< xs:string value="outgoingPassportControl"
	ns4__CheckPointProcessEnumeration__incomingPassportControl,	///< xs:string value="incomingPassportControl"
	ns4__CheckPointProcessEnumeration__fasttrackDepartures,	///< xs:string value="fasttrackDepartures"
	ns4__CheckPointProcessEnumeration__fasttrackArrivals,	///< xs:string value="fasttrackArrivals"
	ns4__CheckPointProcessEnumeration__incomingDutyFree,	///< xs:string value="incomingDutyFree"
	ns4__CheckPointProcessEnumeration__outgoingDutyFree,	///< xs:string value="outgoingDutyFree"
	ns4__CheckPointProcessEnumeration__taxRefunds,	///< xs:string value="taxRefunds"
	ns4__CheckPointProcessEnumeration__outgoingCustoms,	///< xs:string value="outgoingCustoms"
	ns4__CheckPointProcessEnumeration__incomingCustoms,	///< xs:string value="incomingCustoms"
};

/// @brief A class wrapper.
///
class ns4__CheckPointProcessEnumeration_ : public xsd__anyType
{ public:
    enum ns4__CheckPointProcessEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":CheckPointServiceEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for a CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__CheckPointServiceEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__CheckPointServiceEnumeration
{
	ns4__CheckPointServiceEnumeration__selfserviceMachine,	///< xs:string value="selfserviceMachine"
	ns4__CheckPointServiceEnumeration__counterService,	///< xs:string value="counterService"
	ns4__CheckPointServiceEnumeration__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns4__CheckPointServiceEnumeration_ : public xsd__anyType
{ public:
    enum ns4__CheckPointServiceEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":AccessibilityFeatureEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for a CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__AccessibilityFeatureEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__AccessibilityFeatureEnumeration
{
	ns4__AccessibilityFeatureEnumeration__lift,	///< xs:string value="lift"
	ns4__AccessibilityFeatureEnumeration__stairs,	///< xs:string value="stairs"
	ns4__AccessibilityFeatureEnumeration__seriesOfStairs,	///< xs:string value="seriesOfStairs"
	ns4__AccessibilityFeatureEnumeration__escalator,	///< xs:string value="escalator"
	ns4__AccessibilityFeatureEnumeration__travelator,	///< xs:string value="travelator"
	ns4__AccessibilityFeatureEnumeration__ramp,	///< xs:string value="ramp"
	ns4__AccessibilityFeatureEnumeration__shuttle,	///< xs:string value="shuttle"
	ns4__AccessibilityFeatureEnumeration__barrier,	///< xs:string value="barrier"
	ns4__AccessibilityFeatureEnumeration__narrowEntrance,	///< xs:string value="narrowEntrance"
	ns4__AccessibilityFeatureEnumeration__confinedSpace,	///< xs:string value="confinedSpace"
	ns4__AccessibilityFeatureEnumeration__queueManagement,	///< xs:string value="queueManagement"
	ns4__AccessibilityFeatureEnumeration__none,	///< xs:string value="none"
	ns4__AccessibilityFeatureEnumeration__unknown,	///< xs:string value="unknown"
	ns4__AccessibilityFeatureEnumeration__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns4__AccessibilityFeatureEnumeration_ : public xsd__anyType
{ public:
    enum ns4__AccessibilityFeatureEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":CongestionEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for a CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__CongestionEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__CongestionEnumeration
{
	ns4__CongestionEnumeration__noWaiting,	///< xs:string value="noWaiting"
	ns4__CongestionEnumeration__queue,	///< xs:string value="queue"
	ns4__CongestionEnumeration__crowding,	///< xs:string value="crowding"
	ns4__CongestionEnumeration__full,	///< xs:string value="full"
};

/// @brief A class wrapper.
///
class ns4__CongestionEnumeration_ : public xsd__anyType
{ public:
    enum ns4__CongestionEnumeration      __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":TypeOfStopPlaceEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Allowed categories of stop place.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__TypeOfStopPlaceEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__TypeOfStopPlaceEnumeration
{
	ns4__TypeOfStopPlaceEnumeration__onstreetBus,	///< xs:string value="onstreetBus"
	ns4__TypeOfStopPlaceEnumeration__onstreetTram,	///< xs:string value="onstreetTram"
	ns4__TypeOfStopPlaceEnumeration__ferryStop,	///< xs:string value="ferryStop"
	ns4__TypeOfStopPlaceEnumeration__airport,	///< xs:string value="airport"
	ns4__TypeOfStopPlaceEnumeration__railStation,	///< xs:string value="railStation"
	ns4__TypeOfStopPlaceEnumeration__metroStation,	///< xs:string value="metroStation"
	ns4__TypeOfStopPlaceEnumeration__coachStation,	///< xs:string value="coachStation"
	ns4__TypeOfStopPlaceEnumeration__ferryPort,	///< xs:string value="ferryPort"
	ns4__TypeOfStopPlaceEnumeration__harbourPort,	///< xs:string value="harbourPort"
	ns4__TypeOfStopPlaceEnumeration__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns4__TypeOfStopPlaceEnumeration_ : public xsd__anyType
{ public:
    enum ns4__TypeOfStopPlaceEnumeration  __item;                       
};

/// @brief "http://www.ifopt.org.uk/ifopt":AccessModesEnumeration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Allowed categroies of access to stop place.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns4__AccessModesEnumeration__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__AccessModesEnumeration
{
	ns4__AccessModesEnumeration__foot,	///< xs:string value="foot"
	ns4__AccessModesEnumeration__bicycle,	///< xs:string value="bicycle"
	ns4__AccessModesEnumeration__car,	///< xs:string value="car"
	ns4__AccessModesEnumeration__taxi,	///< xs:string value="taxi"
	ns4__AccessModesEnumeration__shuttle,	///< xs:string value="shuttle"
};

/// @brief A class wrapper.
///
class ns4__AccessModesEnumeration_ : public xsd__anyType
{ public:
    enum ns4__AccessModesEnumeration     __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AbnormalTrafficTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__AbnormalTrafficTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__AbnormalTrafficTypeEnum
{
	ns5__AbnormalTrafficTypeEnum__stationaryTraffic,	///< xs:string value="stationaryTraffic"
	ns5__AbnormalTrafficTypeEnum__queuingTraffic,	///< xs:string value="queuingTraffic"
	ns5__AbnormalTrafficTypeEnum__slowTraffic,	///< xs:string value="slowTraffic"
	ns5__AbnormalTrafficTypeEnum__heavyTraffic,	///< xs:string value="heavyTraffic"
	ns5__AbnormalTrafficTypeEnum__unspecifiedAbnormalTraffic,	///< xs:string value="unspecifiedAbnormalTraffic"
	ns5__AbnormalTrafficTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__AbnormalTrafficTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__AbnormalTrafficTypeEnum    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AccidentCauseEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__AccidentCauseEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__AccidentCauseEnum
{
	ns5__AccidentCauseEnum__avoidanceOfObstacles,	///< xs:string value="avoidanceOfObstacles"
	ns5__AccidentCauseEnum__driverDistraction,	///< xs:string value="driverDistraction"
	ns5__AccidentCauseEnum__driverDrugAbuse,	///< xs:string value="driverDrugAbuse"
	ns5__AccidentCauseEnum__driverIllness,	///< xs:string value="driverIllness"
	ns5__AccidentCauseEnum__exceedingSpeedsLimits,	///< xs:string value="exceedingSpeedsLimits"
	ns5__AccidentCauseEnum__excessAlcohol,	///< xs:string value="excessAlcohol"
	ns5__AccidentCauseEnum__excessiveDriverTiredness,	///< xs:string value="excessiveDriverTiredness"
	ns5__AccidentCauseEnum__impermissibleManoeuvre,	///< xs:string value="impermissibleManoeuvre"
	ns5__AccidentCauseEnum__limitedVisibility,	///< xs:string value="limitedVisibility"
	ns5__AccidentCauseEnum__notKeepingASafeDistance,	///< xs:string value="notKeepingASafeDistance"
	ns5__AccidentCauseEnum__onTheWrongSideOfTheRoad,	///< xs:string value="onTheWrongSideOfTheRoad"
	ns5__AccidentCauseEnum__pedestrianInRoad,	///< xs:string value="pedestrianInRoad"
	ns5__AccidentCauseEnum__poorLaneAdherence,	///< xs:string value="poorLaneAdherence"
	ns5__AccidentCauseEnum__poorMergeEntryOrExitJudgement,	///< xs:string value="poorMergeEntryOrExitJudgement"
	ns5__AccidentCauseEnum__poorRoadSurfaceCondition,	///< xs:string value="poorRoadSurfaceCondition"
	ns5__AccidentCauseEnum__poorSurfaceAdherence,	///< xs:string value="poorSurfaceAdherence"
	ns5__AccidentCauseEnum__undisclosed,	///< xs:string value="undisclosed"
	ns5__AccidentCauseEnum__unknown,	///< xs:string value="unknown"
	ns5__AccidentCauseEnum__vehicleFailure,	///< xs:string value="vehicleFailure"
	ns5__AccidentCauseEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__AccidentCauseEnum_ : public xsd__anyType
{ public:
    enum ns5__AccidentCauseEnum          __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AccidentTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__AccidentTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__AccidentTypeEnum
{
	ns5__AccidentTypeEnum__accident,	///< xs:string value="accident"
	ns5__AccidentTypeEnum__accidentInvolvingBicycles,	///< xs:string value="accidentInvolvingBicycles"
	ns5__AccidentTypeEnum__accidentInvolvingBuses,	///< xs:string value="accidentInvolvingBuses"
	ns5__AccidentTypeEnum__accidentInvolvingHazardousMaterials,	///< xs:string value="accidentInvolvingHazardousMaterials"
	ns5__AccidentTypeEnum__accidentInvolvingHeavyLorries,	///< xs:string value="accidentInvolvingHeavyLorries"
	ns5__AccidentTypeEnum__accidentInvolvingMassTransitVehicle,	///< xs:string value="accidentInvolvingMassTransitVehicle"
	ns5__AccidentTypeEnum__accidentInvolvingMopeds,	///< xs:string value="accidentInvolvingMopeds"
	ns5__AccidentTypeEnum__accidentInvolvingMotorcycles,	///< xs:string value="accidentInvolvingMotorcycles"
	ns5__AccidentTypeEnum__accidentInvolvingRadioactiveMaterial,	///< xs:string value="accidentInvolvingRadioactiveMaterial"
	ns5__AccidentTypeEnum__accidentInvolvingTrain,	///< xs:string value="accidentInvolvingTrain"
	ns5__AccidentTypeEnum__chemicalSpillageAccident,	///< xs:string value="chemicalSpillageAccident"
	ns5__AccidentTypeEnum__collision,	///< xs:string value="collision"
	ns5__AccidentTypeEnum__collisionWithAnimal,	///< xs:string value="collisionWithAnimal"
	ns5__AccidentTypeEnum__collisionWithObstruction,	///< xs:string value="collisionWithObstruction"
	ns5__AccidentTypeEnum__collisionWithPerson,	///< xs:string value="collisionWithPerson"
	ns5__AccidentTypeEnum__earlierAccident,	///< xs:string value="earlierAccident"
	ns5__AccidentTypeEnum__fuelSpillageAccident,	///< xs:string value="fuelSpillageAccident"
	ns5__AccidentTypeEnum__headOnCollision,	///< xs:string value="headOnCollision"
	ns5__AccidentTypeEnum__headOnOrSideCollision,	///< xs:string value="headOnOrSideCollision"
	ns5__AccidentTypeEnum__jackknifedArticulatedLorry,	///< xs:string value="jackknifedArticulatedLorry"
	ns5__AccidentTypeEnum__jackknifedCaravan,	///< xs:string value="jackknifedCaravan"
	ns5__AccidentTypeEnum__jackknifedTrailer,	///< xs:string value="jackknifedTrailer"
	ns5__AccidentTypeEnum__multipleVehicleCollision,	///< xs:string value="multipleVehicleCollision"
	ns5__AccidentTypeEnum__multivehicleAccident,	///< xs:string value="multivehicleAccident"
	ns5__AccidentTypeEnum__oilSpillageAccident,	///< xs:string value="oilSpillageAccident"
	ns5__AccidentTypeEnum__overturnedHeavyLorry,	///< xs:string value="overturnedHeavyLorry"
	ns5__AccidentTypeEnum__overturnedTrailer,	///< xs:string value="overturnedTrailer"
	ns5__AccidentTypeEnum__overturnedVehicle,	///< xs:string value="overturnedVehicle"
	ns5__AccidentTypeEnum__rearCollision,	///< xs:string value="rearCollision"
	ns5__AccidentTypeEnum__secondaryAccident,	///< xs:string value="secondaryAccident"
	ns5__AccidentTypeEnum__seriousAccident,	///< xs:string value="seriousAccident"
	ns5__AccidentTypeEnum__sideCollision,	///< xs:string value="sideCollision"
	ns5__AccidentTypeEnum__vehicleOffRoad,	///< xs:string value="vehicleOffRoad"
	ns5__AccidentTypeEnum__vehicleSpunAround,	///< xs:string value="vehicleSpunAround"
	ns5__AccidentTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__AccidentTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__AccidentTypeEnum           __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCDirectionEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__AlertCDirectionEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__AlertCDirectionEnum
{
	ns5__AlertCDirectionEnum__both,	///< xs:string value="both"
	ns5__AlertCDirectionEnum__negative,	///< xs:string value="negative"
	ns5__AlertCDirectionEnum__positive,	///< xs:string value="positive"
	ns5__AlertCDirectionEnum__unknown,	///< xs:string value="unknown"
};

/// @brief A class wrapper.
///
class ns5__AlertCDirectionEnum_ : public xsd__anyType
{ public:
    enum ns5__AlertCDirectionEnum        __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AnimalPresenceTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__AnimalPresenceTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__AnimalPresenceTypeEnum
{
	ns5__AnimalPresenceTypeEnum__animalsOnTheRoad,	///< xs:string value="animalsOnTheRoad"
	ns5__AnimalPresenceTypeEnum__herdOfAnimalsOnTheRoad,	///< xs:string value="herdOfAnimalsOnTheRoad"
	ns5__AnimalPresenceTypeEnum__largeAnimalsOnTheRoad,	///< xs:string value="largeAnimalsOnTheRoad"
};

/// @brief A class wrapper.
///
class ns5__AnimalPresenceTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__AnimalPresenceTypeEnum     __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AreaOfInterestEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__AreaOfInterestEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__AreaOfInterestEnum
{
	ns5__AreaOfInterestEnum__continentWide,	///< xs:string value="continentWide"
	ns5__AreaOfInterestEnum__national,	///< xs:string value="national"
	ns5__AreaOfInterestEnum__neighbouringCountries,	///< xs:string value="neighbouringCountries"
	ns5__AreaOfInterestEnum__notSpecified,	///< xs:string value="notSpecified"
	ns5__AreaOfInterestEnum__regional,	///< xs:string value="regional"
};

/// @brief A class wrapper.
///
class ns5__AreaOfInterestEnum_ : public xsd__anyType
{ public:
    enum ns5__AreaOfInterestEnum         __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AuthorityOperationTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__AuthorityOperationTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__AuthorityOperationTypeEnum
{
	ns5__AuthorityOperationTypeEnum__accidentInvestigationWork,	///< xs:string value="accidentInvestigationWork"
	ns5__AuthorityOperationTypeEnum__bombSquadInAction,	///< xs:string value="bombSquadInAction"
	ns5__AuthorityOperationTypeEnum__civilEmergency,	///< xs:string value="civilEmergency"
	ns5__AuthorityOperationTypeEnum__customsOperation,	///< xs:string value="customsOperation"
	ns5__AuthorityOperationTypeEnum__juridicalReconstruction,	///< xs:string value="juridicalReconstruction"
	ns5__AuthorityOperationTypeEnum__policeCheckPoint,	///< xs:string value="policeCheckPoint"
	ns5__AuthorityOperationTypeEnum__policeInvestigation,	///< xs:string value="policeInvestigation"
	ns5__AuthorityOperationTypeEnum__roadOperatorCheckPoint,	///< xs:string value="roadOperatorCheckPoint"
	ns5__AuthorityOperationTypeEnum__survey,	///< xs:string value="survey"
	ns5__AuthorityOperationTypeEnum__transportOfVip,	///< xs:string value="transportOfVip"
	ns5__AuthorityOperationTypeEnum__undefinedAuthorityActivity,	///< xs:string value="undefinedAuthorityActivity"
	ns5__AuthorityOperationTypeEnum__vehicleInspectionCheckPoint,	///< xs:string value="vehicleInspectionCheckPoint"
	ns5__AuthorityOperationTypeEnum__vehicleWeighing,	///< xs:string value="vehicleWeighing"
	ns5__AuthorityOperationTypeEnum__weighInMotion,	///< xs:string value="weighInMotion"
	ns5__AuthorityOperationTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__AuthorityOperationTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__AuthorityOperationTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Boolean is a simpleType restriction of XSD type xs:boolean.
///
typedef bool ns5__Boolean;

/// @brief A class wrapper.
///
class ns5__Boolean__ : public xsd__anyType
{ public:
    ns5__Boolean                         __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":CarParkConfigurationEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__CarParkConfigurationEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__CarParkConfigurationEnum
{
	ns5__CarParkConfigurationEnum__multiStorey,	///< xs:string value="multiStorey"
	ns5__CarParkConfigurationEnum__parkAndRide,	///< xs:string value="parkAndRide"
	ns5__CarParkConfigurationEnum__singleLevel,	///< xs:string value="singleLevel"
	ns5__CarParkConfigurationEnum__underground,	///< xs:string value="underground"
};

/// @brief A class wrapper.
///
class ns5__CarParkConfigurationEnum_ : public xsd__anyType
{ public:
    enum ns5__CarParkConfigurationEnum   __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":CarParkStatusEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__CarParkStatusEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__CarParkStatusEnum
{
	ns5__CarParkStatusEnum__carParkClosed,	///< xs:string value="carParkClosed"
	ns5__CarParkStatusEnum__allCarParksFull,	///< xs:string value="allCarParksFull"
	ns5__CarParkStatusEnum__carParkFacilityFaulty,	///< xs:string value="carParkFacilityFaulty"
	ns5__CarParkStatusEnum__carParkFull,	///< xs:string value="carParkFull"
	ns5__CarParkStatusEnum__carParkStatusUnknown,	///< xs:string value="carParkStatusUnknown"
	ns5__CarParkStatusEnum__enoughSpacesAvailable,	///< xs:string value="enoughSpacesAvailable"
	ns5__CarParkStatusEnum__multiStoryCarParksFull,	///< xs:string value="multiStoryCarParksFull"
	ns5__CarParkStatusEnum__noMoreParkingSpacesAvailable,	///< xs:string value="noMoreParkingSpacesAvailable"
	ns5__CarParkStatusEnum__noParkAndRideInformation,	///< xs:string value="noParkAndRideInformation"
	ns5__CarParkStatusEnum__noParkingAllowed,	///< xs:string value="noParkingAllowed"
	ns5__CarParkStatusEnum__noParkingInformationAvailable,	///< xs:string value="noParkingInformationAvailable"
	ns5__CarParkStatusEnum__normalParkingRestrictionsLifted,	///< xs:string value="normalParkingRestrictionsLifted"
	ns5__CarParkStatusEnum__onlyAFewSpacesAvailable,	///< xs:string value="onlyAFewSpacesAvailable"
	ns5__CarParkStatusEnum__parkAndRideServiceNotOperating,	///< xs:string value="parkAndRideServiceNotOperating"
	ns5__CarParkStatusEnum__parkAndRideServiceOperating,	///< xs:string value="parkAndRideServiceOperating"
	ns5__CarParkStatusEnum__specialParkingRestrictionsInForce,	///< xs:string value="specialParkingRestrictionsInForce"
};

/// @brief A class wrapper.
///
class ns5__CarParkStatusEnum_ : public xsd__anyType
{ public:
    enum ns5__CarParkStatusEnum          __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":CarriagewayEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__CarriagewayEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__CarriagewayEnum
{
	ns5__CarriagewayEnum__connectingCarriageway,	///< xs:string value="connectingCarriageway"
	ns5__CarriagewayEnum__entrySlipRoad,	///< xs:string value="entrySlipRoad"
	ns5__CarriagewayEnum__exitSlipRoad,	///< xs:string value="exitSlipRoad"
	ns5__CarriagewayEnum__flyover,	///< xs:string value="flyover"
	ns5__CarriagewayEnum__leftHandFeederRoad,	///< xs:string value="leftHandFeederRoad"
	ns5__CarriagewayEnum__leftHandParallelCarriageway,	///< xs:string value="leftHandParallelCarriageway"
	ns5__CarriagewayEnum__mainCarriageway,	///< xs:string value="mainCarriageway"
	ns5__CarriagewayEnum__oppositeCarriageway,	///< xs:string value="oppositeCarriageway"
	ns5__CarriagewayEnum__parallelCarriageway,	///< xs:string value="parallelCarriageway"
	ns5__CarriagewayEnum__rightHandFeederRoad,	///< xs:string value="rightHandFeederRoad"
	ns5__CarriagewayEnum__rightHandParallelCarriageway,	///< xs:string value="rightHandParallelCarriageway"
	ns5__CarriagewayEnum__serviceRoad,	///< xs:string value="serviceRoad"
	ns5__CarriagewayEnum__slipRoads,	///< xs:string value="slipRoads"
	ns5__CarriagewayEnum__underpass,	///< xs:string value="underpass"
};

/// @brief A class wrapper.
///
class ns5__CarriagewayEnum_ : public xsd__anyType
{ public:
    enum ns5__CarriagewayEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":CauseTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__CauseTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__CauseTypeEnum
{
	ns5__CauseTypeEnum__accident,	///< xs:string value="accident"
	ns5__CauseTypeEnum__congestion,	///< xs:string value="congestion"
	ns5__CauseTypeEnum__earlierAccident,	///< xs:string value="earlierAccident"
	ns5__CauseTypeEnum__earlierEvent,	///< xs:string value="earlierEvent"
	ns5__CauseTypeEnum__earlierIncident,	///< xs:string value="earlierIncident"
	ns5__CauseTypeEnum__equipmentFailure,	///< xs:string value="equipmentFailure"
	ns5__CauseTypeEnum__excessiveHeat,	///< xs:string value="excessiveHeat"
	ns5__CauseTypeEnum__frost,	///< xs:string value="frost"
	ns5__CauseTypeEnum__holidayTraffic,	///< xs:string value="holidayTraffic"
	ns5__CauseTypeEnum__infrastructureFailure,	///< xs:string value="infrastructureFailure"
	ns5__CauseTypeEnum__largeNumbersOfVisitors,	///< xs:string value="largeNumbersOfVisitors"
	ns5__CauseTypeEnum__obstruction,	///< xs:string value="obstruction"
	ns5__CauseTypeEnum__pollutionAlert,	///< xs:string value="pollutionAlert"
	ns5__CauseTypeEnum__poorWeather,	///< xs:string value="poorWeather"
	ns5__CauseTypeEnum__problemsAtBorderPost,	///< xs:string value="problemsAtBorderPost"
	ns5__CauseTypeEnum__problemsAtCustomPost,	///< xs:string value="problemsAtCustomPost"
	ns5__CauseTypeEnum__problemsOnLocalRoads,	///< xs:string value="problemsOnLocalRoads"
	ns5__CauseTypeEnum__radioactiveLeakAlert,	///< xs:string value="radioactiveLeakAlert"
	ns5__CauseTypeEnum__roadsideEvent,	///< xs:string value="roadsideEvent"
	ns5__CauseTypeEnum__rubberNecking,	///< xs:string value="rubberNecking"
	ns5__CauseTypeEnum__securityIncident,	///< xs:string value="securityIncident"
	ns5__CauseTypeEnum__shearWeightOfTraffic,	///< xs:string value="shearWeightOfTraffic"
	ns5__CauseTypeEnum__technicalProblems,	///< xs:string value="technicalProblems"
	ns5__CauseTypeEnum__terrorism,	///< xs:string value="terrorism"
	ns5__CauseTypeEnum__toxicCloudAlert,	///< xs:string value="toxicCloudAlert"
	ns5__CauseTypeEnum__vandalism,	///< xs:string value="vandalism"
	ns5__CauseTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__CauseTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__CauseTypeEnum              __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ChangedFlagEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ChangedFlagEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ChangedFlagEnum
{
	ns5__ChangedFlagEnum__catalogue,	///< xs:string value="catalogue"
	ns5__ChangedFlagEnum__filter,	///< xs:string value="filter"
};

/// @brief A class wrapper.
///
class ns5__ChangedFlagEnum_ : public xsd__anyType
{ public:
    enum ns5__ChangedFlagEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ComparisonOperatorEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ComparisonOperatorEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ComparisonOperatorEnum
{
	ns5__ComparisonOperatorEnum__equalTo,	///< xs:string value="equalTo"
	ns5__ComparisonOperatorEnum__greaterThan,	///< xs:string value="greaterThan"
	ns5__ComparisonOperatorEnum__greatherThanOrEqualTo,	///< xs:string value="greatherThanOrEqualTo"
	ns5__ComparisonOperatorEnum__lessThan,	///< xs:string value="lessThan"
	ns5__ComparisonOperatorEnum__lessThanOrEqualTo,	///< xs:string value="lessThanOrEqualTo"
};

/// @brief A class wrapper.
///
class ns5__ComparisonOperatorEnum_ : public xsd__anyType
{ public:
    enum ns5__ComparisonOperatorEnum     __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ComplianceOptionEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ComplianceOptionEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ComplianceOptionEnum
{
	ns5__ComplianceOptionEnum__advisory,	///< xs:string value="advisory"
	ns5__ComplianceOptionEnum__mandatory,	///< xs:string value="mandatory"
};

/// @brief A class wrapper.
///
class ns5__ComplianceOptionEnum_ : public xsd__anyType
{ public:
    enum ns5__ComplianceOptionEnum       __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ComputationMethodEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ComputationMethodEnum
{
	ns5__ComputationMethodEnum__arithmeticAverageOfSamplesBasedOnAFixedNumberOfSamples,	///< xs:string value="arithmeticAverageOfSamplesBasedOnAFixedNumberOfSamples"
	ns5__ComputationMethodEnum__arithmeticAverageOfSamplesInATimePeriod,	///< xs:string value="arithmeticAverageOfSamplesInATimePeriod"
	ns5__ComputationMethodEnum__harmonicAverageOfSamplesInATimePeriod,	///< xs:string value="harmonicAverageOfSamplesInATimePeriod"
	ns5__ComputationMethodEnum__medianOfSamplesInATimePeriod,	///< xs:string value="medianOfSamplesInATimePeriod"
	ns5__ComputationMethodEnum__movingAverageOfSamples,	///< xs:string value="movingAverageOfSamples"
};

/// @brief A class wrapper.
///
class ns5__ComputationMethodEnum_ : public xsd__anyType
{ public:
    enum ns5__ComputationMethodEnum      __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ConfidentialityValueEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ConfidentialityValueEnum
{
	ns5__ConfidentialityValueEnum__internalUse,	///< xs:string value="internalUse"
	ns5__ConfidentialityValueEnum__noRestriction,	///< xs:string value="noRestriction"
	ns5__ConfidentialityValueEnum__restrictedToAuthorities,	///< xs:string value="restrictedToAuthorities"
	ns5__ConfidentialityValueEnum__restrictedToAuthoritiesAndTrafficOperators,	///< xs:string value="restrictedToAuthoritiesAndTrafficOperators"
	ns5__ConfidentialityValueEnum__restrictedToAuthoritiesTrafficOperatorsAndPublishers,	///< xs:string value="restrictedToAuthoritiesTrafficOperatorsAndPublishers"
	ns5__ConfidentialityValueEnum__restrictedToAuthoritiesTrafficOperatorsAndVms,	///< xs:string value="restrictedToAuthoritiesTrafficOperatorsAndVms"
};

/// @brief A class wrapper.
///
class ns5__ConfidentialityValueEnum_ : public xsd__anyType
{ public:
    enum ns5__ConfidentialityValueEnum   __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ConstructionWorkTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ConstructionWorkTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ConstructionWorkTypeEnum
{
	ns5__ConstructionWorkTypeEnum__blastingWork,	///< xs:string value="blastingWork"
	ns5__ConstructionWorkTypeEnum__constructionWork,	///< xs:string value="constructionWork"
	ns5__ConstructionWorkTypeEnum__demolitionWork,	///< xs:string value="demolitionWork"
	ns5__ConstructionWorkTypeEnum__roadWideningWork,	///< xs:string value="roadWideningWork"
};

/// @brief A class wrapper.
///
class ns5__ConstructionWorkTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__ConstructionWorkTypeEnum   __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":CountryEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__CountryEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__CountryEnum
{
	ns5__CountryEnum__at,	///< xs:string value="at"
	ns5__CountryEnum__be,	///< xs:string value="be"
	ns5__CountryEnum__bg,	///< xs:string value="bg"
	ns5__CountryEnum__ch,	///< xs:string value="ch"
	ns5__CountryEnum__cs,	///< xs:string value="cs"
	ns5__CountryEnum__cy,	///< xs:string value="cy"
	ns5__CountryEnum__cz,	///< xs:string value="cz"
	ns5__CountryEnum__de,	///< xs:string value="de"
	ns5__CountryEnum__dk,	///< xs:string value="dk"
	ns5__CountryEnum__ee,	///< xs:string value="ee"
	ns5__CountryEnum__es,	///< xs:string value="es"
	ns5__CountryEnum__fi,	///< xs:string value="fi"
	ns5__CountryEnum__fo,	///< xs:string value="fo"
	ns5__CountryEnum__fr,	///< xs:string value="fr"
	ns5__CountryEnum__gb,	///< xs:string value="gb"
	ns5__CountryEnum__gg,	///< xs:string value="gg"
	ns5__CountryEnum__gi,	///< xs:string value="gi"
	ns5__CountryEnum__gr,	///< xs:string value="gr"
	ns5__CountryEnum__hr,	///< xs:string value="hr"
	ns5__CountryEnum__hu,	///< xs:string value="hu"
	ns5__CountryEnum__ie,	///< xs:string value="ie"
	ns5__CountryEnum__im,	///< xs:string value="im"
	ns5__CountryEnum__is,	///< xs:string value="is"
	ns5__CountryEnum__it,	///< xs:string value="it"
	ns5__CountryEnum__je,	///< xs:string value="je"
	ns5__CountryEnum__li,	///< xs:string value="li"
	ns5__CountryEnum__lt,	///< xs:string value="lt"
	ns5__CountryEnum__lu,	///< xs:string value="lu"
	ns5__CountryEnum__lv,	///< xs:string value="lv"
	ns5__CountryEnum__ma,	///< xs:string value="ma"
	ns5__CountryEnum__mc,	///< xs:string value="mc"
	ns5__CountryEnum__mk,	///< xs:string value="mk"
	ns5__CountryEnum__mt,	///< xs:string value="mt"
	ns5__CountryEnum__nl,	///< xs:string value="nl"
	ns5__CountryEnum__no,	///< xs:string value="no"
	ns5__CountryEnum__pl,	///< xs:string value="pl"
	ns5__CountryEnum__pt,	///< xs:string value="pt"
	ns5__CountryEnum__ro,	///< xs:string value="ro"
	ns5__CountryEnum__se,	///< xs:string value="se"
	ns5__CountryEnum__si,	///< xs:string value="si"
	ns5__CountryEnum__sk,	///< xs:string value="sk"
	ns5__CountryEnum__sm,	///< xs:string value="sm"
	ns5__CountryEnum__tr,	///< xs:string value="tr"
	ns5__CountryEnum__va,	///< xs:string value="va"
	ns5__CountryEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__CountryEnum_ : public xsd__anyType
{ public:
    enum ns5__CountryEnum                __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DangerousGoodsRegulationsEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DangerousGoodsRegulationsEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DangerousGoodsRegulationsEnum
{
	ns5__DangerousGoodsRegulationsEnum__adr,	///< xs:string value="adr"
	ns5__DangerousGoodsRegulationsEnum__iataIcao,	///< xs:string value="iataIcao"
	ns5__DangerousGoodsRegulationsEnum__imoImdg,	///< xs:string value="imoImdg"
	ns5__DangerousGoodsRegulationsEnum__railroadDangerousGoodsBook,	///< xs:string value="railroadDangerousGoodsBook"
};

/// @brief A class wrapper.
///
class ns5__DangerousGoodsRegulationsEnum_ : public xsd__anyType
{ public:
    enum ns5__DangerousGoodsRegulationsEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DateTime is a simpleType restriction of XSD type xs:dateTime.
///
typedef xsd__dateTime ns5__DateTime;

/// @brief A class wrapper.
///
class ns5__DateTime__ : public xsd__anyType
{ public:
    ns5__DateTime                        __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DatexPictogramEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DatexPictogramEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DatexPictogramEnum
{
	ns5__DatexPictogramEnum__advisorySpeed,	///< xs:string value="advisorySpeed"
	ns5__DatexPictogramEnum__blankVoid,	///< xs:string value="blankVoid"
	ns5__DatexPictogramEnum__chainsOrSnowTyresRecommended,	///< xs:string value="chainsOrSnowTyresRecommended"
	ns5__DatexPictogramEnum__crossWind,	///< xs:string value="crossWind"
	ns5__DatexPictogramEnum__drivingOfVehiclesLessThanXMetresApartProhibited,	///< xs:string value="drivingOfVehiclesLessThanXMetresApartProhibited"
	ns5__DatexPictogramEnum__endOfAdvisorySpeed,	///< xs:string value="endOfAdvisorySpeed"
	ns5__DatexPictogramEnum__endOfProhibitionOfOvertaking,	///< xs:string value="endOfProhibitionOfOvertaking"
	ns5__DatexPictogramEnum__endOfProhibitionOfOvertakingForGoodsVehicles,	///< xs:string value="endOfProhibitionOfOvertakingForGoodsVehicles"
	ns5__DatexPictogramEnum__endOfSpeedLimit,	///< xs:string value="endOfSpeedLimit"
	ns5__DatexPictogramEnum__exitClosed,	///< xs:string value="exitClosed"
	ns5__DatexPictogramEnum__fog,	///< xs:string value="fog"
	ns5__DatexPictogramEnum__keepASafeDistance,	///< xs:string value="keepASafeDistance"
	ns5__DatexPictogramEnum__maximumSpeedLimit,	///< xs:string value="maximumSpeedLimit"
	ns5__DatexPictogramEnum__noEntry,	///< xs:string value="noEntry"
	ns5__DatexPictogramEnum__noEntryForGoodsVehicles,	///< xs:string value="noEntryForGoodsVehicles"
	ns5__DatexPictogramEnum__noEntryForVehiclesExceedingXTonnesLadenMass,	///< xs:string value="noEntryForVehiclesExceedingXTonnesLadenMass"
	ns5__DatexPictogramEnum__noEntryForVehiclesHavingAMassExceedingXTonnesOnOneAxle,	///< xs:string value="noEntryForVehiclesHavingAMassExceedingXTonnesOnOneAxle"
	ns5__DatexPictogramEnum__noEntryForVehiclesHavingAnOverallHeightExceedingXMetres,	///< xs:string value="noEntryForVehiclesHavingAnOverallHeightExceedingXMetres"
	ns5__DatexPictogramEnum__noEntryForVehiclesHavingAnOverallLengthExceedingXMetres,	///< xs:string value="noEntryForVehiclesHavingAnOverallLengthExceedingXMetres"
	ns5__DatexPictogramEnum__noEntryForVehiclesCarryingDangerousGoods,	///< xs:string value="noEntryForVehiclesCarryingDangerousGoods"
	ns5__DatexPictogramEnum__otherDanger,	///< xs:string value="otherDanger"
	ns5__DatexPictogramEnum__overtakingByGoodsVehiclesProhibited,	///< xs:string value="overtakingByGoodsVehiclesProhibited"
	ns5__DatexPictogramEnum__overtakingProhibited,	///< xs:string value="overtakingProhibited"
	ns5__DatexPictogramEnum__roadClosedAhead,	///< xs:string value="roadClosedAhead"
	ns5__DatexPictogramEnum__roadworks,	///< xs:string value="roadworks"
	ns5__DatexPictogramEnum__slipperyRoad,	///< xs:string value="slipperyRoad"
	ns5__DatexPictogramEnum__snow,	///< xs:string value="snow"
	ns5__DatexPictogramEnum__snowTyresCompulsory,	///< xs:string value="snowTyresCompulsory"
	ns5__DatexPictogramEnum__trafficCongestion,	///< xs:string value="trafficCongestion"
};

/// @brief A class wrapper.
///
class ns5__DatexPictogramEnum_ : public xsd__anyType
{ public:
    enum ns5__DatexPictogramEnum         __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DayEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DayEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DayEnum
{
	ns5__DayEnum__monday,	///< xs:string value="monday"
	ns5__DayEnum__tuesday,	///< xs:string value="tuesday"
	ns5__DayEnum__wednesday,	///< xs:string value="wednesday"
	ns5__DayEnum__thursday,	///< xs:string value="thursday"
	ns5__DayEnum__friday,	///< xs:string value="friday"
	ns5__DayEnum__saturday,	///< xs:string value="saturday"
	ns5__DayEnum__sunday,	///< xs:string value="sunday"
};

/// @brief A class wrapper.
///
class ns5__DayEnum_ : public xsd__anyType
{ public:
    enum ns5__DayEnum                    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DelayBandEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DelayBandEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DelayBandEnum
{
	ns5__DelayBandEnum__negligible,	///< xs:string value="negligible"
	ns5__DelayBandEnum__upToTenMinutes,	///< xs:string value="upToTenMinutes"
	ns5__DelayBandEnum__betweenTenMinutesAndThirtyMinutes,	///< xs:string value="betweenTenMinutesAndThirtyMinutes"
	ns5__DelayBandEnum__betweenThirtyMinutesAndOneHour,	///< xs:string value="betweenThirtyMinutesAndOneHour"
	ns5__DelayBandEnum__betweenOneHourAndThreeHours,	///< xs:string value="betweenOneHourAndThreeHours"
	ns5__DelayBandEnum__betweenThreeHoursAndSixHours,	///< xs:string value="betweenThreeHoursAndSixHours"
	ns5__DelayBandEnum__longerThanSixHours,	///< xs:string value="longerThanSixHours"
};

/// @brief A class wrapper.
///
class ns5__DelayBandEnum_ : public xsd__anyType
{ public:
    enum ns5__DelayBandEnum              __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DelaysTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DelaysTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DelaysTypeEnum
{
	ns5__DelaysTypeEnum__delays,	///< xs:string value="delays"
	ns5__DelaysTypeEnum__delaysOfUncertainDuration,	///< xs:string value="delaysOfUncertainDuration"
	ns5__DelaysTypeEnum__longDelays,	///< xs:string value="longDelays"
	ns5__DelaysTypeEnum__veryLongDelays,	///< xs:string value="veryLongDelays"
};

/// @brief A class wrapper.
///
class ns5__DelaysTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__DelaysTypeEnum             __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DenyReasonEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DenyReasonEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DenyReasonEnum
{
	ns5__DenyReasonEnum__unknownReason,	///< xs:string value="unknownReason"
	ns5__DenyReasonEnum__wrongCatalogue,	///< xs:string value="wrongCatalogue"
	ns5__DenyReasonEnum__wrongFilter,	///< xs:string value="wrongFilter"
	ns5__DenyReasonEnum__wrongOrder,	///< xs:string value="wrongOrder"
	ns5__DenyReasonEnum__wrongPartner,	///< xs:string value="wrongPartner"
};

/// @brief A class wrapper.
///
class ns5__DenyReasonEnum_ : public xsd__anyType
{ public:
    enum ns5__DenyReasonEnum             __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DirectionCompassEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DirectionCompassEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DirectionCompassEnum
{
	ns5__DirectionCompassEnum__east,	///< xs:string value="east"
	ns5__DirectionCompassEnum__eastNorthEast,	///< xs:string value="eastNorthEast"
	ns5__DirectionCompassEnum__eastSouthEast,	///< xs:string value="eastSouthEast"
	ns5__DirectionCompassEnum__north,	///< xs:string value="north"
	ns5__DirectionCompassEnum__northEast,	///< xs:string value="northEast"
	ns5__DirectionCompassEnum__northNorthEast,	///< xs:string value="northNorthEast"
	ns5__DirectionCompassEnum__northNorthWest,	///< xs:string value="northNorthWest"
	ns5__DirectionCompassEnum__northWest,	///< xs:string value="northWest"
	ns5__DirectionCompassEnum__south,	///< xs:string value="south"
	ns5__DirectionCompassEnum__southEast,	///< xs:string value="southEast"
	ns5__DirectionCompassEnum__southSouthEast,	///< xs:string value="southSouthEast"
	ns5__DirectionCompassEnum__southSouthWest,	///< xs:string value="southSouthWest"
	ns5__DirectionCompassEnum__southWest,	///< xs:string value="southWest"
	ns5__DirectionCompassEnum__west,	///< xs:string value="west"
	ns5__DirectionCompassEnum__westNorthWest,	///< xs:string value="westNorthWest"
	ns5__DirectionCompassEnum__westSouthWest,	///< xs:string value="westSouthWest"
};

/// @brief A class wrapper.
///
class ns5__DirectionCompassEnum_ : public xsd__anyType
{ public:
    enum ns5__DirectionCompassEnum       __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DirectionEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DirectionEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DirectionEnum
{
	ns5__DirectionEnum__anticlockwise,	///< xs:string value="anticlockwise"
	ns5__DirectionEnum__clockwise,	///< xs:string value="clockwise"
	ns5__DirectionEnum__northBound,	///< xs:string value="northBound"
	ns5__DirectionEnum__northEastBound,	///< xs:string value="northEastBound"
	ns5__DirectionEnum__eastBound,	///< xs:string value="eastBound"
	ns5__DirectionEnum__southEastBound,	///< xs:string value="southEastBound"
	ns5__DirectionEnum__southBound,	///< xs:string value="southBound"
	ns5__DirectionEnum__southWestBound,	///< xs:string value="southWestBound"
	ns5__DirectionEnum__westBound,	///< xs:string value="westBound"
	ns5__DirectionEnum__northWestBound,	///< xs:string value="northWestBound"
	ns5__DirectionEnum__inboundTowardsTown,	///< xs:string value="inboundTowardsTown"
	ns5__DirectionEnum__outboundFromTown,	///< xs:string value="outboundFromTown"
};

/// @brief A class wrapper.
///
class ns5__DirectionEnum_ : public xsd__anyType
{ public:
    enum ns5__DirectionEnum              __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DisturbanceActivityTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DisturbanceActivityTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DisturbanceActivityTypeEnum
{
	ns5__DisturbanceActivityTypeEnum__airRaid,	///< xs:string value="airRaid"
	ns5__DisturbanceActivityTypeEnum__altercationOfVehicleOccupants,	///< xs:string value="altercationOfVehicleOccupants"
	ns5__DisturbanceActivityTypeEnum__assault,	///< xs:string value="assault"
	ns5__DisturbanceActivityTypeEnum__assetDestruction,	///< xs:string value="assetDestruction"
	ns5__DisturbanceActivityTypeEnum__attack,	///< xs:string value="attack"
	ns5__DisturbanceActivityTypeEnum__attackOnVehicle,	///< xs:string value="attackOnVehicle"
	ns5__DisturbanceActivityTypeEnum__blockadeOrBarrier,	///< xs:string value="blockadeOrBarrier"
	ns5__DisturbanceActivityTypeEnum__bombAlert,	///< xs:string value="bombAlert"
	ns5__DisturbanceActivityTypeEnum__crowd,	///< xs:string value="crowd"
	ns5__DisturbanceActivityTypeEnum__demonstration,	///< xs:string value="demonstration"
	ns5__DisturbanceActivityTypeEnum__evacuation,	///< xs:string value="evacuation"
	ns5__DisturbanceActivityTypeEnum__filterBlockade,	///< xs:string value="filterBlockade"
	ns5__DisturbanceActivityTypeEnum__goSlowOperation,	///< xs:string value="goSlowOperation"
	ns5__DisturbanceActivityTypeEnum__gunfireOnRoadway,	///< xs:string value="gunfireOnRoadway"
	ns5__DisturbanceActivityTypeEnum__illVehicleOccupants,	///< xs:string value="illVehicleOccupants"
	ns5__DisturbanceActivityTypeEnum__march,	///< xs:string value="march"
	ns5__DisturbanceActivityTypeEnum__publicDisturbance,	///< xs:string value="publicDisturbance"
	ns5__DisturbanceActivityTypeEnum__radioactiveLeakAlert,	///< xs:string value="radioactiveLeakAlert"
	ns5__DisturbanceActivityTypeEnum__riot,	///< xs:string value="riot"
	ns5__DisturbanceActivityTypeEnum__sabotage,	///< xs:string value="sabotage"
	ns5__DisturbanceActivityTypeEnum__securityAlert,	///< xs:string value="securityAlert"
	ns5__DisturbanceActivityTypeEnum__securityIncident,	///< xs:string value="securityIncident"
	ns5__DisturbanceActivityTypeEnum__sightseersObstructingAccess,	///< xs:string value="sightseersObstructingAccess"
	ns5__DisturbanceActivityTypeEnum__strike,	///< xs:string value="strike"
	ns5__DisturbanceActivityTypeEnum__terroristIncident,	///< xs:string value="terroristIncident"
	ns5__DisturbanceActivityTypeEnum__theft,	///< xs:string value="theft"
	ns5__DisturbanceActivityTypeEnum__toxicCloudAlert,	///< xs:string value="toxicCloudAlert"
	ns5__DisturbanceActivityTypeEnum__unspecifiedAlert,	///< xs:string value="unspecifiedAlert"
	ns5__DisturbanceActivityTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__DisturbanceActivityTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__DisturbanceActivityTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DrivingConditionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__DrivingConditionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__DrivingConditionTypeEnum
{
	ns5__DrivingConditionTypeEnum__impossible,	///< xs:string value="impossible"
	ns5__DrivingConditionTypeEnum__hazardous,	///< xs:string value="hazardous"
	ns5__DrivingConditionTypeEnum__normal,	///< xs:string value="normal"
	ns5__DrivingConditionTypeEnum__passableWithCare,	///< xs:string value="passableWithCare"
	ns5__DrivingConditionTypeEnum__unknown,	///< xs:string value="unknown"
	ns5__DrivingConditionTypeEnum__veryHazardous,	///< xs:string value="veryHazardous"
	ns5__DrivingConditionTypeEnum__winterConditions,	///< xs:string value="winterConditions"
	ns5__DrivingConditionTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__DrivingConditionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__DrivingConditionTypeEnum   __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":EnvironmentalObstructionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__EnvironmentalObstructionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__EnvironmentalObstructionTypeEnum
{
	ns5__EnvironmentalObstructionTypeEnum__avalanches,	///< xs:string value="avalanches"
	ns5__EnvironmentalObstructionTypeEnum__earthquakeDamage,	///< xs:string value="earthquakeDamage"
	ns5__EnvironmentalObstructionTypeEnum__fallenTrees,	///< xs:string value="fallenTrees"
	ns5__EnvironmentalObstructionTypeEnum__fallingIce,	///< xs:string value="fallingIce"
	ns5__EnvironmentalObstructionTypeEnum__fallingLightIceOrSnow,	///< xs:string value="fallingLightIceOrSnow"
	ns5__EnvironmentalObstructionTypeEnum__flashFloods,	///< xs:string value="flashFloods"
	ns5__EnvironmentalObstructionTypeEnum__flooding,	///< xs:string value="flooding"
	ns5__EnvironmentalObstructionTypeEnum__forestFire,	///< xs:string value="forestFire"
	ns5__EnvironmentalObstructionTypeEnum__grassFire,	///< xs:string value="grassFire"
	ns5__EnvironmentalObstructionTypeEnum__landslips,	///< xs:string value="landslips"
	ns5__EnvironmentalObstructionTypeEnum__mudSlide,	///< xs:string value="mudSlide"
	ns5__EnvironmentalObstructionTypeEnum__sewerOverflow,	///< xs:string value="sewerOverflow"
	ns5__EnvironmentalObstructionTypeEnum__rockfalls,	///< xs:string value="rockfalls"
	ns5__EnvironmentalObstructionTypeEnum__seriousFire,	///< xs:string value="seriousFire"
	ns5__EnvironmentalObstructionTypeEnum__smokeOrFumes,	///< xs:string value="smokeOrFumes"
	ns5__EnvironmentalObstructionTypeEnum__stormDamage,	///< xs:string value="stormDamage"
	ns5__EnvironmentalObstructionTypeEnum__subsidence,	///< xs:string value="subsidence"
	ns5__EnvironmentalObstructionTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__EnvironmentalObstructionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__EnvironmentalObstructionTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":EquipmentOrSystemFaultTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__EquipmentOrSystemFaultTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__EquipmentOrSystemFaultTypeEnum
{
	ns5__EquipmentOrSystemFaultTypeEnum__notWorking,	///< xs:string value="notWorking"
	ns5__EquipmentOrSystemFaultTypeEnum__outOfService,	///< xs:string value="outOfService"
	ns5__EquipmentOrSystemFaultTypeEnum__workingIncorrectly,	///< xs:string value="workingIncorrectly"
	ns5__EquipmentOrSystemFaultTypeEnum__workingIntermittently,	///< xs:string value="workingIntermittently"
};

/// @brief A class wrapper.
///
class ns5__EquipmentOrSystemFaultTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__EquipmentOrSystemFaultTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":EquipmentOrSystemTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__EquipmentOrSystemTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__EquipmentOrSystemTypeEnum
{
	ns5__EquipmentOrSystemTypeEnum__automatedTollSystem,	///< xs:string value="automatedTollSystem"
	ns5__EquipmentOrSystemTypeEnum__emergencyRoadsideTelephones,	///< xs:string value="emergencyRoadsideTelephones"
	ns5__EquipmentOrSystemTypeEnum__galleryLights,	///< xs:string value="galleryLights"
	ns5__EquipmentOrSystemTypeEnum__laneControlSigns,	///< xs:string value="laneControlSigns"
	ns5__EquipmentOrSystemTypeEnum__levelCrossing,	///< xs:string value="levelCrossing"
	ns5__EquipmentOrSystemTypeEnum__matrixSigns,	///< xs:string value="matrixSigns"
	ns5__EquipmentOrSystemTypeEnum__rampControls,	///< xs:string value="rampControls"
	ns5__EquipmentOrSystemTypeEnum__roadsideCommunicationsSystem,	///< xs:string value="roadsideCommunicationsSystem"
	ns5__EquipmentOrSystemTypeEnum__roadsidePowerSystem,	///< xs:string value="roadsidePowerSystem"
	ns5__EquipmentOrSystemTypeEnum__speedControlSigns,	///< xs:string value="speedControlSigns"
	ns5__EquipmentOrSystemTypeEnum__streetLighting,	///< xs:string value="streetLighting"
	ns5__EquipmentOrSystemTypeEnum__temporaryTrafficLights,	///< xs:string value="temporaryTrafficLights"
	ns5__EquipmentOrSystemTypeEnum__tollGates,	///< xs:string value="tollGates"
	ns5__EquipmentOrSystemTypeEnum__trafficLightSets,	///< xs:string value="trafficLightSets"
	ns5__EquipmentOrSystemTypeEnum__trafficSignals,	///< xs:string value="trafficSignals"
	ns5__EquipmentOrSystemTypeEnum__tunnelLights,	///< xs:string value="tunnelLights"
	ns5__EquipmentOrSystemTypeEnum__tunnelVentilation,	///< xs:string value="tunnelVentilation"
	ns5__EquipmentOrSystemTypeEnum__variableMessageSigns,	///< xs:string value="variableMessageSigns"
	ns5__EquipmentOrSystemTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__EquipmentOrSystemTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__EquipmentOrSystemTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Float is a simpleType restriction of XSD type xs:float.
///
typedef float ns5__Float;

/// @brief A class wrapper.
///
class ns5__Float__ : public xsd__anyType
{ public:
    ns5__Float                           __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":FuelTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__FuelTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__FuelTypeEnum
{
	ns5__FuelTypeEnum__battery,	///< xs:string value="battery"
	ns5__FuelTypeEnum__biodiesel,	///< xs:string value="biodiesel"
	ns5__FuelTypeEnum__diesel,	///< xs:string value="diesel"
	ns5__FuelTypeEnum__dieselBatteryHybrid,	///< xs:string value="dieselBatteryHybrid"
	ns5__FuelTypeEnum__ethanol,	///< xs:string value="ethanol"
	ns5__FuelTypeEnum__hydrogen,	///< xs:string value="hydrogen"
	ns5__FuelTypeEnum__liquidGas,	///< xs:string value="liquidGas"
	ns5__FuelTypeEnum__lpg,	///< xs:string value="lpg"
	ns5__FuelTypeEnum__methane,	///< xs:string value="methane"
	ns5__FuelTypeEnum__petrol,	///< xs:string value="petrol"
	ns5__FuelTypeEnum__petrolBatteryHybrid,	///< xs:string value="petrolBatteryHybrid"
};

/// @brief A class wrapper.
///
class ns5__FuelTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__FuelTypeEnum               __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GeneralInstructionToRoadUsersTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__GeneralInstructionToRoadUsersTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__GeneralInstructionToRoadUsersTypeEnum
{
	ns5__GeneralInstructionToRoadUsersTypeEnum__allowEmergencyVehiclesToPass,	///< xs:string value="allowEmergencyVehiclesToPass"
	ns5__GeneralInstructionToRoadUsersTypeEnum__approachWithCare,	///< xs:string value="approachWithCare"
	ns5__GeneralInstructionToRoadUsersTypeEnum__avoidTheArea,	///< xs:string value="avoidTheArea"
	ns5__GeneralInstructionToRoadUsersTypeEnum__closeAllWindowsTurnOffHeaterAndVents,	///< xs:string value="closeAllWindowsTurnOffHeaterAndVents"
	ns5__GeneralInstructionToRoadUsersTypeEnum__crossJunctionWithCare,	///< xs:string value="crossJunctionWithCare"
	ns5__GeneralInstructionToRoadUsersTypeEnum__doNotAllowUnnecessaryGaps,	///< xs:string value="doNotAllowUnnecessaryGaps"
	ns5__GeneralInstructionToRoadUsersTypeEnum__doNotLeaveYourVehicle,	///< xs:string value="doNotLeaveYourVehicle"
	ns5__GeneralInstructionToRoadUsersTypeEnum__doNotThrowOutAnyBurningObjects,	///< xs:string value="doNotThrowOutAnyBurningObjects"
	ns5__GeneralInstructionToRoadUsersTypeEnum__doNotUseNavigationSystems,	///< xs:string value="doNotUseNavigationSystems"
	ns5__GeneralInstructionToRoadUsersTypeEnum__driveCarefully,	///< xs:string value="driveCarefully"
	ns5__GeneralInstructionToRoadUsersTypeEnum__driveWithExtremeCaution,	///< xs:string value="driveWithExtremeCaution"
	ns5__GeneralInstructionToRoadUsersTypeEnum__flashYourLights,	///< xs:string value="flashYourLights"
	ns5__GeneralInstructionToRoadUsersTypeEnum__followTheVehicleInFrontSmoothly,	///< xs:string value="followTheVehicleInFrontSmoothly"
	ns5__GeneralInstructionToRoadUsersTypeEnum__increaseNormalFollowingDistance,	///< xs:string value="increaseNormalFollowingDistance"
	ns5__GeneralInstructionToRoadUsersTypeEnum__inEmergencyWaitForPatrolService,	///< xs:string value="inEmergencyWaitForPatrolService"
	ns5__GeneralInstructionToRoadUsersTypeEnum__keepYourDistance,	///< xs:string value="keepYourDistance"
	ns5__GeneralInstructionToRoadUsersTypeEnum__leaveYourVehicleProceedToNextSafePlace,	///< xs:string value="leaveYourVehicleProceedToNextSafePlace"
	ns5__GeneralInstructionToRoadUsersTypeEnum__noNakedFlames,	///< xs:string value="noNakedFlames"
	ns5__GeneralInstructionToRoadUsersTypeEnum__noOvertaking,	///< xs:string value="noOvertaking"
	ns5__GeneralInstructionToRoadUsersTypeEnum__noSmoking,	///< xs:string value="noSmoking"
	ns5__GeneralInstructionToRoadUsersTypeEnum__noStopping,	///< xs:string value="noStopping"
	ns5__GeneralInstructionToRoadUsersTypeEnum__noUturns,	///< xs:string value="noUturns"
	ns5__GeneralInstructionToRoadUsersTypeEnum__observeSignals,	///< xs:string value="observeSignals"
	ns5__GeneralInstructionToRoadUsersTypeEnum__observeSigns,	///< xs:string value="observeSigns"
	ns5__GeneralInstructionToRoadUsersTypeEnum__onlyTravelIfAbsolutelyNecessary,	///< xs:string value="onlyTravelIfAbsolutelyNecessary"
	ns5__GeneralInstructionToRoadUsersTypeEnum__overtakeWithCare,	///< xs:string value="overtakeWithCare"
	ns5__GeneralInstructionToRoadUsersTypeEnum__pullOverToTheEdgeOfTheRoadway,	///< xs:string value="pullOverToTheEdgeOfTheRoadway"
	ns5__GeneralInstructionToRoadUsersTypeEnum__stopAtNextSafePlace,	///< xs:string value="stopAtNextSafePlace"
	ns5__GeneralInstructionToRoadUsersTypeEnum__stopAtNextServiceArea,	///< xs:string value="stopAtNextServiceArea"
	ns5__GeneralInstructionToRoadUsersTypeEnum__switchOffEngine,	///< xs:string value="switchOffEngine"
	ns5__GeneralInstructionToRoadUsersTypeEnum__switchOffMobilePhonesAndTwoWayRadios,	///< xs:string value="switchOffMobilePhonesAndTwoWayRadios"
	ns5__GeneralInstructionToRoadUsersTypeEnum__testYourBrakes,	///< xs:string value="testYourBrakes"
	ns5__GeneralInstructionToRoadUsersTypeEnum__useBusService,	///< xs:string value="useBusService"
	ns5__GeneralInstructionToRoadUsersTypeEnum__useFogLights,	///< xs:string value="useFogLights"
	ns5__GeneralInstructionToRoadUsersTypeEnum__useHazardWarningLights,	///< xs:string value="useHazardWarningLights"
	ns5__GeneralInstructionToRoadUsersTypeEnum__useHeadlights,	///< xs:string value="useHeadlights"
	ns5__GeneralInstructionToRoadUsersTypeEnum__useRailService,	///< xs:string value="useRailService"
	ns5__GeneralInstructionToRoadUsersTypeEnum__useTramService,	///< xs:string value="useTramService"
	ns5__GeneralInstructionToRoadUsersTypeEnum__useUndergroundService,	///< xs:string value="useUndergroundService"
	ns5__GeneralInstructionToRoadUsersTypeEnum__waitForEscortVehicle,	///< xs:string value="waitForEscortVehicle"
	ns5__GeneralInstructionToRoadUsersTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__GeneralInstructionToRoadUsersTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__GeneralInstructionToRoadUsersTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GeneralNetworkManagementTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__GeneralNetworkManagementTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__GeneralNetworkManagementTypeEnum
{
	ns5__GeneralNetworkManagementTypeEnum__bridgeSwingInOperation,	///< xs:string value="bridgeSwingInOperation"
	ns5__GeneralNetworkManagementTypeEnum__convoyService,	///< xs:string value="convoyService"
	ns5__GeneralNetworkManagementTypeEnum__obstacleSignalling,	///< xs:string value="obstacleSignalling"
	ns5__GeneralNetworkManagementTypeEnum__rampMeteringInOperation,	///< xs:string value="rampMeteringInOperation"
	ns5__GeneralNetworkManagementTypeEnum__temporaryTrafficLights,	///< xs:string value="temporaryTrafficLights"
	ns5__GeneralNetworkManagementTypeEnum__tollGatesOpen,	///< xs:string value="tollGatesOpen"
	ns5__GeneralNetworkManagementTypeEnum__trafficBeingManuallyDirected,	///< xs:string value="trafficBeingManuallyDirected"
	ns5__GeneralNetworkManagementTypeEnum__trafficHeld,	///< xs:string value="trafficHeld"
	ns5__GeneralNetworkManagementTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__GeneralNetworkManagementTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__GeneralNetworkManagementTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":InformationStatusEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__InformationStatusEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__InformationStatusEnum
{
	ns5__InformationStatusEnum__real,	///< xs:string value="real"
	ns5__InformationStatusEnum__securityExercise,	///< xs:string value="securityExercise"
	ns5__InformationStatusEnum__technicalExercise,	///< xs:string value="technicalExercise"
	ns5__InformationStatusEnum__test,	///< xs:string value="test"
};

/// @brief A class wrapper.
///
class ns5__InformationStatusEnum_ : public xsd__anyType
{ public:
    enum ns5__InformationStatusEnum      __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":InfrastructureDamageTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__InfrastructureDamageTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__InfrastructureDamageTypeEnum
{
	ns5__InfrastructureDamageTypeEnum__burstPipe,	///< xs:string value="burstPipe"
	ns5__InfrastructureDamageTypeEnum__burstWaterMain,	///< xs:string value="burstWaterMain"
	ns5__InfrastructureDamageTypeEnum__collapsedSewer,	///< xs:string value="collapsedSewer"
	ns5__InfrastructureDamageTypeEnum__damagedBridge,	///< xs:string value="damagedBridge"
	ns5__InfrastructureDamageTypeEnum__damagedCrashBarrier,	///< xs:string value="damagedCrashBarrier"
	ns5__InfrastructureDamageTypeEnum__damagedFlyover,	///< xs:string value="damagedFlyover"
	ns5__InfrastructureDamageTypeEnum__damagedGallery,	///< xs:string value="damagedGallery"
	ns5__InfrastructureDamageTypeEnum__damagedGantry,	///< xs:string value="damagedGantry"
	ns5__InfrastructureDamageTypeEnum__damagedRoadSurface,	///< xs:string value="damagedRoadSurface"
	ns5__InfrastructureDamageTypeEnum__damagedTunnel,	///< xs:string value="damagedTunnel"
	ns5__InfrastructureDamageTypeEnum__damagedViaduct,	///< xs:string value="damagedViaduct"
	ns5__InfrastructureDamageTypeEnum__fallenPowerCables,	///< xs:string value="fallenPowerCables"
	ns5__InfrastructureDamageTypeEnum__gasLeak,	///< xs:string value="gasLeak"
	ns5__InfrastructureDamageTypeEnum__weakBridge,	///< xs:string value="weakBridge"
	ns5__InfrastructureDamageTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__InfrastructureDamageTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__InfrastructureDamageTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":InjuryStatusTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__InjuryStatusTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__InjuryStatusTypeEnum
{
	ns5__InjuryStatusTypeEnum__dead,	///< xs:string value="dead"
	ns5__InjuryStatusTypeEnum__injured,	///< xs:string value="injured"
	ns5__InjuryStatusTypeEnum__seriouslyInjured,	///< xs:string value="seriouslyInjured"
	ns5__InjuryStatusTypeEnum__slightlyInjured,	///< xs:string value="slightlyInjured"
	ns5__InjuryStatusTypeEnum__uninjured,	///< xs:string value="uninjured"
	ns5__InjuryStatusTypeEnum__unknown,	///< xs:string value="unknown"
};

/// @brief A class wrapper.
///
class ns5__InjuryStatusTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__InjuryStatusTypeEnum       __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":InvolvementRolesEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__InvolvementRolesEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__InvolvementRolesEnum
{
	ns5__InvolvementRolesEnum__cyclist,	///< xs:string value="cyclist"
	ns5__InvolvementRolesEnum__pedestrian,	///< xs:string value="pedestrian"
	ns5__InvolvementRolesEnum__unknown,	///< xs:string value="unknown"
	ns5__InvolvementRolesEnum__vehicleDriver,	///< xs:string value="vehicleDriver"
	ns5__InvolvementRolesEnum__vehicleOccupant,	///< xs:string value="vehicleOccupant"
	ns5__InvolvementRolesEnum__vehiclePassenger,	///< xs:string value="vehiclePassenger"
	ns5__InvolvementRolesEnum__witness,	///< xs:string value="witness"
};

/// @brief A class wrapper.
///
class ns5__InvolvementRolesEnum_ : public xsd__anyType
{ public:
    enum ns5__InvolvementRolesEnum       __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":LaneEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__LaneEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__LaneEnum
{
	ns5__LaneEnum__allLanesCompleteCarriageway,	///< xs:string value="allLanesCompleteCarriageway"
	ns5__LaneEnum__busLane,	///< xs:string value="busLane"
	ns5__LaneEnum__busStop,	///< xs:string value="busStop"
	ns5__LaneEnum__carPoolLane,	///< xs:string value="carPoolLane"
	ns5__LaneEnum__centralReservation,	///< xs:string value="centralReservation"
	ns5__LaneEnum__crawlerLane,	///< xs:string value="crawlerLane"
	ns5__LaneEnum__emergencyLane,	///< xs:string value="emergencyLane"
	ns5__LaneEnum__escapeLane,	///< xs:string value="escapeLane"
	ns5__LaneEnum__expressLane,	///< xs:string value="expressLane"
	ns5__LaneEnum__hardShoulder,	///< xs:string value="hardShoulder"
	ns5__LaneEnum__heavyVehicleLane,	///< xs:string value="heavyVehicleLane"
	ns5__LaneEnum__lane1,	///< xs:string value="lane1"
	ns5__LaneEnum__lane2,	///< xs:string value="lane2"
	ns5__LaneEnum__lane3,	///< xs:string value="lane3"
	ns5__LaneEnum__lane4,	///< xs:string value="lane4"
	ns5__LaneEnum__lane5,	///< xs:string value="lane5"
	ns5__LaneEnum__lane6,	///< xs:string value="lane6"
	ns5__LaneEnum__lane7,	///< xs:string value="lane7"
	ns5__LaneEnum__lane8,	///< xs:string value="lane8"
	ns5__LaneEnum__lane9,	///< xs:string value="lane9"
	ns5__LaneEnum__layBy,	///< xs:string value="layBy"
	ns5__LaneEnum__leftHandTurningLane,	///< xs:string value="leftHandTurningLane"
	ns5__LaneEnum__leftLane,	///< xs:string value="leftLane"
	ns5__LaneEnum__localTrafficLane,	///< xs:string value="localTrafficLane"
	ns5__LaneEnum__middleLane,	///< xs:string value="middleLane"
	ns5__LaneEnum__opposingLanes,	///< xs:string value="opposingLanes"
	ns5__LaneEnum__overtakingLane,	///< xs:string value="overtakingLane"
	ns5__LaneEnum__rightHandTurningLane,	///< xs:string value="rightHandTurningLane"
	ns5__LaneEnum__rightLane,	///< xs:string value="rightLane"
	ns5__LaneEnum__rushHourLane,	///< xs:string value="rushHourLane"
	ns5__LaneEnum__setDownArea,	///< xs:string value="setDownArea"
	ns5__LaneEnum__slowVehicleLane,	///< xs:string value="slowVehicleLane"
	ns5__LaneEnum__throughTrafficLane,	///< xs:string value="throughTrafficLane"
	ns5__LaneEnum__tidalFlowLane,	///< xs:string value="tidalFlowLane"
	ns5__LaneEnum__turningLane,	///< xs:string value="turningLane"
	ns5__LaneEnum__verge,	///< xs:string value="verge"
};

/// @brief A class wrapper.
///
class ns5__LaneEnum_ : public xsd__anyType
{ public:
    enum ns5__LaneEnum                   __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Language is a simpleType restriction of XSD type xs:language.
///
typedef xsd__language ns5__Language;

/// @brief A class wrapper.
///
class ns5__Language__ : public xsd__anyType
{ public:
    ns5__Language                        __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":LoadTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__LoadTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__LoadTypeEnum
{
	ns5__LoadTypeEnum__abnormalLoad,	///< xs:string value="abnormalLoad"
	ns5__LoadTypeEnum__ammunition,	///< xs:string value="ammunition"
	ns5__LoadTypeEnum__chemicals,	///< xs:string value="chemicals"
	ns5__LoadTypeEnum__combustibleMaterials,	///< xs:string value="combustibleMaterials"
	ns5__LoadTypeEnum__corrosiveMaterials,	///< xs:string value="corrosiveMaterials"
	ns5__LoadTypeEnum__debris,	///< xs:string value="debris"
	ns5__LoadTypeEnum__empty,	///< xs:string value="empty"
	ns5__LoadTypeEnum__explosiveMaterials,	///< xs:string value="explosiveMaterials"
	ns5__LoadTypeEnum__extraHighLoad,	///< xs:string value="extraHighLoad"
	ns5__LoadTypeEnum__extraLongLoad,	///< xs:string value="extraLongLoad"
	ns5__LoadTypeEnum__extraWideLoad,	///< xs:string value="extraWideLoad"
	ns5__LoadTypeEnum__fuel,	///< xs:string value="fuel"
	ns5__LoadTypeEnum__glass,	///< xs:string value="glass"
	ns5__LoadTypeEnum__goods,	///< xs:string value="goods"
	ns5__LoadTypeEnum__hazardousMaterials,	///< xs:string value="hazardousMaterials"
	ns5__LoadTypeEnum__liquid,	///< xs:string value="liquid"
	ns5__LoadTypeEnum__livestock,	///< xs:string value="livestock"
	ns5__LoadTypeEnum__materials,	///< xs:string value="materials"
	ns5__LoadTypeEnum__materialsDangerousForPeople,	///< xs:string value="materialsDangerousForPeople"
	ns5__LoadTypeEnum__materialsDangerousForTheEnvironment,	///< xs:string value="materialsDangerousForTheEnvironment"
	ns5__LoadTypeEnum__materialsDangerousForWater,	///< xs:string value="materialsDangerousForWater"
	ns5__LoadTypeEnum__oil,	///< xs:string value="oil"
	ns5__LoadTypeEnum__ordinary,	///< xs:string value="ordinary"
	ns5__LoadTypeEnum__perishableProducts,	///< xs:string value="perishableProducts"
	ns5__LoadTypeEnum__petrol,	///< xs:string value="petrol"
	ns5__LoadTypeEnum__pharmaceuticalMaterials,	///< xs:string value="pharmaceuticalMaterials"
	ns5__LoadTypeEnum__radioactiveMaterials,	///< xs:string value="radioactiveMaterials"
	ns5__LoadTypeEnum__refuse,	///< xs:string value="refuse"
	ns5__LoadTypeEnum__toxicMaterials,	///< xs:string value="toxicMaterials"
	ns5__LoadTypeEnum__vehicles,	///< xs:string value="vehicles"
	ns5__LoadTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__LoadTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__LoadTypeEnum               __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":LocationDescriptorEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__LocationDescriptorEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__LocationDescriptorEnum
{
	ns5__LocationDescriptorEnum__aroundABendInRoad,	///< xs:string value="aroundABendInRoad"
	ns5__LocationDescriptorEnum__atMotorwayInterchange,	///< xs:string value="atMotorwayInterchange"
	ns5__LocationDescriptorEnum__atRestArea,	///< xs:string value="atRestArea"
	ns5__LocationDescriptorEnum__atServiceArea,	///< xs:string value="atServiceArea"
	ns5__LocationDescriptorEnum__atTollPlaza,	///< xs:string value="atTollPlaza"
	ns5__LocationDescriptorEnum__atTunnelEntryOrExit,	///< xs:string value="atTunnelEntryOrExit"
	ns5__LocationDescriptorEnum__inbound,	///< xs:string value="inbound"
	ns5__LocationDescriptorEnum__inGallery,	///< xs:string value="inGallery"
	ns5__LocationDescriptorEnum__inTheCentre,	///< xs:string value="inTheCentre"
	ns5__LocationDescriptorEnum__inTheOppositeDirection,	///< xs:string value="inTheOppositeDirection"
	ns5__LocationDescriptorEnum__inTunnel,	///< xs:string value="inTunnel"
	ns5__LocationDescriptorEnum__onBorder,	///< xs:string value="onBorder"
	ns5__LocationDescriptorEnum__onBridge,	///< xs:string value="onBridge"
	ns5__LocationDescriptorEnum__onConnector,	///< xs:string value="onConnector"
	ns5__LocationDescriptorEnum__onElevatedSection,	///< xs:string value="onElevatedSection"
	ns5__LocationDescriptorEnum__onFlyover,	///< xs:string value="onFlyover"
	ns5__LocationDescriptorEnum__onIceRoad,	///< xs:string value="onIceRoad"
	ns5__LocationDescriptorEnum__onLevelCrossing,	///< xs:string value="onLevelCrossing"
	ns5__LocationDescriptorEnum__onLinkRoad,	///< xs:string value="onLinkRoad"
	ns5__LocationDescriptorEnum__onPass,	///< xs:string value="onPass"
	ns5__LocationDescriptorEnum__onRoundabout,	///< xs:string value="onRoundabout"
	ns5__LocationDescriptorEnum__onTheLeft,	///< xs:string value="onTheLeft"
	ns5__LocationDescriptorEnum__onTheRight,	///< xs:string value="onTheRight"
	ns5__LocationDescriptorEnum__onTheRoadway,	///< xs:string value="onTheRoadway"
	ns5__LocationDescriptorEnum__onUndergroundSection,	///< xs:string value="onUndergroundSection"
	ns5__LocationDescriptorEnum__onUnderpass,	///< xs:string value="onUnderpass"
	ns5__LocationDescriptorEnum__outbound,	///< xs:string value="outbound"
	ns5__LocationDescriptorEnum__overCrestOfHill,	///< xs:string value="overCrestOfHill"
	ns5__LocationDescriptorEnum__withinJunction,	///< xs:string value="withinJunction"
};

/// @brief A class wrapper.
///
class ns5__LocationDescriptorEnum_ : public xsd__anyType
{ public:
    enum ns5__LocationDescriptorEnum     __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MaintenanceVehicleActionsEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__MaintenanceVehicleActionsEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__MaintenanceVehicleActionsEnum
{
	ns5__MaintenanceVehicleActionsEnum__maintenanceVehiclesMergingIntoTrafficFlow,	///< xs:string value="maintenanceVehiclesMergingIntoTrafficFlow"
	ns5__MaintenanceVehicleActionsEnum__saltAndGritSpreading,	///< xs:string value="saltAndGritSpreading"
	ns5__MaintenanceVehicleActionsEnum__slowMoving,	///< xs:string value="slowMoving"
	ns5__MaintenanceVehicleActionsEnum__snowClearing,	///< xs:string value="snowClearing"
	ns5__MaintenanceVehicleActionsEnum__stoppingToServiceEquipments,	///< xs:string value="stoppingToServiceEquipments"
};

/// @brief A class wrapper.
///
class ns5__MaintenanceVehicleActionsEnum_ : public xsd__anyType
{ public:
    enum ns5__MaintenanceVehicleActionsEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MatrixFaultEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__MatrixFaultEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__MatrixFaultEnum
{
	ns5__MatrixFaultEnum__communicationsFailure,	///< xs:string value="communicationsFailure"
	ns5__MatrixFaultEnum__incorrectAspectDisplayed,	///< xs:string value="incorrectAspectDisplayed"
	ns5__MatrixFaultEnum__outOfService,	///< xs:string value="outOfService"
	ns5__MatrixFaultEnum__powerFailure,	///< xs:string value="powerFailure"
	ns5__MatrixFaultEnum__unableToClearDown,	///< xs:string value="unableToClearDown"
	ns5__MatrixFaultEnum__unknown,	///< xs:string value="unknown"
	ns5__MatrixFaultEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__MatrixFaultEnum_ : public xsd__anyType
{ public:
    enum ns5__MatrixFaultEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MeasuredOrDerivedDataTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__MeasuredOrDerivedDataTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__MeasuredOrDerivedDataTypeEnum
{
	ns5__MeasuredOrDerivedDataTypeEnum__humidityInformation,	///< xs:string value="humidityInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__individualVehicleMeasurements,	///< xs:string value="individualVehicleMeasurements"
	ns5__MeasuredOrDerivedDataTypeEnum__pollutionInformation,	///< xs:string value="pollutionInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__precipitationInformation,	///< xs:string value="precipitationInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__pressureInformation,	///< xs:string value="pressureInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__radiationInformation,	///< xs:string value="radiationInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__roadSurfaceConditionInformation,	///< xs:string value="roadSurfaceConditionInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__temperatureInformation,	///< xs:string value="temperatureInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__trafficConcentration,	///< xs:string value="trafficConcentration"
	ns5__MeasuredOrDerivedDataTypeEnum__trafficFlow,	///< xs:string value="trafficFlow"
	ns5__MeasuredOrDerivedDataTypeEnum__trafficHeadway,	///< xs:string value="trafficHeadway"
	ns5__MeasuredOrDerivedDataTypeEnum__trafficSpeed,	///< xs:string value="trafficSpeed"
	ns5__MeasuredOrDerivedDataTypeEnum__trafficStatusInformation,	///< xs:string value="trafficStatusInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__travelTimeInformation,	///< xs:string value="travelTimeInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__visibilityInformation,	///< xs:string value="visibilityInformation"
	ns5__MeasuredOrDerivedDataTypeEnum__windInformation,	///< xs:string value="windInformation"
};

/// @brief A class wrapper.
///
class ns5__MeasuredOrDerivedDataTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__MeasuredOrDerivedDataTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MobilityEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__MobilityEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__MobilityEnum
{
	ns5__MobilityEnum__mobile,	///< xs:string value="mobile"
	ns5__MobilityEnum__stationary,	///< xs:string value="stationary"
	ns5__MobilityEnum__unknown,	///< xs:string value="unknown"
};

/// @brief A class wrapper.
///
class ns5__MobilityEnum_ : public xsd__anyType
{ public:
    enum ns5__MobilityEnum               __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MonthOfYearEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__MonthOfYearEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__MonthOfYearEnum
{
	ns5__MonthOfYearEnum__january,	///< xs:string value="january"
	ns5__MonthOfYearEnum__february,	///< xs:string value="february"
	ns5__MonthOfYearEnum__march,	///< xs:string value="march"
	ns5__MonthOfYearEnum__april,	///< xs:string value="april"
	ns5__MonthOfYearEnum__may,	///< xs:string value="may"
	ns5__MonthOfYearEnum__june,	///< xs:string value="june"
	ns5__MonthOfYearEnum__july,	///< xs:string value="july"
	ns5__MonthOfYearEnum__august,	///< xs:string value="august"
	ns5__MonthOfYearEnum__september,	///< xs:string value="september"
	ns5__MonthOfYearEnum__october,	///< xs:string value="october"
	ns5__MonthOfYearEnum__november,	///< xs:string value="november"
	ns5__MonthOfYearEnum__december,	///< xs:string value="december"
};

/// @brief A class wrapper.
///
class ns5__MonthOfYearEnum_ : public xsd__anyType
{ public:
    enum ns5__MonthOfYearEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MultilingualStringValueType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 1024.
typedef std::wstring ns5__MultilingualStringValueType : 1024;

/// @brief A class wrapper.
///
class ns5__MultilingualStringValueType__ : public xsd__anyType
{ public:
    ns5__MultilingualStringValueType     __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger is a simpleType restriction of XSD type xs:nonNegativeInteger.
///
typedef xsd__nonNegativeInteger ns5__NonNegativeInteger;

/// @brief A class wrapper.
///
class ns5__NonNegativeInteger__ : public xsd__anyType
{ public:
    ns5__NonNegativeInteger              __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":NonWeatherRelatedRoadConditionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__NonWeatherRelatedRoadConditionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__NonWeatherRelatedRoadConditionTypeEnum
{
	ns5__NonWeatherRelatedRoadConditionTypeEnum__dieselOnRoad,	///< xs:string value="dieselOnRoad"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__leavesOnRoad,	///< xs:string value="leavesOnRoad"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__looseChippings,	///< xs:string value="looseChippings"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__looseSandOnRoad,	///< xs:string value="looseSandOnRoad"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__mudOnRoad,	///< xs:string value="mudOnRoad"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__oilOnRoad,	///< xs:string value="oilOnRoad"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__petrolOnRoad,	///< xs:string value="petrolOnRoad"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__roadSurfaceInPoorCondition,	///< xs:string value="roadSurfaceInPoorCondition"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__slipperyRoad,	///< xs:string value="slipperyRoad"
	ns5__NonWeatherRelatedRoadConditionTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__NonWeatherRelatedRoadConditionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__NonWeatherRelatedRoadConditionTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ObstructionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ObstructionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ObstructionTypeEnum
{
	ns5__ObstructionTypeEnum__airCrash,	///< xs:string value="airCrash"
	ns5__ObstructionTypeEnum__childrenOnRoadway,	///< xs:string value="childrenOnRoadway"
	ns5__ObstructionTypeEnum__clearanceWork,	///< xs:string value="clearanceWork"
	ns5__ObstructionTypeEnum__craneOperating,	///< xs:string value="craneOperating"
	ns5__ObstructionTypeEnum__cyclistsOnRoadway,	///< xs:string value="cyclistsOnRoadway"
	ns5__ObstructionTypeEnum__debris,	///< xs:string value="debris"
	ns5__ObstructionTypeEnum__explosion,	///< xs:string value="explosion"
	ns5__ObstructionTypeEnum__explosionHazard,	///< xs:string value="explosionHazard"
	ns5__ObstructionTypeEnum__hazardsOnTheRoad,	///< xs:string value="hazardsOnTheRoad"
	ns5__ObstructionTypeEnum__highSpeedChase,	///< xs:string value="highSpeedChase"
	ns5__ObstructionTypeEnum__houseFire,	///< xs:string value="houseFire"
	ns5__ObstructionTypeEnum__incident,	///< xs:string value="incident"
	ns5__ObstructionTypeEnum__industrialAccident,	///< xs:string value="industrialAccident"
	ns5__ObstructionTypeEnum__objectOnTheRoad,	///< xs:string value="objectOnTheRoad"
	ns5__ObstructionTypeEnum__objectsFallingFromMovingVehicle,	///< xs:string value="objectsFallingFromMovingVehicle"
	ns5__ObstructionTypeEnum__obstructionOnTheRoad,	///< xs:string value="obstructionOnTheRoad"
	ns5__ObstructionTypeEnum__peopleOnRoadway,	///< xs:string value="peopleOnRoadway"
	ns5__ObstructionTypeEnum__railCrash,	///< xs:string value="railCrash"
	ns5__ObstructionTypeEnum__recklessDriver,	///< xs:string value="recklessDriver"
	ns5__ObstructionTypeEnum__rescueAndRecoveryWork,	///< xs:string value="rescueAndRecoveryWork"
	ns5__ObstructionTypeEnum__severeFrostDamagedRoadway,	///< xs:string value="severeFrostDamagedRoadway"
	ns5__ObstructionTypeEnum__shedLoad,	///< xs:string value="shedLoad"
	ns5__ObstructionTypeEnum__snowAndIceDebris,	///< xs:string value="snowAndIceDebris"
	ns5__ObstructionTypeEnum__spillageOccurringFromMovingVehicle,	///< xs:string value="spillageOccurringFromMovingVehicle"
	ns5__ObstructionTypeEnum__spillageOnTheRoad,	///< xs:string value="spillageOnTheRoad"
	ns5__ObstructionTypeEnum__unprotectedAccidentArea,	///< xs:string value="unprotectedAccidentArea"
	ns5__ObstructionTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__ObstructionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__ObstructionTypeEnum        __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":OperatingModeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__OperatingModeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__OperatingModeEnum
{
	ns5__OperatingModeEnum__operatingMode0,	///< xs:string value="operatingMode0"
	ns5__OperatingModeEnum__operatingMode1,	///< xs:string value="operatingMode1"
	ns5__OperatingModeEnum__operatingMode2,	///< xs:string value="operatingMode2"
	ns5__OperatingModeEnum__operatingMode3,	///< xs:string value="operatingMode3"
};

/// @brief A class wrapper.
///
class ns5__OperatingModeEnum_ : public xsd__anyType
{ public:
    enum ns5__OperatingModeEnum          __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__OperatorActionOriginEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__OperatorActionOriginEnum
{
	ns5__OperatorActionOriginEnum__external,	///< xs:string value="external"
	ns5__OperatorActionOriginEnum__internal,	///< xs:string value="internal"
};

/// @brief A class wrapper.
///
class ns5__OperatorActionOriginEnum_ : public xsd__anyType
{ public:
    enum ns5__OperatorActionOriginEnum   __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__OperatorActionStatusEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__OperatorActionStatusEnum
{
	ns5__OperatorActionStatusEnum__requested,	///< xs:string value="requested"
	ns5__OperatorActionStatusEnum__approved,	///< xs:string value="approved"
	ns5__OperatorActionStatusEnum__beingImplemented,	///< xs:string value="beingImplemented"
	ns5__OperatorActionStatusEnum__implemented,	///< xs:string value="implemented"
	ns5__OperatorActionStatusEnum__rejected,	///< xs:string value="rejected"
	ns5__OperatorActionStatusEnum__terminationRequested,	///< xs:string value="terminationRequested"
	ns5__OperatorActionStatusEnum__beingTerminated,	///< xs:string value="beingTerminated"
};

/// @brief A class wrapper.
///
class ns5__OperatorActionStatusEnum_ : public xsd__anyType
{ public:
    enum ns5__OperatorActionStatusEnum   __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":OverallSeverityEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__OverallSeverityEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__OverallSeverityEnum
{
	ns5__OverallSeverityEnum__highest,	///< xs:string value="highest"
	ns5__OverallSeverityEnum__high,	///< xs:string value="high"
	ns5__OverallSeverityEnum__medium,	///< xs:string value="medium"
	ns5__OverallSeverityEnum__low,	///< xs:string value="low"
	ns5__OverallSeverityEnum__lowest,	///< xs:string value="lowest"
	ns5__OverallSeverityEnum__none,	///< xs:string value="none"
	ns5__OverallSeverityEnum__unknown,	///< xs:string value="unknown"
};

/// @brief A class wrapper.
///
class ns5__OverallSeverityEnum_ : public xsd__anyType
{ public:
    enum ns5__OverallSeverityEnum        __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PersonCategoryEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__PersonCategoryEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__PersonCategoryEnum
{
	ns5__PersonCategoryEnum__adult,	///< xs:string value="adult"
	ns5__PersonCategoryEnum__child,	///< xs:string value="child"
	ns5__PersonCategoryEnum__emergencyServicesPerson,	///< xs:string value="emergencyServicesPerson"
	ns5__PersonCategoryEnum__fireman,	///< xs:string value="fireman"
	ns5__PersonCategoryEnum__infant,	///< xs:string value="infant"
	ns5__PersonCategoryEnum__medicalStaff,	///< xs:string value="medicalStaff"
	ns5__PersonCategoryEnum__memberOfThePublic,	///< xs:string value="memberOfThePublic"
	ns5__PersonCategoryEnum__policeman,	///< xs:string value="policeman"
	ns5__PersonCategoryEnum__politician,	///< xs:string value="politician"
	ns5__PersonCategoryEnum__publicTransportPassenger,	///< xs:string value="publicTransportPassenger"
	ns5__PersonCategoryEnum__sickPerson,	///< xs:string value="sickPerson"
	ns5__PersonCategoryEnum__trafficOfficer,	///< xs:string value="trafficOfficer"
	ns5__PersonCategoryEnum__trafficWarden,	///< xs:string value="trafficWarden"
	ns5__PersonCategoryEnum__veryImportantPerson,	///< xs:string value="veryImportantPerson"
};

/// @brief A class wrapper.
///
class ns5__PersonCategoryEnum_ : public xsd__anyType
{ public:
    enum ns5__PersonCategoryEnum         __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PlacesEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__PlacesEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__PlacesEnum
{
	ns5__PlacesEnum__aroundBendsInTheRoad,	///< xs:string value="aroundBendsInTheRoad"
	ns5__PlacesEnum__atCustomsPosts,	///< xs:string value="atCustomsPosts"
	ns5__PlacesEnum__atHighAltitudes,	///< xs:string value="atHighAltitudes"
	ns5__PlacesEnum__atTollPlazas,	///< xs:string value="atTollPlazas"
	ns5__PlacesEnum__inGalleries,	///< xs:string value="inGalleries"
	ns5__PlacesEnum__inLowLyingAreas,	///< xs:string value="inLowLyingAreas"
	ns5__PlacesEnum__inRoadworksAreas,	///< xs:string value="inRoadworksAreas"
	ns5__PlacesEnum__inShadedAreas,	///< xs:string value="inShadedAreas"
	ns5__PlacesEnum__inTheCityCentre,	///< xs:string value="inTheCityCentre"
	ns5__PlacesEnum__inTheInnerCityAreas,	///< xs:string value="inTheInnerCityAreas"
	ns5__PlacesEnum__inTunnels,	///< xs:string value="inTunnels"
	ns5__PlacesEnum__onBridges,	///< xs:string value="onBridges"
	ns5__PlacesEnum__onElevatedSections,	///< xs:string value="onElevatedSections"
	ns5__PlacesEnum__onEnteringOrLeavingTunnels,	///< xs:string value="onEnteringOrLeavingTunnels"
	ns5__PlacesEnum__onEnteringTheCountry,	///< xs:string value="onEnteringTheCountry"
	ns5__PlacesEnum__onFlyovers,	///< xs:string value="onFlyovers"
	ns5__PlacesEnum__onLeavingTheCountry,	///< xs:string value="onLeavingTheCountry"
	ns5__PlacesEnum__onMotorways,	///< xs:string value="onMotorways"
	ns5__PlacesEnum__onNonMotorways,	///< xs:string value="onNonMotorways"
	ns5__PlacesEnum__onRoundabouts,	///< xs:string value="onRoundabouts"
	ns5__PlacesEnum__onSlipRoads,	///< xs:string value="onSlipRoads"
	ns5__PlacesEnum__onUndergroundSections,	///< xs:string value="onUndergroundSections"
	ns5__PlacesEnum__onUnderpasses,	///< xs:string value="onUnderpasses"
	ns5__PlacesEnum__overTheCrestOfHills,	///< xs:string value="overTheCrestOfHills"
	ns5__PlacesEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__PlacesEnum_ : public xsd__anyType
{ public:
    enum ns5__PlacesEnum                 __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PollutantTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__PollutantTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__PollutantTypeEnum
{
	ns5__PollutantTypeEnum__benzeneTolueneXylene,	///< xs:string value="benzeneTolueneXylene"
	ns5__PollutantTypeEnum__carbonMonoxide,	///< xs:string value="carbonMonoxide"
	ns5__PollutantTypeEnum__lead,	///< xs:string value="lead"
	ns5__PollutantTypeEnum__methane,	///< xs:string value="methane"
	ns5__PollutantTypeEnum__nitricOxide,	///< xs:string value="nitricOxide"
	ns5__PollutantTypeEnum__nitrogenDioxide,	///< xs:string value="nitrogenDioxide"
	ns5__PollutantTypeEnum__nitrogenMonoxide,	///< xs:string value="nitrogenMonoxide"
	ns5__PollutantTypeEnum__nitrogenOxides,	///< xs:string value="nitrogenOxides"
	ns5__PollutantTypeEnum__nonMethaneHydrocarbons,	///< xs:string value="nonMethaneHydrocarbons"
	ns5__PollutantTypeEnum__ozone,	///< xs:string value="ozone"
	ns5__PollutantTypeEnum__particulates10,	///< xs:string value="particulates10"
	ns5__PollutantTypeEnum__polycyclicAromaticHydrocarbons,	///< xs:string value="polycyclicAromaticHydrocarbons"
	ns5__PollutantTypeEnum__primaryParticulate,	///< xs:string value="primaryParticulate"
	ns5__PollutantTypeEnum__sulphurDioxide,	///< xs:string value="sulphurDioxide"
	ns5__PollutantTypeEnum__totalHydrocarbons,	///< xs:string value="totalHydrocarbons"
};

/// @brief A class wrapper.
///
class ns5__PollutantTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__PollutantTypeEnum          __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PoorEnvironmentTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__PoorEnvironmentTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__PoorEnvironmentTypeEnum
{
	ns5__PoorEnvironmentTypeEnum__badWeather,	///< xs:string value="badWeather"
	ns5__PoorEnvironmentTypeEnum__blizzard,	///< xs:string value="blizzard"
	ns5__PoorEnvironmentTypeEnum__blowingDust,	///< xs:string value="blowingDust"
	ns5__PoorEnvironmentTypeEnum__blowingSnow,	///< xs:string value="blowingSnow"
	ns5__PoorEnvironmentTypeEnum__crosswinds,	///< xs:string value="crosswinds"
	ns5__PoorEnvironmentTypeEnum__damagingHail,	///< xs:string value="damagingHail"
	ns5__PoorEnvironmentTypeEnum__denseFog,	///< xs:string value="denseFog"
	ns5__PoorEnvironmentTypeEnum__eclipse,	///< xs:string value="eclipse"
	ns5__PoorEnvironmentTypeEnum__extremeCold,	///< xs:string value="extremeCold"
	ns5__PoorEnvironmentTypeEnum__extremeHeat,	///< xs:string value="extremeHeat"
	ns5__PoorEnvironmentTypeEnum__fog,	///< xs:string value="fog"
	ns5__PoorEnvironmentTypeEnum__freezingFog,	///< xs:string value="freezingFog"
	ns5__PoorEnvironmentTypeEnum__frost,	///< xs:string value="frost"
	ns5__PoorEnvironmentTypeEnum__gales,	///< xs:string value="gales"
	ns5__PoorEnvironmentTypeEnum__gustyWinds,	///< xs:string value="gustyWinds"
	ns5__PoorEnvironmentTypeEnum__hail,	///< xs:string value="hail"
	ns5__PoorEnvironmentTypeEnum__heavyFrost,	///< xs:string value="heavyFrost"
	ns5__PoorEnvironmentTypeEnum__heavyRain,	///< xs:string value="heavyRain"
	ns5__PoorEnvironmentTypeEnum__heavySnowfall,	///< xs:string value="heavySnowfall"
	ns5__PoorEnvironmentTypeEnum__hurricaneForceWinds,	///< xs:string value="hurricaneForceWinds"
	ns5__PoorEnvironmentTypeEnum__lowSunGlare,	///< xs:string value="lowSunGlare"
	ns5__PoorEnvironmentTypeEnum__moderateFog,	///< xs:string value="moderateFog"
	ns5__PoorEnvironmentTypeEnum__ozonePollution,	///< xs:string value="ozonePollution"
	ns5__PoorEnvironmentTypeEnum__pollution,	///< xs:string value="pollution"
	ns5__PoorEnvironmentTypeEnum__patchyFog,	///< xs:string value="patchyFog"
	ns5__PoorEnvironmentTypeEnum__precipitationInTheArea,	///< xs:string value="precipitationInTheArea"
	ns5__PoorEnvironmentTypeEnum__rain,	///< xs:string value="rain"
	ns5__PoorEnvironmentTypeEnum__rainChangingToSnow,	///< xs:string value="rainChangingToSnow"
	ns5__PoorEnvironmentTypeEnum__sandStorms,	///< xs:string value="sandStorms"
	ns5__PoorEnvironmentTypeEnum__severeExhaustPollution,	///< xs:string value="severeExhaustPollution"
	ns5__PoorEnvironmentTypeEnum__severeSmog,	///< xs:string value="severeSmog"
	ns5__PoorEnvironmentTypeEnum__showers,	///< xs:string value="showers"
	ns5__PoorEnvironmentTypeEnum__sleet,	///< xs:string value="sleet"
	ns5__PoorEnvironmentTypeEnum__smogAlert,	///< xs:string value="smogAlert"
	ns5__PoorEnvironmentTypeEnum__smokeHazard,	///< xs:string value="smokeHazard"
	ns5__PoorEnvironmentTypeEnum__snowChangingToRain,	///< xs:string value="snowChangingToRain"
	ns5__PoorEnvironmentTypeEnum__snowfall,	///< xs:string value="snowfall"
	ns5__PoorEnvironmentTypeEnum__sprayHazard,	///< xs:string value="sprayHazard"
	ns5__PoorEnvironmentTypeEnum__stormForceWinds,	///< xs:string value="stormForceWinds"
	ns5__PoorEnvironmentTypeEnum__strongGustsOfWind,	///< xs:string value="strongGustsOfWind"
	ns5__PoorEnvironmentTypeEnum__strongWinds,	///< xs:string value="strongWinds"
	ns5__PoorEnvironmentTypeEnum__swarmsOfInsects,	///< xs:string value="swarmsOfInsects"
	ns5__PoorEnvironmentTypeEnum__temperatureFalling,	///< xs:string value="temperatureFalling"
	ns5__PoorEnvironmentTypeEnum__thunderstorms,	///< xs:string value="thunderstorms"
	ns5__PoorEnvironmentTypeEnum__tornadoes,	///< xs:string value="tornadoes"
	ns5__PoorEnvironmentTypeEnum__veryStrongGustsOfWind,	///< xs:string value="veryStrongGustsOfWind"
	ns5__PoorEnvironmentTypeEnum__visibilityReduced,	///< xs:string value="visibilityReduced"
	ns5__PoorEnvironmentTypeEnum__whiteOut,	///< xs:string value="whiteOut"
	ns5__PoorEnvironmentTypeEnum__winterStorm,	///< xs:string value="winterStorm"
};

/// @brief A class wrapper.
///
class ns5__PoorEnvironmentTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__PoorEnvironmentTypeEnum    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PrecipitationTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__PrecipitationTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__PrecipitationTypeEnum
{
	ns5__PrecipitationTypeEnum__drizzle,	///< xs:string value="drizzle"
	ns5__PrecipitationTypeEnum__freezingRain,	///< xs:string value="freezingRain"
	ns5__PrecipitationTypeEnum__hail,	///< xs:string value="hail"
	ns5__PrecipitationTypeEnum__rain,	///< xs:string value="rain"
	ns5__PrecipitationTypeEnum__sleet,	///< xs:string value="sleet"
	ns5__PrecipitationTypeEnum__snow,	///< xs:string value="snow"
};

/// @brief A class wrapper.
///
class ns5__PrecipitationTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__PrecipitationTypeEnum      __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ProbabilityOfOccurrenceEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ProbabilityOfOccurrenceEnum
{
	ns5__ProbabilityOfOccurrenceEnum__certain,	///< xs:string value="certain"
	ns5__ProbabilityOfOccurrenceEnum__probable,	///< xs:string value="probable"
	ns5__ProbabilityOfOccurrenceEnum__riskOf,	///< xs:string value="riskOf"
};

/// @brief A class wrapper.
///
class ns5__ProbabilityOfOccurrenceEnum_ : public xsd__anyType
{ public:
    enum ns5__ProbabilityOfOccurrenceEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PublicEventTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__PublicEventTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__PublicEventTypeEnum
{
	ns5__PublicEventTypeEnum__agriculturalShow,	///< xs:string value="agriculturalShow"
	ns5__PublicEventTypeEnum__airShow,	///< xs:string value="airShow"
	ns5__PublicEventTypeEnum__athleticsMeeting,	///< xs:string value="athleticsMeeting"
	ns5__PublicEventTypeEnum__commercialEvent,	///< xs:string value="commercialEvent"
	ns5__PublicEventTypeEnum__culturalEvent,	///< xs:string value="culturalEvent"
	ns5__PublicEventTypeEnum__ballGame,	///< xs:string value="ballGame"
	ns5__PublicEventTypeEnum__baseballGame,	///< xs:string value="baseballGame"
	ns5__PublicEventTypeEnum__basketballGame,	///< xs:string value="basketballGame"
	ns5__PublicEventTypeEnum__bicycleRace,	///< xs:string value="bicycleRace"
	ns5__PublicEventTypeEnum__boatRace,	///< xs:string value="boatRace"
	ns5__PublicEventTypeEnum__boatShow,	///< xs:string value="boatShow"
	ns5__PublicEventTypeEnum__boxingTournament,	///< xs:string value="boxingTournament"
	ns5__PublicEventTypeEnum__bullFight,	///< xs:string value="bullFight"
	ns5__PublicEventTypeEnum__ceremonialEvent,	///< xs:string value="ceremonialEvent"
	ns5__PublicEventTypeEnum__concert,	///< xs:string value="concert"
	ns5__PublicEventTypeEnum__cricketMatch,	///< xs:string value="cricketMatch"
	ns5__PublicEventTypeEnum__exhibition,	///< xs:string value="exhibition"
	ns5__PublicEventTypeEnum__fair,	///< xs:string value="fair"
	ns5__PublicEventTypeEnum__festival,	///< xs:string value="festival"
	ns5__PublicEventTypeEnum__filmTVMaking,	///< xs:string value="filmTVMaking"
	ns5__PublicEventTypeEnum__footballMatch,	///< xs:string value="footballMatch"
	ns5__PublicEventTypeEnum__funfair,	///< xs:string value="funfair"
	ns5__PublicEventTypeEnum__gardeningOrFlowerShow,	///< xs:string value="gardeningOrFlowerShow"
	ns5__PublicEventTypeEnum__golfTournament,	///< xs:string value="golfTournament"
	ns5__PublicEventTypeEnum__hockeyGame,	///< xs:string value="hockeyGame"
	ns5__PublicEventTypeEnum__horseRaceMeeting,	///< xs:string value="horseRaceMeeting"
	ns5__PublicEventTypeEnum__internationalSportsMeeting,	///< xs:string value="internationalSportsMeeting"
	ns5__PublicEventTypeEnum__majorEvent,	///< xs:string value="majorEvent"
	ns5__PublicEventTypeEnum__marathon,	///< xs:string value="marathon"
	ns5__PublicEventTypeEnum__market,	///< xs:string value="market"
	ns5__PublicEventTypeEnum__match,	///< xs:string value="match"
	ns5__PublicEventTypeEnum__motorShow,	///< xs:string value="motorShow"
	ns5__PublicEventTypeEnum__motorSportRaceMeeting,	///< xs:string value="motorSportRaceMeeting"
	ns5__PublicEventTypeEnum__parade,	///< xs:string value="parade"
	ns5__PublicEventTypeEnum__procession,	///< xs:string value="procession"
	ns5__PublicEventTypeEnum__raceMeeting,	///< xs:string value="raceMeeting"
	ns5__PublicEventTypeEnum__rugbyMatch,	///< xs:string value="rugbyMatch"
	ns5__PublicEventTypeEnum__severalMajorEvents,	///< xs:string value="severalMajorEvents"
	ns5__PublicEventTypeEnum__show,	///< xs:string value="show"
	ns5__PublicEventTypeEnum__showJumping,	///< xs:string value="showJumping"
	ns5__PublicEventTypeEnum__sportsMeeting,	///< xs:string value="sportsMeeting"
	ns5__PublicEventTypeEnum__stateOccasion,	///< xs:string value="stateOccasion"
	ns5__PublicEventTypeEnum__tennisTournament,	///< xs:string value="tennisTournament"
	ns5__PublicEventTypeEnum__tournament,	///< xs:string value="tournament"
	ns5__PublicEventTypeEnum__tradeFair,	///< xs:string value="tradeFair"
	ns5__PublicEventTypeEnum__waterSportsMeeting,	///< xs:string value="waterSportsMeeting"
	ns5__PublicEventTypeEnum__winterSportsMeeting,	///< xs:string value="winterSportsMeeting"
	ns5__PublicEventTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__PublicEventTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__PublicEventTypeEnum        __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ReferencePointDirectionEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ReferencePointDirectionEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ReferencePointDirectionEnum
{
	ns5__ReferencePointDirectionEnum__both,	///< xs:string value="both"
	ns5__ReferencePointDirectionEnum__negative,	///< xs:string value="negative"
	ns5__ReferencePointDirectionEnum__positive,	///< xs:string value="positive"
	ns5__ReferencePointDirectionEnum__unknown,	///< xs:string value="unknown"
};

/// @brief A class wrapper.
///
class ns5__ReferencePointDirectionEnum_ : public xsd__anyType
{ public:
    enum ns5__ReferencePointDirectionEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RelativeTrafficFlowEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RelativeTrafficFlowEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RelativeTrafficFlowEnum
{
	ns5__RelativeTrafficFlowEnum__trafficVeryMuchHeavierThanNormal,	///< xs:string value="trafficVeryMuchHeavierThanNormal"
	ns5__RelativeTrafficFlowEnum__trafficHeavierThanNormal,	///< xs:string value="trafficHeavierThanNormal"
	ns5__RelativeTrafficFlowEnum__trafficFlowNormal,	///< xs:string value="trafficFlowNormal"
	ns5__RelativeTrafficFlowEnum__trafficLighterThanNormal,	///< xs:string value="trafficLighterThanNormal"
	ns5__RelativeTrafficFlowEnum__trafficVeryMuchLighterThanNormal,	///< xs:string value="trafficVeryMuchLighterThanNormal"
};

/// @brief A class wrapper.
///
class ns5__RelativeTrafficFlowEnum_ : public xsd__anyType
{ public:
    enum ns5__RelativeTrafficFlowEnum    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RequestTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RequestTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RequestTypeEnum
{
	ns5__RequestTypeEnum__catalogue,	///< xs:string value="catalogue"
	ns5__RequestTypeEnum__filter,	///< xs:string value="filter"
	ns5__RequestTypeEnum__requestData,	///< xs:string value="requestData"
	ns5__RequestTypeEnum__requestHistoricalData,	///< xs:string value="requestHistoricalData"
	ns5__RequestTypeEnum__subscription,	///< xs:string value="subscription"
};

/// @brief A class wrapper.
///
class ns5__RequestTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__RequestTypeEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ReroutingManagementTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ReroutingManagementTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ReroutingManagementTypeEnum
{
	ns5__ReroutingManagementTypeEnum__doNotFollowDiversionSigns,	///< xs:string value="doNotFollowDiversionSigns"
	ns5__ReroutingManagementTypeEnum__doNotUseEntry,	///< xs:string value="doNotUseEntry"
	ns5__ReroutingManagementTypeEnum__doNotUseExit,	///< xs:string value="doNotUseExit"
	ns5__ReroutingManagementTypeEnum__doNotUseIntersectionOrJunction,	///< xs:string value="doNotUseIntersectionOrJunction"
	ns5__ReroutingManagementTypeEnum__followDiversionSigns,	///< xs:string value="followDiversionSigns"
	ns5__ReroutingManagementTypeEnum__followLocalDiversion,	///< xs:string value="followLocalDiversion"
	ns5__ReroutingManagementTypeEnum__followSpecialMarkers,	///< xs:string value="followSpecialMarkers"
	ns5__ReroutingManagementTypeEnum__useEntry,	///< xs:string value="useEntry"
	ns5__ReroutingManagementTypeEnum__useExit,	///< xs:string value="useExit"
	ns5__ReroutingManagementTypeEnum__useIntersectionOrJunction,	///< xs:string value="useIntersectionOrJunction"
};

/// @brief A class wrapper.
///
class ns5__ReroutingManagementTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__ReroutingManagementTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ResponseEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ResponseEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ResponseEnum
{
	ns5__ResponseEnum__acknowledge,	///< xs:string value="acknowledge"
	ns5__ResponseEnum__catalogueRequestDenied,	///< xs:string value="catalogueRequestDenied"
	ns5__ResponseEnum__filterRequestDenied,	///< xs:string value="filterRequestDenied"
	ns5__ResponseEnum__requestDenied,	///< xs:string value="requestDenied"
	ns5__ResponseEnum__subscriptionRequestDenied,	///< xs:string value="subscriptionRequestDenied"
};

/// @brief A class wrapper.
///
class ns5__ResponseEnum_ : public xsd__anyType
{ public:
    enum ns5__ResponseEnum               __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadMaintenanceTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RoadMaintenanceTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RoadMaintenanceTypeEnum
{
	ns5__RoadMaintenanceTypeEnum__clearanceWork,	///< xs:string value="clearanceWork"
	ns5__RoadMaintenanceTypeEnum__controlledAvalanche,	///< xs:string value="controlledAvalanche"
	ns5__RoadMaintenanceTypeEnum__installationWork,	///< xs:string value="installationWork"
	ns5__RoadMaintenanceTypeEnum__grassCuttingWork,	///< xs:string value="grassCuttingWork"
	ns5__RoadMaintenanceTypeEnum__maintenanceWork,	///< xs:string value="maintenanceWork"
	ns5__RoadMaintenanceTypeEnum__overheadWorks,	///< xs:string value="overheadWorks"
	ns5__RoadMaintenanceTypeEnum__repairWork,	///< xs:string value="repairWork"
	ns5__RoadMaintenanceTypeEnum__resurfacingWork,	///< xs:string value="resurfacingWork"
	ns5__RoadMaintenanceTypeEnum__roadMarkingWork,	///< xs:string value="roadMarkingWork"
	ns5__RoadMaintenanceTypeEnum__roadsideWork,	///< xs:string value="roadsideWork"
	ns5__RoadMaintenanceTypeEnum__roadworksClearance,	///< xs:string value="roadworksClearance"
	ns5__RoadMaintenanceTypeEnum__roadworks,	///< xs:string value="roadworks"
	ns5__RoadMaintenanceTypeEnum__rockFallPreventativeMaintenance,	///< xs:string value="rockFallPreventativeMaintenance"
	ns5__RoadMaintenanceTypeEnum__saltingInProgress,	///< xs:string value="saltingInProgress"
	ns5__RoadMaintenanceTypeEnum__snowploughsInUse,	///< xs:string value="snowploughsInUse"
	ns5__RoadMaintenanceTypeEnum__treeAndVegetationCuttingWork,	///< xs:string value="treeAndVegetationCuttingWork"
	ns5__RoadMaintenanceTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__RoadMaintenanceTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__RoadMaintenanceTypeEnum    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadOperatorServiceDisruptionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RoadOperatorServiceDisruptionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RoadOperatorServiceDisruptionTypeEnum
{
	ns5__RoadOperatorServiceDisruptionTypeEnum__emergencyTelephoneNumberOutOfService,	///< xs:string value="emergencyTelephoneNumberOutOfService"
	ns5__RoadOperatorServiceDisruptionTypeEnum__informationServiceTelephoneNumberOutOfService,	///< xs:string value="informationServiceTelephoneNumberOutOfService"
	ns5__RoadOperatorServiceDisruptionTypeEnum__noTrafficOfficerPatrolService,	///< xs:string value="noTrafficOfficerPatrolService"
};

/// @brief A class wrapper.
///
class ns5__RoadOperatorServiceDisruptionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__RoadOperatorServiceDisruptionTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadOrCarriagewayOrLaneManagementTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RoadOrCarriagewayOrLaneManagementTypeEnum
{
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__carPoolLaneInOperation,	///< xs:string value="carPoolLaneInOperation"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__carriagewayClosures,	///< xs:string value="carriagewayClosures"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__clearALaneForEmergencyVehicles,	///< xs:string value="clearALaneForEmergencyVehicles"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__clearALaneForSnowploughsAndGrittingVehicles,	///< xs:string value="clearALaneForSnowploughsAndGrittingVehicles"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__closedPermanentlyForTheWinter,	///< xs:string value="closedPermanentlyForTheWinter"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__contraflow,	///< xs:string value="contraflow"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__doNotUseSpecifiedLanesOrCarriageways,	///< xs:string value="doNotUseSpecifiedLanesOrCarriageways"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__hardShoulderRunningInOperation,	///< xs:string value="hardShoulderRunningInOperation"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__intermittentShortTermClosures,	///< xs:string value="intermittentShortTermClosures"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__keepToTheLeft,	///< xs:string value="keepToTheLeft"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__keepToTheRight,	///< xs:string value="keepToTheRight"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__laneClosures,	///< xs:string value="laneClosures"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__lanesDeviated,	///< xs:string value="lanesDeviated"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__narrowLanes,	///< xs:string value="narrowLanes"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__newRoadworksLayout,	///< xs:string value="newRoadworksLayout"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__overnightClosures,	///< xs:string value="overnightClosures"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__roadCleared,	///< xs:string value="roadCleared"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__roadClosed,	///< xs:string value="roadClosed"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__rollingRoadBlock,	///< xs:string value="rollingRoadBlock"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__rushHourLaneInOperation,	///< xs:string value="rushHourLaneInOperation"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__singleAlternateLineTraffic,	///< xs:string value="singleAlternateLineTraffic"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__tidalFlowLaneInOperation,	///< xs:string value="tidalFlowLaneInOperation"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__turnAroundInOperation,	///< xs:string value="turnAroundInOperation"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__useOfSpecifiedLanesOrCarriagewaysAllowed,	///< xs:string value="useOfSpecifiedLanesOrCarriagewaysAllowed"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__useSpecifiedLanesOrCarriageways,	///< xs:string value="useSpecifiedLanesOrCarriageways"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__vehicleStorageInOperation,	///< xs:string value="vehicleStorageInOperation"
	ns5__RoadOrCarriagewayOrLaneManagementTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__RoadOrCarriagewayOrLaneManagementTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__RoadOrCarriagewayOrLaneManagementTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadsideAssistanceTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RoadsideAssistanceTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RoadsideAssistanceTypeEnum
{
	ns5__RoadsideAssistanceTypeEnum__airAmbulance,	///< xs:string value="airAmbulance"
	ns5__RoadsideAssistanceTypeEnum__busPassengerAssistance,	///< xs:string value="busPassengerAssistance"
	ns5__RoadsideAssistanceTypeEnum__emergencyServices,	///< xs:string value="emergencyServices"
	ns5__RoadsideAssistanceTypeEnum__firstAid,	///< xs:string value="firstAid"
	ns5__RoadsideAssistanceTypeEnum__foodDelivery,	///< xs:string value="foodDelivery"
	ns5__RoadsideAssistanceTypeEnum__helicopterRescue,	///< xs:string value="helicopterRescue"
	ns5__RoadsideAssistanceTypeEnum__vehicleRepair,	///< xs:string value="vehicleRepair"
	ns5__RoadsideAssistanceTypeEnum__vehicleRecovery,	///< xs:string value="vehicleRecovery"
	ns5__RoadsideAssistanceTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__RoadsideAssistanceTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__RoadsideAssistanceTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadsideServiceDisruptionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RoadsideServiceDisruptionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RoadsideServiceDisruptionTypeEnum
{
	ns5__RoadsideServiceDisruptionTypeEnum__barClosed,	///< xs:string value="barClosed"
	ns5__RoadsideServiceDisruptionTypeEnum__dieselShortage,	///< xs:string value="dieselShortage"
	ns5__RoadsideServiceDisruptionTypeEnum__fuelShortage,	///< xs:string value="fuelShortage"
	ns5__RoadsideServiceDisruptionTypeEnum__lpgShortage,	///< xs:string value="lpgShortage"
	ns5__RoadsideServiceDisruptionTypeEnum__methaneShortage,	///< xs:string value="methaneShortage"
	ns5__RoadsideServiceDisruptionTypeEnum__noDieselForHeavyVehicles,	///< xs:string value="noDieselForHeavyVehicles"
	ns5__RoadsideServiceDisruptionTypeEnum__noDieselForLightVehicles,	///< xs:string value="noDieselForLightVehicles"
	ns5__RoadsideServiceDisruptionTypeEnum__noPublicTelephones,	///< xs:string value="noPublicTelephones"
	ns5__RoadsideServiceDisruptionTypeEnum__noToiletFacilities,	///< xs:string value="noToiletFacilities"
	ns5__RoadsideServiceDisruptionTypeEnum__noVehicleRepairFacilities,	///< xs:string value="noVehicleRepairFacilities"
	ns5__RoadsideServiceDisruptionTypeEnum__petrolShortage,	///< xs:string value="petrolShortage"
	ns5__RoadsideServiceDisruptionTypeEnum__restAreaBusy,	///< xs:string value="restAreaBusy"
	ns5__RoadsideServiceDisruptionTypeEnum__restAreaClosed,	///< xs:string value="restAreaClosed"
	ns5__RoadsideServiceDisruptionTypeEnum__restAreaOvercrowdedDriveToAnotherRestArea,	///< xs:string value="restAreaOvercrowdedDriveToAnotherRestArea"
	ns5__RoadsideServiceDisruptionTypeEnum__serviceAreaBusy,	///< xs:string value="serviceAreaBusy"
	ns5__RoadsideServiceDisruptionTypeEnum__serviceAreaClosed,	///< xs:string value="serviceAreaClosed"
	ns5__RoadsideServiceDisruptionTypeEnum__serviceAreaFuelStationClosed,	///< xs:string value="serviceAreaFuelStationClosed"
	ns5__RoadsideServiceDisruptionTypeEnum__serviceAreaOvercrowdedDriveToAnotherServiceArea,	///< xs:string value="serviceAreaOvercrowdedDriveToAnotherServiceArea"
	ns5__RoadsideServiceDisruptionTypeEnum__serviceAreaRestaurantClosed,	///< xs:string value="serviceAreaRestaurantClosed"
	ns5__RoadsideServiceDisruptionTypeEnum__someCommercialServicesClosed,	///< xs:string value="someCommercialServicesClosed"
	ns5__RoadsideServiceDisruptionTypeEnum__waterShortage,	///< xs:string value="waterShortage"
};

/// @brief A class wrapper.
///
class ns5__RoadsideServiceDisruptionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__RoadsideServiceDisruptionTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadworksDurationEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RoadworksDurationEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RoadworksDurationEnum
{
	ns5__RoadworksDurationEnum__longTerm,	///< xs:string value="longTerm"
	ns5__RoadworksDurationEnum__mediumTerm,	///< xs:string value="mediumTerm"
	ns5__RoadworksDurationEnum__shortTerm,	///< xs:string value="shortTerm"
};

/// @brief A class wrapper.
///
class ns5__RoadworksDurationEnum_ : public xsd__anyType
{ public:
    enum ns5__RoadworksDurationEnum      __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadworksScaleEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__RoadworksScaleEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__RoadworksScaleEnum
{
	ns5__RoadworksScaleEnum__major,	///< xs:string value="major"
	ns5__RoadworksScaleEnum__medium,	///< xs:string value="medium"
	ns5__RoadworksScaleEnum__minor,	///< xs:string value="minor"
};

/// @brief A class wrapper.
///
class ns5__RoadworksScaleEnum_ : public xsd__anyType
{ public:
    enum ns5__RoadworksScaleEnum         __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SourceTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__SourceTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__SourceTypeEnum
{
	ns5__SourceTypeEnum__automobileClubPatrol,	///< xs:string value="automobileClubPatrol"
	ns5__SourceTypeEnum__cameraObservation,	///< xs:string value="cameraObservation"
	ns5__SourceTypeEnum__freightVehicleOperator,	///< xs:string value="freightVehicleOperator"
	ns5__SourceTypeEnum__inductionLoopMonitoringStation,	///< xs:string value="inductionLoopMonitoringStation"
	ns5__SourceTypeEnum__infraredMonitoringStation,	///< xs:string value="infraredMonitoringStation"
	ns5__SourceTypeEnum__microwaveMonitoringStation,	///< xs:string value="microwaveMonitoringStation"
	ns5__SourceTypeEnum__mobileTelephoneCaller,	///< xs:string value="mobileTelephoneCaller"
	ns5__SourceTypeEnum__nonPoliceEmergencyServicePatrol,	///< xs:string value="nonPoliceEmergencyServicePatrol"
	ns5__SourceTypeEnum__otherInformation,	///< xs:string value="otherInformation"
	ns5__SourceTypeEnum__otherOfficialVehicle,	///< xs:string value="otherOfficialVehicle"
	ns5__SourceTypeEnum__policePatrol,	///< xs:string value="policePatrol"
	ns5__SourceTypeEnum__privateBreakdownService,	///< xs:string value="privateBreakdownService"
	ns5__SourceTypeEnum__publicAndPrivateUtilities,	///< xs:string value="publicAndPrivateUtilities"
	ns5__SourceTypeEnum__registeredMotoristObserver,	///< xs:string value="registeredMotoristObserver"
	ns5__SourceTypeEnum__roadAuthorities,	///< xs:string value="roadAuthorities"
	ns5__SourceTypeEnum__roadOperatorPatrol,	///< xs:string value="roadOperatorPatrol"
	ns5__SourceTypeEnum__roadsideTelephoneCaller,	///< xs:string value="roadsideTelephoneCaller"
	ns5__SourceTypeEnum__spotterAircraft,	///< xs:string value="spotterAircraft"
	ns5__SourceTypeEnum__trafficMonitoringStation,	///< xs:string value="trafficMonitoringStation"
	ns5__SourceTypeEnum__transitOperator,	///< xs:string value="transitOperator"
	ns5__SourceTypeEnum__vehicleProbeMeasurement,	///< xs:string value="vehicleProbeMeasurement"
	ns5__SourceTypeEnum__videoProcessingMonitoringStation,	///< xs:string value="videoProcessingMonitoringStation"
};

/// @brief A class wrapper.
///
class ns5__SourceTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__SourceTypeEnum             __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SpeedManagementTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__SpeedManagementTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__SpeedManagementTypeEnum
{
	ns5__SpeedManagementTypeEnum__activeSpeedControlInOperation,	///< xs:string value="activeSpeedControlInOperation"
	ns5__SpeedManagementTypeEnum__doNotSlowdownUnnecessarily,	///< xs:string value="doNotSlowdownUnnecessarily"
	ns5__SpeedManagementTypeEnum__observeSpeedLimit,	///< xs:string value="observeSpeedLimit"
	ns5__SpeedManagementTypeEnum__policeSpeedChecksInOperation,	///< xs:string value="policeSpeedChecksInOperation"
	ns5__SpeedManagementTypeEnum__reduceYourSpeed,	///< xs:string value="reduceYourSpeed"
	ns5__SpeedManagementTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__SpeedManagementTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__SpeedManagementTypeEnum    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":String is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 1024.
typedef std::wstring ns5__String : 1024;

/// @brief A class wrapper.
///
class ns5__String__ : public xsd__anyType
{ public:
    ns5__String                          __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SubjectTypeOfWorksEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__SubjectTypeOfWorksEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__SubjectTypeOfWorksEnum
{
	ns5__SubjectTypeOfWorksEnum__bridge,	///< xs:string value="bridge"
	ns5__SubjectTypeOfWorksEnum__buriedCables,	///< xs:string value="buriedCables"
	ns5__SubjectTypeOfWorksEnum__buriedServices,	///< xs:string value="buriedServices"
	ns5__SubjectTypeOfWorksEnum__crashBarrier,	///< xs:string value="crashBarrier"
	ns5__SubjectTypeOfWorksEnum__gallery,	///< xs:string value="gallery"
	ns5__SubjectTypeOfWorksEnum__gantry,	///< xs:string value="gantry"
	ns5__SubjectTypeOfWorksEnum__gasMainWork,	///< xs:string value="gasMainWork"
	ns5__SubjectTypeOfWorksEnum__interchange,	///< xs:string value="interchange"
	ns5__SubjectTypeOfWorksEnum__junction,	///< xs:string value="junction"
	ns5__SubjectTypeOfWorksEnum__levelCrossing,	///< xs:string value="levelCrossing"
	ns5__SubjectTypeOfWorksEnum__lightingSystem,	///< xs:string value="lightingSystem"
	ns5__SubjectTypeOfWorksEnum__measurementEquipment,	///< xs:string value="measurementEquipment"
	ns5__SubjectTypeOfWorksEnum__noiseProtection,	///< xs:string value="noiseProtection"
	ns5__SubjectTypeOfWorksEnum__road,	///< xs:string value="road"
	ns5__SubjectTypeOfWorksEnum__roadsideDrains,	///< xs:string value="roadsideDrains"
	ns5__SubjectTypeOfWorksEnum__roadsideEmbankment,	///< xs:string value="roadsideEmbankment"
	ns5__SubjectTypeOfWorksEnum__roadsideEquipment,	///< xs:string value="roadsideEquipment"
	ns5__SubjectTypeOfWorksEnum__roadSigns,	///< xs:string value="roadSigns"
	ns5__SubjectTypeOfWorksEnum__roundabout,	///< xs:string value="roundabout"
	ns5__SubjectTypeOfWorksEnum__tollGate,	///< xs:string value="tollGate"
	ns5__SubjectTypeOfWorksEnum__tunnel,	///< xs:string value="tunnel"
	ns5__SubjectTypeOfWorksEnum__waterMain,	///< xs:string value="waterMain"
	ns5__SubjectTypeOfWorksEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__SubjectTypeOfWorksEnum_ : public xsd__anyType
{ public:
    enum ns5__SubjectTypeOfWorksEnum     __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SubscriptionStateEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__SubscriptionStateEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__SubscriptionStateEnum
{
	ns5__SubscriptionStateEnum__active,	///< xs:string value="active"
	ns5__SubscriptionStateEnum__suspended,	///< xs:string value="suspended"
};

/// @brief A class wrapper.
///
class ns5__SubscriptionStateEnum_ : public xsd__anyType
{ public:
    enum ns5__SubscriptionStateEnum      __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Time is a simpleType restriction of XSD type xs:time.
///
typedef xsd__time ns5__Time;

/// @brief A class wrapper.
///
class ns5__Time__ : public xsd__anyType
{ public:
    ns5__Time                            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01AreaLocationSubtypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc01AreaLocationSubtypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc01AreaLocationSubtypeEnum
{
	ns5__TpegLoc01AreaLocationSubtypeEnum__largeArea,	///< xs:string value="largeArea"
	ns5__TpegLoc01AreaLocationSubtypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc01AreaLocationSubtypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc01AreaLocationSubtypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01FramedPointLocationSubtypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc01FramedPointLocationSubtypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc01FramedPointLocationSubtypeEnum
{
	ns5__TpegLoc01FramedPointLocationSubtypeEnum__framedPoint,	///< xs:string value="framedPoint"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc01FramedPointLocationSubtypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc01FramedPointLocationSubtypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01LinearLocationSubtypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc01LinearLocationSubtypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc01LinearLocationSubtypeEnum
{
	ns5__TpegLoc01LinearLocationSubtypeEnum__segment,	///< xs:string value="segment"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc01LinearLocationSubtypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc01LinearLocationSubtypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01SimplePointLocationSubtypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc01SimplePointLocationSubtypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc01SimplePointLocationSubtypeEnum
{
	ns5__TpegLoc01SimplePointLocationSubtypeEnum__intersection,	///< xs:string value="intersection"
	ns5__TpegLoc01SimplePointLocationSubtypeEnum__nonLinkedPoint,	///< xs:string value="nonLinkedPoint"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc01SimplePointLocationSubtypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc01SimplePointLocationSubtypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc02DirectionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc02DirectionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc02DirectionTypeEnum
{
	ns5__TpegLoc02DirectionTypeEnum__allDirections,	///< xs:string value="allDirections"
	ns5__TpegLoc02DirectionTypeEnum__anticlockwise,	///< xs:string value="anticlockwise"
	ns5__TpegLoc02DirectionTypeEnum__bothWays,	///< xs:string value="bothWays"
	ns5__TpegLoc02DirectionTypeEnum__clockwise,	///< xs:string value="clockwise"
	ns5__TpegLoc02DirectionTypeEnum__eastBound,	///< xs:string value="eastBound"
	ns5__TpegLoc02DirectionTypeEnum__innerRing,	///< xs:string value="innerRing"
	ns5__TpegLoc02DirectionTypeEnum__northBound,	///< xs:string value="northBound"
	ns5__TpegLoc02DirectionTypeEnum__northEastBound,	///< xs:string value="northEastBound"
	ns5__TpegLoc02DirectionTypeEnum__northWestBound,	///< xs:string value="northWestBound"
	ns5__TpegLoc02DirectionTypeEnum__opposite,	///< xs:string value="opposite"
	ns5__TpegLoc02DirectionTypeEnum__outerRing,	///< xs:string value="outerRing"
	ns5__TpegLoc02DirectionTypeEnum__southBound,	///< xs:string value="southBound"
	ns5__TpegLoc02DirectionTypeEnum__southEastBound,	///< xs:string value="southEastBound"
	ns5__TpegLoc02DirectionTypeEnum__southWestBound,	///< xs:string value="southWestBound"
	ns5__TpegLoc02DirectionTypeEnum__westBound,	///< xs:string value="westBound"
	ns5__TpegLoc02DirectionTypeEnum__unknown,	///< xs:string value="unknown"
	ns5__TpegLoc02DirectionTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc02DirectionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc02DirectionTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc03AreaDescriptorSubtypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc03AreaDescriptorSubtypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc03AreaDescriptorSubtypeEnum
{
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__administrativeAreaName,	///< xs:string value="administrativeAreaName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__administrativeReferenceName,	///< xs:string value="administrativeReferenceName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__areaName,	///< xs:string value="areaName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__countyName,	///< xs:string value="countyName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__lakeName,	///< xs:string value="lakeName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__nationName,	///< xs:string value="nationName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__policeForceControlAreaName,	///< xs:string value="policeForceControlAreaName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__regionName,	///< xs:string value="regionName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__seaName,	///< xs:string value="seaName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__townName,	///< xs:string value="townName"
	ns5__TpegLoc03AreaDescriptorSubtypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc03AreaDescriptorSubtypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc03AreaDescriptorSubtypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc03IlcPointDescriptorSubtypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc03IlcPointDescriptorSubtypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc03IlcPointDescriptorSubtypeEnum
{
	ns5__TpegLoc03IlcPointDescriptorSubtypeEnum__tpegIlcName1,	///< xs:string value="tpegIlcName1"
	ns5__TpegLoc03IlcPointDescriptorSubtypeEnum__tpegIlcName2,	///< xs:string value="tpegIlcName2"
	ns5__TpegLoc03IlcPointDescriptorSubtypeEnum__tpegIlcName3,	///< xs:string value="tpegIlcName3"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc03IlcPointDescriptorSubtypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc03IlcPointDescriptorSubtypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc03JunctionPointDescriptorSubtypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc03JunctionPointDescriptorSubtypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc03JunctionPointDescriptorSubtypeEnum
{
	ns5__TpegLoc03JunctionPointDescriptorSubtypeEnum__junctionName,	///< xs:string value="junctionName"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc03JunctionPointDescriptorSubtypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc03JunctionPointDescriptorSubtypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc03OtherPointDescriptorSubtypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc03OtherPointDescriptorSubtypeEnum
{
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__administrativeAreaName,	///< xs:string value="administrativeAreaName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__administrativeReferenceName,	///< xs:string value="administrativeReferenceName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__airportName,	///< xs:string value="airportName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__areaName,	///< xs:string value="areaName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__buildingName,	///< xs:string value="buildingName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__busStopIdentifier,	///< xs:string value="busStopIdentifier"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__busStopName,	///< xs:string value="busStopName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__canalName,	///< xs:string value="canalName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__countyName,	///< xs:string value="countyName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__ferryPortName,	///< xs:string value="ferryPortName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__intersectionName,	///< xs:string value="intersectionName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__lakeName,	///< xs:string value="lakeName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__linkName,	///< xs:string value="linkName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__localLinkName,	///< xs:string value="localLinkName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__metroStationName,	///< xs:string value="metroStationName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__nationName,	///< xs:string value="nationName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__nonLinkedPointName,	///< xs:string value="nonLinkedPointName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__parkingFacilityName,	///< xs:string value="parkingFacilityName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__pointName,	///< xs:string value="pointName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__pointOfInterestName,	///< xs:string value="pointOfInterestName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__railwayStation,	///< xs:string value="railwayStation"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__regionName,	///< xs:string value="regionName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__riverName,	///< xs:string value="riverName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__seaName,	///< xs:string value="seaName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__serviceAreaName,	///< xs:string value="serviceAreaName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__tidalRiverName,	///< xs:string value="tidalRiverName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__townName,	///< xs:string value="townName"
	ns5__TpegLoc03OtherPointDescriptorSubtypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc03OtherPointDescriptorSubtypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc03OtherPointDescriptorSubtypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc04HeightTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TpegLoc04HeightTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TpegLoc04HeightTypeEnum
{
	ns5__TpegLoc04HeightTypeEnum__above,	///< xs:string value="above"
	ns5__TpegLoc04HeightTypeEnum__aboveSeaLevel,	///< xs:string value="aboveSeaLevel"
	ns5__TpegLoc04HeightTypeEnum__aboveStreetLevel,	///< xs:string value="aboveStreetLevel"
	ns5__TpegLoc04HeightTypeEnum__at,	///< xs:string value="at"
	ns5__TpegLoc04HeightTypeEnum__atSeaLevel,	///< xs:string value="atSeaLevel"
	ns5__TpegLoc04HeightTypeEnum__atStreetLevel,	///< xs:string value="atStreetLevel"
	ns5__TpegLoc04HeightTypeEnum__below,	///< xs:string value="below"
	ns5__TpegLoc04HeightTypeEnum__belowSeaLevel,	///< xs:string value="belowSeaLevel"
	ns5__TpegLoc04HeightTypeEnum__belowStreetLevel,	///< xs:string value="belowStreetLevel"
	ns5__TpegLoc04HeightTypeEnum__undefined,	///< xs:string value="undefined"
	ns5__TpegLoc04HeightTypeEnum__unknown,	///< xs:string value="unknown"
	ns5__TpegLoc04HeightTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__TpegLoc04HeightTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TpegLoc04HeightTypeEnum    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficConstrictionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TrafficConstrictionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TrafficConstrictionTypeEnum
{
	ns5__TrafficConstrictionTypeEnum__carriagewayBlocked,	///< xs:string value="carriagewayBlocked"
	ns5__TrafficConstrictionTypeEnum__carriagewayPartiallyObstructed,	///< xs:string value="carriagewayPartiallyObstructed"
	ns5__TrafficConstrictionTypeEnum__lanesBlocked,	///< xs:string value="lanesBlocked"
	ns5__TrafficConstrictionTypeEnum__lanesPartiallyObstructed,	///< xs:string value="lanesPartiallyObstructed"
	ns5__TrafficConstrictionTypeEnum__roadBlocked,	///< xs:string value="roadBlocked"
	ns5__TrafficConstrictionTypeEnum__roadPartiallyObstructed,	///< xs:string value="roadPartiallyObstructed"
};

/// @brief A class wrapper.
///
class ns5__TrafficConstrictionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TrafficConstrictionTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficFlowCharacteristicsEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TrafficFlowCharacteristicsEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TrafficFlowCharacteristicsEnum
{
	ns5__TrafficFlowCharacteristicsEnum__erraticFlow,	///< xs:string value="erraticFlow"
	ns5__TrafficFlowCharacteristicsEnum__smoothFlow,	///< xs:string value="smoothFlow"
	ns5__TrafficFlowCharacteristicsEnum__stopAndGo,	///< xs:string value="stopAndGo"
	ns5__TrafficFlowCharacteristicsEnum__trafficBlocked,	///< xs:string value="trafficBlocked"
};

/// @brief A class wrapper.
///
class ns5__TrafficFlowCharacteristicsEnum_ : public xsd__anyType
{ public:
    enum ns5__TrafficFlowCharacteristicsEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficStatusEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TrafficStatusEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TrafficStatusEnum
{
	ns5__TrafficStatusEnum__impossible,	///< xs:string value="impossible"
	ns5__TrafficStatusEnum__congested,	///< xs:string value="congested"
	ns5__TrafficStatusEnum__heavy,	///< xs:string value="heavy"
	ns5__TrafficStatusEnum__freeFlow,	///< xs:string value="freeFlow"
	ns5__TrafficStatusEnum__unknown,	///< xs:string value="unknown"
};

/// @brief A class wrapper.
///
class ns5__TrafficStatusEnum_ : public xsd__anyType
{ public:
    enum ns5__TrafficStatusEnum          __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficTrendTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TrafficTrendTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TrafficTrendTypeEnum
{
	ns5__TrafficTrendTypeEnum__trafficBuildingUp,	///< xs:string value="trafficBuildingUp"
	ns5__TrafficTrendTypeEnum__trafficEasing,	///< xs:string value="trafficEasing"
	ns5__TrafficTrendTypeEnum__trafficStable,	///< xs:string value="trafficStable"
	ns5__TrafficTrendTypeEnum__unknown,	///< xs:string value="unknown"
};

/// @brief A class wrapper.
///
class ns5__TrafficTrendTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TrafficTrendTypeEnum       __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TrafficTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TrafficTypeEnum
{
	ns5__TrafficTypeEnum__accessOnlyTraffic,	///< xs:string value="accessOnlyTraffic"
	ns5__TrafficTypeEnum__destinedForAirport,	///< xs:string value="destinedForAirport"
	ns5__TrafficTypeEnum__destinedForAirportArrivals,	///< xs:string value="destinedForAirportArrivals"
	ns5__TrafficTypeEnum__destinedForAirportDepartures,	///< xs:string value="destinedForAirportDepartures"
	ns5__TrafficTypeEnum__destinedForFerryService,	///< xs:string value="destinedForFerryService"
	ns5__TrafficTypeEnum__destinedForRailService,	///< xs:string value="destinedForRailService"
	ns5__TrafficTypeEnum__holidayTraffic,	///< xs:string value="holidayTraffic"
	ns5__TrafficTypeEnum__localTraffic,	///< xs:string value="localTraffic"
	ns5__TrafficTypeEnum__longDistanceTraffic,	///< xs:string value="longDistanceTraffic"
	ns5__TrafficTypeEnum__regionalTraffic,	///< xs:string value="regionalTraffic"
	ns5__TrafficTypeEnum__residentsOnlyTraffic,	///< xs:string value="residentsOnlyTraffic"
	ns5__TrafficTypeEnum__throughTraffic,	///< xs:string value="throughTraffic"
	ns5__TrafficTypeEnum__visitorTraffic,	///< xs:string value="visitorTraffic"
};

/// @brief A class wrapper.
///
class ns5__TrafficTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TrafficTypeEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TransitServiceInformationEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TransitServiceInformationEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TransitServiceInformationEnum
{
	ns5__TransitServiceInformationEnum__cancellations,	///< xs:string value="cancellations"
	ns5__TransitServiceInformationEnum__delayDueToBadWeather,	///< xs:string value="delayDueToBadWeather"
	ns5__TransitServiceInformationEnum__delayDueToRepairs,	///< xs:string value="delayDueToRepairs"
	ns5__TransitServiceInformationEnum__delayedUntilFurtherNotice,	///< xs:string value="delayedUntilFurtherNotice"
	ns5__TransitServiceInformationEnum__delaysDueToFlotsam,	///< xs:string value="delaysDueToFlotsam"
	ns5__TransitServiceInformationEnum__departureOnSchedule,	///< xs:string value="departureOnSchedule"
	ns5__TransitServiceInformationEnum__ferryReplacedByIceRoad,	///< xs:string value="ferryReplacedByIceRoad"
	ns5__TransitServiceInformationEnum__freeShuttleServiceOperating,	///< xs:string value="freeShuttleServiceOperating"
	ns5__TransitServiceInformationEnum__informationServiceNotAvailable,	///< xs:string value="informationServiceNotAvailable"
	ns5__TransitServiceInformationEnum__irregularServiceDelays,	///< xs:string value="irregularServiceDelays"
	ns5__TransitServiceInformationEnum__loadCapacityChanged,	///< xs:string value="loadCapacityChanged"
	ns5__TransitServiceInformationEnum__restrictionsForLongerVehicles,	///< xs:string value="restrictionsForLongerVehicles"
	ns5__TransitServiceInformationEnum__serviceDelays,	///< xs:string value="serviceDelays"
	ns5__TransitServiceInformationEnum__serviceDelaysOfUncertainDuration,	///< xs:string value="serviceDelaysOfUncertainDuration"
	ns5__TransitServiceInformationEnum__serviceFullyBooked,	///< xs:string value="serviceFullyBooked"
	ns5__TransitServiceInformationEnum__serviceNotOperating,	///< xs:string value="serviceNotOperating"
	ns5__TransitServiceInformationEnum__serviceNotOperatingSubstituteServiceAvailable,	///< xs:string value="serviceNotOperatingSubstituteServiceAvailable"
	ns5__TransitServiceInformationEnum__serviceSuspended,	///< xs:string value="serviceSuspended"
	ns5__TransitServiceInformationEnum__serviceWithdrawn,	///< xs:string value="serviceWithdrawn"
	ns5__TransitServiceInformationEnum__shuttleServiceOperating,	///< xs:string value="shuttleServiceOperating"
	ns5__TransitServiceInformationEnum__temporaryChangesToTimetables,	///< xs:string value="temporaryChangesToTimetables"
	ns5__TransitServiceInformationEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__TransitServiceInformationEnum_ : public xsd__anyType
{ public:
    enum ns5__TransitServiceInformationEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TransitServiceTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TransitServiceTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TransitServiceTypeEnum
{
	ns5__TransitServiceTypeEnum__air,	///< xs:string value="air"
	ns5__TransitServiceTypeEnum__bus,	///< xs:string value="bus"
	ns5__TransitServiceTypeEnum__ferry,	///< xs:string value="ferry"
	ns5__TransitServiceTypeEnum__hydrofoil,	///< xs:string value="hydrofoil"
	ns5__TransitServiceTypeEnum__rail,	///< xs:string value="rail"
	ns5__TransitServiceTypeEnum__tram,	///< xs:string value="tram"
	ns5__TransitServiceTypeEnum__undergroundMetro,	///< xs:string value="undergroundMetro"
};

/// @brief A class wrapper.
///
class ns5__TransitServiceTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TransitServiceTypeEnum     __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TravelTimeTrendTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TravelTimeTrendTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TravelTimeTrendTypeEnum
{
	ns5__TravelTimeTrendTypeEnum__decreasing,	///< xs:string value="decreasing"
	ns5__TravelTimeTrendTypeEnum__increasing,	///< xs:string value="increasing"
	ns5__TravelTimeTrendTypeEnum__stable,	///< xs:string value="stable"
};

/// @brief A class wrapper.
///
class ns5__TravelTimeTrendTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TravelTimeTrendTypeEnum    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TravelTimeTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__TravelTimeTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__TravelTimeTypeEnum
{
	ns5__TravelTimeTypeEnum__best,	///< xs:string value="best"
	ns5__TravelTimeTypeEnum__estimated,	///< xs:string value="estimated"
	ns5__TravelTimeTypeEnum__instantaneous,	///< xs:string value="instantaneous"
	ns5__TravelTimeTypeEnum__reconstituted,	///< xs:string value="reconstituted"
};

/// @brief A class wrapper.
///
class ns5__TravelTimeTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__TravelTimeTypeEnum         __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":UpdateMethodEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__UpdateMethodEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__UpdateMethodEnum
{
	ns5__UpdateMethodEnum__allElementUpdate,	///< xs:string value="allElementUpdate"
	ns5__UpdateMethodEnum__singleElementUpdate,	///< xs:string value="singleElementUpdate"
	ns5__UpdateMethodEnum__snapshot,	///< xs:string value="snapshot"
};

/// @brief A class wrapper.
///
class ns5__UpdateMethodEnum_ : public xsd__anyType
{ public:
    enum ns5__UpdateMethodEnum           __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":UrgencyEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__UrgencyEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__UrgencyEnum
{
	ns5__UrgencyEnum__extremelyUrgent,	///< xs:string value="extremelyUrgent"
	ns5__UrgencyEnum__urgent,	///< xs:string value="urgent"
	ns5__UrgencyEnum__normalUrgency,	///< xs:string value="normalUrgency"
};

/// @brief A class wrapper.
///
class ns5__UrgencyEnum_ : public xsd__anyType
{ public:
    enum ns5__UrgencyEnum                __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Url is a simpleType restriction of XSD type xs:anyURI.
///
typedef xsd__anyURI ns5__Url;

/// @brief A class wrapper.
///
class ns5__Url__ : public xsd__anyType
{ public:
    ns5__Url                             __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":UrlLinkTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__UrlLinkTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__UrlLinkTypeEnum
{
	ns5__UrlLinkTypeEnum__documentPdf,	///< xs:string value="documentPdf"
	ns5__UrlLinkTypeEnum__html,	///< xs:string value="html"
	ns5__UrlLinkTypeEnum__image,	///< xs:string value="image"
	ns5__UrlLinkTypeEnum__rss,	///< xs:string value="rss"
	ns5__UrlLinkTypeEnum__videoStream,	///< xs:string value="videoStream"
	ns5__UrlLinkTypeEnum__voiceStream,	///< xs:string value="voiceStream"
	ns5__UrlLinkTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__UrlLinkTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__UrlLinkTypeEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ValidityStatusEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__ValidityStatusEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__ValidityStatusEnum
{
	ns5__ValidityStatusEnum__active,	///< xs:string value="active"
	ns5__ValidityStatusEnum__suspended,	///< xs:string value="suspended"
	ns5__ValidityStatusEnum__definedByValidityTimeSpec,	///< xs:string value="definedByValidityTimeSpec"
};

/// @brief A class wrapper.
///
class ns5__ValidityStatusEnum_ : public xsd__anyType
{ public:
    enum ns5__ValidityStatusEnum         __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleEquipmentEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__VehicleEquipmentEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__VehicleEquipmentEnum
{
	ns5__VehicleEquipmentEnum__notUsingSnowChains,	///< xs:string value="notUsingSnowChains"
	ns5__VehicleEquipmentEnum__notUsingSnowChainsOrTyres,	///< xs:string value="notUsingSnowChainsOrTyres"
	ns5__VehicleEquipmentEnum__snowChainsInUse,	///< xs:string value="snowChainsInUse"
	ns5__VehicleEquipmentEnum__snowTyresInUse,	///< xs:string value="snowTyresInUse"
	ns5__VehicleEquipmentEnum__snowChainsOrTyresInUse,	///< xs:string value="snowChainsOrTyresInUse"
	ns5__VehicleEquipmentEnum__withoutSnowTyresOrChainsOnBoard,	///< xs:string value="withoutSnowTyresOrChainsOnBoard"
};

/// @brief A class wrapper.
///
class ns5__VehicleEquipmentEnum_ : public xsd__anyType
{ public:
    enum ns5__VehicleEquipmentEnum       __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleObstructionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__VehicleObstructionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__VehicleObstructionTypeEnum
{
	ns5__VehicleObstructionTypeEnum__abandonedVehicle,	///< xs:string value="abandonedVehicle"
	ns5__VehicleObstructionTypeEnum__abnormalLoad,	///< xs:string value="abnormalLoad"
	ns5__VehicleObstructionTypeEnum__brokenDownBus,	///< xs:string value="brokenDownBus"
	ns5__VehicleObstructionTypeEnum__brokenDownHeavyLorry,	///< xs:string value="brokenDownHeavyLorry"
	ns5__VehicleObstructionTypeEnum__brokenDownVehicle,	///< xs:string value="brokenDownVehicle"
	ns5__VehicleObstructionTypeEnum__convoy,	///< xs:string value="convoy"
	ns5__VehicleObstructionTypeEnum__damagedVehicle,	///< xs:string value="damagedVehicle"
	ns5__VehicleObstructionTypeEnum__dangerousSlowMovingVehicle,	///< xs:string value="dangerousSlowMovingVehicle"
	ns5__VehicleObstructionTypeEnum__emergencyVehicle,	///< xs:string value="emergencyVehicle"
	ns5__VehicleObstructionTypeEnum__highSpeedEmergencyVehicle,	///< xs:string value="highSpeedEmergencyVehicle"
	ns5__VehicleObstructionTypeEnum__longLoad,	///< xs:string value="longLoad"
	ns5__VehicleObstructionTypeEnum__militaryConvoy,	///< xs:string value="militaryConvoy"
	ns5__VehicleObstructionTypeEnum__overheightVehicle,	///< xs:string value="overheightVehicle"
	ns5__VehicleObstructionTypeEnum__prohibitedVehicleOnTheRoadway,	///< xs:string value="prohibitedVehicleOnTheRoadway"
	ns5__VehicleObstructionTypeEnum__saltingOrGrittingVehicleInUse,	///< xs:string value="saltingOrGrittingVehicleInUse"
	ns5__VehicleObstructionTypeEnum__slowMovingMaintenanceVehicle,	///< xs:string value="slowMovingMaintenanceVehicle"
	ns5__VehicleObstructionTypeEnum__slowVehicle,	///< xs:string value="slowVehicle"
	ns5__VehicleObstructionTypeEnum__snowplough,	///< xs:string value="snowplough"
	ns5__VehicleObstructionTypeEnum__trackLayingVehicle,	///< xs:string value="trackLayingVehicle"
	ns5__VehicleObstructionTypeEnum__unlitVehicleOnTheRoad,	///< xs:string value="unlitVehicleOnTheRoad"
	ns5__VehicleObstructionTypeEnum__vehicleOnFire,	///< xs:string value="vehicleOnFire"
	ns5__VehicleObstructionTypeEnum__vehicleCarryingHazardousMaterials,	///< xs:string value="vehicleCarryingHazardousMaterials"
	ns5__VehicleObstructionTypeEnum__vehicleInDifficulty,	///< xs:string value="vehicleInDifficulty"
	ns5__VehicleObstructionTypeEnum__vehicleOnWrongCarriageway,	///< xs:string value="vehicleOnWrongCarriageway"
	ns5__VehicleObstructionTypeEnum__vehicleStuck,	///< xs:string value="vehicleStuck"
	ns5__VehicleObstructionTypeEnum__vehicleStuckUnderBridge,	///< xs:string value="vehicleStuckUnderBridge"
	ns5__VehicleObstructionTypeEnum__vehicleWithOverheightLoad,	///< xs:string value="vehicleWithOverheightLoad"
	ns5__VehicleObstructionTypeEnum__vehicleWithOverwideLoad,	///< xs:string value="vehicleWithOverwideLoad"
	ns5__VehicleObstructionTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__VehicleObstructionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__VehicleObstructionTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleStatusEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__VehicleStatusEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__VehicleStatusEnum
{
	ns5__VehicleStatusEnum__abandoned,	///< xs:string value="abandoned"
	ns5__VehicleStatusEnum__brokenDown,	///< xs:string value="brokenDown"
	ns5__VehicleStatusEnum__burntOut,	///< xs:string value="burntOut"
	ns5__VehicleStatusEnum__damaged,	///< xs:string value="damaged"
	ns5__VehicleStatusEnum__damagedAndImmobilized,	///< xs:string value="damagedAndImmobilized"
	ns5__VehicleStatusEnum__onFire,	///< xs:string value="onFire"
};

/// @brief A class wrapper.
///
class ns5__VehicleStatusEnum_ : public xsd__anyType
{ public:
    enum ns5__VehicleStatusEnum          __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__VehicleTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__VehicleTypeEnum
{
	ns5__VehicleTypeEnum__anyVehicle,	///< xs:string value="anyVehicle"
	ns5__VehicleTypeEnum__articulatedVehicle,	///< xs:string value="articulatedVehicle"
	ns5__VehicleTypeEnum__bicycle,	///< xs:string value="bicycle"
	ns5__VehicleTypeEnum__bus,	///< xs:string value="bus"
	ns5__VehicleTypeEnum__car,	///< xs:string value="car"
	ns5__VehicleTypeEnum__caravan,	///< xs:string value="caravan"
	ns5__VehicleTypeEnum__carOrLightVehicle,	///< xs:string value="carOrLightVehicle"
	ns5__VehicleTypeEnum__carWithCaravan,	///< xs:string value="carWithCaravan"
	ns5__VehicleTypeEnum__carWithTrailer,	///< xs:string value="carWithTrailer"
	ns5__VehicleTypeEnum__fourWheelDrive,	///< xs:string value="fourWheelDrive"
	ns5__VehicleTypeEnum__highSidedVehicle,	///< xs:string value="highSidedVehicle"
	ns5__VehicleTypeEnum__lorry,	///< xs:string value="lorry"
	ns5__VehicleTypeEnum__moped,	///< xs:string value="moped"
	ns5__VehicleTypeEnum__motorcycle,	///< xs:string value="motorcycle"
	ns5__VehicleTypeEnum__motorcycleWithSideCar,	///< xs:string value="motorcycleWithSideCar"
	ns5__VehicleTypeEnum__motorscooter,	///< xs:string value="motorscooter"
	ns5__VehicleTypeEnum__tanker,	///< xs:string value="tanker"
	ns5__VehicleTypeEnum__threeWheeledVehicle,	///< xs:string value="threeWheeledVehicle"
	ns5__VehicleTypeEnum__trailer,	///< xs:string value="trailer"
	ns5__VehicleTypeEnum__tram,	///< xs:string value="tram"
	ns5__VehicleTypeEnum__twoWheeledVehicle,	///< xs:string value="twoWheeledVehicle"
	ns5__VehicleTypeEnum__van,	///< xs:string value="van"
	ns5__VehicleTypeEnum__vehicleWithCatalyticConverter,	///< xs:string value="vehicleWithCatalyticConverter"
	ns5__VehicleTypeEnum__vehicleWithoutCatalyticConverter,	///< xs:string value="vehicleWithoutCatalyticConverter"
	ns5__VehicleTypeEnum__vehicleWithCaravan,	///< xs:string value="vehicleWithCaravan"
	ns5__VehicleTypeEnum__vehicleWithTrailer,	///< xs:string value="vehicleWithTrailer"
	ns5__VehicleTypeEnum__withEvenNumberedRegistrationPlates,	///< xs:string value="withEvenNumberedRegistrationPlates"
	ns5__VehicleTypeEnum__withOddNumberedRegistrationPlates,	///< xs:string value="withOddNumberedRegistrationPlates"
	ns5__VehicleTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__VehicleTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__VehicleTypeEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleUsageEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__VehicleUsageEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__VehicleUsageEnum
{
	ns5__VehicleUsageEnum__agricultural,	///< xs:string value="agricultural"
	ns5__VehicleUsageEnum__commercial,	///< xs:string value="commercial"
	ns5__VehicleUsageEnum__emergencyServices,	///< xs:string value="emergencyServices"
	ns5__VehicleUsageEnum__military,	///< xs:string value="military"
	ns5__VehicleUsageEnum__nonCommercial,	///< xs:string value="nonCommercial"
	ns5__VehicleUsageEnum__patrol,	///< xs:string value="patrol"
	ns5__VehicleUsageEnum__recoveryServices,	///< xs:string value="recoveryServices"
	ns5__VehicleUsageEnum__roadMaintenanceOrConstruction,	///< xs:string value="roadMaintenanceOrConstruction"
	ns5__VehicleUsageEnum__roadOperator,	///< xs:string value="roadOperator"
	ns5__VehicleUsageEnum__taxi,	///< xs:string value="taxi"
};

/// @brief A class wrapper.
///
class ns5__VehicleUsageEnum_ : public xsd__anyType
{ public:
    enum ns5__VehicleUsageEnum           __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VmsFaultEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__VmsFaultEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__VmsFaultEnum
{
	ns5__VmsFaultEnum__communicationsFailure,	///< xs:string value="communicationsFailure"
	ns5__VmsFaultEnum__incorrectMessageDisplayed,	///< xs:string value="incorrectMessageDisplayed"
	ns5__VmsFaultEnum__incorrectPictogramDisplayed,	///< xs:string value="incorrectPictogramDisplayed"
	ns5__VmsFaultEnum__outOfService,	///< xs:string value="outOfService"
	ns5__VmsFaultEnum__powerFailure,	///< xs:string value="powerFailure"
	ns5__VmsFaultEnum__unableToClearDown,	///< xs:string value="unableToClearDown"
	ns5__VmsFaultEnum__unknown,	///< xs:string value="unknown"
	ns5__VmsFaultEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__VmsFaultEnum_ : public xsd__anyType
{ public:
    enum ns5__VmsFaultEnum               __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VmsTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__VmsTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__VmsTypeEnum
{
	ns5__VmsTypeEnum__colourGraphic,	///< xs:string value="colourGraphic"
	ns5__VmsTypeEnum__continuousSign,	///< xs:string value="continuousSign"
	ns5__VmsTypeEnum__monochromeGraphic,	///< xs:string value="monochromeGraphic"
	ns5__VmsTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__VmsTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__VmsTypeEnum                __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":WeatherRelatedRoadConditionTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__WeatherRelatedRoadConditionTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__WeatherRelatedRoadConditionTypeEnum
{
	ns5__WeatherRelatedRoadConditionTypeEnum__blackIce,	///< xs:string value="blackIce"
	ns5__WeatherRelatedRoadConditionTypeEnum__deepSnow,	///< xs:string value="deepSnow"
	ns5__WeatherRelatedRoadConditionTypeEnum__dry,	///< xs:string value="dry"
	ns5__WeatherRelatedRoadConditionTypeEnum__freezingOfWetRoads,	///< xs:string value="freezingOfWetRoads"
	ns5__WeatherRelatedRoadConditionTypeEnum__freezingPavements,	///< xs:string value="freezingPavements"
	ns5__WeatherRelatedRoadConditionTypeEnum__freezingRain,	///< xs:string value="freezingRain"
	ns5__WeatherRelatedRoadConditionTypeEnum__freshSnow,	///< xs:string value="freshSnow"
	ns5__WeatherRelatedRoadConditionTypeEnum__ice,	///< xs:string value="ice"
	ns5__WeatherRelatedRoadConditionTypeEnum__iceBuildUp,	///< xs:string value="iceBuildUp"
	ns5__WeatherRelatedRoadConditionTypeEnum__iceWithWheelBarTracks,	///< xs:string value="iceWithWheelBarTracks"
	ns5__WeatherRelatedRoadConditionTypeEnum__icyPatches,	///< xs:string value="icyPatches"
	ns5__WeatherRelatedRoadConditionTypeEnum__looseSnow,	///< xs:string value="looseSnow"
	ns5__WeatherRelatedRoadConditionTypeEnum__normalWinterConditionsForPedestrians,	///< xs:string value="normalWinterConditionsForPedestrians"
	ns5__WeatherRelatedRoadConditionTypeEnum__packedSnow,	///< xs:string value="packedSnow"
	ns5__WeatherRelatedRoadConditionTypeEnum__roadSurfaceMelting,	///< xs:string value="roadSurfaceMelting"
	ns5__WeatherRelatedRoadConditionTypeEnum__slipperyRoad,	///< xs:string value="slipperyRoad"
	ns5__WeatherRelatedRoadConditionTypeEnum__slushOnRoad,	///< xs:string value="slushOnRoad"
	ns5__WeatherRelatedRoadConditionTypeEnum__slushStrings,	///< xs:string value="slushStrings"
	ns5__WeatherRelatedRoadConditionTypeEnum__snowDrifts,	///< xs:string value="snowDrifts"
	ns5__WeatherRelatedRoadConditionTypeEnum__snowOnPavement,	///< xs:string value="snowOnPavement"
	ns5__WeatherRelatedRoadConditionTypeEnum__snowOnTheRoad,	///< xs:string value="snowOnTheRoad"
	ns5__WeatherRelatedRoadConditionTypeEnum__surfaceWater,	///< xs:string value="surfaceWater"
	ns5__WeatherRelatedRoadConditionTypeEnum__wet,	///< xs:string value="wet"
	ns5__WeatherRelatedRoadConditionTypeEnum__wetAndIcyRoad,	///< xs:string value="wetAndIcyRoad"
	ns5__WeatherRelatedRoadConditionTypeEnum__wetIcyPavement,	///< xs:string value="wetIcyPavement"
	ns5__WeatherRelatedRoadConditionTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__WeatherRelatedRoadConditionTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__WeatherRelatedRoadConditionTypeEnum  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":WeekOfMonthEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__WeekOfMonthEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__WeekOfMonthEnum
{
	ns5__WeekOfMonthEnum__firstWeekOfMonth,	///< xs:string value="firstWeekOfMonth"
	ns5__WeekOfMonthEnum__secondWeekOfMonth,	///< xs:string value="secondWeekOfMonth"
	ns5__WeekOfMonthEnum__thirdWeekOfMonth,	///< xs:string value="thirdWeekOfMonth"
	ns5__WeekOfMonthEnum__fourthWeekOfMonth,	///< xs:string value="fourthWeekOfMonth"
	ns5__WeekOfMonthEnum__fifthWeekOfMonth,	///< xs:string value="fifthWeekOfMonth"
};

/// @brief A class wrapper.
///
class ns5__WeekOfMonthEnum_ : public xsd__anyType
{ public:
    enum ns5__WeekOfMonthEnum            __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":WinterEquipmentManagementTypeEnum is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns5__WinterEquipmentManagementTypeEnum__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns5__WinterEquipmentManagementTypeEnum
{
	ns5__WinterEquipmentManagementTypeEnum__doNoUseStudTyres,	///< xs:string value="doNoUseStudTyres"
	ns5__WinterEquipmentManagementTypeEnum__useSnowChains,	///< xs:string value="useSnowChains"
	ns5__WinterEquipmentManagementTypeEnum__useSnowChainsOrTyres,	///< xs:string value="useSnowChainsOrTyres"
	ns5__WinterEquipmentManagementTypeEnum__useSnowTyres,	///< xs:string value="useSnowTyres"
	ns5__WinterEquipmentManagementTypeEnum__winterEquipmentOnBoardRequired,	///< xs:string value="winterEquipmentOnBoardRequired"
	ns5__WinterEquipmentManagementTypeEnum__other,	///< xs:string value="other"
};

/// @brief A class wrapper.
///
class ns5__WinterEquipmentManagementTypeEnum_ : public xsd__anyType
{ public:
    enum ns5__WinterEquipmentManagementTypeEnum  __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PopulatedPlaceNameType is a simpleType restriction of XSD type "http://www.siri.org.uk/siri":PopulatedStringType.
///
/// <PRE><BLOCKQUOTE>
///   A name that requires at least one character of text and forbids certain reserved characters.
/// </BLOCKQUOTE></PRE>
/// Content pattern is "[^,\\[\\]\\{\\}\\?$%\\^=@#;:]+".
typedef ns2__PopulatedStringType ns2__PopulatedPlaceNameType "[^,\\[\\]\\{\\}\\?$%\\^=@#;:]+";

/// @brief A class wrapper.
///
class ns2__PopulatedPlaceNameType__ : public xsd__anyType
{ public:
    ns2__PopulatedPlaceNameType          __item;                       
};

/// @brief "http://www.siri.org.uk/siri":PositiveDurationType is a simpleType restriction of XSD type "http://www.siri.org.uk/siri":DurationType.
///
/// <PRE><BLOCKQUOTE>
///   Limited version of duration. Must be positive.
/// </BLOCKQUOTE></PRE>
typedef ns2__DurationType ns2__PositiveDurationType;

/// @brief A class wrapper.
///
class ns2__PositiveDurationType__ : public xsd__anyType
{ public:
    ns2__PositiveDurationType            __item;                       
};

/// @brief "http://www.siri.org.uk/siri":DaysOfWeekEnumerationx is a simpleType restriction of XSD type "http://www.siri.org.uk/siri":DayTypeEnumeration.
///
/// <PRE><BLOCKQUOTE>
///   Values for Day Type TPEG pti_table 34
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__DaysOfWeekEnumerationx__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__DaysOfWeekEnumerationx
{
	ns2__DaysOfWeekEnumerationx__unknown,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="unknown"
	ns2__DaysOfWeekEnumerationx__monday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="monday"
	ns2__DaysOfWeekEnumerationx__tuesday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="tuesday"
	ns2__DaysOfWeekEnumerationx__wednesday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="wednesday"
	ns2__DaysOfWeekEnumerationx__thursday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="thursday"
	ns2__DaysOfWeekEnumerationx__friday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="friday"
	ns2__DaysOfWeekEnumerationx__saturday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="saturday"
	ns2__DaysOfWeekEnumerationx__sunday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="sunday"
	ns2__DaysOfWeekEnumerationx__mondayToFriday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="mondayToFriday"
	ns2__DaysOfWeekEnumerationx__mondayToSaturday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="mondayToSaturday"
	ns2__DaysOfWeekEnumerationx__weekdays,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="weekdays"
	ns2__DaysOfWeekEnumerationx__weekends,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="weekends"
};

/// @brief A class wrapper.
///
class ns2__DaysOfWeekEnumerationx_ : public xsd__anyType
{ public:
    enum ns2__DaysOfWeekEnumerationx     __item;                       
};

/// @brief "http://www.siri.org.uk/siri":HolidayTypeEnumerationx is a simpleType restriction of XSD type "http://www.siri.org.uk/siri":DayTypeEnumeration.
///
/// <PRE><BLOCKQUOTE>
///   Values for Day Type TPEG pti_table 34
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns2__HolidayTypeEnumerationx__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns2__HolidayTypeEnumerationx
{
	ns2__HolidayTypeEnumerationx__holiday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="holiday"
	ns2__HolidayTypeEnumerationx__publicHoliday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="publicHoliday"
	ns2__HolidayTypeEnumerationx__religiousHoliday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="religiousHoliday"
	ns2__HolidayTypeEnumerationx__federalHoliday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="federalHoliday"
	ns2__HolidayTypeEnumerationx__regionalHoliday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="regionalHoliday"
	ns2__HolidayTypeEnumerationx__nationalHoliday,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="nationalHoliday"
	ns2__HolidayTypeEnumerationx__sundaysAndPublicHolidays,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="sundaysAndPublicHolidays"
	ns2__HolidayTypeEnumerationx__schoolDays,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="schoolDays"
	ns2__HolidayTypeEnumerationx__everyDay,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="everyDay"
	ns2__HolidayTypeEnumerationx__undefinedDayType,	///< "http://www.siri.org.uk/siri":DayTypeEnumeration value="undefinedDayType"
};

/// @brief A class wrapper.
///
class ns2__HolidayTypeEnumerationx_ : public xsd__anyType
{ public:
    enum ns2__HolidayTypeEnumerationx    __item;                       
};

/// <PRE><BLOCKQUOTE>
///   Classification of verification status TPEG Pti13 Service Condition values.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":VerificationStatus is a simpleType restriction of XSD type "http://www.siri.org.uk/siri":VerificationStatusEnumeration.
///
typedef enum ns2__VerificationStatusEnumeration _ns2__VerificationStatus;

/// <PRE><BLOCKQUOTE>
///   Classification of Predictability status.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":Predictability is a simpleType restriction of XSD type "http://www.siri.org.uk/siri":VerificationStatusEnumeration.
///
typedef enum ns2__VerificationStatusEnumeration _ns2__Predictability;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.ifopt.org.uk/ifopt":CountryCodeType is a simpleType restriction of XSD type "http://www.ifopt.org.uk/ifopt":IanaCountryTldEnumeration.
///
/// <PRE><BLOCKQUOTE>
///   Type for Country identifier.
/// </BLOCKQUOTE></PRE>
typedef enum ns4__IanaCountryTldEnumeration ns4__CountryCodeType;

/// @brief A class wrapper.
///
class ns4__CountryCodeType__ : public xsd__anyType
{ public:
    ns4__CountryCodeType                 __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocationCode is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
///
typedef ns5__NonNegativeInteger ns5__AlertCLocationCode;

/// @brief A class wrapper.
///
class ns5__AlertCLocationCode__ : public xsd__anyType
{ public:
    ns5__AlertCLocationCode              __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AngleInDegrees is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
///
typedef ns5__NonNegativeInteger ns5__AngleInDegrees;

/// @brief A class wrapper.
///
class ns5__AngleInDegrees__ : public xsd__anyType
{ public:
    ns5__AngleInDegrees                  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AxlesPerHour is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
///
typedef ns5__NonNegativeInteger ns5__AxlesPerHour;

/// @brief A class wrapper.
///
class ns5__AxlesPerHour__ : public xsd__anyType
{ public:
    ns5__AxlesPerHour                    __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ConcentrationGramsPerCubicCentimetre is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__ConcentrationGramsPerCubicCentimetre;

/// @brief A class wrapper.
///
class ns5__ConcentrationGramsPerCubicCentimetre__ : public xsd__anyType
{ public:
    ns5__ConcentrationGramsPerCubicCentimetre  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ConcentrationMicrogramsPerCubicMetre is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__ConcentrationMicrogramsPerCubicMetre;

/// @brief A class wrapper.
///
class ns5__ConcentrationMicrogramsPerCubicMetre__ : public xsd__anyType
{ public:
    ns5__ConcentrationMicrogramsPerCubicMetre  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ConcentrationVehiclesPerKilometre is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
///
typedef ns5__NonNegativeInteger ns5__ConcentrationVehiclesPerKilometre;

/// @brief A class wrapper.
///
class ns5__ConcentrationVehiclesPerKilometre__ : public xsd__anyType
{ public:
    ns5__ConcentrationVehiclesPerKilometre  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":CubicMetres is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__CubicMetres;

/// @brief A class wrapper.
///
class ns5__CubicMetres__ : public xsd__anyType
{ public:
    ns5__CubicMetres                     __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":IntensityKilogrammesPerSquareMetre is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__IntensityKilogrammesPerSquareMetre;

/// @brief A class wrapper.
///
class ns5__IntensityKilogrammesPerSquareMetre__ : public xsd__anyType
{ public:
    ns5__IntensityKilogrammesPerSquareMetre  __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":IntensityMillimetresPerHour is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__IntensityMillimetresPerHour;

/// @brief A class wrapper.
///
class ns5__IntensityMillimetresPerHour__ : public xsd__anyType
{ public:
    ns5__IntensityMillimetresPerHour     __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":KilometresPerHour is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__KilometresPerHour;

/// @brief A class wrapper.
///
class ns5__KilometresPerHour__ : public xsd__anyType
{ public:
    ns5__KilometresPerHour               __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__MetresAsFloat;

/// @brief A class wrapper.
///
class ns5__MetresAsFloat__ : public xsd__anyType
{ public:
    ns5__MetresAsFloat                   __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MetresAsNonNegativeInteger is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
///
typedef ns5__NonNegativeInteger ns5__MetresAsNonNegativeInteger;

/// @brief A class wrapper.
///
class ns5__MetresAsNonNegativeInteger__ : public xsd__anyType
{ public:
    ns5__MetresAsNonNegativeInteger      __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PassengerCarUnitsPerHour is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
///
typedef ns5__NonNegativeInteger ns5__PassengerCarUnitsPerHour;

/// @brief A class wrapper.
///
class ns5__PassengerCarUnitsPerHour__ : public xsd__anyType
{ public:
    ns5__PassengerCarUnitsPerHour        __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Percentage is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__Percentage;

/// @brief A class wrapper.
///
class ns5__Percentage__ : public xsd__anyType
{ public:
    ns5__Percentage                      __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Reference is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
///
typedef ns5__String ns5__Reference;

/// @brief A class wrapper.
///
class ns5__Reference__ : public xsd__anyType
{ public:
    ns5__Reference                       __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Seconds is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__Seconds;

/// @brief A class wrapper.
///
class ns5__Seconds__ : public xsd__anyType
{ public:
    ns5__Seconds                         __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TemperatureCelsius is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__TemperatureCelsius;

/// @brief A class wrapper.
///
class ns5__TemperatureCelsius__ : public xsd__anyType
{ public:
    ns5__TemperatureCelsius              __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Tonnes is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
///
typedef ns5__Float ns5__Tonnes;

/// @brief A class wrapper.
///
class ns5__Tonnes__ : public xsd__anyType
{ public:
    ns5__Tonnes                          __item;                       
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehiclesPerHour is a simpleType restriction of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
///
typedef ns5__NonNegativeInteger ns5__VehiclesPerHour;

/// @brief A class wrapper.
///
class ns5__VehiclesPerHour__ : public xsd__anyType
{ public:
    ns5__VehiclesPerHour                 __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.siri.org.uk/siri                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://wsdl.siri.org.uk/siri                                             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://wsdl.siri.org.uk/siri":WsSubscriptionRequestStructure is a complexType.
///
/// class ns1__WsSubscriptionRequestStructure operations:
/// - ns1__WsSubscriptionRequestStructure* soap_new_ns1__WsSubscriptionRequestStructure(soap*) allocate and default initialize
/// - ns1__WsSubscriptionRequestStructure* soap_new_ns1__WsSubscriptionRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsSubscriptionRequestStructure* soap_new_req_ns1__WsSubscriptionRequestStructure(soap*, ...) allocate, set required members
/// - ns1__WsSubscriptionRequestStructure* soap_new_set_ns1__WsSubscriptionRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__WsSubscriptionRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsSubscriptionRequestStructure(soap*, ns1__WsSubscriptionRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__WsSubscriptionRequestStructure(soap*, ns1__WsSubscriptionRequestStructure*) serialize to a stream
/// - ns1__WsSubscriptionRequestStructure* ns1__WsSubscriptionRequestStructure::soap_dup(soap*) returns deep copy of ns1__WsSubscriptionRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsSubscriptionRequestStructure::soap_del() deep deletes ns1__WsSubscriptionRequestStructure data members, use only after ns1__WsSubscriptionRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsSubscriptionRequestStructure : public xsd__anyType
{ public:
/// Element "SubscriptionRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsSubscriptionRequestInfoStructure.
    ns1__WsSubscriptionRequestInfoStructure*  SubscriptionRequestInfo        1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":SiriSubscriptionRequestStructure.
    ns2__SiriSubscriptionRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsSubscriptionAnswerStructure is a complexType.
///
/// class ns1__WsSubscriptionAnswerStructure operations:
/// - ns1__WsSubscriptionAnswerStructure* soap_new_ns1__WsSubscriptionAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsSubscriptionAnswerStructure* soap_new_ns1__WsSubscriptionAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsSubscriptionAnswerStructure* soap_new_req_ns1__WsSubscriptionAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsSubscriptionAnswerStructure* soap_new_set_ns1__WsSubscriptionAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsSubscriptionAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsSubscriptionAnswerStructure(soap*, ns1__WsSubscriptionAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsSubscriptionAnswerStructure(soap*, ns1__WsSubscriptionAnswerStructure*) serialize to a stream
/// - ns1__WsSubscriptionAnswerStructure* ns1__WsSubscriptionAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsSubscriptionAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsSubscriptionAnswerStructure::soap_del() deep deletes ns1__WsSubscriptionAnswerStructure data members, use only after ns1__WsSubscriptionAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsSubscriptionAnswerStructure : public xsd__anyType
{ public:
/// Element "SubscriptionAnswerInfo" of XSD type "http://www.siri.org.uk/siri":ResponseEndpointStructure.
    ns2__ResponseEndpointStructure*      SubscriptionAnswerInfo         1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":SubscriptionResponseBodyStructure.
    ns2__SubscriptionResponseBodyStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsDeleteSubscriptionRequestStructure is a complexType.
///
/// class ns1__WsDeleteSubscriptionRequestStructure operations:
/// - ns1__WsDeleteSubscriptionRequestStructure* soap_new_ns1__WsDeleteSubscriptionRequestStructure(soap*) allocate and default initialize
/// - ns1__WsDeleteSubscriptionRequestStructure* soap_new_ns1__WsDeleteSubscriptionRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsDeleteSubscriptionRequestStructure* soap_new_req_ns1__WsDeleteSubscriptionRequestStructure(soap*, ...) allocate, set required members
/// - ns1__WsDeleteSubscriptionRequestStructure* soap_new_set_ns1__WsDeleteSubscriptionRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__WsDeleteSubscriptionRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsDeleteSubscriptionRequestStructure(soap*, ns1__WsDeleteSubscriptionRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__WsDeleteSubscriptionRequestStructure(soap*, ns1__WsDeleteSubscriptionRequestStructure*) serialize to a stream
/// - ns1__WsDeleteSubscriptionRequestStructure* ns1__WsDeleteSubscriptionRequestStructure::soap_dup(soap*) returns deep copy of ns1__WsDeleteSubscriptionRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsDeleteSubscriptionRequestStructure::soap_del() deep deletes ns1__WsDeleteSubscriptionRequestStructure data members, use only after ns1__WsDeleteSubscriptionRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsDeleteSubscriptionRequestStructure : public xsd__anyType
{ public:
/// Element "DeleteSubscriptionInfo" of XSD type "http://www.siri.org.uk/siri":RequestStructure.
    ns2__RequestStructure*               DeleteSubscriptionInfo         1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":TerminateSubscriptionRequestBodyStructure.
    ns2__TerminateSubscriptionRequestBodyStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsDeleteSubscriptionAnswerStructure is a complexType.
///
/// class ns1__WsDeleteSubscriptionAnswerStructure operations:
/// - ns1__WsDeleteSubscriptionAnswerStructure* soap_new_ns1__WsDeleteSubscriptionAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsDeleteSubscriptionAnswerStructure* soap_new_ns1__WsDeleteSubscriptionAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsDeleteSubscriptionAnswerStructure* soap_new_req_ns1__WsDeleteSubscriptionAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsDeleteSubscriptionAnswerStructure* soap_new_set_ns1__WsDeleteSubscriptionAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsDeleteSubscriptionAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsDeleteSubscriptionAnswerStructure(soap*, ns1__WsDeleteSubscriptionAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsDeleteSubscriptionAnswerStructure(soap*, ns1__WsDeleteSubscriptionAnswerStructure*) serialize to a stream
/// - ns1__WsDeleteSubscriptionAnswerStructure* ns1__WsDeleteSubscriptionAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsDeleteSubscriptionAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsDeleteSubscriptionAnswerStructure::soap_del() deep deletes ns1__WsDeleteSubscriptionAnswerStructure data members, use only after ns1__WsDeleteSubscriptionAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsDeleteSubscriptionAnswerStructure : public xsd__anyType
{ public:
/// Element "DeleteSubscriptionAnswerInfo" of XSD type "http://www.siri.org.uk/siri":ResponseEndpointStructure.
    ns2__ResponseEndpointStructure*      DeleteSubscriptionAnswerInfo   1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":TerminateSubscriptionResponseStructure.
    ns2__TerminateSubscriptionResponseStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsCheckStatusStructure is a complexType.
///
/// class ns1__WsCheckStatusStructure operations:
/// - ns1__WsCheckStatusStructure* soap_new_ns1__WsCheckStatusStructure(soap*) allocate and default initialize
/// - ns1__WsCheckStatusStructure* soap_new_ns1__WsCheckStatusStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsCheckStatusStructure* soap_new_req_ns1__WsCheckStatusStructure(soap*, ...) allocate, set required members
/// - ns1__WsCheckStatusStructure* soap_new_set_ns1__WsCheckStatusStructure(soap*, ...) allocate, set all public members
/// - ns1__WsCheckStatusStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsCheckStatusStructure(soap*, ns1__WsCheckStatusStructure*) deserialize from a stream
/// - int soap_write_ns1__WsCheckStatusStructure(soap*, ns1__WsCheckStatusStructure*) serialize to a stream
/// - ns1__WsCheckStatusStructure* ns1__WsCheckStatusStructure::soap_dup(soap*) returns deep copy of ns1__WsCheckStatusStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsCheckStatusStructure::soap_del() deep deletes ns1__WsCheckStatusStructure data members, use only after ns1__WsCheckStatusStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsCheckStatusStructure : public xsd__anyType
{ public:
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":RequestStructure.
    ns2__RequestStructure*               Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsCheckStatusResponseStructure is a complexType.
///
/// class ns1__WsCheckStatusResponseStructure operations:
/// - ns1__WsCheckStatusResponseStructure* soap_new_ns1__WsCheckStatusResponseStructure(soap*) allocate and default initialize
/// - ns1__WsCheckStatusResponseStructure* soap_new_ns1__WsCheckStatusResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsCheckStatusResponseStructure* soap_new_req_ns1__WsCheckStatusResponseStructure(soap*, ...) allocate, set required members
/// - ns1__WsCheckStatusResponseStructure* soap_new_set_ns1__WsCheckStatusResponseStructure(soap*, ...) allocate, set all public members
/// - ns1__WsCheckStatusResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsCheckStatusResponseStructure(soap*, ns1__WsCheckStatusResponseStructure*) deserialize from a stream
/// - int soap_write_ns1__WsCheckStatusResponseStructure(soap*, ns1__WsCheckStatusResponseStructure*) serialize to a stream
/// - ns1__WsCheckStatusResponseStructure* ns1__WsCheckStatusResponseStructure::soap_dup(soap*) returns deep copy of ns1__WsCheckStatusResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsCheckStatusResponseStructure::soap_del() deep deletes ns1__WsCheckStatusResponseStructure data members, use only after ns1__WsCheckStatusResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsCheckStatusResponseStructure : public xsd__anyType
{ public:
/// Element "CheckStatusAnswerInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  CheckStatusAnswerInfo          1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":CheckStatusResponseBodyStructure.
    ns2__CheckStatusResponseBodyStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsDataSupplyRequestStructure is a complexType.
///
/// class ns1__WsDataSupplyRequestStructure operations:
/// - ns1__WsDataSupplyRequestStructure* soap_new_ns1__WsDataSupplyRequestStructure(soap*) allocate and default initialize
/// - ns1__WsDataSupplyRequestStructure* soap_new_ns1__WsDataSupplyRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsDataSupplyRequestStructure* soap_new_req_ns1__WsDataSupplyRequestStructure(soap*, ...) allocate, set required members
/// - ns1__WsDataSupplyRequestStructure* soap_new_set_ns1__WsDataSupplyRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__WsDataSupplyRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsDataSupplyRequestStructure(soap*, ns1__WsDataSupplyRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__WsDataSupplyRequestStructure(soap*, ns1__WsDataSupplyRequestStructure*) serialize to a stream
/// - ns1__WsDataSupplyRequestStructure* ns1__WsDataSupplyRequestStructure::soap_dup(soap*) returns deep copy of ns1__WsDataSupplyRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsDataSupplyRequestStructure::soap_del() deep deletes ns1__WsDataSupplyRequestStructure data members, use only after ns1__WsDataSupplyRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsDataSupplyRequestStructure : public xsd__anyType
{ public:
/// Element "DataSupplyRequestInfo" of XSD type "http://www.siri.org.uk/siri":ConsumerRequestEndpointStructure.
    ns2__ConsumerRequestEndpointStructure*  DataSupplyRequestInfo          1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":DataSupplyRequestBodyStructure.
    ns2__DataSupplyRequestBodyStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsDataSupplyAnswerStructure is a complexType.
///
/// class ns1__WsDataSupplyAnswerStructure operations:
/// - ns1__WsDataSupplyAnswerStructure* soap_new_ns1__WsDataSupplyAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsDataSupplyAnswerStructure* soap_new_ns1__WsDataSupplyAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsDataSupplyAnswerStructure* soap_new_req_ns1__WsDataSupplyAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsDataSupplyAnswerStructure* soap_new_set_ns1__WsDataSupplyAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsDataSupplyAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsDataSupplyAnswerStructure(soap*, ns1__WsDataSupplyAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsDataSupplyAnswerStructure(soap*, ns1__WsDataSupplyAnswerStructure*) serialize to a stream
/// - ns1__WsDataSupplyAnswerStructure* ns1__WsDataSupplyAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsDataSupplyAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsDataSupplyAnswerStructure::soap_del() deep deletes ns1__WsDataSupplyAnswerStructure data members, use only after ns1__WsDataSupplyAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsDataSupplyAnswerStructure : public xsd__anyType
{ public:
/// Element "DataSupplyAnswerInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  DataSupplyAnswerInfo           1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryBodyStructure.
    ns2__ServiceDeliveryBodyStructure*   Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsGetCapabilitiesRequestStructure is a complexType.
///
/// class ns1__WsGetCapabilitiesRequestStructure operations:
/// - ns1__WsGetCapabilitiesRequestStructure* soap_new_ns1__WsGetCapabilitiesRequestStructure(soap*) allocate and default initialize
/// - ns1__WsGetCapabilitiesRequestStructure* soap_new_ns1__WsGetCapabilitiesRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsGetCapabilitiesRequestStructure* soap_new_req_ns1__WsGetCapabilitiesRequestStructure(soap*, ...) allocate, set required members
/// - ns1__WsGetCapabilitiesRequestStructure* soap_new_set_ns1__WsGetCapabilitiesRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__WsGetCapabilitiesRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsGetCapabilitiesRequestStructure(soap*, ns1__WsGetCapabilitiesRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__WsGetCapabilitiesRequestStructure(soap*, ns1__WsGetCapabilitiesRequestStructure*) serialize to a stream
/// - ns1__WsGetCapabilitiesRequestStructure* ns1__WsGetCapabilitiesRequestStructure::soap_dup(soap*) returns deep copy of ns1__WsGetCapabilitiesRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsGetCapabilitiesRequestStructure::soap_del() deep deletes ns1__WsGetCapabilitiesRequestStructure data members, use only after ns1__WsGetCapabilitiesRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsGetCapabilitiesRequestStructure : public xsd__anyType
{ public:
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":CapabilitiesRequestStructure.
    ns2__CapabilitiesRequestStructure*   Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsGetCapabilitiesAnswerStructure is a complexType.
///
/// class ns1__WsGetCapabilitiesAnswerStructure operations:
/// - ns1__WsGetCapabilitiesAnswerStructure* soap_new_ns1__WsGetCapabilitiesAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsGetCapabilitiesAnswerStructure* soap_new_ns1__WsGetCapabilitiesAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsGetCapabilitiesAnswerStructure* soap_new_req_ns1__WsGetCapabilitiesAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsGetCapabilitiesAnswerStructure* soap_new_set_ns1__WsGetCapabilitiesAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsGetCapabilitiesAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsGetCapabilitiesAnswerStructure(soap*, ns1__WsGetCapabilitiesAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsGetCapabilitiesAnswerStructure(soap*, ns1__WsGetCapabilitiesAnswerStructure*) serialize to a stream
/// - ns1__WsGetCapabilitiesAnswerStructure* ns1__WsGetCapabilitiesAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsGetCapabilitiesAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsGetCapabilitiesAnswerStructure::soap_del() deep deletes ns1__WsGetCapabilitiesAnswerStructure data members, use only after ns1__WsGetCapabilitiesAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsGetCapabilitiesAnswerStructure : public xsd__anyType
{ public:
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":CapabilitiesResponseStructure.
    ns2__CapabilitiesResponseStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsStopPointsDiscoveryStructure is a complexType.
///
/// class ns1__WsStopPointsDiscoveryStructure operations:
/// - ns1__WsStopPointsDiscoveryStructure* soap_new_ns1__WsStopPointsDiscoveryStructure(soap*) allocate and default initialize
/// - ns1__WsStopPointsDiscoveryStructure* soap_new_ns1__WsStopPointsDiscoveryStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsStopPointsDiscoveryStructure* soap_new_req_ns1__WsStopPointsDiscoveryStructure(soap*, ...) allocate, set required members
/// - ns1__WsStopPointsDiscoveryStructure* soap_new_set_ns1__WsStopPointsDiscoveryStructure(soap*, ...) allocate, set all public members
/// - ns1__WsStopPointsDiscoveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsStopPointsDiscoveryStructure(soap*, ns1__WsStopPointsDiscoveryStructure*) deserialize from a stream
/// - int soap_write_ns1__WsStopPointsDiscoveryStructure(soap*, ns1__WsStopPointsDiscoveryStructure*) serialize to a stream
/// - ns1__WsStopPointsDiscoveryStructure* ns1__WsStopPointsDiscoveryStructure::soap_dup(soap*) returns deep copy of ns1__WsStopPointsDiscoveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsStopPointsDiscoveryStructure::soap_del() deep deletes ns1__WsStopPointsDiscoveryStructure data members, use only after ns1__WsStopPointsDiscoveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsStopPointsDiscoveryStructure : public xsd__anyType
{ public:
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":StopPointsDiscoveryRequestStructure.
    ns2__StopPointsDiscoveryRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsStopPointsDiscoveryAnswerStructure is a complexType.
///
/// class ns1__WsStopPointsDiscoveryAnswerStructure operations:
/// - ns1__WsStopPointsDiscoveryAnswerStructure* soap_new_ns1__WsStopPointsDiscoveryAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsStopPointsDiscoveryAnswerStructure* soap_new_ns1__WsStopPointsDiscoveryAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsStopPointsDiscoveryAnswerStructure* soap_new_req_ns1__WsStopPointsDiscoveryAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsStopPointsDiscoveryAnswerStructure* soap_new_set_ns1__WsStopPointsDiscoveryAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsStopPointsDiscoveryAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsStopPointsDiscoveryAnswerStructure(soap*, ns1__WsStopPointsDiscoveryAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsStopPointsDiscoveryAnswerStructure(soap*, ns1__WsStopPointsDiscoveryAnswerStructure*) serialize to a stream
/// - ns1__WsStopPointsDiscoveryAnswerStructure* ns1__WsStopPointsDiscoveryAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsStopPointsDiscoveryAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsStopPointsDiscoveryAnswerStructure::soap_del() deep deletes ns1__WsStopPointsDiscoveryAnswerStructure data members, use only after ns1__WsStopPointsDiscoveryAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsStopPointsDiscoveryAnswerStructure : public xsd__anyType
{ public:
/// Element "StopPointsDiscoveryAnswerInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  StopPointsDiscoveryAnswerInfo  1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":StopPointsDeliveryStructure.
    ns2__StopPointsDeliveryStructure*    Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsLinesDiscoveryStructure is a complexType.
///
/// class ns1__WsLinesDiscoveryStructure operations:
/// - ns1__WsLinesDiscoveryStructure* soap_new_ns1__WsLinesDiscoveryStructure(soap*) allocate and default initialize
/// - ns1__WsLinesDiscoveryStructure* soap_new_ns1__WsLinesDiscoveryStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsLinesDiscoveryStructure* soap_new_req_ns1__WsLinesDiscoveryStructure(soap*, ...) allocate, set required members
/// - ns1__WsLinesDiscoveryStructure* soap_new_set_ns1__WsLinesDiscoveryStructure(soap*, ...) allocate, set all public members
/// - ns1__WsLinesDiscoveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsLinesDiscoveryStructure(soap*, ns1__WsLinesDiscoveryStructure*) deserialize from a stream
/// - int soap_write_ns1__WsLinesDiscoveryStructure(soap*, ns1__WsLinesDiscoveryStructure*) serialize to a stream
/// - ns1__WsLinesDiscoveryStructure* ns1__WsLinesDiscoveryStructure::soap_dup(soap*) returns deep copy of ns1__WsLinesDiscoveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsLinesDiscoveryStructure::soap_del() deep deletes ns1__WsLinesDiscoveryStructure data members, use only after ns1__WsLinesDiscoveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsLinesDiscoveryStructure : public xsd__anyType
{ public:
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":LinesDiscoveryRequestStructure.
    ns2__LinesDiscoveryRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsLinesDiscoveryAnswerStructure is a complexType.
///
/// class ns1__WsLinesDiscoveryAnswerStructure operations:
/// - ns1__WsLinesDiscoveryAnswerStructure* soap_new_ns1__WsLinesDiscoveryAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsLinesDiscoveryAnswerStructure* soap_new_ns1__WsLinesDiscoveryAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsLinesDiscoveryAnswerStructure* soap_new_req_ns1__WsLinesDiscoveryAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsLinesDiscoveryAnswerStructure* soap_new_set_ns1__WsLinesDiscoveryAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsLinesDiscoveryAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsLinesDiscoveryAnswerStructure(soap*, ns1__WsLinesDiscoveryAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsLinesDiscoveryAnswerStructure(soap*, ns1__WsLinesDiscoveryAnswerStructure*) serialize to a stream
/// - ns1__WsLinesDiscoveryAnswerStructure* ns1__WsLinesDiscoveryAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsLinesDiscoveryAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsLinesDiscoveryAnswerStructure::soap_del() deep deletes ns1__WsLinesDiscoveryAnswerStructure data members, use only after ns1__WsLinesDiscoveryAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsLinesDiscoveryAnswerStructure : public xsd__anyType
{ public:
/// Element "LinesDiscoveryAnswerInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  LinesDiscoveryAnswerInfo       1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":LinesDeliveryStructure.
    ns2__LinesDeliveryStructure*         Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsConnectionMonitoringRequestStructure is a complexType.
///
/// class ns1__WsConnectionMonitoringRequestStructure operations:
/// - ns1__WsConnectionMonitoringRequestStructure* soap_new_ns1__WsConnectionMonitoringRequestStructure(soap*) allocate and default initialize
/// - ns1__WsConnectionMonitoringRequestStructure* soap_new_ns1__WsConnectionMonitoringRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsConnectionMonitoringRequestStructure* soap_new_req_ns1__WsConnectionMonitoringRequestStructure(soap*, ...) allocate, set required members
/// - ns1__WsConnectionMonitoringRequestStructure* soap_new_set_ns1__WsConnectionMonitoringRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__WsConnectionMonitoringRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsConnectionMonitoringRequestStructure(soap*, ns1__WsConnectionMonitoringRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__WsConnectionMonitoringRequestStructure(soap*, ns1__WsConnectionMonitoringRequestStructure*) serialize to a stream
/// - ns1__WsConnectionMonitoringRequestStructure* ns1__WsConnectionMonitoringRequestStructure::soap_dup(soap*) returns deep copy of ns1__WsConnectionMonitoringRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsConnectionMonitoringRequestStructure::soap_del() deep deletes ns1__WsConnectionMonitoringRequestStructure data members, use only after ns1__WsConnectionMonitoringRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsConnectionMonitoringRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringRequestStructure.
    ns2__ConnectionMonitoringRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsConnectionMonitoringAnswerStructure is a complexType.
///
/// class ns1__WsConnectionMonitoringAnswerStructure operations:
/// - ns1__WsConnectionMonitoringAnswerStructure* soap_new_ns1__WsConnectionMonitoringAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsConnectionMonitoringAnswerStructure* soap_new_ns1__WsConnectionMonitoringAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsConnectionMonitoringAnswerStructure* soap_new_req_ns1__WsConnectionMonitoringAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsConnectionMonitoringAnswerStructure* soap_new_set_ns1__WsConnectionMonitoringAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsConnectionMonitoringAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsConnectionMonitoringAnswerStructure(soap*, ns1__WsConnectionMonitoringAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsConnectionMonitoringAnswerStructure(soap*, ns1__WsConnectionMonitoringAnswerStructure*) serialize to a stream
/// - ns1__WsConnectionMonitoringAnswerStructure* ns1__WsConnectionMonitoringAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsConnectionMonitoringAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsConnectionMonitoringAnswerStructure::soap_del() deep deletes ns1__WsConnectionMonitoringAnswerStructure data members, use only after ns1__WsConnectionMonitoringAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsConnectionMonitoringAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringDeliveriesStructure.
    ns2__ConnectionMonitoringDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsConnectionTimetableRequestStructure is a complexType.
///
/// class ns1__WsConnectionTimetableRequestStructure operations:
/// - ns1__WsConnectionTimetableRequestStructure* soap_new_ns1__WsConnectionTimetableRequestStructure(soap*) allocate and default initialize
/// - ns1__WsConnectionTimetableRequestStructure* soap_new_ns1__WsConnectionTimetableRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsConnectionTimetableRequestStructure* soap_new_req_ns1__WsConnectionTimetableRequestStructure(soap*, ...) allocate, set required members
/// - ns1__WsConnectionTimetableRequestStructure* soap_new_set_ns1__WsConnectionTimetableRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__WsConnectionTimetableRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsConnectionTimetableRequestStructure(soap*, ns1__WsConnectionTimetableRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__WsConnectionTimetableRequestStructure(soap*, ns1__WsConnectionTimetableRequestStructure*) serialize to a stream
/// - ns1__WsConnectionTimetableRequestStructure* ns1__WsConnectionTimetableRequestStructure::soap_dup(soap*) returns deep copy of ns1__WsConnectionTimetableRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsConnectionTimetableRequestStructure::soap_del() deep deletes ns1__WsConnectionTimetableRequestStructure data members, use only after ns1__WsConnectionTimetableRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsConnectionTimetableRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":ConnectionTimetableRequestStructure.
    ns2__ConnectionTimetableRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsConnectionTimetableAnswerStructure is a complexType.
///
/// class ns1__WsConnectionTimetableAnswerStructure operations:
/// - ns1__WsConnectionTimetableAnswerStructure* soap_new_ns1__WsConnectionTimetableAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsConnectionTimetableAnswerStructure* soap_new_ns1__WsConnectionTimetableAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsConnectionTimetableAnswerStructure* soap_new_req_ns1__WsConnectionTimetableAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsConnectionTimetableAnswerStructure* soap_new_set_ns1__WsConnectionTimetableAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsConnectionTimetableAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsConnectionTimetableAnswerStructure(soap*, ns1__WsConnectionTimetableAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsConnectionTimetableAnswerStructure(soap*, ns1__WsConnectionTimetableAnswerStructure*) serialize to a stream
/// - ns1__WsConnectionTimetableAnswerStructure* ns1__WsConnectionTimetableAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsConnectionTimetableAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsConnectionTimetableAnswerStructure::soap_del() deep deletes ns1__WsConnectionTimetableAnswerStructure data members, use only after ns1__WsConnectionTimetableAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsConnectionTimetableAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":ConnectionTimetableDeliveriesStructure.
    ns2__ConnectionTimetableDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsEstimatedTimetableRequestStructure is a complexType.
///
/// class ns1__WsEstimatedTimetableRequestStructure operations:
/// - ns1__WsEstimatedTimetableRequestStructure* soap_new_ns1__WsEstimatedTimetableRequestStructure(soap*) allocate and default initialize
/// - ns1__WsEstimatedTimetableRequestStructure* soap_new_ns1__WsEstimatedTimetableRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsEstimatedTimetableRequestStructure* soap_new_req_ns1__WsEstimatedTimetableRequestStructure(soap*, ...) allocate, set required members
/// - ns1__WsEstimatedTimetableRequestStructure* soap_new_set_ns1__WsEstimatedTimetableRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__WsEstimatedTimetableRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsEstimatedTimetableRequestStructure(soap*, ns1__WsEstimatedTimetableRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__WsEstimatedTimetableRequestStructure(soap*, ns1__WsEstimatedTimetableRequestStructure*) serialize to a stream
/// - ns1__WsEstimatedTimetableRequestStructure* ns1__WsEstimatedTimetableRequestStructure::soap_dup(soap*) returns deep copy of ns1__WsEstimatedTimetableRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsEstimatedTimetableRequestStructure::soap_del() deep deletes ns1__WsEstimatedTimetableRequestStructure data members, use only after ns1__WsEstimatedTimetableRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsEstimatedTimetableRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":EstimatedTimetableRequestStructure.
    ns2__EstimatedTimetableRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsEstimatedTimetableAnswerStructure is a complexType.
///
/// class ns1__WsEstimatedTimetableAnswerStructure operations:
/// - ns1__WsEstimatedTimetableAnswerStructure* soap_new_ns1__WsEstimatedTimetableAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsEstimatedTimetableAnswerStructure* soap_new_ns1__WsEstimatedTimetableAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsEstimatedTimetableAnswerStructure* soap_new_req_ns1__WsEstimatedTimetableAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsEstimatedTimetableAnswerStructure* soap_new_set_ns1__WsEstimatedTimetableAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsEstimatedTimetableAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsEstimatedTimetableAnswerStructure(soap*, ns1__WsEstimatedTimetableAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsEstimatedTimetableAnswerStructure(soap*, ns1__WsEstimatedTimetableAnswerStructure*) serialize to a stream
/// - ns1__WsEstimatedTimetableAnswerStructure* ns1__WsEstimatedTimetableAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsEstimatedTimetableAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsEstimatedTimetableAnswerStructure::soap_del() deep deletes ns1__WsEstimatedTimetableAnswerStructure data members, use only after ns1__WsEstimatedTimetableAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsEstimatedTimetableAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":EstimatedTimetableDeliveriesStructure.
    ns2__EstimatedTimetableDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsFacilityMonitoringRequestStructure is a complexType.
///
/// class ns1__WsFacilityMonitoringRequestStructure operations:
/// - ns1__WsFacilityMonitoringRequestStructure* soap_new_ns1__WsFacilityMonitoringRequestStructure(soap*) allocate and default initialize
/// - ns1__WsFacilityMonitoringRequestStructure* soap_new_ns1__WsFacilityMonitoringRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsFacilityMonitoringRequestStructure* soap_new_req_ns1__WsFacilityMonitoringRequestStructure(soap*, ...) allocate, set required members
/// - ns1__WsFacilityMonitoringRequestStructure* soap_new_set_ns1__WsFacilityMonitoringRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__WsFacilityMonitoringRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsFacilityMonitoringRequestStructure(soap*, ns1__WsFacilityMonitoringRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__WsFacilityMonitoringRequestStructure(soap*, ns1__WsFacilityMonitoringRequestStructure*) serialize to a stream
/// - ns1__WsFacilityMonitoringRequestStructure* ns1__WsFacilityMonitoringRequestStructure::soap_dup(soap*) returns deep copy of ns1__WsFacilityMonitoringRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsFacilityMonitoringRequestStructure::soap_del() deep deletes ns1__WsFacilityMonitoringRequestStructure data members, use only after ns1__WsFacilityMonitoringRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsFacilityMonitoringRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":FacilityMonitoringRequestStructure.
    ns2__FacilityMonitoringRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsFacilityMonitoringAnswerStructure is a complexType.
///
/// class ns1__WsFacilityMonitoringAnswerStructure operations:
/// - ns1__WsFacilityMonitoringAnswerStructure* soap_new_ns1__WsFacilityMonitoringAnswerStructure(soap*) allocate and default initialize
/// - ns1__WsFacilityMonitoringAnswerStructure* soap_new_ns1__WsFacilityMonitoringAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsFacilityMonitoringAnswerStructure* soap_new_req_ns1__WsFacilityMonitoringAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__WsFacilityMonitoringAnswerStructure* soap_new_set_ns1__WsFacilityMonitoringAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__WsFacilityMonitoringAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsFacilityMonitoringAnswerStructure(soap*, ns1__WsFacilityMonitoringAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__WsFacilityMonitoringAnswerStructure(soap*, ns1__WsFacilityMonitoringAnswerStructure*) serialize to a stream
/// - ns1__WsFacilityMonitoringAnswerStructure* ns1__WsFacilityMonitoringAnswerStructure::soap_dup(soap*) returns deep copy of ns1__WsFacilityMonitoringAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsFacilityMonitoringAnswerStructure::soap_del() deep deletes ns1__WsFacilityMonitoringAnswerStructure data members, use only after ns1__WsFacilityMonitoringAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsFacilityMonitoringAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":FacilityMonitoringDeliveriesStructure.
    ns2__FacilityMonitoringDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":GeneralMessageRequestStructure is a complexType.
///
/// class ns1__GeneralMessageRequestStructure operations:
/// - ns1__GeneralMessageRequestStructure* soap_new_ns1__GeneralMessageRequestStructure(soap*) allocate and default initialize
/// - ns1__GeneralMessageRequestStructure* soap_new_ns1__GeneralMessageRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__GeneralMessageRequestStructure* soap_new_req_ns1__GeneralMessageRequestStructure(soap*, ...) allocate, set required members
/// - ns1__GeneralMessageRequestStructure* soap_new_set_ns1__GeneralMessageRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__GeneralMessageRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GeneralMessageRequestStructure(soap*, ns1__GeneralMessageRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__GeneralMessageRequestStructure(soap*, ns1__GeneralMessageRequestStructure*) serialize to a stream
/// - ns1__GeneralMessageRequestStructure* ns1__GeneralMessageRequestStructure::soap_dup(soap*) returns deep copy of ns1__GeneralMessageRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GeneralMessageRequestStructure::soap_del() deep deletes ns1__GeneralMessageRequestStructure data members, use only after ns1__GeneralMessageRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GeneralMessageRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":GeneralMessageRequestStructure.
    ns2__GeneralMessageRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":GeneralMessageAnswerStructure is a complexType.
///
/// class ns1__GeneralMessageAnswerStructure operations:
/// - ns1__GeneralMessageAnswerStructure* soap_new_ns1__GeneralMessageAnswerStructure(soap*) allocate and default initialize
/// - ns1__GeneralMessageAnswerStructure* soap_new_ns1__GeneralMessageAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__GeneralMessageAnswerStructure* soap_new_req_ns1__GeneralMessageAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__GeneralMessageAnswerStructure* soap_new_set_ns1__GeneralMessageAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__GeneralMessageAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GeneralMessageAnswerStructure(soap*, ns1__GeneralMessageAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__GeneralMessageAnswerStructure(soap*, ns1__GeneralMessageAnswerStructure*) serialize to a stream
/// - ns1__GeneralMessageAnswerStructure* ns1__GeneralMessageAnswerStructure::soap_dup(soap*) returns deep copy of ns1__GeneralMessageAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GeneralMessageAnswerStructure::soap_del() deep deletes ns1__GeneralMessageAnswerStructure data members, use only after ns1__GeneralMessageAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__GeneralMessageAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":GeneralMessageDeliveriesStructure.
    ns2__GeneralMessageDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":ProductionTimetableRequestStructure is a complexType.
///
/// class ns1__ProductionTimetableRequestStructure operations:
/// - ns1__ProductionTimetableRequestStructure* soap_new_ns1__ProductionTimetableRequestStructure(soap*) allocate and default initialize
/// - ns1__ProductionTimetableRequestStructure* soap_new_ns1__ProductionTimetableRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__ProductionTimetableRequestStructure* soap_new_req_ns1__ProductionTimetableRequestStructure(soap*, ...) allocate, set required members
/// - ns1__ProductionTimetableRequestStructure* soap_new_set_ns1__ProductionTimetableRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__ProductionTimetableRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ProductionTimetableRequestStructure(soap*, ns1__ProductionTimetableRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__ProductionTimetableRequestStructure(soap*, ns1__ProductionTimetableRequestStructure*) serialize to a stream
/// - ns1__ProductionTimetableRequestStructure* ns1__ProductionTimetableRequestStructure::soap_dup(soap*) returns deep copy of ns1__ProductionTimetableRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ProductionTimetableRequestStructure::soap_del() deep deletes ns1__ProductionTimetableRequestStructure data members, use only after ns1__ProductionTimetableRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ProductionTimetableRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":ProductionTimetableRequestStructure.
    ns2__ProductionTimetableRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":ProductionTimetableAnswerStructure is a complexType.
///
/// class ns1__ProductionTimetableAnswerStructure operations:
/// - ns1__ProductionTimetableAnswerStructure* soap_new_ns1__ProductionTimetableAnswerStructure(soap*) allocate and default initialize
/// - ns1__ProductionTimetableAnswerStructure* soap_new_ns1__ProductionTimetableAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__ProductionTimetableAnswerStructure* soap_new_req_ns1__ProductionTimetableAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__ProductionTimetableAnswerStructure* soap_new_set_ns1__ProductionTimetableAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__ProductionTimetableAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ProductionTimetableAnswerStructure(soap*, ns1__ProductionTimetableAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__ProductionTimetableAnswerStructure(soap*, ns1__ProductionTimetableAnswerStructure*) serialize to a stream
/// - ns1__ProductionTimetableAnswerStructure* ns1__ProductionTimetableAnswerStructure::soap_dup(soap*) returns deep copy of ns1__ProductionTimetableAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ProductionTimetableAnswerStructure::soap_del() deep deletes ns1__ProductionTimetableAnswerStructure data members, use only after ns1__ProductionTimetableAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ProductionTimetableAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":ProductionTimetableDeliveriesStructure.
    ns2__ProductionTimetableDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":SituationExchangeRequestStructure is a complexType.
///
/// class ns1__SituationExchangeRequestStructure operations:
/// - ns1__SituationExchangeRequestStructure* soap_new_ns1__SituationExchangeRequestStructure(soap*) allocate and default initialize
/// - ns1__SituationExchangeRequestStructure* soap_new_ns1__SituationExchangeRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__SituationExchangeRequestStructure* soap_new_req_ns1__SituationExchangeRequestStructure(soap*, ...) allocate, set required members
/// - ns1__SituationExchangeRequestStructure* soap_new_set_ns1__SituationExchangeRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__SituationExchangeRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SituationExchangeRequestStructure(soap*, ns1__SituationExchangeRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__SituationExchangeRequestStructure(soap*, ns1__SituationExchangeRequestStructure*) serialize to a stream
/// - ns1__SituationExchangeRequestStructure* ns1__SituationExchangeRequestStructure::soap_dup(soap*) returns deep copy of ns1__SituationExchangeRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SituationExchangeRequestStructure::soap_del() deep deletes ns1__SituationExchangeRequestStructure data members, use only after ns1__SituationExchangeRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SituationExchangeRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":SituationExchangeRequestStructure.
    ns2__SituationExchangeRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":SituationExchangeAnswerStructure is a complexType.
///
/// class ns1__SituationExchangeAnswerStructure operations:
/// - ns1__SituationExchangeAnswerStructure* soap_new_ns1__SituationExchangeAnswerStructure(soap*) allocate and default initialize
/// - ns1__SituationExchangeAnswerStructure* soap_new_ns1__SituationExchangeAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__SituationExchangeAnswerStructure* soap_new_req_ns1__SituationExchangeAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__SituationExchangeAnswerStructure* soap_new_set_ns1__SituationExchangeAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__SituationExchangeAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SituationExchangeAnswerStructure(soap*, ns1__SituationExchangeAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__SituationExchangeAnswerStructure(soap*, ns1__SituationExchangeAnswerStructure*) serialize to a stream
/// - ns1__SituationExchangeAnswerStructure* ns1__SituationExchangeAnswerStructure::soap_dup(soap*) returns deep copy of ns1__SituationExchangeAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SituationExchangeAnswerStructure::soap_del() deep deletes ns1__SituationExchangeAnswerStructure data members, use only after ns1__SituationExchangeAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SituationExchangeAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":SituationExchangeDeliveriesStructure.
    ns2__SituationExchangeDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":StopMonitoringRequestStructure is a complexType.
///
/// class ns1__StopMonitoringRequestStructure operations:
/// - ns1__StopMonitoringRequestStructure* soap_new_ns1__StopMonitoringRequestStructure(soap*) allocate and default initialize
/// - ns1__StopMonitoringRequestStructure* soap_new_ns1__StopMonitoringRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__StopMonitoringRequestStructure* soap_new_req_ns1__StopMonitoringRequestStructure(soap*, ...) allocate, set required members
/// - ns1__StopMonitoringRequestStructure* soap_new_set_ns1__StopMonitoringRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__StopMonitoringRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StopMonitoringRequestStructure(soap*, ns1__StopMonitoringRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__StopMonitoringRequestStructure(soap*, ns1__StopMonitoringRequestStructure*) serialize to a stream
/// - ns1__StopMonitoringRequestStructure* ns1__StopMonitoringRequestStructure::soap_dup(soap*) returns deep copy of ns1__StopMonitoringRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StopMonitoringRequestStructure::soap_del() deep deletes ns1__StopMonitoringRequestStructure data members, use only after ns1__StopMonitoringRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__StopMonitoringRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":StopMonitoringRequestStructure.
    ns2__StopMonitoringRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":StopMonitoringMultipleRequestStructure is a complexType.
///
/// class ns1__StopMonitoringMultipleRequestStructure operations:
/// - ns1__StopMonitoringMultipleRequestStructure* soap_new_ns1__StopMonitoringMultipleRequestStructure(soap*) allocate and default initialize
/// - ns1__StopMonitoringMultipleRequestStructure* soap_new_ns1__StopMonitoringMultipleRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__StopMonitoringMultipleRequestStructure* soap_new_req_ns1__StopMonitoringMultipleRequestStructure(soap*, ...) allocate, set required members
/// - ns1__StopMonitoringMultipleRequestStructure* soap_new_set_ns1__StopMonitoringMultipleRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__StopMonitoringMultipleRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StopMonitoringMultipleRequestStructure(soap*, ns1__StopMonitoringMultipleRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__StopMonitoringMultipleRequestStructure(soap*, ns1__StopMonitoringMultipleRequestStructure*) serialize to a stream
/// - ns1__StopMonitoringMultipleRequestStructure* ns1__StopMonitoringMultipleRequestStructure::soap_dup(soap*) returns deep copy of ns1__StopMonitoringMultipleRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StopMonitoringMultipleRequestStructure::soap_del() deep deletes ns1__StopMonitoringMultipleRequestStructure data members, use only after ns1__StopMonitoringMultipleRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__StopMonitoringMultipleRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":StopMonitoringMultipleRequestStructure.
    ns2__StopMonitoringMultipleRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":StopMonitoringAnswerStructure is a complexType.
///
/// class ns1__StopMonitoringAnswerStructure operations:
/// - ns1__StopMonitoringAnswerStructure* soap_new_ns1__StopMonitoringAnswerStructure(soap*) allocate and default initialize
/// - ns1__StopMonitoringAnswerStructure* soap_new_ns1__StopMonitoringAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__StopMonitoringAnswerStructure* soap_new_req_ns1__StopMonitoringAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__StopMonitoringAnswerStructure* soap_new_set_ns1__StopMonitoringAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__StopMonitoringAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StopMonitoringAnswerStructure(soap*, ns1__StopMonitoringAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__StopMonitoringAnswerStructure(soap*, ns1__StopMonitoringAnswerStructure*) serialize to a stream
/// - ns1__StopMonitoringAnswerStructure* ns1__StopMonitoringAnswerStructure::soap_dup(soap*) returns deep copy of ns1__StopMonitoringAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StopMonitoringAnswerStructure::soap_del() deep deletes ns1__StopMonitoringAnswerStructure data members, use only after ns1__StopMonitoringAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__StopMonitoringAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":StopMonitoringDeliveriesStructure.
    ns2__StopMonitoringDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":StopTimetableRequestStructure is a complexType.
///
/// class ns1__StopTimetableRequestStructure operations:
/// - ns1__StopTimetableRequestStructure* soap_new_ns1__StopTimetableRequestStructure(soap*) allocate and default initialize
/// - ns1__StopTimetableRequestStructure* soap_new_ns1__StopTimetableRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__StopTimetableRequestStructure* soap_new_req_ns1__StopTimetableRequestStructure(soap*, ...) allocate, set required members
/// - ns1__StopTimetableRequestStructure* soap_new_set_ns1__StopTimetableRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__StopTimetableRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StopTimetableRequestStructure(soap*, ns1__StopTimetableRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__StopTimetableRequestStructure(soap*, ns1__StopTimetableRequestStructure*) serialize to a stream
/// - ns1__StopTimetableRequestStructure* ns1__StopTimetableRequestStructure::soap_dup(soap*) returns deep copy of ns1__StopTimetableRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StopTimetableRequestStructure::soap_del() deep deletes ns1__StopTimetableRequestStructure data members, use only after ns1__StopTimetableRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__StopTimetableRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":StopTimetableRequestStructure.
    ns2__StopTimetableRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":StopTimetableAnswerStructure is a complexType.
///
/// class ns1__StopTimetableAnswerStructure operations:
/// - ns1__StopTimetableAnswerStructure* soap_new_ns1__StopTimetableAnswerStructure(soap*) allocate and default initialize
/// - ns1__StopTimetableAnswerStructure* soap_new_ns1__StopTimetableAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__StopTimetableAnswerStructure* soap_new_req_ns1__StopTimetableAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__StopTimetableAnswerStructure* soap_new_set_ns1__StopTimetableAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__StopTimetableAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StopTimetableAnswerStructure(soap*, ns1__StopTimetableAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__StopTimetableAnswerStructure(soap*, ns1__StopTimetableAnswerStructure*) serialize to a stream
/// - ns1__StopTimetableAnswerStructure* ns1__StopTimetableAnswerStructure::soap_dup(soap*) returns deep copy of ns1__StopTimetableAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StopTimetableAnswerStructure::soap_del() deep deletes ns1__StopTimetableAnswerStructure data members, use only after ns1__StopTimetableAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__StopTimetableAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":StopTimetableDeliveriesStructure.
    ns2__StopTimetableDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":VehicleMonitoringRequestStructure is a complexType.
///
/// class ns1__VehicleMonitoringRequestStructure operations:
/// - ns1__VehicleMonitoringRequestStructure* soap_new_ns1__VehicleMonitoringRequestStructure(soap*) allocate and default initialize
/// - ns1__VehicleMonitoringRequestStructure* soap_new_ns1__VehicleMonitoringRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns1__VehicleMonitoringRequestStructure* soap_new_req_ns1__VehicleMonitoringRequestStructure(soap*, ...) allocate, set required members
/// - ns1__VehicleMonitoringRequestStructure* soap_new_set_ns1__VehicleMonitoringRequestStructure(soap*, ...) allocate, set all public members
/// - ns1__VehicleMonitoringRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__VehicleMonitoringRequestStructure(soap*, ns1__VehicleMonitoringRequestStructure*) deserialize from a stream
/// - int soap_write_ns1__VehicleMonitoringRequestStructure(soap*, ns1__VehicleMonitoringRequestStructure*) serialize to a stream
/// - ns1__VehicleMonitoringRequestStructure* ns1__VehicleMonitoringRequestStructure::soap_dup(soap*) returns deep copy of ns1__VehicleMonitoringRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__VehicleMonitoringRequestStructure::soap_del() deep deletes ns1__VehicleMonitoringRequestStructure data members, use only after ns1__VehicleMonitoringRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__VehicleMonitoringRequestStructure : public xsd__anyType
{ public:
/// Element "ServiceRequestInfo" of XSD type "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure.
    ns1__WsServiceRequestInfoStructure*  ServiceRequestInfo             1;	///< Required element.
/// Element "Request" of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringRequestStructure.
    ns2__VehicleMonitoringRequestStructure*  Request                        1;	///< Required element.
/// Element "RequestExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            RequestExtension               1;	///< Required element.
};

/// @brief "http://wsdl.siri.org.uk/siri":VehicleMonitoringAnswerStructure is a complexType.
///
/// class ns1__VehicleMonitoringAnswerStructure operations:
/// - ns1__VehicleMonitoringAnswerStructure* soap_new_ns1__VehicleMonitoringAnswerStructure(soap*) allocate and default initialize
/// - ns1__VehicleMonitoringAnswerStructure* soap_new_ns1__VehicleMonitoringAnswerStructure(soap*, int num) allocate array and default initialize values
/// - ns1__VehicleMonitoringAnswerStructure* soap_new_req_ns1__VehicleMonitoringAnswerStructure(soap*, ...) allocate, set required members
/// - ns1__VehicleMonitoringAnswerStructure* soap_new_set_ns1__VehicleMonitoringAnswerStructure(soap*, ...) allocate, set all public members
/// - ns1__VehicleMonitoringAnswerStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__VehicleMonitoringAnswerStructure(soap*, ns1__VehicleMonitoringAnswerStructure*) deserialize from a stream
/// - int soap_write_ns1__VehicleMonitoringAnswerStructure(soap*, ns1__VehicleMonitoringAnswerStructure*) serialize to a stream
/// - ns1__VehicleMonitoringAnswerStructure* ns1__VehicleMonitoringAnswerStructure::soap_dup(soap*) returns deep copy of ns1__VehicleMonitoringAnswerStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__VehicleMonitoringAnswerStructure::soap_del() deep deletes ns1__VehicleMonitoringAnswerStructure data members, use only after ns1__VehicleMonitoringAnswerStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__VehicleMonitoringAnswerStructure : public xsd__anyType
{ public:
/// Element "ServiceDeliveryInfo" of XSD type "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure.
    ns2__ProducerResponseEndpointStructure*  ServiceDeliveryInfo            1;	///< Required element.
/// Element "Answer" of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringDeliveriesStructure.
    ns2__VehicleMonitoringDeliveriesStructure*  Answer                         1;	///< Required element.
/// Element "AnswerExtension" of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
    ns2__ExtensionsStructure*            AnswerExtension                1;	///< Required element.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.siri.org.uk/siri                                              *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.siri.org.uk/siri":SiriSubscriptionRequestStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for SIRI Functional Service Subscription types. Used for WSDL exchanges.
/// </BLOCKQUOTE></PRE>
/// class ns2__SiriSubscriptionRequestStructure operations:
/// - ns2__SiriSubscriptionRequestStructure* soap_new_ns2__SiriSubscriptionRequestStructure(soap*) allocate and default initialize
/// - ns2__SiriSubscriptionRequestStructure* soap_new_ns2__SiriSubscriptionRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SiriSubscriptionRequestStructure* soap_new_req_ns2__SiriSubscriptionRequestStructure(soap*, ...) allocate, set required members
/// - ns2__SiriSubscriptionRequestStructure* soap_new_set_ns2__SiriSubscriptionRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__SiriSubscriptionRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SiriSubscriptionRequestStructure(soap*, ns2__SiriSubscriptionRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__SiriSubscriptionRequestStructure(soap*, ns2__SiriSubscriptionRequestStructure*) serialize to a stream
/// - ns2__SiriSubscriptionRequestStructure* ns2__SiriSubscriptionRequestStructure::soap_dup(soap*) returns deep copy of ns2__SiriSubscriptionRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SiriSubscriptionRequestStructure::soap_del() deep deletes ns2__SiriSubscriptionRequestStructure data members, use only after ns2__SiriSubscriptionRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SiriSubscriptionRequestStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="SiriSubscriptionRequestGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Subscription types. For a given SubscriptionRequest, must all be of the same service type.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSubscriptionRequestStructure;	///< Union _ns2__union_SiriSubscriptionRequestStructure selector: set to SOAP_UNION__ns2__union_SiriSubscriptionRequestStructure_<fieldname>
    union _ns2__union_SiriSubscriptionRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of _ns2__ProductionTimetableSubscriptionRequest* element refs of length 1..unbounded.
    std::vector<_ns2__ProductionTimetableSubscriptionRequest*> *ProductionTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableSubscriptionStructure*> *EstimatedTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Stop TimetablesService.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableSubscriptionStructure*> *StopTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringSubscriptionStructure*> *StopMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringSubscriptionStructure*> *VehicleMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Subscription Request for information about Timetabled connections at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableSubscriptionStructure*> *ConnectionTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringSubscriptionRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringSubscriptionRequestStructure*> *ConnectionMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to General Message Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageSubscriptionStructure*> *GeneralMessageSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringSubscriptionStructure*> *FacilityMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeSubscriptionStructure*> *SituationExchangeSubscriptionRequest 1;
    }                                    union_SiriSubscriptionRequestStructure;
//  END OF CHOICE
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ServiceDeliveryBodyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for SIRI Service Delivery Body..
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceDeliveryBodyStructure operations:
/// - ns2__ServiceDeliveryBodyStructure* soap_new_ns2__ServiceDeliveryBodyStructure(soap*) allocate and default initialize
/// - ns2__ServiceDeliveryBodyStructure* soap_new_ns2__ServiceDeliveryBodyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceDeliveryBodyStructure* soap_new_req_ns2__ServiceDeliveryBodyStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceDeliveryBodyStructure* soap_new_set_ns2__ServiceDeliveryBodyStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceDeliveryBodyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceDeliveryBodyStructure(soap*, ns2__ServiceDeliveryBodyStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceDeliveryBodyStructure(soap*, ns2__ServiceDeliveryBodyStructure*) serialize to a stream
/// - ns2__ServiceDeliveryBodyStructure* ns2__ServiceDeliveryBodyStructure::soap_dup(soap*) returns deep copy of ns2__ServiceDeliveryBodyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceDeliveryBodyStructure::soap_del() deep deletes ns2__ServiceDeliveryBodyStructure data members, use only after ns2__ServiceDeliveryBodyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceDeliveryBodyStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="ServiceDeliveryBodyGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for SIRI Service Delivery.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="ServiceDeliveryRequestStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for overall request. Specifc error conditions will be given on each individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the complerte request could be processed successfully or not. Default is 'true'. If any of the individual requests within the delivery failed, should be set to ' false'.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type xs:boolean.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning conditions that appluy to the overall request. More Specific error conditions should be included on each request that fails.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ServiceDeliveryBodyStructure_ErrorCondition operations:
/// - _ns2__ServiceDeliveryBodyStructure_ErrorCondition* soap_new__ns2__ServiceDeliveryBodyStructure_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__ServiceDeliveryBodyStructure_ErrorCondition* soap_new__ns2__ServiceDeliveryBodyStructure_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__ServiceDeliveryBodyStructure_ErrorCondition* soap_new_req__ns2__ServiceDeliveryBodyStructure_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__ServiceDeliveryBodyStructure_ErrorCondition* soap_new_set__ns2__ServiceDeliveryBodyStructure_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__ServiceDeliveryBodyStructure_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ServiceDeliveryBodyStructure_ErrorCondition(soap*, _ns2__ServiceDeliveryBodyStructure_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__ServiceDeliveryBodyStructure_ErrorCondition(soap*, _ns2__ServiceDeliveryBodyStructure_ErrorCondition*) serialize to a stream
/// - _ns2__ServiceDeliveryBodyStructure_ErrorCondition* _ns2__ServiceDeliveryBodyStructure_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__ServiceDeliveryBodyStructure_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ServiceDeliveryBodyStructure_ErrorCondition::soap_del() deep deletes _ns2__ServiceDeliveryBodyStructure_ErrorCondition data members, use only after _ns2__ServiceDeliveryBodyStructure_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ServiceDeliveryBodyStructure_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceDeliveryBodyStructure_ErrorCondition;	///< Union _ns2__union_ServiceDeliveryBodyStructure_ErrorCondition selector: set to SOAP_UNION__ns2__union_ServiceDeliveryBodyStructure_ErrorCondition_<fieldname>
    union _ns2__union_ServiceDeliveryBodyStructure_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Service does not support the requested capability.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilityNotSupportedError.
    ns2__CapabilityNotSupportedErrorStructure*  CapabilityNotSupportedError    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ServiceDeliveryBodyStructure_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Whether there is a further delvery message with more current updates that follows this one. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "MoreData" of XSD type xs:boolean.
    bool                                 MoreData                       0 = false;	///< Default element value="false".
//  BEGIN GROUP <xs:group name="SiriServiceDeliveryGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Delivery types.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceDeliveryBodyStructure;	///< Union _ns2__union_ServiceDeliveryBodyStructure selector: set to SOAP_UNION__ns2__union_ServiceDeliveryBodyStructure_<fieldname>
    union _ns2__union_ServiceDeliveryBodyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Delivery for Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ProductionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ProductionTimetableDeliveryStructure*> *ProductionTimetableDelivery    1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableDeliveryStructure*> *EstimatedTimetableDelivery     1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableDeliveryStructure*> *StopTimetableDelivery          1;
/// <PRE><BLOCKQUOTE>
///   Delviery for Stop Event service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringDeliveryStructure*> *StopMonitoringDelivery         1;
/// <PRE><BLOCKQUOTE>
///   Delviery for Vehicle Activity Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringDeliveryStructure*> *VehicleMonitoringDelivery      1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableDeliveryStructure*> *ConnectionTimetableDelivery    1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Feeder Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringFeederDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringFeederDeliveryStructure*> *ConnectionMonitoringFeederDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Distributor Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringDistributorDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringDistributorDeliveryStructure*> *ConnectionMonitoringDistributorDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for general Message service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for General Message Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageDeliveryStructure*> *GeneralMessageDelivery         1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringDeliveryStructure*> *FacilityMonitoringDelivery     1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeDeliveryStructure*> *SituationExchangeDelivery      1;
    }                                    union_ServiceDeliveryBodyStructure;
//  END OF CHOICE
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Default gml coordinate format for eny location elements in response; applies if Coordinates element is used to specify points. May be overridden on individual points.
/// </BLOCKQUOTE></PRE>
/// Attribute "srsName" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
   @ns2__SrsNameType*                    srsName                        0;	///< Optional attribute.
};

/// @brief "http://www.siri.org.uk/siri":SiriServiceDeliveryStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a SIRI SIRI Functional Service Delivery types.Used for WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__SiriServiceDeliveryStructure operations:
/// - ns2__SiriServiceDeliveryStructure* soap_new_ns2__SiriServiceDeliveryStructure(soap*) allocate and default initialize
/// - ns2__SiriServiceDeliveryStructure* soap_new_ns2__SiriServiceDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SiriServiceDeliveryStructure* soap_new_req_ns2__SiriServiceDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__SiriServiceDeliveryStructure* soap_new_set_ns2__SiriServiceDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__SiriServiceDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SiriServiceDeliveryStructure(soap*, ns2__SiriServiceDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__SiriServiceDeliveryStructure(soap*, ns2__SiriServiceDeliveryStructure*) serialize to a stream
/// - ns2__SiriServiceDeliveryStructure* ns2__SiriServiceDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__SiriServiceDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SiriServiceDeliveryStructure::soap_del() deep deletes ns2__SiriServiceDeliveryStructure data members, use only after ns2__SiriServiceDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SiriServiceDeliveryStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="SiriServiceDeliveryGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Delivery types.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriServiceDeliveryStructure;	///< Union _ns2__union_SiriServiceDeliveryStructure selector: set to SOAP_UNION__ns2__union_SiriServiceDeliveryStructure_<fieldname>
    union _ns2__union_SiriServiceDeliveryStructure
    {
/// <PRE><BLOCKQUOTE>
///   Delivery for Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ProductionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ProductionTimetableDeliveryStructure*> *ProductionTimetableDelivery    1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableDeliveryStructure*> *EstimatedTimetableDelivery     1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableDeliveryStructure*> *StopTimetableDelivery          1;
/// <PRE><BLOCKQUOTE>
///   Delviery for Stop Event service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringDeliveryStructure*> *StopMonitoringDelivery         1;
/// <PRE><BLOCKQUOTE>
///   Delviery for Vehicle Activity Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringDeliveryStructure*> *VehicleMonitoringDelivery      1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableDeliveryStructure*> *ConnectionTimetableDelivery    1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Feeder Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringFeederDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringFeederDeliveryStructure*> *ConnectionMonitoringFeederDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Distributor Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringDistributorDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringDistributorDeliveryStructure*> *ConnectionMonitoringDistributorDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for general Message service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for General Message Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageDeliveryStructure*> *GeneralMessageDelivery         1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringDeliveryStructure*> *FacilityMonitoringDelivery     1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeDeliveryStructure*> *SituationExchangeDelivery      1;
    }                                    union_SiriServiceDeliveryStructure;
//  END OF CHOICE
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ContextualisedRequestStructure is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for General SIRI Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__ContextualisedRequestStructure operations:
/// - ns2__ContextualisedRequestStructure* soap_new_ns2__ContextualisedRequestStructure(soap*) allocate and default initialize
/// - ns2__ContextualisedRequestStructure* soap_new_ns2__ContextualisedRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ContextualisedRequestStructure* soap_new_req_ns2__ContextualisedRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ContextualisedRequestStructure* soap_new_set_ns2__ContextualisedRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ContextualisedRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ContextualisedRequestStructure(soap*, ns2__ContextualisedRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ContextualisedRequestStructure(soap*, ns2__ContextualisedRequestStructure*) serialize to a stream
/// - ns2__ContextualisedRequestStructure* ns2__ContextualisedRequestStructure::soap_dup(soap*) returns deep copy of ns2__ContextualisedRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ContextualisedRequestStructure::soap_del() deep deletes ns2__ContextualisedRequestStructure data members, use only after ns2__ContextualisedRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ContextualisedRequestStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   General request properties - typically configured rather than repeated on request.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceRequestContext" of XSD type "http://www.siri.org.uk/siri":ServiceRequestContextStructure.
    ns2__ServiceRequestContextStructure*  ServiceRequestContext          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ServiceRequestContextStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Configurable context for requests. Intended Primarily as a documentation mechanism.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceRequestContextStructure operations:
/// - ns2__ServiceRequestContextStructure* soap_new_ns2__ServiceRequestContextStructure(soap*) allocate and default initialize
/// - ns2__ServiceRequestContextStructure* soap_new_ns2__ServiceRequestContextStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceRequestContextStructure* soap_new_req_ns2__ServiceRequestContextStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceRequestContextStructure* soap_new_set_ns2__ServiceRequestContextStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceRequestContextStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceRequestContextStructure(soap*, ns2__ServiceRequestContextStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceRequestContextStructure(soap*, ns2__ServiceRequestContextStructure*) serialize to a stream
/// - ns2__ServiceRequestContextStructure* ns2__ServiceRequestContextStructure::soap_dup(soap*) returns deep copy of ns2__ServiceRequestContextStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceRequestContextStructure::soap_del() deep deletes ns2__ServiceRequestContextStructure data members, use only after ns2__ServiceRequestContextStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceRequestContextStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="ServiceEndpointAddressGroup">
/// <PRE><BLOCKQUOTE>
///   Address elements for SIRI messages to the Producer server.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which CheckStatus requests are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "CheckStatusAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                CheckStatusAddress             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Address to which subscription requests are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "SubscribeAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                SubscribeAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Address to which subscription requests are to be sent. If absent, same as SubscribeAddress.
/// </BLOCKQUOTE></PRE>
/// Element "ManageSubscriptionAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                ManageSubscriptionAddress      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Address to which requests are to return data.
/// </BLOCKQUOTE></PRE>
/// Element "GetDataAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                GetDataAddress                 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ClientEndpointAddressGroup">
/// <PRE><BLOCKQUOTE>
///   Address elements for SIRI messages to the Subscriber/Consumer client.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which CheckStatus responses and heartbeats are to be sent. If absent, same as SubscriberAddress.
/// </BLOCKQUOTE></PRE>
/// Element "StatusResponseAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                StatusResponseAddress          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Address to which subscription responses are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                SubscriberAddress              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Address to which notifcations requests are to be sent. If absent, same as SubscriberAddress.
/// </BLOCKQUOTE></PRE>
/// Element "NotifyAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                NotifyAddress                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Address to which data is to be sent. If absent, same as NotifyAddress.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                ConsumerAddress                0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ReferenceContextGroup">
/// <PRE><BLOCKQUOTE>
///   Namespace related elements in Request Context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default names pace used to scope data identifiers.
/// </BLOCKQUOTE></PRE>
/// Element "DataNameSpaces" of XSD type "http://www.siri.org.uk/siri":DataNameSpacesStructure.
    ns2__DataNameSpacesStructure*        DataNameSpaces                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
//  BEGIN CHOICE <xs:choice minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_ServiceRequestContextStructure 0;	///< Union _ns2__union_ServiceRequestContextStructure selector: set to SOAP_UNION__ns2__union_ServiceRequestContextStructure_<fieldname> or 0 to omit
    union _ns2__union_ServiceRequestContextStructure
    {
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ServiceRequestContextStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Units for Distance Type. Default is metres. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DistanceUnits" of XSD type xs:normalizedString.
    xsd__normalizedString*               DistanceUnits                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Units for Distance Type. Default is metres per second. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "VelocityUnits" of XSD type xs:normalizedString.
    xsd__normalizedString*               VelocityUnits                  0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="TemporalContextGroup">
/// <PRE><BLOCKQUOTE>
///   Timing related elements in Request Context:
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Maximum data horizon for requests.
/// </BLOCKQUOTE></PRE>
/// Element "DataHorizon" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           DataHorizon                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timeout for requests. [Should this be separate for each type?]
/// </BLOCKQUOTE></PRE>
/// Element "RequestTimeout" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           RequestTimeout                 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryContextGroup">
/// <PRE><BLOCKQUOTE>
///   Delivery options.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether Delivery is fetched or retrieved.
/// </BLOCKQUOTE></PRE>
/// Element "DeliveryMethod" of XSD type "http://www.siri.org.uk/siri":DeliveryMethodEnumeration.
    enum ns2__DeliveryMethodEnumeration  DeliveryMethod                 0 = ns2__DeliveryMethodEnumeration__direct;	///< Default element value="direct".
/// <PRE><BLOCKQUOTE>
///   Whether multi-part delivery is allowed, i.e. the breaking up of updates into more than one delivery messages with a MoreData flag,
/// </BLOCKQUOTE></PRE>
/// Element "MultipartDespatch" of XSD type xs:boolean.
    bool*                                MultipartDespatch              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether Consumers should issue an acknowledgement on successful receipt of a delivery. Default is ' false'.
/// </BLOCKQUOTE></PRE>
/// Element "ConfirmDelivery" of XSD type xs:boolean.
    bool                                 ConfirmDelivery                0 = false;	///< Default element value="false".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ResourceContextGroup">
/// <PRE><BLOCKQUOTE>
///   Resources related elements in Request Context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Maximum Number of subscriptions that can be sustained by the subscriber. If absent no limit.
/// </BLOCKQUOTE></PRE>
/// Element "MaximimumNumberOfSubscriptions" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                MaximimumNumberOfSubscriptions 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="PredictionMethodGroup">
/// <PRE><BLOCKQUOTE>
///   Prediction options.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Who may make a prediction.
/// </BLOCKQUOTE></PRE>
/// Element "AllowedPredictors" of XSD type "http://www.siri.org.uk/siri":PredictorsEnumeration.
    enum ns2__PredictorsEnumeration      AllowedPredictors              0 = ns2__PredictorsEnumeration__anyone;	///< Default element value="anyone".
/// <PRE><BLOCKQUOTE>
///   Name of prediction method used.
/// </BLOCKQUOTE></PRE>
/// Element "PredictionFunction" of XSD type xs:string.
    std::wstring*                        PredictionFunction             0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":DataNameSpacesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Name spaces.
/// </BLOCKQUOTE></PRE>
/// class ns2__DataNameSpacesStructure operations:
/// - ns2__DataNameSpacesStructure* soap_new_ns2__DataNameSpacesStructure(soap*) allocate and default initialize
/// - ns2__DataNameSpacesStructure* soap_new_ns2__DataNameSpacesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DataNameSpacesStructure* soap_new_req_ns2__DataNameSpacesStructure(soap*, ...) allocate, set required members
/// - ns2__DataNameSpacesStructure* soap_new_set_ns2__DataNameSpacesStructure(soap*, ...) allocate, set all public members
/// - ns2__DataNameSpacesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DataNameSpacesStructure(soap*, ns2__DataNameSpacesStructure*) deserialize from a stream
/// - int soap_write_ns2__DataNameSpacesStructure(soap*, ns2__DataNameSpacesStructure*) serialize to a stream
/// - ns2__DataNameSpacesStructure* ns2__DataNameSpacesStructure::soap_dup(soap*) returns deep copy of ns2__DataNameSpacesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DataNameSpacesStructure::soap_del() deep deletes ns2__DataNameSpacesStructure data members, use only after ns2__DataNameSpacesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DataNameSpacesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Name space for STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "StopPointNameSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         StopPointNameSpace             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name space for LINE names and DIRECTIONss.
/// </BLOCKQUOTE></PRE>
/// Element "LineNameSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         LineNameSpace                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name space for Product Categories.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryNameSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         ProductCategoryNameSpace       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name space for service features.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceFeatureNameSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         ServiceFeatureNameSpace        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name space for VEHICLE features.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleFeatureNameSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         VehicleFeatureNameSpace        0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":TerminationResponseStatusStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Status of termination response
/// </BLOCKQUOTE></PRE>
/// class ns2__TerminationResponseStatusStructure operations:
/// - ns2__TerminationResponseStatusStructure* soap_new_ns2__TerminationResponseStatusStructure(soap*) allocate and default initialize
/// - ns2__TerminationResponseStatusStructure* soap_new_ns2__TerminationResponseStatusStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TerminationResponseStatusStructure* soap_new_req_ns2__TerminationResponseStatusStructure(soap*, ...) allocate, set required members
/// - ns2__TerminationResponseStatusStructure* soap_new_set_ns2__TerminationResponseStatusStructure(soap*, ...) allocate, set all public members
/// - ns2__TerminationResponseStatusStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TerminationResponseStatusStructure(soap*, ns2__TerminationResponseStatusStructure*) deserialize from a stream
/// - int soap_write_ns2__TerminationResponseStatusStructure(soap*, ns2__TerminationResponseStatusStructure*) serialize to a stream
/// - ns2__TerminationResponseStatusStructure* ns2__TerminationResponseStatusStructure::soap_dup(soap*) returns deep copy of ns2__TerminationResponseStatusStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TerminationResponseStatusStructure::soap_del() deep deletes ns2__TerminationResponseStatusStructure data members, use only after ns2__TerminationResponseStatusStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TerminationResponseStatusStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime*                       ResponseTimestamp              0;	///< Optional element.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__TerminationResponseStatusStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                1;	///< Required element.
    }                                   *__TerminationResponseStatusStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// class _ns2__TerminationResponseStatusStructure_ErrorCondition operations:
/// - _ns2__TerminationResponseStatusStructure_ErrorCondition* soap_new__ns2__TerminationResponseStatusStructure_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__TerminationResponseStatusStructure_ErrorCondition* soap_new__ns2__TerminationResponseStatusStructure_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__TerminationResponseStatusStructure_ErrorCondition* soap_new_req__ns2__TerminationResponseStatusStructure_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__TerminationResponseStatusStructure_ErrorCondition* soap_new_set__ns2__TerminationResponseStatusStructure_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__TerminationResponseStatusStructure_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__TerminationResponseStatusStructure_ErrorCondition(soap*, _ns2__TerminationResponseStatusStructure_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__TerminationResponseStatusStructure_ErrorCondition(soap*, _ns2__TerminationResponseStatusStructure_ErrorCondition*) serialize to a stream
/// - _ns2__TerminationResponseStatusStructure_ErrorCondition* _ns2__TerminationResponseStatusStructure_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__TerminationResponseStatusStructure_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__TerminationResponseStatusStructure_ErrorCondition::soap_del() deep deletes _ns2__TerminationResponseStatusStructure_ErrorCondition data members, use only after _ns2__TerminationResponseStatusStructure_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__TerminationResponseStatusStructure_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_TerminationResponseStatusStructure_ErrorCondition;	///< Union _ns2__union_TerminationResponseStatusStructure_ErrorCondition selector: set to SOAP_UNION__ns2__union_TerminationResponseStatusStructure_ErrorCondition_<fieldname>
    union _ns2__union_TerminationResponseStatusStructure_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Service does not support the requested capability.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilityNotSupportedError.
    ns2__CapabilityNotSupportedErrorStructure*  CapabilityNotSupportedError    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Subscriber not found.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownSubscriberError.
    ns2__UnknownSubscriberErrorStructure*  UnknownSubscriberError         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Subscription not found.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownSubscriptionError.
    ns2__UnknownSubscriptionErrorStructure*  UnknownSubscriptionError       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_TerminationResponseStatusStructure_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SubscriptionResponseBodyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Body of Subscription Response. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__SubscriptionResponseBodyStructure operations:
/// - ns2__SubscriptionResponseBodyStructure* soap_new_ns2__SubscriptionResponseBodyStructure(soap*) allocate and default initialize
/// - ns2__SubscriptionResponseBodyStructure* soap_new_ns2__SubscriptionResponseBodyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SubscriptionResponseBodyStructure* soap_new_req_ns2__SubscriptionResponseBodyStructure(soap*, ...) allocate, set required members
/// - ns2__SubscriptionResponseBodyStructure* soap_new_set_ns2__SubscriptionResponseBodyStructure(soap*, ...) allocate, set all public members
/// - ns2__SubscriptionResponseBodyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SubscriptionResponseBodyStructure(soap*, ns2__SubscriptionResponseBodyStructure*) deserialize from a stream
/// - int soap_write_ns2__SubscriptionResponseBodyStructure(soap*, ns2__SubscriptionResponseBodyStructure*) serialize to a stream
/// - ns2__SubscriptionResponseBodyStructure* ns2__SubscriptionResponseBodyStructure::soap_dup(soap*) returns deep copy of ns2__SubscriptionResponseBodyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SubscriptionResponseBodyStructure::soap_del() deep deletes ns2__SubscriptionResponseBodyStructure data members, use only after ns2__SubscriptionResponseBodyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SubscriptionResponseBodyStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains infromation about the processing of a an individual service subscription - either success info or an error condition. (VDV Acknowledgement).
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StatusResponseStructure* element refs of length 1..unbounded.
    std::vector<ns2__StatusResponseStructure*> ResponseStatus                 1;
/// <PRE><BLOCKQUOTE>
///   Endpoint address of subscription manager if different from that of the Producer or known default.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionManagerAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                SubscriptionManagerAddress     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time at which service providing the subscription was last started. Can be used to detect restarts. If absent, unknown.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceStartedTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ServiceStartedTime             0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":TerminateSubscriptionRequestBodyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Body of Terminate Subscription Request content. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__TerminateSubscriptionRequestBodyStructure operations:
/// - ns2__TerminateSubscriptionRequestBodyStructure* soap_new_ns2__TerminateSubscriptionRequestBodyStructure(soap*) allocate and default initialize
/// - ns2__TerminateSubscriptionRequestBodyStructure* soap_new_ns2__TerminateSubscriptionRequestBodyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TerminateSubscriptionRequestBodyStructure* soap_new_req_ns2__TerminateSubscriptionRequestBodyStructure(soap*, ...) allocate, set required members
/// - ns2__TerminateSubscriptionRequestBodyStructure* soap_new_set_ns2__TerminateSubscriptionRequestBodyStructure(soap*, ...) allocate, set all public members
/// - ns2__TerminateSubscriptionRequestBodyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TerminateSubscriptionRequestBodyStructure(soap*, ns2__TerminateSubscriptionRequestBodyStructure*) deserialize from a stream
/// - int soap_write_ns2__TerminateSubscriptionRequestBodyStructure(soap*, ns2__TerminateSubscriptionRequestBodyStructure*) serialize to a stream
/// - ns2__TerminateSubscriptionRequestBodyStructure* ns2__TerminateSubscriptionRequestBodyStructure::soap_dup(soap*) returns deep copy of ns2__TerminateSubscriptionRequestBodyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TerminateSubscriptionRequestBodyStructure::soap_del() deep deletes ns2__TerminateSubscriptionRequestBodyStructure data members, use only after ns2__TerminateSubscriptionRequestBodyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TerminateSubscriptionRequestBodyStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="TerminateSubscriptionTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be processed.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Subscription ref will be unique within this.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_TerminateSubscriptionRequestBodyStructure;	///< Union _ns2__union_TerminateSubscriptionRequestBodyStructure selector: set to SOAP_UNION__ns2__union_TerminateSubscriptionRequestBodyStructure_<fieldname>
    union _ns2__union_TerminateSubscriptionRequestBodyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Terminate all subscriptions for the requestor.
/// </BLOCKQUOTE></PRE>
/// Element "All" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  All                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Terminate the subscription identfiied by the reference.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SubscriptionQualifierStructure* of length 1..unbounded.
    std::vector<ns2__SubscriptionQualifierStructure*> *SubscriptionRef                1;
    }                                    union_TerminateSubscriptionRequestBodyStructure;
//  END OF CHOICE
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":DataSupplyRequestBodyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Body of Data Supply Request. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__DataSupplyRequestBodyStructure operations:
/// - ns2__DataSupplyRequestBodyStructure* soap_new_ns2__DataSupplyRequestBodyStructure(soap*) allocate and default initialize
/// - ns2__DataSupplyRequestBodyStructure* soap_new_ns2__DataSupplyRequestBodyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DataSupplyRequestBodyStructure* soap_new_req_ns2__DataSupplyRequestBodyStructure(soap*, ...) allocate, set required members
/// - ns2__DataSupplyRequestBodyStructure* soap_new_set_ns2__DataSupplyRequestBodyStructure(soap*, ...) allocate, set all public members
/// - ns2__DataSupplyRequestBodyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DataSupplyRequestBodyStructure(soap*, ns2__DataSupplyRequestBodyStructure*) deserialize from a stream
/// - int soap_write_ns2__DataSupplyRequestBodyStructure(soap*, ns2__DataSupplyRequestBodyStructure*) serialize to a stream
/// - ns2__DataSupplyRequestBodyStructure* ns2__DataSupplyRequestBodyStructure::soap_dup(soap*) returns deep copy of ns2__DataSupplyRequestBodyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DataSupplyRequestBodyStructure::soap_del() deep deletes ns2__DataSupplyRequestBodyStructure data members, use only after ns2__DataSupplyRequestBodyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DataSupplyRequestBodyStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="DataSupplyTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Specifies content to be included in data supply.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a specific notification message for which data is to be fetched. Can be used to distinguish between notfcatiosn for the same service and subscriber but for different filters.If none specified,
/// </BLOCKQUOTE></PRE>
/// Element "NotificationRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            NotificationRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether to return all data, or just new updates since the last delivery. Default false, i.e. just updates.
/// </BLOCKQUOTE></PRE>
/// Element "AllData" of XSD type xs:boolean.
    bool                                 AllData                        0 = false;	///< Default element value="false".
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":CheckStatusResponseBodyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Body of Service Status Check Response. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Same as CheckStatusResponseStructure, but without extension to be consistent with the other operation definition.
/// </BLOCKQUOTE></PRE>
/// class ns2__CheckStatusResponseBodyStructure operations:
/// - ns2__CheckStatusResponseBodyStructure* soap_new_ns2__CheckStatusResponseBodyStructure(soap*) allocate and default initialize
/// - ns2__CheckStatusResponseBodyStructure* soap_new_ns2__CheckStatusResponseBodyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CheckStatusResponseBodyStructure* soap_new_req_ns2__CheckStatusResponseBodyStructure(soap*, ...) allocate, set required members
/// - ns2__CheckStatusResponseBodyStructure* soap_new_set_ns2__CheckStatusResponseBodyStructure(soap*, ...) allocate, set all public members
/// - ns2__CheckStatusResponseBodyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CheckStatusResponseBodyStructure(soap*, ns2__CheckStatusResponseBodyStructure*) deserialize from a stream
/// - int soap_write_ns2__CheckStatusResponseBodyStructure(soap*, ns2__CheckStatusResponseBodyStructure*) serialize to a stream
/// - ns2__CheckStatusResponseBodyStructure* ns2__CheckStatusResponseBodyStructure::soap_dup(soap*) returns deep copy of ns2__CheckStatusResponseBodyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CheckStatusResponseBodyStructure::soap_del() deep deletes ns2__CheckStatusResponseBodyStructure data members, use only after ns2__CheckStatusResponseBodyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CheckStatusResponseBodyStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="CheckStatusPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Data received AcknowledgementService Status Check Request content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether data delivery is ready to be fetched SIRI v 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DataReady" of XSD type xs:boolean.
    bool*                                DataReady                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition that applies to the status check.
/// </BLOCKQUOTE></PRE>
/// class _ns2__CheckStatusResponseBodyStructure_ErrorCondition operations:
/// - _ns2__CheckStatusResponseBodyStructure_ErrorCondition* soap_new__ns2__CheckStatusResponseBodyStructure_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__CheckStatusResponseBodyStructure_ErrorCondition* soap_new__ns2__CheckStatusResponseBodyStructure_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__CheckStatusResponseBodyStructure_ErrorCondition* soap_new_req__ns2__CheckStatusResponseBodyStructure_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__CheckStatusResponseBodyStructure_ErrorCondition* soap_new_set__ns2__CheckStatusResponseBodyStructure_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__CheckStatusResponseBodyStructure_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CheckStatusResponseBodyStructure_ErrorCondition(soap*, _ns2__CheckStatusResponseBodyStructure_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__CheckStatusResponseBodyStructure_ErrorCondition(soap*, _ns2__CheckStatusResponseBodyStructure_ErrorCondition*) serialize to a stream
/// - _ns2__CheckStatusResponseBodyStructure_ErrorCondition* _ns2__CheckStatusResponseBodyStructure_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__CheckStatusResponseBodyStructure_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CheckStatusResponseBodyStructure_ErrorCondition::soap_del() deep deletes _ns2__CheckStatusResponseBodyStructure_ErrorCondition data members, use only after _ns2__CheckStatusResponseBodyStructure_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__CheckStatusResponseBodyStructure_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_CheckStatusResponseBodyStructure_ErrorCondition;	///< Union _ns2__union_CheckStatusResponseBodyStructure_ErrorCondition selector: set to SOAP_UNION__ns2__union_CheckStatusResponseBodyStructure_ErrorCondition_<fieldname>
    union _ns2__union_CheckStatusResponseBodyStructure_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Functional service is not available to use (but it is still capable of giving this response).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceNotAvailableError.
    ns2__ServiceNotAvailableErrorStructure*  ServiceNotAvailableError       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_CheckStatusResponseBodyStructure_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Time at which current instantiation of service started.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceStartedTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ServiceStartedTime             0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":AbstractRequestStructure is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for General SIRI Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractRequestStructure operations:
/// - ns2__AbstractRequestStructure* soap_new_ns2__AbstractRequestStructure(soap*) allocate and default initialize
/// - ns2__AbstractRequestStructure* soap_new_ns2__AbstractRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractRequestStructure* soap_new_req_ns2__AbstractRequestStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractRequestStructure* soap_new_set_ns2__AbstractRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractRequestStructure(soap*, ns2__AbstractRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractRequestStructure(soap*, ns2__AbstractRequestStructure*) serialize to a stream
/// - ns2__AbstractRequestStructure* ns2__AbstractRequestStructure::soap_dup(soap*) returns deep copy of ns2__AbstractRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractRequestStructure::soap_del() deep deletes ns2__AbstractRequestStructure data members, use only after ns2__AbstractRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractRequestStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractSubscriptionStructure is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for SIRI Service subscriptions.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractSubscriptionStructure operations:
/// - ns2__AbstractSubscriptionStructure* soap_new_ns2__AbstractSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__AbstractSubscriptionStructure* soap_new_ns2__AbstractSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractSubscriptionStructure* soap_new_req_ns2__AbstractSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractSubscriptionStructure* soap_new_set_ns2__AbstractSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractSubscriptionStructure(soap*, ns2__AbstractSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractSubscriptionStructure(soap*, ns2__AbstractSubscriptionStructure*) serialize to a stream
/// - ns2__AbstractSubscriptionStructure* ns2__AbstractSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__AbstractSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractSubscriptionStructure::soap_del() deep deletes ns2__AbstractSubscriptionStructure data members, use only after ns2__AbstractSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractSubscriptionStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":SubscriptionContextStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Subscription context - Configuration parameters which may be evrriden.
/// </BLOCKQUOTE></PRE>
/// class ns2__SubscriptionContextStructure operations:
/// - ns2__SubscriptionContextStructure* soap_new_ns2__SubscriptionContextStructure(soap*) allocate and default initialize
/// - ns2__SubscriptionContextStructure* soap_new_ns2__SubscriptionContextStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SubscriptionContextStructure* soap_new_req_ns2__SubscriptionContextStructure(soap*, ...) allocate, set required members
/// - ns2__SubscriptionContextStructure* soap_new_set_ns2__SubscriptionContextStructure(soap*, ...) allocate, set all public members
/// - ns2__SubscriptionContextStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SubscriptionContextStructure(soap*, ns2__SubscriptionContextStructure*) deserialize from a stream
/// - int soap_write_ns2__SubscriptionContextStructure(soap*, ns2__SubscriptionContextStructure*) serialize to a stream
/// - ns2__SubscriptionContextStructure* ns2__SubscriptionContextStructure::soap_dup(soap*) returns deep copy of ns2__SubscriptionContextStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SubscriptionContextStructure::soap_del() deep deletes ns2__SubscriptionContextStructure data members, use only after ns2__SubscriptionContextStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SubscriptionContextStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Interval for heartbeat.
/// </BLOCKQUOTE></PRE>
/// Element "HeartbeatInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           HeartbeatInterval              0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ResponseStructure is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   General Type for General SIRI Response.
/// </BLOCKQUOTE></PRE>
/// class ns2__ResponseStructure operations:
/// - ns2__ResponseStructure* soap_new_ns2__ResponseStructure(soap*) allocate and default initialize
/// - ns2__ResponseStructure* soap_new_ns2__ResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ResponseStructure* soap_new_req_ns2__ResponseStructure(soap*, ...) allocate, set required members
/// - ns2__ResponseStructure* soap_new_set_ns2__ResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__ResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ResponseStructure(soap*, ns2__ResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__ResponseStructure(soap*, ns2__ResponseStructure*) serialize to a stream
/// - ns2__ResponseStructure* ns2__ResponseStructure::soap_dup(soap*) returns deep copy of ns2__ResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ResponseStructure::soap_del() deep deletes ns2__ResponseStructure data members, use only after ns2__ResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ResponseStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractItemStructure is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for an Activity.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractItemStructure operations:
/// - ns2__AbstractItemStructure* soap_new_ns2__AbstractItemStructure(soap*) allocate and default initialize
/// - ns2__AbstractItemStructure* soap_new_ns2__AbstractItemStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractItemStructure* soap_new_req_ns2__AbstractItemStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractItemStructure* soap_new_set_ns2__AbstractItemStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractItemStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractItemStructure(soap*, ns2__AbstractItemStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractItemStructure(soap*, ns2__AbstractItemStructure*) serialize to a stream
/// - ns2__AbstractItemStructure* ns2__AbstractItemStructure::soap_dup(soap*) returns deep copy of ns2__AbstractItemStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractItemStructure::soap_del() deep deletes ns2__AbstractItemStructure data members, use only after ns2__AbstractItemStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractItemStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Capabilities of StopMonitopring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractCapabilitiesStructure operations:
/// - ns2__AbstractCapabilitiesStructure* soap_new_ns2__AbstractCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__AbstractCapabilitiesStructure* soap_new_ns2__AbstractCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractCapabilitiesStructure* soap_new_req_ns2__AbstractCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractCapabilitiesStructure* soap_new_set_ns2__AbstractCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractCapabilitiesStructure(soap*, ns2__AbstractCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractCapabilitiesStructure(soap*, ns2__AbstractCapabilitiesStructure*) serialize to a stream
/// - ns2__AbstractCapabilitiesStructure* ns2__AbstractCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__AbstractCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractCapabilitiesStructure::soap_del() deep deletes ns2__AbstractCapabilitiesStructure data members, use only after ns2__AbstractCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractCapabilitiesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Common Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__CapabilityGeneralInteractionStructure operations:
/// - ns2__CapabilityGeneralInteractionStructure* soap_new_ns2__CapabilityGeneralInteractionStructure(soap*) allocate and default initialize
/// - ns2__CapabilityGeneralInteractionStructure* soap_new_ns2__CapabilityGeneralInteractionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CapabilityGeneralInteractionStructure* soap_new_req_ns2__CapabilityGeneralInteractionStructure(soap*, ...) allocate, set required members
/// - ns2__CapabilityGeneralInteractionStructure* soap_new_set_ns2__CapabilityGeneralInteractionStructure(soap*, ...) allocate, set all public members
/// - ns2__CapabilityGeneralInteractionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CapabilityGeneralInteractionStructure(soap*, ns2__CapabilityGeneralInteractionStructure*) deserialize from a stream
/// - int soap_write_ns2__CapabilityGeneralInteractionStructure(soap*, ns2__CapabilityGeneralInteractionStructure*) serialize to a stream
/// - ns2__CapabilityGeneralInteractionStructure* ns2__CapabilityGeneralInteractionStructure::soap_dup(soap*) returns deep copy of ns2__CapabilityGeneralInteractionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CapabilityGeneralInteractionStructure::soap_del() deep deletes ns2__CapabilityGeneralInteractionStructure data members, use only after ns2__CapabilityGeneralInteractionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CapabilityGeneralInteractionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Interaction capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__CapabilityGeneralInteractionStructure_Interaction operations:
/// - _ns2__CapabilityGeneralInteractionStructure_Interaction* soap_new__ns2__CapabilityGeneralInteractionStructure_Interaction(soap*) allocate and default initialize
/// - _ns2__CapabilityGeneralInteractionStructure_Interaction* soap_new__ns2__CapabilityGeneralInteractionStructure_Interaction(soap*, int num) allocate array and default initialize values
/// - _ns2__CapabilityGeneralInteractionStructure_Interaction* soap_new_req__ns2__CapabilityGeneralInteractionStructure_Interaction(soap*, ...) allocate, set required members
/// - _ns2__CapabilityGeneralInteractionStructure_Interaction* soap_new_set__ns2__CapabilityGeneralInteractionStructure_Interaction(soap*, ...) allocate, set all public members
/// - _ns2__CapabilityGeneralInteractionStructure_Interaction::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CapabilityGeneralInteractionStructure_Interaction(soap*, _ns2__CapabilityGeneralInteractionStructure_Interaction*) deserialize from a stream
/// - int soap_write__ns2__CapabilityGeneralInteractionStructure_Interaction(soap*, _ns2__CapabilityGeneralInteractionStructure_Interaction*) serialize to a stream
/// - _ns2__CapabilityGeneralInteractionStructure_Interaction* _ns2__CapabilityGeneralInteractionStructure_Interaction::soap_dup(soap*) returns deep copy of _ns2__CapabilityGeneralInteractionStructure_Interaction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CapabilityGeneralInteractionStructure_Interaction::soap_del() deep deletes _ns2__CapabilityGeneralInteractionStructure_Interaction data members, use only after _ns2__CapabilityGeneralInteractionStructure_Interaction::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__CapabilityGeneralInteractionStructure_Interaction
    {
/// <PRE><BLOCKQUOTE>
///   Whether the service supports Request Response Interaction. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether the service supports Publish Subscribe Interaction. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                    Interaction                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Delivery capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__CapabilityGeneralInteractionStructure_Delivery operations:
/// - _ns2__CapabilityGeneralInteractionStructure_Delivery* soap_new__ns2__CapabilityGeneralInteractionStructure_Delivery(soap*) allocate and default initialize
/// - _ns2__CapabilityGeneralInteractionStructure_Delivery* soap_new__ns2__CapabilityGeneralInteractionStructure_Delivery(soap*, int num) allocate array and default initialize values
/// - _ns2__CapabilityGeneralInteractionStructure_Delivery* soap_new_req__ns2__CapabilityGeneralInteractionStructure_Delivery(soap*, ...) allocate, set required members
/// - _ns2__CapabilityGeneralInteractionStructure_Delivery* soap_new_set__ns2__CapabilityGeneralInteractionStructure_Delivery(soap*, ...) allocate, set all public members
/// - _ns2__CapabilityGeneralInteractionStructure_Delivery::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CapabilityGeneralInteractionStructure_Delivery(soap*, _ns2__CapabilityGeneralInteractionStructure_Delivery*) deserialize from a stream
/// - int soap_write__ns2__CapabilityGeneralInteractionStructure_Delivery(soap*, _ns2__CapabilityGeneralInteractionStructure_Delivery*) serialize to a stream
/// - _ns2__CapabilityGeneralInteractionStructure_Delivery* _ns2__CapabilityGeneralInteractionStructure_Delivery::soap_dup(soap*) returns deep copy of _ns2__CapabilityGeneralInteractionStructure_Delivery, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CapabilityGeneralInteractionStructure_Delivery::soap_del() deep deletes _ns2__CapabilityGeneralInteractionStructure_Delivery data members, use only after _ns2__CapabilityGeneralInteractionStructure_Delivery::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__CapabilityGeneralInteractionStructure_Delivery
    {
/// <PRE><BLOCKQUOTE>
///   Whether the service supports Direct delivery.
/// </BLOCKQUOTE></PRE>
/// Element "DirectDelivery" of XSD type xs:boolean.
    bool                                 DirectDelivery                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Whether the service supports Fetched delivery (VDV Style)
/// </BLOCKQUOTE></PRE>
/// Element "FetchedDelivery" of XSD type xs:boolean.
    bool                                 FetchedDelivery                1;	///< Required element.
    }                                    Delivery                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Whether the service supports multiple part despatch with MoreData flag. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "MultipartDespatch" of XSD type xs:boolean.
    bool                                 MultipartDespatch              0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether the service supports multiple Subscriber Filters. Default is ' false'.
/// </BLOCKQUOTE></PRE>
/// Element "MultipleSubscriberFilter" of XSD type xs:boolean.
    bool                                 MultipleSubscriberFilter       0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the service supports Delivery confirm.
/// </BLOCKQUOTE></PRE>
/// Element "HasConfirmDelivery" of XSD type xs:boolean.
    bool                                 HasConfirmDelivery             0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the service has a heartbeat message. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasHeartbeat" of XSD type xs:boolean.
    bool                                 HasHeartbeat                   0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether VisitNumber can be used as a strict order number within JOURNEY PATTERN. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "VisitNumberisOrder" of XSD type xs:boolean.
    bool                                 VisitNumberisOrder             0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Common Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__CapabilityRequestPolicyStructure operations:
/// - ns2__CapabilityRequestPolicyStructure* soap_new_ns2__CapabilityRequestPolicyStructure(soap*) allocate and default initialize
/// - ns2__CapabilityRequestPolicyStructure* soap_new_ns2__CapabilityRequestPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CapabilityRequestPolicyStructure* soap_new_req_ns2__CapabilityRequestPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__CapabilityRequestPolicyStructure* soap_new_set_ns2__CapabilityRequestPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__CapabilityRequestPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CapabilityRequestPolicyStructure(soap*, ns2__CapabilityRequestPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__CapabilityRequestPolicyStructure(soap*, ns2__CapabilityRequestPolicyStructure*) serialize to a stream
/// - ns2__CapabilityRequestPolicyStructure* ns2__CapabilityRequestPolicyStructure::soap_dup(soap*) returns deep copy of ns2__CapabilityRequestPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CapabilityRequestPolicyStructure::soap_del() deep deletes ns2__CapabilityRequestPolicyStructure data members, use only after ns2__CapabilityRequestPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CapabilityRequestPolicyStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_CapabilityRequestPolicyStructure;	///< Union _ns2__union_CapabilityRequestPolicyStructure selector: set to SOAP_UNION__ns2__union_CapabilityRequestPolicyStructure_<fieldname>
    union _ns2__union_CapabilityRequestPolicyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_CapabilityRequestPolicyStructure;
//  END OF CHOICE
};

/// @brief "http://www.siri.org.uk/siri":CapabilitySubscriptionPolicyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Common Subscription capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__CapabilitySubscriptionPolicyStructure operations:
/// - ns2__CapabilitySubscriptionPolicyStructure* soap_new_ns2__CapabilitySubscriptionPolicyStructure(soap*) allocate and default initialize
/// - ns2__CapabilitySubscriptionPolicyStructure* soap_new_ns2__CapabilitySubscriptionPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CapabilitySubscriptionPolicyStructure* soap_new_req_ns2__CapabilitySubscriptionPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__CapabilitySubscriptionPolicyStructure* soap_new_set_ns2__CapabilitySubscriptionPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__CapabilitySubscriptionPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CapabilitySubscriptionPolicyStructure(soap*, ns2__CapabilitySubscriptionPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__CapabilitySubscriptionPolicyStructure(soap*, ns2__CapabilitySubscriptionPolicyStructure*) serialize to a stream
/// - ns2__CapabilitySubscriptionPolicyStructure* ns2__CapabilitySubscriptionPolicyStructure::soap_dup(soap*) returns deep copy of ns2__CapabilitySubscriptionPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CapabilitySubscriptionPolicyStructure::soap_del() deep deletes ns2__CapabilitySubscriptionPolicyStructure data members, use only after ns2__CapabilitySubscriptionPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CapabilitySubscriptionPolicyStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Whether incremental updates can be specified for updates Default is ' true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasIncrementalUpdates" of XSD type xs:boolean.
    bool                                 HasIncrementalUpdates          0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether change threshold can be specified for updates. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasChangeSensitivity" of XSD type xs:boolean.
    bool                                 HasChangeSensitivity           0 = true;	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":TransportDescriptionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for implementation structure.
/// </BLOCKQUOTE></PRE>
/// class ns2__TransportDescriptionStructure operations:
/// - ns2__TransportDescriptionStructure* soap_new_ns2__TransportDescriptionStructure(soap*) allocate and default initialize
/// - ns2__TransportDescriptionStructure* soap_new_ns2__TransportDescriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TransportDescriptionStructure* soap_new_req_ns2__TransportDescriptionStructure(soap*, ...) allocate, set required members
/// - ns2__TransportDescriptionStructure* soap_new_set_ns2__TransportDescriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__TransportDescriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TransportDescriptionStructure(soap*, ns2__TransportDescriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__TransportDescriptionStructure(soap*, ns2__TransportDescriptionStructure*) serialize to a stream
/// - ns2__TransportDescriptionStructure* ns2__TransportDescriptionStructure::soap_dup(soap*) returns deep copy of ns2__TransportDescriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TransportDescriptionStructure::soap_del() deep deletes ns2__TransportDescriptionStructure data members, use only after ns2__TransportDescriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TransportDescriptionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Communications Transport method used to exchange messages. Default is 'httpPost'.
/// </BLOCKQUOTE></PRE>
/// Element "CommunicationsTransportMethod" of XSD type "http://www.siri.org.uk/siri":CommunicationsTransportMethodEnumeration.
    enum ns2__CommunicationsTransportMethodEnumeration  CommunicationsTransportMethod  0 = ns2__CommunicationsTransportMethodEnumeration__httpPost;	///< Default element value="httpPost".
/// <PRE><BLOCKQUOTE>
///   Compression method used to compress messages for transmission. Default is 'none'.
/// </BLOCKQUOTE></PRE>
/// Element "CompressionMethod" of XSD type "http://www.siri.org.uk/siri":CompressionMethodEnumeration.
    enum ns2__CompressionMethodEnumeration  CompressionMethod              0 = ns2__CompressionMethodEnumeration__none;	///< Default element value="none".
};

/// @brief "http://www.siri.org.uk/siri":ExtensionsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Extensions to schema. Wraps an 'any' tag to ensure decidability.
/// </BLOCKQUOTE></PRE>
/// class ns2__ExtensionsStructure operations:
/// - ns2__ExtensionsStructure* soap_new_ns2__ExtensionsStructure(soap*) allocate and default initialize
/// - ns2__ExtensionsStructure* soap_new_ns2__ExtensionsStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ExtensionsStructure* soap_new_req_ns2__ExtensionsStructure(soap*, ...) allocate, set required members
/// - ns2__ExtensionsStructure* soap_new_set_ns2__ExtensionsStructure(soap*, ...) allocate, set all public members
/// - ns2__ExtensionsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ExtensionsStructure(soap*, ns2__ExtensionsStructure*) deserialize from a stream
/// - int soap_write_ns2__ExtensionsStructure(soap*, ns2__ExtensionsStructure*) serialize to a stream
/// - ns2__ExtensionsStructure* ns2__ExtensionsStructure::soap_dup(soap*) returns deep copy of ns2__ExtensionsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ExtensionsStructure::soap_del() deep deletes ns2__ExtensionsStructure data members, use only after ns2__ExtensionsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ExtensionsStructure : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.siri.org.uk/siri":LocationStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for gepspatial Position of a point. May be expressed in concrete WGS 84 Coordinates or any gml compatible point coordinates format.
/// </BLOCKQUOTE></PRE>
/// class ns2__LocationStructure operations:
/// - ns2__LocationStructure* soap_new_ns2__LocationStructure(soap*) allocate and default initialize
/// - ns2__LocationStructure* soap_new_ns2__LocationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__LocationStructure* soap_new_req_ns2__LocationStructure(soap*, ...) allocate, set required members
/// - ns2__LocationStructure* soap_new_set_ns2__LocationStructure(soap*, ...) allocate, set all public members
/// - ns2__LocationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__LocationStructure(soap*, ns2__LocationStructure*) deserialize from a stream
/// - int soap_write_ns2__LocationStructure(soap*, ns2__LocationStructure*) serialize to a stream
/// - ns2__LocationStructure* ns2__LocationStructure::soap_dup(soap*) returns deep copy of ns2__LocationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__LocationStructure::soap_del() deep deletes ns2__LocationStructure data members, use only after ns2__LocationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__LocationStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Longitude from Greenwich Meridian. -180 (East) to +180 (West). Decimal degrees. eg 2.356
/// </BLOCKQUOTE></PRE>
/// Element "Longitude" of XSD type "http://www.siri.org.uk/siri":LongitudeType.
    ns2__LongitudeType*                  Longitude                      nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Latitude from equator. -90 (South) to +90 (North). Decimal degrees. eg 56.356
/// </BLOCKQUOTE></PRE>
/// Element "Latitude" of XSD type "http://www.siri.org.uk/siri":LatitudeType.
    ns2__LatitudeType*                   Latitude                       nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
/// <PRE><BLOCKQUOTE>
///   Coordinates of points in a GML compatibe format, as indicated by srsName attribute.
/// </BLOCKQUOTE></PRE>
/// Element "Coordinates" of XSD type "http://www.siri.org.uk/siri":CoordinatesStructure.
    ns2__CoordinatesStructure*           Coordinates                    nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Precision for point measurement. In meters.
/// </BLOCKQUOTE></PRE>
/// Element "Precision" of XSD type "http://www.siri.org.uk/siri":DistanceType.
    ns2__DistanceType*                   Precision                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of POINT.
/// </BLOCKQUOTE></PRE>
/// Attribute "id" of XSD type xs:NMTOKEN.
   @xsd__NMTOKEN*                        id                             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   identifier of data reference system for geocodes if point is specified as gml compatible Coordinates. A gml value. If not specified taken from system configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "srsName" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
   @ns2__SrsNameType*                    srsName                        0;	///< Optional attribute.
};

/// @brief "http://www.siri.org.uk/siri":BoundingBoxStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Defines a bounding box using two corner points. GML terminology. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__BoundingBoxStructure operations:
/// - ns2__BoundingBoxStructure* soap_new_ns2__BoundingBoxStructure(soap*) allocate and default initialize
/// - ns2__BoundingBoxStructure* soap_new_ns2__BoundingBoxStructure(soap*, int num) allocate array and default initialize values
/// - ns2__BoundingBoxStructure* soap_new_req_ns2__BoundingBoxStructure(soap*, ...) allocate, set required members
/// - ns2__BoundingBoxStructure* soap_new_set_ns2__BoundingBoxStructure(soap*, ...) allocate, set all public members
/// - ns2__BoundingBoxStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__BoundingBoxStructure(soap*, ns2__BoundingBoxStructure*) deserialize from a stream
/// - int soap_write_ns2__BoundingBoxStructure(soap*, ns2__BoundingBoxStructure*) serialize to a stream
/// - ns2__BoundingBoxStructure* ns2__BoundingBoxStructure::soap_dup(soap*) returns deep copy of ns2__BoundingBoxStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BoundingBoxStructure::soap_del() deep deletes ns2__BoundingBoxStructure data members, use only after ns2__BoundingBoxStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BoundingBoxStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A geospatial point. Upper Left corner..
/// </BLOCKQUOTE></PRE>
/// Element "UpperLeft" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              UpperLeft                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A geospatial point. Lower right corner..
/// </BLOCKQUOTE></PRE>
/// Element "LowerRight" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              LowerRight                     1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":LineShapeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Defines a line shape +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__LineShapeStructure operations:
/// - ns2__LineShapeStructure* soap_new_ns2__LineShapeStructure(soap*) allocate and default initialize
/// - ns2__LineShapeStructure* soap_new_ns2__LineShapeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__LineShapeStructure* soap_new_req_ns2__LineShapeStructure(soap*, ...) allocate, set required members
/// - ns2__LineShapeStructure* soap_new_set_ns2__LineShapeStructure(soap*, ...) allocate, set all public members
/// - ns2__LineShapeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__LineShapeStructure(soap*, ns2__LineShapeStructure*) deserialize from a stream
/// - int soap_write_ns2__LineShapeStructure(soap*, ns2__LineShapeStructure*) serialize to a stream
/// - ns2__LineShapeStructure* ns2__LineShapeStructure::soap_dup(soap*) returns deep copy of ns2__LineShapeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__LineShapeStructure::soap_del() deep deletes ns2__LineShapeStructure data members, use only after ns2__LineShapeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__LineShapeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A geospatial point. +SIRI v2.0 .
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__LocationStructure* of length 2..unbounded.
    std::vector<ns2__LocationStructure*> Point                          2;
};

/// @brief "http://www.siri.org.uk/siri":ErrorConditionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for RequestErrorCondition
/// </BLOCKQUOTE></PRE>
/// class ns2__ErrorConditionStructure operations:
/// - ns2__ErrorConditionStructure* soap_new_ns2__ErrorConditionStructure(soap*) allocate and default initialize
/// - ns2__ErrorConditionStructure* soap_new_ns2__ErrorConditionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ErrorConditionStructure* soap_new_req_ns2__ErrorConditionStructure(soap*, ...) allocate, set required members
/// - ns2__ErrorConditionStructure* soap_new_set_ns2__ErrorConditionStructure(soap*, ...) allocate, set all public members
/// - ns2__ErrorConditionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ErrorConditionStructure(soap*, ns2__ErrorConditionStructure*) deserialize from a stream
/// - int soap_write_ns2__ErrorConditionStructure(soap*, ns2__ErrorConditionStructure*) serialize to a stream
/// - ns2__ErrorConditionStructure* ns2__ErrorConditionStructure::soap_dup(soap*) returns deep copy of ns2__ErrorConditionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ErrorConditionStructure::soap_del() deep deletes ns2__ErrorConditionStructure data members, use only after ns2__ErrorConditionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ErrorConditionStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ApplicationErrorGroup">
/// <PRE><BLOCKQUOTE>
///   Errors that may arise in the execution of a request.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ErrorConditionStructure_;	///< Union _ns2__union_ErrorConditionStructure_ selector: set to SOAP_UNION__ns2__union_ErrorConditionStructure__<fieldname>
    union _ns2__union_ErrorConditionStructure_
    {
/// <PRE><BLOCKQUOTE>
///   Error: Functional service is not available to use (but it is still capable of giving this response).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceNotAvailableError.
    ns2__ServiceNotAvailableErrorStructure*  ServiceNotAvailableError       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Service does not support the requested capability.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilityNotSupportedError.
    ns2__CapabilityNotSupportedErrorStructure*  CapabilityNotSupportedError    nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Requestor is not authorised to the service or data requested.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AccessNotAllowedError.
    ns2__AccessNotAllowedErrorStructure*  AccessNotAllowedError          nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contains references to identifiers that are not known. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InvalidDataReferencesError.
    ns2__InvalidDataReferencesErrorStructure*  InvalidDataReferencesError     nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Data period or subscription period is outside of period covered by service. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Error: Data period or subscription period is outside of period covered by service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":BeyondDataHorizon.
    ns2__BeyondDataHorizonErrorStructure*  BeyondDataHorizon              nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Valid request was made but service does not hold any data for the requested topic. expression.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":NoInfoForTopicError.
    ns2__NoInfoForTopicErrorStructure*   NoInfoForTopicError            nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contained parameters that were not supported by the producer. A response has been provided but some parameters have been ignored. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ParametersIgnoredError.
    ns2__ParametersIgnoredErrorStructure*  ParametersIgnoredError         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored.. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownExtensionsError.
    ns2__UnknownExtensionsErrorStructure*  UnknownExtensionsError         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Valid request was made but request would exceed the permitted resource usage of the client.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowedResourceUsageExceededError.
    ns2__AllowedResourceUsageExceededErrorStructure*  AllowedResourceUsageExceededError nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ErrorConditionStructure_;
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ErrorConditionElementStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Standard ErrorConditions for Service request.
/// </BLOCKQUOTE></PRE>
/// class ns2__ErrorConditionElementStructure operations:
/// - ns2__ErrorConditionElementStructure* soap_new_ns2__ErrorConditionElementStructure(soap*) allocate and default initialize
/// - ns2__ErrorConditionElementStructure* soap_new_ns2__ErrorConditionElementStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ErrorConditionElementStructure* soap_new_req_ns2__ErrorConditionElementStructure(soap*, ...) allocate, set required members
/// - ns2__ErrorConditionElementStructure* soap_new_set_ns2__ErrorConditionElementStructure(soap*, ...) allocate, set all public members
/// - ns2__ErrorConditionElementStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ErrorConditionElementStructure(soap*, ns2__ErrorConditionElementStructure*) deserialize from a stream
/// - int soap_write_ns2__ErrorConditionElementStructure(soap*, ns2__ErrorConditionElementStructure*) serialize to a stream
/// - ns2__ErrorConditionElementStructure* ns2__ErrorConditionElementStructure::soap_dup(soap*) returns deep copy of ns2__ErrorConditionElementStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ErrorConditionElementStructure::soap_del() deep deletes ns2__ErrorConditionElementStructure data members, use only after ns2__ErrorConditionElementStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ErrorConditionElementStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ServiceRequestErrorGroup">
/// <PRE><BLOCKQUOTE>
///   Errors that may arise in the execution of a request.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="DistributionErrorGroup">
/// <PRE><BLOCKQUOTE>
///   Errors that may arise in the execution of a delegated distribution request. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ErrorConditionElementStructure__;	///< Union _ns2__union_ErrorConditionElementStructure__ selector: set to SOAP_UNION__ns2__union_ErrorConditionElementStructure___<fieldname>
    union _ns2__union_ErrorConditionElementStructure__
    {
/// <PRE><BLOCKQUOTE>
///   Error:Recipient of a message to be distributed is not available. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnapprovedKeyAccessError.
    ns2__UnapprovedKeyAccessStructure*   UnapprovedKeyAccessError       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Recipient for a message to be distributed is unknown. I.e. delegatior is found, but +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Error: Recipient for a message to be distributed is unknown. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownParticipantError.
    ns2__UnknownParticipantErrorStructure*  UnknownParticipantError        nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Recipient for a message to be distributed is unknown. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownEndpointError.
    ns2__UnknownEndpointErrorStructure*  UnknownEndpointError           nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error:Endpoint to which a message is to be distributed did not allow access by the cloient. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EndpointDeniedAccessError.
    ns2__EndpointDeniedAccessStructure*  EndpointDeniedAccessError      nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error:Recipient of a message to be distributed is not available. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EndpointNotAvailableAccessError.
    ns2__EndpointNotAvailableAccessStructure*  EndpointNotAvailableAccessError nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ErrorConditionElementStructure__;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ApplicationErrorGroup">
/// <PRE><BLOCKQUOTE>
///   Errors that may arise in the execution of a request.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ErrorConditionElementStructure___;	///< Union _ns2__union_ErrorConditionElementStructure___ selector: set to SOAP_UNION__ns2__union_ErrorConditionElementStructure____<fieldname>
    union _ns2__union_ErrorConditionElementStructure___
    {
/// <PRE><BLOCKQUOTE>
///   Error: Functional service is not available to use (but it is still capable of giving this response).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceNotAvailableError.
    ns2__ServiceNotAvailableErrorStructure*  ServiceNotAvailableError       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Service does not support the requested capability.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilityNotSupportedError.
    ns2__CapabilityNotSupportedErrorStructure*  CapabilityNotSupportedError    nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Requestor is not authorised to the service or data requested.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AccessNotAllowedError.
    ns2__AccessNotAllowedErrorStructure*  AccessNotAllowedError          nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contains references to identifiers that are not known. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InvalidDataReferencesError.
    ns2__InvalidDataReferencesErrorStructure*  InvalidDataReferencesError     nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Data period or subscription period is outside of period covered by service. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Error: Data period or subscription period is outside of period covered by service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":BeyondDataHorizon.
    ns2__BeyondDataHorizonErrorStructure*  BeyondDataHorizon              nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Valid request was made but service does not hold any data for the requested topic. expression.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":NoInfoForTopicError.
    ns2__NoInfoForTopicErrorStructure*   NoInfoForTopicError            nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contained parameters that were not supported by the producer. A response has been provided but some parameters have been ignored. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ParametersIgnoredError.
    ns2__ParametersIgnoredErrorStructure*  ParametersIgnoredError         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored.. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownExtensionsError.
    ns2__UnknownExtensionsErrorStructure*  UnknownExtensionsError         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Valid request was made but request would exceed the permitted resource usage of the client.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowedResourceUsageExceededError.
    ns2__AllowedResourceUsageExceededErrorStructure*  AllowedResourceUsageExceededError nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ErrorConditionElementStructure___;
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Error: Subscription not found.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownSubscriptionError.
    ns2__UnknownSubscriptionErrorStructure*  UnknownSubscriptionError       nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ErrorCodeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error Code.
/// </BLOCKQUOTE></PRE>
/// class ns2__ErrorCodeStructure operations:
/// - ns2__ErrorCodeStructure* soap_new_ns2__ErrorCodeStructure(soap*) allocate and default initialize
/// - ns2__ErrorCodeStructure* soap_new_ns2__ErrorCodeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ErrorCodeStructure* soap_new_req_ns2__ErrorCodeStructure(soap*, ...) allocate, set required members
/// - ns2__ErrorCodeStructure* soap_new_set_ns2__ErrorCodeStructure(soap*, ...) allocate, set all public members
/// - ns2__ErrorCodeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ErrorCodeStructure(soap*, ns2__ErrorCodeStructure*) deserialize from a stream
/// - int soap_write_ns2__ErrorCodeStructure(soap*, ns2__ErrorCodeStructure*) serialize to a stream
/// - ns2__ErrorCodeStructure* ns2__ErrorCodeStructure::soap_dup(soap*) returns deep copy of ns2__ErrorCodeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ErrorCodeStructure::soap_del() deep deletes ns2__ErrorCodeStructure data members, use only after ns2__ErrorCodeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ErrorCodeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
};

/// @brief "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Standard ErrorConditiosn for Service request.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceDeliveryErrorConditionStructure operations:
/// - ns2__ServiceDeliveryErrorConditionStructure* soap_new_ns2__ServiceDeliveryErrorConditionStructure(soap*) allocate and default initialize
/// - ns2__ServiceDeliveryErrorConditionStructure* soap_new_ns2__ServiceDeliveryErrorConditionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceDeliveryErrorConditionStructure* soap_new_req_ns2__ServiceDeliveryErrorConditionStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceDeliveryErrorConditionStructure* soap_new_set_ns2__ServiceDeliveryErrorConditionStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceDeliveryErrorConditionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceDeliveryErrorConditionStructure(soap*, ns2__ServiceDeliveryErrorConditionStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceDeliveryErrorConditionStructure(soap*, ns2__ServiceDeliveryErrorConditionStructure*) serialize to a stream
/// - ns2__ServiceDeliveryErrorConditionStructure* ns2__ServiceDeliveryErrorConditionStructure::soap_dup(soap*) returns deep copy of ns2__ServiceDeliveryErrorConditionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceDeliveryErrorConditionStructure::soap_del() deep deletes ns2__ServiceDeliveryErrorConditionStructure data members, use only after ns2__ServiceDeliveryErrorConditionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceDeliveryErrorConditionStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ServiceRequestErrorGroup">
/// <PRE><BLOCKQUOTE>
///   Errors that may arise in the execution of a request.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="DistributionErrorGroup">
/// <PRE><BLOCKQUOTE>
///   Errors that may arise in the execution of a delegated distribution request. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceDeliveryErrorConditionStructure__;	///< Union _ns2__union_ServiceDeliveryErrorConditionStructure__ selector: set to SOAP_UNION__ns2__union_ServiceDeliveryErrorConditionStructure___<fieldname>
    union _ns2__union_ServiceDeliveryErrorConditionStructure__
    {
/// <PRE><BLOCKQUOTE>
///   Error:Recipient of a message to be distributed is not available. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnapprovedKeyAccessError.
    ns2__UnapprovedKeyAccessStructure*   UnapprovedKeyAccessError       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Recipient for a message to be distributed is unknown. I.e. delegatior is found, but +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Error: Recipient for a message to be distributed is unknown. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownParticipantError.
    ns2__UnknownParticipantErrorStructure*  UnknownParticipantError        nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Recipient for a message to be distributed is unknown. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownEndpointError.
    ns2__UnknownEndpointErrorStructure*  UnknownEndpointError           nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error:Endpoint to which a message is to be distributed did not allow access by the cloient. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EndpointDeniedAccessError.
    ns2__EndpointDeniedAccessStructure*  EndpointDeniedAccessError      nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error:Recipient of a message to be distributed is not available. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EndpointNotAvailableAccessError.
    ns2__EndpointNotAvailableAccessStructure*  EndpointNotAvailableAccessError nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ServiceDeliveryErrorConditionStructure__;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ApplicationErrorGroup">
/// <PRE><BLOCKQUOTE>
///   Errors that may arise in the execution of a request.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceDeliveryErrorConditionStructure___;	///< Union _ns2__union_ServiceDeliveryErrorConditionStructure___ selector: set to SOAP_UNION__ns2__union_ServiceDeliveryErrorConditionStructure____<fieldname>
    union _ns2__union_ServiceDeliveryErrorConditionStructure___
    {
/// <PRE><BLOCKQUOTE>
///   Error: Functional service is not available to use (but it is still capable of giving this response).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceNotAvailableError.
    ns2__ServiceNotAvailableErrorStructure*  ServiceNotAvailableError       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Service does not support the requested capability.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilityNotSupportedError.
    ns2__CapabilityNotSupportedErrorStructure*  CapabilityNotSupportedError    nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Requestor is not authorised to the service or data requested.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AccessNotAllowedError.
    ns2__AccessNotAllowedErrorStructure*  AccessNotAllowedError          nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contains references to identifiers that are not known. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InvalidDataReferencesError.
    ns2__InvalidDataReferencesErrorStructure*  InvalidDataReferencesError     nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Data period or subscription period is outside of period covered by service. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Error: Data period or subscription period is outside of period covered by service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":BeyondDataHorizon.
    ns2__BeyondDataHorizonErrorStructure*  BeyondDataHorizon              nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Valid request was made but service does not hold any data for the requested topic. expression.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":NoInfoForTopicError.
    ns2__NoInfoForTopicErrorStructure*   NoInfoForTopicError            nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contained parameters that were not supported by the producer. A response has been provided but some parameters have been ignored. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ParametersIgnoredError.
    ns2__ParametersIgnoredErrorStructure*  ParametersIgnoredError         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored.. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownExtensionsError.
    ns2__UnknownExtensionsErrorStructure*  UnknownExtensionsError         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Valid request was made but request would exceed the permitted resource usage of the client.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowedResourceUsageExceededError.
    ns2__AllowedResourceUsageExceededErrorStructure*  AllowedResourceUsageExceededError nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ServiceDeliveryErrorConditionStructure___;
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SiriSchema is a complexType.
///
/// class ns2__SiriSchema operations:
/// - ns2__SiriSchema* soap_new_ns2__SiriSchema(soap*) allocate and default initialize
/// - ns2__SiriSchema* soap_new_ns2__SiriSchema(soap*, int num) allocate array and default initialize values
/// - ns2__SiriSchema* soap_new_req_ns2__SiriSchema(soap*, ...) allocate, set required members
/// - ns2__SiriSchema* soap_new_set_ns2__SiriSchema(soap*, ...) allocate, set all public members
/// - ns2__SiriSchema::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SiriSchema(soap*, ns2__SiriSchema*) deserialize from a stream
/// - int soap_write_ns2__SiriSchema(soap*, ns2__SiriSchema*) serialize to a stream
/// - ns2__SiriSchema* ns2__SiriSchema::soap_dup(soap*) returns deep copy of ns2__SiriSchema, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SiriSchema::soap_del() deep deletes ns2__SiriSchema data members, use only after ns2__SiriSchema::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SiriSchema : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="RequestGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI All Requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ServiceRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Requests for service provision.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSchema__          ;	///< Union _ns2__union_SiriSchema__ selector: set to SOAP_UNION__ns2__union_SiriSchema___<fieldname>
    union _ns2__union_SiriSchema__
    {
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer for immediate delivery of data. Answered with a ServiceDelivery (or a DataReadyRequest)
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceRequest.
    _ns2__ServiceRequest*                ServiceRequest                 nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Producer for a subscription. Answered with a SubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SubscriptionRequest.
    _ns2__SubscriptionRequest*           SubscriptionRequest            nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Subscription Manager to terminate a subscription. Answered with a TerminateSubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TerminateSubscriptionRequest.
    ns2__TerminateSubscriptionRequestStructure*  TerminateSubscriptionRequest   nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SiriSchema__            ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryRequestGroup">
/// <PRE><BLOCKQUOTE>
///   General requests for fetched data delivery.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSchema___         ;	///< Union _ns2__union_SiriSchema___ selector: set to SOAP_UNION__ns2__union_SiriSchema____<fieldname>
    union _ns2__union_SiriSchema___
    {
/// <PRE><BLOCKQUOTE>
///   Request from Producer to Consumer to notify that data update is ready to fetch. Answered with a DataReadyResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DataReadyNotification.
    ns2__DataReadyRequestStructure*      DataReadyNotification          nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer to fetch update previously notified by a Data ready message. Answered with a Service Delivery.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DataSupplyRequest.
    ns2__DataSupplyRequestStructure*     DataSupplyRequest              nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SiriSchema___           ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StatusRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Requests about system status.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSchema____        ;	///< Union _ns2__union_SiriSchema____ selector: set to SOAP_UNION__ns2__union_SiriSchema_____<fieldname>
    union _ns2__union_SiriSchema____
    {
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer to check whether services is working. Answers a CheckStatusRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckStatusRequest.
    ns2__CheckStatusRequestStructure*    CheckStatusRequest             nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Notification from Producer to Consumer to indicate that the service is running normally.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":HeartbeatNotification.
    ns2__HeartbeatNotificationStructure*  HeartbeatNotification          nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SiriSchema____          ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SiriDiscoveryRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Requests for reference data for use in SIRI Functional Service requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// <PRE><BLOCKQUOTE>
///   Requests a the current capabilities of the server. Answred with a CpabailitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilitiesRequest.
    ns2__CapabilitiesRequestStructure*   CapabilitiesRequest            nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  BEGIN GROUP <xs:group name="SiriReferenceDiscoveryRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Requests for reference data for use in service requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSchema______      ;	///< Union _ns2__union_SiriSchema______ selector: set to SOAP_UNION__ns2__union_SiriSchema_______<fieldname>
    union _ns2__union_SiriSchema______
    {
/// <PRE><BLOCKQUOTE>
///   Requests a list of the STOP POINTs and places covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointsRequest.
    _ns2__StopPointsRequest*             StopPointsRequest              nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the LINEs covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinesRequest.
    ns2__LinesDiscoveryRequestStructure*  LinesRequest                   nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Service Features covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceFeaturesRequest.
    _ns2__ServiceFeaturesRequest*        ServiceFeaturesRequest         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Product Categories covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductCategoriesRequest.
    ns2__ProductCategoriesDiscoveryRequestStructure*  ProductCategoriesRequest       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Vehicle Features covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleFeaturesRequest.
    ns2__VehicleFeaturesRequestStructure*  VehicleFeaturesRequest         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Info Channels covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InfoChannelRequest.
    ns2__InfoChannelDiscoveryRequestStructure*  InfoChannelRequest             nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Facilities covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityRequest.
    ns2__FacilityRequestStructure*       FacilityRequest                nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the CONNECTION LINKs covered by a Producer. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionLinksRequest.
    ns2__ConnectionLinksDiscoveryRequestStructure*  ConnectionLinksRequest         nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SiriSchema______        ;
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ResponseGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Service Responses.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ServiceResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Responses to requests other than deliveries and status information.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSchema________    ;	///< Union _ns2__union_SiriSchema________ selector: set to SOAP_UNION__ns2__union_SiriSchema_________<fieldname>
    union _ns2__union_SiriSchema________
    {
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to inform whether subscriptions have been created. Answers a previous SubscriptionRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SubscriptionResponse.
    ns2__SubscriptionResponseStructure*  SubscriptionResponse           nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Subscription Manager to terminate a subscription. Answered with a TerminateSubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TerminateSubscriptionResponse.
    ns2__TerminateSubscriptionResponseStructure*  TerminateSubscriptionResponse  nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SiriSchema________      ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Responses that deliver payload content.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSchema_________   ;	///< Union _ns2__union_SiriSchema_________ selector: set to SOAP_UNION__ns2__union_SiriSchema__________<fieldname>
    union _ns2__union_SiriSchema_________
    {
/// <PRE><BLOCKQUOTE>
///   Response from Consumer to Producer to acknowledge to Producer that a DataReadyRequest has been received.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DataReadyAcknowledgement.
    ns2__DataReadyResponseStructure*     DataReadyAcknowledgement       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to deliver payload data. Either answers a direct ServiceRequest, or asynchronously satisfies a subscription. May be sent directly in one step, or fetched in response to a DataSupply Request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceDelivery.
    _ns2__ServiceDelivery*               ServiceDelivery                nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Response from Consumer to Producer to acknowledge that data hase been received. Used as optioanl extra step if reliable delivery is needed. Answers a ServiceDelivery.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DataReceivedAcknowledgement.
    ns2__DataReceivedResponseStructure*  DataReceivedAcknowledgement    nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SiriSchema_________     ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StatusResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Responses that infrom about the service status.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSchema__________  ;	///< Union _ns2__union_SiriSchema__________ selector: set to SOAP_UNION__ns2__union_SiriSchema___________<fieldname>
    union _ns2__union_SiriSchema__________
    {
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to inform whether services is working. Answers a CheckStatusRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckStatusResponse.
    ns2__CheckStatusResponseStructure*   CheckStatusResponse            nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SiriSchema__________    ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SiriDiscoveryResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Responses with reference data for use in SIRI Functional Service requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// <PRE><BLOCKQUOTE>
///   Responses with the capabilities of an implementation. Answers a CapabilityRequest.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Responses with the capabilities of an implementation.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilitiesResponse.
    ns2__CapabilitiesResponseStructure*  CapabilitiesResponse           nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  BEGIN GROUP <xs:group name="SiriDiscoveryReferenceDeliveryGroup">
/// <PRE><BLOCKQUOTE>
///   Responses with reference data for use in service requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SiriSchema____________;	///< Union _ns2__union_SiriSchema____________ selector: set to SOAP_UNION__ns2__union_SiriSchema_____________<fieldname>
    union _ns2__union_SiriSchema____________
    {
/// <PRE><BLOCKQUOTE>
///   Returns basic details about the STOP POINTs/places covered by a service. Answers a StopPointsRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointsDelivery.
    ns2__StopPointsDeliveryStructure*    StopPointsDelivery             nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the LINEs covered by a web service. Answers a LINEsRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinesDelivery.
    ns2__LinesDeliveryStructure*         LinesDelivery                  nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the Product Categories covered by a service. Answers a ProductCategoriesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductCategoriesDelivery.
    ns2__ProductCategoriesDeliveryStructure*  ProductCategoriesDelivery      nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the SERVICE FEATUREs covered by a service. Answers a ServiceFeaturesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceFeaturesDelivery.
    ns2__ServiceFeaturesDeliveryStructure*  ServiceFeaturesDelivery        nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the Vehicle Features covered by a service. Answers a VehicleFeaturesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleFeaturesDelivery.
    ns2__VehicleFeaturesDeliveryStructure*  VehicleFeaturesDelivery        nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the Info Channels covered by a service. Answers a InfoChannelRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InfoChannelDelivery.
    ns2__InfoChannelDeliveryStructure*   InfoChannelDelivery            nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the Facilities covered by a service. Answers a StopPointsRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityDelivery.
    ns2__FacilityDeliveryStructure*      FacilityDelivery               nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the CONNECTION LINKs covered by a web service. Answers a LINEsRequest. +Siri v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionLinksDelivery.
    ns2__ConnectionLinksDeliveryStructure*  ConnectionLinksDelivery        nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SiriSchema____________  ;
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                    ;
//  END OF CHOICE
/// Attribute "version" of XSD type xs:NMTOKEN.
   @xsd__NMTOKEN                         version                        0 = "2.0";	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":AllFacilitiesFeatureStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Description of the features of any of the available facilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__AllFacilitiesFeatureStructure operations:
/// - ns2__AllFacilitiesFeatureStructure* soap_new_ns2__AllFacilitiesFeatureStructure(soap*) allocate and default initialize
/// - ns2__AllFacilitiesFeatureStructure* soap_new_ns2__AllFacilitiesFeatureStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AllFacilitiesFeatureStructure* soap_new_req_ns2__AllFacilitiesFeatureStructure(soap*, ...) allocate, set required members
/// - ns2__AllFacilitiesFeatureStructure* soap_new_set_ns2__AllFacilitiesFeatureStructure(soap*, ...) allocate, set all public members
/// - ns2__AllFacilitiesFeatureStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AllFacilitiesFeatureStructure(soap*, ns2__AllFacilitiesFeatureStructure*) deserialize from a stream
/// - int soap_write_ns2__AllFacilitiesFeatureStructure(soap*, ns2__AllFacilitiesFeatureStructure*) serialize to a stream
/// - ns2__AllFacilitiesFeatureStructure* ns2__AllFacilitiesFeatureStructure::soap_dup(soap*) returns deep copy of ns2__AllFacilitiesFeatureStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AllFacilitiesFeatureStructure::soap_del() deep deletes ns2__AllFacilitiesFeatureStructure data members, use only after ns2__AllFacilitiesFeatureStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AllFacilitiesFeatureStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_AllFacilitiesFeatureStructure;	///< Union _ns2__union_AllFacilitiesFeatureStructure selector: set to SOAP_UNION__ns2__union_AllFacilitiesFeatureStructure_<fieldname>
/// Union for choice in ns2__AllFacilitiesFeatureStructure.
    union _ns2__union_AllFacilitiesFeatureStructure
    {
/// <PRE><BLOCKQUOTE>
///   Classification of Access Facility.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AccessFacility.
    enum ns2__AccessFacilityEnumeration  AccessFacility                 0 = ns2__AccessFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Accomodation Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AccommodationFacility.
    enum ns2__AccommodationFacilityEnumeration  AccommodationFacility          0 = ns2__AccommodationFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Assistance Facility.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AssistanceFacility.
    enum ns2__AssistanceFacilityEnumeration  AssistanceFacility             0 = ns2__AssistanceFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of FareClass Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FareClassFacility.
    enum ns2__FareClassFacilityEnumeration  FareClassFacility              0 = ns2__FareClassFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Hire Facility.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":HireFacility.
    enum ns2__HireFacilityEnumeration    HireFacility                   0 = ns2__HireFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Luggage Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LuggageFacility.
    enum ns2__LuggageFacilityEnumeration  LuggageFacility                0 = ns2__LuggageFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Mobility Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MobilityFacility.
    enum ns2__MobilityFacilityEnumeration  MobilityFacility               0 = ns2__MobilityFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Nuisance Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":NuisanceFacility.
    enum ns2__NuisanceFacilityEnumeration  NuisanceFacility               0 = ns2__NuisanceFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Access Facility.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ParkingFacility.
    enum ns2__ParkingFacilityEnumeration  ParkingFacility                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Classification of PassengerComms Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":PassengerCommsFacility.
    enum ns2__PassengerCommsFacilityEnumeration  PassengerCommsFacility         0 = ns2__PassengerCommsFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of PassengerInfo Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":PassengerInformationFacility.
    enum ns2__PassengerInformationFacilityEnumeration  PassengerInformationFacility   0 = ns2__PassengerInformationFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Refreshment Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RefreshmentFacility.
    enum ns2__RefreshmentFacilityEnumeration  RefreshmentFacility            0 = ns2__RefreshmentFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Reserved Space Facility.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ReservedSpaceFacility.
    enum ns2__ReservedSpaceFacilityEnumeration  ReservedSpaceFacility          0 = ns2__ReservedSpaceFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Retail Facility.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RetailFacility.
    enum ns2__RetailFacilityEnumeration  RetailFacility                 0 = ns2__RetailFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Sanitary Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SanitaryFacility.
    enum ns2__SanitaryFacilityEnumeration  SanitaryFacility               0 = ns2__SanitaryFacilityEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Classification of Ticketing Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TicketingFacility.
    enum ns2__TicketingFacilityEnumeration  TicketingFacility              0 = ns2__TicketingFacilityEnumeration__unknown;	///< Default element value="unknown".
    }                                    union_AllFacilitiesFeatureStructure;
//  END OF CHOICE
};

/// @brief "http://www.siri.org.uk/siri":FacilityStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for sescription the MONITORED FACILITY itself.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityStructure operations:
/// - ns2__FacilityStructure* soap_new_ns2__FacilityStructure(soap*) allocate and default initialize
/// - ns2__FacilityStructure* soap_new_ns2__FacilityStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityStructure* soap_new_req_ns2__FacilityStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityStructure* soap_new_set_ns2__FacilityStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityStructure(soap*, ns2__FacilityStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityStructure(soap*, ns2__FacilityStructure*) serialize to a stream
/// - ns2__FacilityStructure* ns2__FacilityStructure::soap_dup(soap*) returns deep copy of ns2__FacilityStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityStructure::soap_del() deep deletes ns2__FacilityStructure data members, use only after ns2__FacilityStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identfier of Facility.
/// </BLOCKQUOTE></PRE>
/// Element "FacilityCode" of XSD type "http://www.siri.org.uk/siri":FacilityCodeType.
    ns2__FacilityCodeType*               FacilityCode                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Textual description of the facility. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Description                    0;
/// <PRE><BLOCKQUOTE>
///   Type of facility (several types may be associated to a single facility)
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__FacilityCategoryEnumeration of length 0..unbounded.
    std::vector<enum ns2__FacilityCategoryEnumeration> FacilityClass                  0;
/// <PRE><BLOCKQUOTE>
///   Features of service.
/// </BLOCKQUOTE></PRE>
/// class _ns2__FacilityStructure_Features operations:
/// - _ns2__FacilityStructure_Features* soap_new__ns2__FacilityStructure_Features(soap*) allocate and default initialize
/// - _ns2__FacilityStructure_Features* soap_new__ns2__FacilityStructure_Features(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityStructure_Features* soap_new_req__ns2__FacilityStructure_Features(soap*, ...) allocate, set required members
/// - _ns2__FacilityStructure_Features* soap_new_set__ns2__FacilityStructure_Features(soap*, ...) allocate, set all public members
/// - _ns2__FacilityStructure_Features::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityStructure_Features(soap*, _ns2__FacilityStructure_Features*) deserialize from a stream
/// - int soap_write__ns2__FacilityStructure_Features(soap*, _ns2__FacilityStructure_Features*) serialize to a stream
/// - _ns2__FacilityStructure_Features* _ns2__FacilityStructure_Features::soap_dup(soap*) returns deep copy of _ns2__FacilityStructure_Features, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityStructure_Features::soap_del() deep deletes _ns2__FacilityStructure_Features data members, use only after _ns2__FacilityStructure_Features::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__FacilityStructure_Features
    {
/// <PRE><BLOCKQUOTE>
///   Description of the feauture of the facility. Several features may be associated to a single facility.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AllFacilitiesFeatureStructure* of length 1..unbounded.
    std::vector<ns2__AllFacilitiesFeatureStructure*> Feature                        1;
    }                                   *Features                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refererence to identifier of owner of facility.
/// </BLOCKQUOTE></PRE>
/// Element "OwnerRef" of XSD type "http://www.siri.org.uk/siri":OrganisationRefStructure.
    ns2__OrganisationRefStructure*       OwnerRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Textual description of the owner of the facility.
/// </BLOCKQUOTE></PRE>
/// Element "OwnerName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  OwnerName                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   When Facility is normally avaialble. If not specified, default is 'always'. Values are Logically ANDed together.
/// </BLOCKQUOTE></PRE>
/// Element "ValidityCondition" of XSD type "http://www.siri.org.uk/siri":MonitoringValidityConditionStructure.
    ns2__MonitoringValidityConditionStructure*  ValidityCondition              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes where the facility is located. The location is a Transmodel object reference or an IFOPT object reference.
/// </BLOCKQUOTE></PRE>
/// Element "FacilityLocation" of XSD type "http://www.siri.org.uk/siri":FacilityLocationStructure.
    ns2__FacilityLocationStructure*      FacilityLocation               0;	///< Optional element.
//  BEGIN GROUP <xs:group name="FacilityAccessibilityGroup">
/// <PRE><BLOCKQUOTE>
///   Group of Facility accessibility elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Limitation of facility.
/// </BLOCKQUOTE></PRE>
/// class _ns2__FacilityStructure_Limitations operations:
/// - _ns2__FacilityStructure_Limitations* soap_new__ns2__FacilityStructure_Limitations(soap*) allocate and default initialize
/// - _ns2__FacilityStructure_Limitations* soap_new__ns2__FacilityStructure_Limitations(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityStructure_Limitations* soap_new_req__ns2__FacilityStructure_Limitations(soap*, ...) allocate, set required members
/// - _ns2__FacilityStructure_Limitations* soap_new_set__ns2__FacilityStructure_Limitations(soap*, ...) allocate, set all public members
/// - _ns2__FacilityStructure_Limitations::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityStructure_Limitations(soap*, _ns2__FacilityStructure_Limitations*) deserialize from a stream
/// - int soap_write__ns2__FacilityStructure_Limitations(soap*, _ns2__FacilityStructure_Limitations*) serialize to a stream
/// - _ns2__FacilityStructure_Limitations* _ns2__FacilityStructure_Limitations::soap_dup(soap*) returns deep copy of _ns2__FacilityStructure_Limitations, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityStructure_Limitations::soap_del() deep deletes _ns2__FacilityStructure_Limitations data members, use only after _ns2__FacilityStructure_Limitations::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__FacilityStructure_Limitations
    {
//  BEGIN GROUP <xs:group name="MobilityLimitationGroup">
/// <PRE><BLOCKQUOTE>
///   Group of mobility LIMITATIONs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT is wheelchair accessible.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":WheelchairAccess.
    ns3__AccessibilityStructure*         ns3__WheelchairAccess          0;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has step free access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":StepFreeAccess.
    ns3__AccessibilityStructure*         ns3__StepFreeAccess            0;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has escalator free access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":EscalatorFreeAccess.
    ns3__AccessibilityStructure*         ns3__EscalatorFreeAccess       0;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has lift free access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":LiftFreeAccess.
    ns3__AccessibilityStructure*         ns3__LiftFreeAccess            0;	///< Default element value="unknown".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SensoryLimitationGroup">
/// <PRE><BLOCKQUOTE>
///   Group of sensory LIMITATIONs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has Audible signals for the viusally impaired.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT is wheelchair accessible.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":AudibleSignalsAvailable.
    ns3__AccessibilityStructure*         ns3__AudibleSignalsAvailable   0;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has Visual signals for the hearing impaired.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has Visual signals availble for the free access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":VisualSignsAvailable.
    ns3__AccessibilityStructure*         ns3__VisualSignsAvailable      0;	///< Default element value="unknown".
//  END OF GROUP
    }                                   *Limitations                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Suitabilities of facility for specific passenger needs.
/// </BLOCKQUOTE></PRE>
/// class _ns2__FacilityStructure_Suitabilities operations:
/// - _ns2__FacilityStructure_Suitabilities* soap_new__ns2__FacilityStructure_Suitabilities(soap*) allocate and default initialize
/// - _ns2__FacilityStructure_Suitabilities* soap_new__ns2__FacilityStructure_Suitabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityStructure_Suitabilities* soap_new_req__ns2__FacilityStructure_Suitabilities(soap*, ...) allocate, set required members
/// - _ns2__FacilityStructure_Suitabilities* soap_new_set__ns2__FacilityStructure_Suitabilities(soap*, ...) allocate, set all public members
/// - _ns2__FacilityStructure_Suitabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityStructure_Suitabilities(soap*, _ns2__FacilityStructure_Suitabilities*) deserialize from a stream
/// - int soap_write__ns2__FacilityStructure_Suitabilities(soap*, _ns2__FacilityStructure_Suitabilities*) serialize to a stream
/// - _ns2__FacilityStructure_Suitabilities* _ns2__FacilityStructure_Suitabilities::soap_dup(soap*) returns deep copy of _ns2__FacilityStructure_Suitabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityStructure_Suitabilities::soap_del() deep deletes _ns2__FacilityStructure_Suitabilities data members, use only after _ns2__FacilityStructure_Suitabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__FacilityStructure_Suitabilities
    {
/// <PRE><BLOCKQUOTE>
///   Type of specific need for wich the facility is appropriate.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__SuitabilityStructure* of length 1..unbounded.
    std::vector<ns3__SuitabilityStructure*> Suitability                    1;
    }                                   *Suitabilities                  0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Accessibility of the facility.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AnnotatedFacilityStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Summary information about Facility. Used in DISCOVERY used
/// </BLOCKQUOTE></PRE>
/// class ns2__AnnotatedFacilityStructure operations:
/// - ns2__AnnotatedFacilityStructure* soap_new_ns2__AnnotatedFacilityStructure(soap*) allocate and default initialize
/// - ns2__AnnotatedFacilityStructure* soap_new_ns2__AnnotatedFacilityStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AnnotatedFacilityStructure* soap_new_req_ns2__AnnotatedFacilityStructure(soap*, ...) allocate, set required members
/// - ns2__AnnotatedFacilityStructure* soap_new_set_ns2__AnnotatedFacilityStructure(soap*, ...) allocate, set all public members
/// - ns2__AnnotatedFacilityStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AnnotatedFacilityStructure(soap*, ns2__AnnotatedFacilityStructure*) deserialize from a stream
/// - int soap_write_ns2__AnnotatedFacilityStructure(soap*, ns2__AnnotatedFacilityStructure*) serialize to a stream
/// - ns2__AnnotatedFacilityStructure* ns2__AnnotatedFacilityStructure::soap_dup(soap*) returns deep copy of ns2__AnnotatedFacilityStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AnnotatedFacilityStructure::soap_del() deep deletes ns2__AnnotatedFacilityStructure data members, use only after ns2__AnnotatedFacilityStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AnnotatedFacilityStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a Facility.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityRef.
    ns2__FacilityRefStructure*           FacilityRef                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Whether real-time data is available for the stop. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool                                 Monitored                      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of the facility (without its status)
/// </BLOCKQUOTE></PRE>
/// Element "Facility" of XSD type "http://www.siri.org.uk/siri":FacilityStructure.
    ns2__FacilityStructure*              Facility                       0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":FacilityStatusStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Descriprion of the status of a MONITORED FACILITY.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityStatusStructure operations:
/// - ns2__FacilityStatusStructure* soap_new_ns2__FacilityStatusStructure(soap*) allocate and default initialize
/// - ns2__FacilityStatusStructure* soap_new_ns2__FacilityStatusStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityStatusStructure* soap_new_req_ns2__FacilityStatusStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityStatusStructure* soap_new_set_ns2__FacilityStatusStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityStatusStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityStatusStructure(soap*, ns2__FacilityStatusStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityStatusStructure(soap*, ns2__FacilityStatusStructure*) serialize to a stream
/// - ns2__FacilityStatusStructure* ns2__FacilityStatusStructure::soap_dup(soap*) returns deep copy of ns2__FacilityStatusStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityStatusStructure::soap_del() deep deletes ns2__FacilityStatusStructure data members, use only after ns2__FacilityStatusStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityStatusStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status of the facility.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type "http://www.siri.org.uk/siri":FacilityStatusEnumeration.
    enum ns2__FacilityStatusEnumeration  Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Description of the facility Status. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Description                    0;
/// <PRE><BLOCKQUOTE>
///   Accessibility of the facility.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":FacilityLocationStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Location of the MONITORED FACILITY.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityLocationStructure operations:
/// - ns2__FacilityLocationStructure* soap_new_ns2__FacilityLocationStructure(soap*) allocate and default initialize
/// - ns2__FacilityLocationStructure* soap_new_ns2__FacilityLocationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityLocationStructure* soap_new_req_ns2__FacilityLocationStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityLocationStructure* soap_new_set_ns2__FacilityLocationStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityLocationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityLocationStructure(soap*, ns2__FacilityLocationStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityLocationStructure(soap*, ns2__FacilityLocationStructure*) serialize to a stream
/// - ns2__FacilityLocationStructure* ns2__FacilityLocationStructure::soap_dup(soap*) returns deep copy of ns2__FacilityLocationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityLocationStructure::soap_del() deep deletes ns2__FacilityLocationStructure data members, use only after ns2__FacilityLocationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityLocationStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="FacilityScheduleRefGroup">
/// <PRE><BLOCKQUOTE>
///   Group of Facility accessibility elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LineRef.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleRef.
    ns2__VehicleRefStructure*            VehicleRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a DATED VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DatedVehicleJourneyRef.
    ns2__DatedVehicleJourneyRefStructure*  DatedVehicleJourneyRef         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a CONNECTION link
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionLinkRef.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SERVCIE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InterchangeRef.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="FacilityStopPlaceRefGroup">
/// <PRE><BLOCKQUOTE>
///   Group of Facility accessibility elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a Stop Place.
/// </BLOCKQUOTE></PRE>
/// Element "StopPlaceRef" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceRefStructure.
    ns4__StopPlaceRefStructure*          StopPlaceRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   System identifier of Stop Place component. Unique at least within Stop Place and concrete component type.
/// </BLOCKQUOTE></PRE>
/// Element "StopPlaceComponentId" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceComponentRefStructure.
    ns4__StopPlaceComponentRefStructure*  StopPlaceComponentId           0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":FacilityConditionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Description of any change concerning a MONITORED FACILITY New structure defined in SIRI XSD 1.1 for Faclities Management.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityConditionStructure operations:
/// - ns2__FacilityConditionStructure* soap_new_ns2__FacilityConditionStructure(soap*) allocate and default initialize
/// - ns2__FacilityConditionStructure* soap_new_ns2__FacilityConditionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityConditionStructure* soap_new_req_ns2__FacilityConditionStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityConditionStructure* soap_new_set_ns2__FacilityConditionStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityConditionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityConditionStructure(soap*, ns2__FacilityConditionStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityConditionStructure(soap*, ns2__FacilityConditionStructure*) serialize to a stream
/// - ns2__FacilityConditionStructure* ns2__FacilityConditionStructure::soap_dup(soap*) returns deep copy of ns2__FacilityConditionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityConditionStructure::soap_del() deep deletes ns2__FacilityConditionStructure data members, use only after ns2__FacilityConditionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityConditionStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_FacilityConditionStructure;	///< Union _ns2__union_FacilityConditionStructure selector: set to SOAP_UNION__ns2__union_FacilityConditionStructure_<fieldname>
    union _ns2__union_FacilityConditionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Facility affected by condition.
/// </BLOCKQUOTE></PRE>
/// Element "Facility" of XSD type "http://www.siri.org.uk/siri":FacilityStructure.
    ns2__FacilityStructure*              Facility                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Reference to a Facility.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityRef.
    ns2__FacilityRefStructure*           FacilityRef                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_FacilityConditionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Status of Facility.
/// </BLOCKQUOTE></PRE>
/// Element "FacilityStatus" of XSD type "http://www.siri.org.uk/siri":FacilityStatusStructure.
    ns2__FacilityStatusStructure*        FacilityStatus                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationRef.
    ns2__SituationRefStructure*          SituationRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Setup action to remedy the change of the facility status (if partialy or totaly anavailable)
/// </BLOCKQUOTE></PRE>
/// Element "Remedy" of XSD type "http://www.siri.org.uk/siri":RemedyStructure.
    ns2__RemedyStructure*                Remedy                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the mechanism used to monitor the change of the facility status.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringInfo" of XSD type "http://www.siri.org.uk/siri":MonitoringInformationStructure.
    ns2__MonitoringInformationStructure*  MonitoringInfo                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Period (duration) of the status change for the facility.
/// </BLOCKQUOTE></PRE>
/// Element "ValidityPeriod" of XSD type "http://www.siri.org.uk/siri":HalfOpenTimestampRangeStructure.
    ns2__HalfOpenTimestampRangeStructure*  ValidityPeriod                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":RemedyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Description of the remedy to the change of a facility status (mainly when it becomes partially or totally anavailable)
/// </BLOCKQUOTE></PRE>
/// class ns2__RemedyStructure operations:
/// - ns2__RemedyStructure* soap_new_ns2__RemedyStructure(soap*) allocate and default initialize
/// - ns2__RemedyStructure* soap_new_ns2__RemedyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RemedyStructure* soap_new_req_ns2__RemedyStructure(soap*, ...) allocate, set required members
/// - ns2__RemedyStructure* soap_new_set_ns2__RemedyStructure(soap*, ...) allocate, set all public members
/// - ns2__RemedyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RemedyStructure(soap*, ns2__RemedyStructure*) deserialize from a stream
/// - int soap_write_ns2__RemedyStructure(soap*, ns2__RemedyStructure*) serialize to a stream
/// - ns2__RemedyStructure* ns2__RemedyStructure::soap_dup(soap*) returns deep copy of ns2__RemedyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RemedyStructure::soap_del() deep deletes ns2__RemedyStructure data members, use only after ns2__RemedyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RemedyStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Type of the remedy (repair/replacement/remove)
/// </BLOCKQUOTE></PRE>
/// Element "RemedyType" of XSD type "http://www.siri.org.uk/siri":RemedyTypeEnumeration.
    enum ns2__RemedyTypeEnumeration*     RemedyType                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the set up remedy in natural language. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Description                    0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":MonitoringInformationStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for the monitoring conditions (frequency of mesurement, etc): an automatic monitoring of the satus of a lift with pushed alert in case of incident is very different from a daily manual/visual check.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoringInformationStructure operations:
/// - ns2__MonitoringInformationStructure* soap_new_ns2__MonitoringInformationStructure(soap*) allocate and default initialize
/// - ns2__MonitoringInformationStructure* soap_new_ns2__MonitoringInformationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoringInformationStructure* soap_new_req_ns2__MonitoringInformationStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoringInformationStructure* soap_new_set_ns2__MonitoringInformationStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoringInformationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoringInformationStructure(soap*, ns2__MonitoringInformationStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoringInformationStructure(soap*, ns2__MonitoringInformationStructure*) serialize to a stream
/// - ns2__MonitoringInformationStructure* ns2__MonitoringInformationStructure::soap_dup(soap*) returns deep copy of ns2__MonitoringInformationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoringInformationStructure::soap_del() deep deletes ns2__MonitoringInformationStructure data members, use only after ns2__MonitoringInformationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoringInformationStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Mean time interval between two measurements.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringInterval" of XSD type xs:duration.
    xsd__duration*                       MonitoringInterval             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   How monitoring is automatic, manual, etc..
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringType" of XSD type "http://www.siri.org.uk/siri":MonitoringTypeEnumeration.
    enum ns2__MonitoringTypeEnumeration*  MonitoringType                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   When the monitoring is in effect. If absent always.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringPeriod" of XSD type "http://www.siri.org.uk/siri":MonitoringValidityConditionStructure.
    ns2__MonitoringValidityConditionStructure*  MonitoringPeriod               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":MonitoringValidityConditionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Allowed values for the type for Description of the monitoring conditions (frequency of mesurement, etc): an automatic monitoring of the satus of a lift with pushed alert in case of incident is very different from a daily manual/visual check.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoringValidityConditionStructure operations:
/// - ns2__MonitoringValidityConditionStructure* soap_new_ns2__MonitoringValidityConditionStructure(soap*) allocate and default initialize
/// - ns2__MonitoringValidityConditionStructure* soap_new_ns2__MonitoringValidityConditionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoringValidityConditionStructure* soap_new_req_ns2__MonitoringValidityConditionStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoringValidityConditionStructure* soap_new_set_ns2__MonitoringValidityConditionStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoringValidityConditionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoringValidityConditionStructure(soap*, ns2__MonitoringValidityConditionStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoringValidityConditionStructure(soap*, ns2__MonitoringValidityConditionStructure*) serialize to a stream
/// - ns2__MonitoringValidityConditionStructure* ns2__MonitoringValidityConditionStructure::soap_dup(soap*) returns deep copy of ns2__MonitoringValidityConditionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoringValidityConditionStructure::soap_del() deep deletes ns2__MonitoringValidityConditionStructure data members, use only after ns2__MonitoringValidityConditionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoringValidityConditionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Date and tme range within which condition is available.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__HalfOpenTimestampRangeStructure* of length 0..unbounded.
    std::vector<ns2__HalfOpenTimestampRangeStructure*> Period                         0;
/// <PRE><BLOCKQUOTE>
///   Monitoring period within a single day (monitoring may not be available at night, or may ony occur at certain time of day for manual monitoring, etc.). Several periods can be defined.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__HalfOpenTimeRangeStructure* of length 0..unbounded.
    std::vector<ns2__HalfOpenTimeRangeStructure*> Timeband                       0;
/// <PRE><BLOCKQUOTE>
///   Days type for monitoring availability.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__DaysOfWeekEnumerationx of length 0..unbounded.
    std::vector<enum ns2__DaysOfWeekEnumerationx> DayType                        0;
/// <PRE><BLOCKQUOTE>
///   Holiday type for monitoring availability.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__HolidayTypeEnumerationx of length 0..unbounded.
    std::vector<enum ns2__HolidayTypeEnumerationx> HolidayType                    0;
};

/// @brief "http://www.siri.org.uk/siri":EquipmentAvailabilityStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Availaibility Change of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// class ns2__EquipmentAvailabilityStructure operations:
/// - ns2__EquipmentAvailabilityStructure* soap_new_ns2__EquipmentAvailabilityStructure(soap*) allocate and default initialize
/// - ns2__EquipmentAvailabilityStructure* soap_new_ns2__EquipmentAvailabilityStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EquipmentAvailabilityStructure* soap_new_req_ns2__EquipmentAvailabilityStructure(soap*, ...) allocate, set required members
/// - ns2__EquipmentAvailabilityStructure* soap_new_set_ns2__EquipmentAvailabilityStructure(soap*, ...) allocate, set all public members
/// - ns2__EquipmentAvailabilityStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EquipmentAvailabilityStructure(soap*, ns2__EquipmentAvailabilityStructure*) deserialize from a stream
/// - int soap_write_ns2__EquipmentAvailabilityStructure(soap*, ns2__EquipmentAvailabilityStructure*) serialize to a stream
/// - ns2__EquipmentAvailabilityStructure* ns2__EquipmentAvailabilityStructure::soap_dup(soap*) returns deep copy of ns2__EquipmentAvailabilityStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EquipmentAvailabilityStructure::soap_del() deep deletes ns2__EquipmentAvailabilityStructure data members, use only after ns2__EquipmentAvailabilityStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EquipmentAvailabilityStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to an EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentRef" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentRefStructure.
    ns4__EquipmentRefStructure*          EquipmentRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of EQUIPMENT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Description                    0;
/// <PRE><BLOCKQUOTE>
///   Reference to a TYPE OF EQUIPMENT.r.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentTypeRef" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentTypeRefStructure.
    ns4__EquipmentTypeRefStructure*      EquipmentTypeRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Period for which change to EQUIPMENT status applies applies. If omitted, indefinite period.
/// </BLOCKQUOTE></PRE>
/// Element "ValidityPeriod" of XSD type "http://www.siri.org.uk/siri":HalfOpenTimestampRangeStructure.
    ns2__HalfOpenTimestampRangeStructure*  ValidityPeriod                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Availability status of the EQUIPMENT. Default is 'notAvailable'.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentStatus" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentStatusEnumeration.
    enum ns4__EquipmentStatusEnumeration  EquipmentStatus                0 = ns4__EquipmentStatusEnumeration__notAvailable;	///< Default element value="notAvailable".
/// <PRE><BLOCKQUOTE>
///   Service Features associated with equipment.
/// </BLOCKQUOTE></PRE>
/// class _ns2__EquipmentAvailabilityStructure_EquipmentFeatures operations:
/// - _ns2__EquipmentAvailabilityStructure_EquipmentFeatures* soap_new__ns2__EquipmentAvailabilityStructure_EquipmentFeatures(soap*) allocate and default initialize
/// - _ns2__EquipmentAvailabilityStructure_EquipmentFeatures* soap_new__ns2__EquipmentAvailabilityStructure_EquipmentFeatures(soap*, int num) allocate array and default initialize values
/// - _ns2__EquipmentAvailabilityStructure_EquipmentFeatures* soap_new_req__ns2__EquipmentAvailabilityStructure_EquipmentFeatures(soap*, ...) allocate, set required members
/// - _ns2__EquipmentAvailabilityStructure_EquipmentFeatures* soap_new_set__ns2__EquipmentAvailabilityStructure_EquipmentFeatures(soap*, ...) allocate, set all public members
/// - _ns2__EquipmentAvailabilityStructure_EquipmentFeatures::soap_default(soap*) default initialize members
/// - int soap_read__ns2__EquipmentAvailabilityStructure_EquipmentFeatures(soap*, _ns2__EquipmentAvailabilityStructure_EquipmentFeatures*) deserialize from a stream
/// - int soap_write__ns2__EquipmentAvailabilityStructure_EquipmentFeatures(soap*, _ns2__EquipmentAvailabilityStructure_EquipmentFeatures*) serialize to a stream
/// - _ns2__EquipmentAvailabilityStructure_EquipmentFeatures* _ns2__EquipmentAvailabilityStructure_EquipmentFeatures::soap_dup(soap*) returns deep copy of _ns2__EquipmentAvailabilityStructure_EquipmentFeatures, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__EquipmentAvailabilityStructure_EquipmentFeatures::soap_del() deep deletes _ns2__EquipmentAvailabilityStructure_EquipmentFeatures data members, use only after _ns2__EquipmentAvailabilityStructure_EquipmentFeatures::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__EquipmentAvailabilityStructure_EquipmentFeatures
    {
/// <PRE><BLOCKQUOTE>
///   Service or Stop features associated with equipment. Recommended values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FeatureRefStructure* of length 1..unbounded.
    std::vector<ns2__FeatureRefStructure*> FeatureRef                     1;
    }                                   *EquipmentFeatures              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":FacilityChangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for change to equipment availability. Basic structure defined in the first 1.0 SIRI XSd.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityChangeStructure operations:
/// - ns2__FacilityChangeStructure* soap_new_ns2__FacilityChangeStructure(soap*) allocate and default initialize
/// - ns2__FacilityChangeStructure* soap_new_ns2__FacilityChangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityChangeStructure* soap_new_req_ns2__FacilityChangeStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityChangeStructure* soap_new_set_ns2__FacilityChangeStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityChangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityChangeStructure(soap*, ns2__FacilityChangeStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityChangeStructure(soap*, ns2__FacilityChangeStructure*) serialize to a stream
/// - ns2__FacilityChangeStructure* ns2__FacilityChangeStructure::soap_dup(soap*) returns deep copy of ns2__FacilityChangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityChangeStructure::soap_del() deep deletes ns2__FacilityChangeStructure data members, use only after ns2__FacilityChangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityChangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Availability change for Equipment item.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentAvailability" of XSD type "http://www.siri.org.uk/siri":EquipmentAvailabilityStructure.
    ns2__EquipmentAvailabilityStructure*  EquipmentAvailability          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationRef.
    ns2__SituationRefStructure*          SituationRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Effect of change on impaired access users.
/// </BLOCKQUOTE></PRE>
/// Element "MobilityDisruption" of XSD type "http://www.siri.org.uk/siri":MobilityDisruptionStructure.
    ns2__MobilityDisruptionStructure*    MobilityDisruption             0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":MobilityDisruptionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for effect of EQUIPMENT availability change on impaired access users.
/// </BLOCKQUOTE></PRE>
/// class ns2__MobilityDisruptionStructure operations:
/// - ns2__MobilityDisruptionStructure* soap_new_ns2__MobilityDisruptionStructure(soap*) allocate and default initialize
/// - ns2__MobilityDisruptionStructure* soap_new_ns2__MobilityDisruptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MobilityDisruptionStructure* soap_new_req_ns2__MobilityDisruptionStructure(soap*, ...) allocate, set required members
/// - ns2__MobilityDisruptionStructure* soap_new_set_ns2__MobilityDisruptionStructure(soap*, ...) allocate, set all public members
/// - ns2__MobilityDisruptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MobilityDisruptionStructure(soap*, ns2__MobilityDisruptionStructure*) deserialize from a stream
/// - int soap_write_ns2__MobilityDisruptionStructure(soap*, ns2__MobilityDisruptionStructure*) serialize to a stream
/// - ns2__MobilityDisruptionStructure* ns2__MobilityDisruptionStructure::soap_dup(soap*) returns deep copy of ns2__MobilityDisruptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MobilityDisruptionStructure::soap_del() deep deletes ns2__MobilityDisruptionStructure data members, use only after ns2__MobilityDisruptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MobilityDisruptionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Whether stop or service is accessible to mobility impaired users. This may be further qualified by one ore more MobilityFacility instances to specify which types of mobility access are available (true) or not available (false). For example suitableForWheelChair, or 'tepFreeAccess.
/// </BLOCKQUOTE></PRE>
/// Element "MobilityImpairedAccess" of XSD type xs:boolean.
    bool                                 MobilityImpairedAccess         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Classification of Mobility Facility type - Based on Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of Access Facility.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__AccessFacilityEnumeration element refs of length 0..unbounded.
    std::vector<enum ns2__AccessFacilityEnumeration> AccessFacility                 0;
};

/// @brief "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a reference to a connecting journey.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectingJourneyRefStructure operations:
/// - ns2__ConnectingJourneyRefStructure* soap_new_ns2__ConnectingJourneyRefStructure(soap*) allocate and default initialize
/// - ns2__ConnectingJourneyRefStructure* soap_new_ns2__ConnectingJourneyRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectingJourneyRefStructure* soap_new_req_ns2__ConnectingJourneyRefStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectingJourneyRefStructure* soap_new_set_ns2__ConnectingJourneyRefStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectingJourneyRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectingJourneyRefStructure(soap*, ns2__ConnectingJourneyRefStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectingJourneyRefStructure(soap*, ns2__ConnectingJourneyRefStructure*) serialize to a stream
/// - ns2__ConnectingJourneyRefStructure* ns2__ConnectingJourneyRefStructure::soap_dup(soap*) returns deep copy of ns2__ConnectingJourneyRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectingJourneyRefStructure::soap_del() deep deletes ns2__ConnectingJourneyRefStructure data members, use only after ns2__ConnectingJourneyRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectingJourneyRefStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to the DATE VEHICLE JOURNEY that the VEHICLE is making, unique with the data horizon of the service.
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   LINE Reference.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifer of a VEHICLE JOURNEY within data Horizon of a service.
/// </BLOCKQUOTE></PRE>
/// class ns2__FramedVehicleJourneyRefStructure operations:
/// - ns2__FramedVehicleJourneyRefStructure* soap_new_ns2__FramedVehicleJourneyRefStructure(soap*) allocate and default initialize
/// - ns2__FramedVehicleJourneyRefStructure* soap_new_ns2__FramedVehicleJourneyRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FramedVehicleJourneyRefStructure* soap_new_req_ns2__FramedVehicleJourneyRefStructure(soap*, ...) allocate, set required members
/// - ns2__FramedVehicleJourneyRefStructure* soap_new_set_ns2__FramedVehicleJourneyRefStructure(soap*, ...) allocate, set all public members
/// - ns2__FramedVehicleJourneyRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FramedVehicleJourneyRefStructure(soap*, ns2__FramedVehicleJourneyRefStructure*) deserialize from a stream
/// - int soap_write_ns2__FramedVehicleJourneyRefStructure(soap*, ns2__FramedVehicleJourneyRefStructure*) serialize to a stream
/// - ns2__FramedVehicleJourneyRefStructure* ns2__FramedVehicleJourneyRefStructure::soap_dup(soap*) returns deep copy of ns2__FramedVehicleJourneyRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FramedVehicleJourneyRefStructure::soap_del() deep deletes ns2__FramedVehicleJourneyRefStructure data members, use only after ns2__FramedVehicleJourneyRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FramedVehicleJourneyRefStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   identifier of data frame within particpant service. Used to ensure that the Reference to a DATED VEGICLE JOURNEY is unique with the data horizon of the service. Often the OperationalDayType is used for this purpose.
/// </BLOCKQUOTE></PRE>
/// Element "DataFrameRef" of XSD type "http://www.siri.org.uk/siri":DataFrameRefStructure.
    ns2__DataFrameRefStructure*          DataFrameRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the dated VEHICLE JOURNEY that the VEHICLE is making.
/// </BLOCKQUOTE></PRE>
/// Element "DatedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyCodeType.
    ns2__DatedVehicleJourneyCodeType     DatedVehicleJourneyRef         1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":ModesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Transport MODEs.
/// </BLOCKQUOTE></PRE>
/// class ns2__ModesStructure operations:
/// - ns2__ModesStructure* soap_new_ns2__ModesStructure(soap*) allocate and default initialize
/// - ns2__ModesStructure* soap_new_ns2__ModesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ModesStructure* soap_new_req_ns2__ModesStructure(soap*, ...) allocate, set required members
/// - ns2__ModesStructure* soap_new_set_ns2__ModesStructure(soap*, ...) allocate, set all public members
/// - ns2__ModesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ModesStructure(soap*, ns2__ModesStructure*) deserialize from a stream
/// - int soap_write_ns2__ModesStructure(soap*, ns2__ModesStructure*) serialize to a stream
/// - ns2__ModesStructure* ns2__ModesStructure::soap_dup(soap*) returns deep copy of ns2__ModesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ModesStructure::soap_del() deep deletes ns2__ModesStructure data members, use only after ns2__ModesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ModesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A method of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__AllModesEnumeration of length 1..unbounded.
    std::vector<enum ns2__AllModesEnumeration> Mode                           1;
/// <PRE><BLOCKQUOTE>
///   if true, listed modes to be excluded from list.
/// </BLOCKQUOTE></PRE>
/// Attribute "Exclude" of XSD type xs:boolean.
   @bool                                 Exclude                        0 = false;	///< Default attribute value="false".
};

/// @brief "http://www.siri.org.uk/siri":LineDirectionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for LINEand DIRECTION.
/// </BLOCKQUOTE></PRE>
/// class ns2__LineDirectionStructure operations:
/// - ns2__LineDirectionStructure* soap_new_ns2__LineDirectionStructure(soap*) allocate and default initialize
/// - ns2__LineDirectionStructure* soap_new_ns2__LineDirectionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__LineDirectionStructure* soap_new_req_ns2__LineDirectionStructure(soap*, ...) allocate, set required members
/// - ns2__LineDirectionStructure* soap_new_set_ns2__LineDirectionStructure(soap*, ...) allocate, set all public members
/// - ns2__LineDirectionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__LineDirectionStructure(soap*, ns2__LineDirectionStructure*) deserialize from a stream
/// - int soap_write_ns2__LineDirectionStructure(soap*, ns2__LineDirectionStructure*) serialize to a stream
/// - ns2__LineDirectionStructure* ns2__LineDirectionStructure::soap_dup(soap*) returns deep copy of ns2__LineDirectionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__LineDirectionStructure::soap_del() deep deletes ns2__LineDirectionStructure data members, use only after ns2__LineDirectionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__LineDirectionStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="LineDirectionGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for a LINE and DIRECTION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Line Reference.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Direction Reference.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":PlaceNameStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Names of VIA points, used to help identify the LINE, for example, Luton to Luton via Sutton. Currently 3 in VDV. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// class ns2__PlaceNameStructure operations:
/// - ns2__PlaceNameStructure* soap_new_ns2__PlaceNameStructure(soap*) allocate and default initialize
/// - ns2__PlaceNameStructure* soap_new_ns2__PlaceNameStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PlaceNameStructure* soap_new_req_ns2__PlaceNameStructure(soap*, ...) allocate, set required members
/// - ns2__PlaceNameStructure* soap_new_set_ns2__PlaceNameStructure(soap*, ...) allocate, set all public members
/// - ns2__PlaceNameStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PlaceNameStructure(soap*, ns2__PlaceNameStructure*) deserialize from a stream
/// - int soap_write_ns2__PlaceNameStructure(soap*, ns2__PlaceNameStructure*) serialize to a stream
/// - ns2__PlaceNameStructure* ns2__PlaceNameStructure::soap_dup(soap*) returns deep copy of ns2__PlaceNameStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PlaceNameStructure::soap_del() deep deletes ns2__PlaceNameStructure data members, use only after ns2__PlaceNameStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PlaceNameStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a TOPOGRAPHIC PLACE.
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type "http://www.siri.org.uk/siri":JourneyPlaceRefStructure.
    ns2__JourneyPlaceRefStructure*       PlaceRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Names of place used to help identify the LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> PlaceName                      0;
/// <PRE><BLOCKQUOTE>
///   Short name of TOPOGRAPHIC PLACE. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> PlaceShortName                 0;
};

/// @brief "http://www.siri.org.uk/siri":NoteStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   DataType for a NOTICe.
/// </BLOCKQUOTE></PRE>
/// class ns2__NoteStructure operations:
/// - ns2__NoteStructure* soap_new_ns2__NoteStructure(soap*) allocate and default initialize
/// - ns2__NoteStructure* soap_new_ns2__NoteStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NoteStructure* soap_new_req_ns2__NoteStructure(soap*, ...) allocate, set required members
/// - ns2__NoteStructure* soap_new_set_ns2__NoteStructure(soap*, ...) allocate, set all public members
/// - ns2__NoteStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NoteStructure(soap*, ns2__NoteStructure*) deserialize from a stream
/// - int soap_write_ns2__NoteStructure(soap*, ns2__NoteStructure*) serialize to a stream
/// - ns2__NoteStructure* ns2__NoteStructure::soap_dup(soap*) returns deep copy of ns2__NoteStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NoteStructure::soap_del() deep deletes ns2__NoteStructure data members, use only after ns2__NoteStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NoteStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationRef.
    ns2__SituationRefStructure*          SituationRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationSimpleRef.
    ns2__SituationSimpleRefStructure*    SituationSimpleRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION. Elements are retained as atomic elements.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationFullRef.
    ns2__SituationFullRefStructure*      SituationFullRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text annotation that applies to an element.
/// </BLOCKQUOTE></PRE>
/// Element "Note" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Note                           0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ClosedTimestampRangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a range of date and times. Both start and end time are required.
/// </BLOCKQUOTE></PRE>
/// class ns2__ClosedTimestampRangeStructure operations:
/// - ns2__ClosedTimestampRangeStructure* soap_new_ns2__ClosedTimestampRangeStructure(soap*) allocate and default initialize
/// - ns2__ClosedTimestampRangeStructure* soap_new_ns2__ClosedTimestampRangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ClosedTimestampRangeStructure* soap_new_req_ns2__ClosedTimestampRangeStructure(soap*, ...) allocate, set required members
/// - ns2__ClosedTimestampRangeStructure* soap_new_set_ns2__ClosedTimestampRangeStructure(soap*, ...) allocate, set all public members
/// - ns2__ClosedTimestampRangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ClosedTimestampRangeStructure(soap*, ns2__ClosedTimestampRangeStructure*) deserialize from a stream
/// - int soap_write_ns2__ClosedTimestampRangeStructure(soap*, ns2__ClosedTimestampRangeStructure*) serialize to a stream
/// - ns2__ClosedTimestampRangeStructure* ns2__ClosedTimestampRangeStructure::soap_dup(soap*) returns deep copy of ns2__ClosedTimestampRangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ClosedTimestampRangeStructure::soap_del() deep deletes ns2__ClosedTimestampRangeStructure data members, use only after ns2__ClosedTimestampRangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ClosedTimestampRangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start date and time.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    xsd__dateTime                        StartTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end date and time.
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:dateTime.
    xsd__dateTime                        EndTime                        1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":ClosedTimeRangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a range of times. Both start and end time are required.
/// </BLOCKQUOTE></PRE>
/// class ns2__ClosedTimeRangeStructure operations:
/// - ns2__ClosedTimeRangeStructure* soap_new_ns2__ClosedTimeRangeStructure(soap*) allocate and default initialize
/// - ns2__ClosedTimeRangeStructure* soap_new_ns2__ClosedTimeRangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ClosedTimeRangeStructure* soap_new_req_ns2__ClosedTimeRangeStructure(soap*, ...) allocate, set required members
/// - ns2__ClosedTimeRangeStructure* soap_new_set_ns2__ClosedTimeRangeStructure(soap*, ...) allocate, set all public members
/// - ns2__ClosedTimeRangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ClosedTimeRangeStructure(soap*, ns2__ClosedTimeRangeStructure*) deserialize from a stream
/// - int soap_write_ns2__ClosedTimeRangeStructure(soap*, ns2__ClosedTimeRangeStructure*) serialize to a stream
/// - ns2__ClosedTimeRangeStructure* ns2__ClosedTimeRangeStructure::soap_dup(soap*) returns deep copy of ns2__ClosedTimeRangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ClosedTimeRangeStructure::soap_del() deep deletes ns2__ClosedTimeRangeStructure data members, use only after ns2__ClosedTimeRangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ClosedTimeRangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start time.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:time.
    xsd__time                            StartTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end time.
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:time.
    xsd__time                            EndTime                        1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":HalfOpenTimeRangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a range of times. Start time must be specified, end time is optional.
/// </BLOCKQUOTE></PRE>
/// class ns2__HalfOpenTimeRangeStructure operations:
/// - ns2__HalfOpenTimeRangeStructure* soap_new_ns2__HalfOpenTimeRangeStructure(soap*) allocate and default initialize
/// - ns2__HalfOpenTimeRangeStructure* soap_new_ns2__HalfOpenTimeRangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__HalfOpenTimeRangeStructure* soap_new_req_ns2__HalfOpenTimeRangeStructure(soap*, ...) allocate, set required members
/// - ns2__HalfOpenTimeRangeStructure* soap_new_set_ns2__HalfOpenTimeRangeStructure(soap*, ...) allocate, set all public members
/// - ns2__HalfOpenTimeRangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__HalfOpenTimeRangeStructure(soap*, ns2__HalfOpenTimeRangeStructure*) deserialize from a stream
/// - int soap_write_ns2__HalfOpenTimeRangeStructure(soap*, ns2__HalfOpenTimeRangeStructure*) serialize to a stream
/// - ns2__HalfOpenTimeRangeStructure* ns2__HalfOpenTimeRangeStructure::soap_dup(soap*) returns deep copy of ns2__HalfOpenTimeRangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__HalfOpenTimeRangeStructure::soap_del() deep deletes ns2__HalfOpenTimeRangeStructure data members, use only after ns2__HalfOpenTimeRangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__HalfOpenTimeRangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start time.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:time.
    xsd__time                            StartTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end time. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:time.
    xsd__time*                           EndTime                        0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":HalfOpenTimestampRangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a range of date times. Start time must be specified, end time is optional.
/// </BLOCKQUOTE></PRE>
/// class ns2__HalfOpenTimestampRangeStructure operations:
/// - ns2__HalfOpenTimestampRangeStructure* soap_new_ns2__HalfOpenTimestampRangeStructure(soap*) allocate and default initialize
/// - ns2__HalfOpenTimestampRangeStructure* soap_new_ns2__HalfOpenTimestampRangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__HalfOpenTimestampRangeStructure* soap_new_req_ns2__HalfOpenTimestampRangeStructure(soap*, ...) allocate, set required members
/// - ns2__HalfOpenTimestampRangeStructure* soap_new_set_ns2__HalfOpenTimestampRangeStructure(soap*, ...) allocate, set all public members
/// - ns2__HalfOpenTimestampRangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__HalfOpenTimestampRangeStructure(soap*, ns2__HalfOpenTimestampRangeStructure*) deserialize from a stream
/// - int soap_write_ns2__HalfOpenTimestampRangeStructure(soap*, ns2__HalfOpenTimestampRangeStructure*) serialize to a stream
/// - ns2__HalfOpenTimestampRangeStructure* ns2__HalfOpenTimestampRangeStructure::soap_dup(soap*) returns deep copy of ns2__HalfOpenTimestampRangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__HalfOpenTimestampRangeStructure::soap_del() deep deletes ns2__HalfOpenTimestampRangeStructure data members, use only after ns2__HalfOpenTimestampRangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__HalfOpenTimestampRangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start time stamp.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    xsd__dateTime                        StartTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end time stamp. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:dateTime.
    xsd__dateTime*                       EndTime                        0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SituationRefStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationRefStructure operations:
/// - ns2__SituationRefStructure* soap_new_ns2__SituationRefStructure(soap*) allocate and default initialize
/// - ns2__SituationRefStructure* soap_new_ns2__SituationRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationRefStructure* soap_new_req_ns2__SituationRefStructure(soap*, ...) allocate, set required members
/// - ns2__SituationRefStructure* soap_new_set_ns2__SituationRefStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationRefStructure(soap*, ns2__SituationRefStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationRefStructure(soap*, ns2__SituationRefStructure*) serialize to a stream
/// - ns2__SituationRefStructure* ns2__SituationRefStructure::soap_dup(soap*) returns deep copy of ns2__SituationRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationRefStructure::soap_del() deep deletes ns2__SituationRefStructure data members, use only after ns2__SituationRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationRefStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationSimpleRef.
    ns2__SituationSimpleRefStructure*    SituationSimpleRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION. Elements of SITUATION identfier are expressed as atomic elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION. Elements are retained as atomic elements.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationFullRef.
    ns2__SituationFullRefStructure*      SituationFullRef               0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SituationFullRefStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationFullRefStructure operations:
/// - ns2__SituationFullRefStructure* soap_new_ns2__SituationFullRefStructure(soap*) allocate and default initialize
/// - ns2__SituationFullRefStructure* soap_new_ns2__SituationFullRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationFullRefStructure* soap_new_req_ns2__SituationFullRefStructure(soap*, ...) allocate, set required members
/// - ns2__SituationFullRefStructure* soap_new_set_ns2__SituationFullRefStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationFullRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationFullRefStructure(soap*, ns2__SituationFullRefStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationFullRefStructure(soap*, ns2__SituationFullRefStructure*) serialize to a stream
/// - ns2__SituationFullRefStructure* ns2__SituationFullRefStructure::soap_dup(soap*) returns deep copy of ns2__SituationFullRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationFullRefStructure::soap_del() deep deletes ns2__SituationFullRefStructure data members, use only after ns2__SituationFullRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationFullRefStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="SituationFullIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created Update SITUATION element. Provides namespace for VersionParticipant If absent same as.
/// </BLOCKQUOTE></PRE>
/// Element "VersionCountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            VersionCountryRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of SITUATION within a Participant. Excludes any version number.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of SITUATION within a Participant. Excldue versionr.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationNumber.
    ns2__EntryQualifierStructure*        SituationNumber                1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationUpdateIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created Update SITUATION element. Provides namespace for VersionParticipant If absent same as.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateCountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            UpdateCountryRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        UpdateParticipantRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of update version within a SITUATION Number Omit if reference to the base SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type "http://www.siri.org.uk/siri":SituationVersion.
    ns2__SituationVersion*               Version                        0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":SituationSharedRefStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationSharedRefStructure operations:
/// - ns2__SituationSharedRefStructure* soap_new_ns2__SituationSharedRefStructure(soap*) allocate and default initialize
/// - ns2__SituationSharedRefStructure* soap_new_ns2__SituationSharedRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationSharedRefStructure* soap_new_req_ns2__SituationSharedRefStructure(soap*, ...) allocate, set required members
/// - ns2__SituationSharedRefStructure* soap_new_set_ns2__SituationSharedRefStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationSharedRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationSharedRefStructure(soap*, ns2__SituationSharedRefStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationSharedRefStructure(soap*, ns2__SituationSharedRefStructure*) serialize to a stream
/// - ns2__SituationSharedRefStructure* ns2__SituationSharedRefStructure::soap_dup(soap*) returns deep copy of ns2__SituationSharedRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationSharedRefStructure::soap_del() deep deletes ns2__SituationSharedRefStructure data members, use only after ns2__SituationSharedRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationSharedRefStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="SituationSharedIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements Reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="SituationBaseIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created SITUATION. Provides namespace for Participant If absent proided from context.
/// </BLOCKQUOTE></PRE>
/// Element "CountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            CountryRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of SITUATION within a Participant. Excludes any version number.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of SITUATION within a Participant. Excldue versionr.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationNumber.
    ns2__EntryQualifierStructure*        SituationNumber                1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationUpdateIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created Update SITUATION element. Provides namespace for VersionParticipant If absent same as.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateCountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            UpdateCountryRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        UpdateParticipantRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of update version within a SITUATION Number Omit if reference to the base SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type "http://www.siri.org.uk/siri":SituationVersion.
    ns2__SituationVersion*               Version                        0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":SimpleContactStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Simple Contact Details.
/// </BLOCKQUOTE></PRE>
/// class ns2__SimpleContactStructure operations:
/// - ns2__SimpleContactStructure* soap_new_ns2__SimpleContactStructure(soap*) allocate and default initialize
/// - ns2__SimpleContactStructure* soap_new_ns2__SimpleContactStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SimpleContactStructure* soap_new_req_ns2__SimpleContactStructure(soap*, ...) allocate, set required members
/// - ns2__SimpleContactStructure* soap_new_set_ns2__SimpleContactStructure(soap*, ...) allocate, set all public members
/// - ns2__SimpleContactStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SimpleContactStructure(soap*, ns2__SimpleContactStructure*) deserialize from a stream
/// - int soap_write_ns2__SimpleContactStructure(soap*, ns2__SimpleContactStructure*) serialize to a stream
/// - ns2__SimpleContactStructure* ns2__SimpleContactStructure::soap_dup(soap*) returns deep copy of ns2__SimpleContactStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SimpleContactStructure::soap_del() deep deletes ns2__SimpleContactStructure data members, use only after ns2__SimpleContactStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SimpleContactStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Phone number +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "PhoneNumber" of XSD type "http://www.siri.org.uk/siri":PhoneType.
    ns2__PhoneType*                      PhoneNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Url for contact +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Url" of XSD type xs:anyURI.
    xsd__anyURI*                         Url                            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":DestinationStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Information about a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__DestinationStructure operations:
/// - ns2__DestinationStructure* soap_new_ns2__DestinationStructure(soap*) allocate and default initialize
/// - ns2__DestinationStructure* soap_new_ns2__DestinationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DestinationStructure* soap_new_req_ns2__DestinationStructure(soap*, ...) allocate, set required members
/// - ns2__DestinationStructure* soap_new_set_ns2__DestinationStructure(soap*, ...) allocate, set all public members
/// - ns2__DestinationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DestinationStructure(soap*, ns2__DestinationStructure*) deserialize from a stream
/// - int soap_write_ns2__DestinationStructure(soap*, ns2__DestinationStructure*) serialize to a stream
/// - ns2__DestinationStructure* ns2__DestinationStructure::soap_dup(soap*) returns deep copy of ns2__DestinationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DestinationStructure::soap_del() deep deletes ns2__DestinationStructure data members, use only after ns2__DestinationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DestinationStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifer of Destinatioin
/// </BLOCKQUOTE></PRE>
/// Element "DestinationRef" of XSD type "http://www.siri.org.uk/siri":DestinationRefStructure.
    ns2__DestinationRefStructure*        DestinationRef                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of Destination
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 1..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationName                1;
};

/// @brief "http://www.siri.org.uk/siri":DirectionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for DIRECTION.
/// </BLOCKQUOTE></PRE>
/// class ns2__DirectionStructure operations:
/// - ns2__DirectionStructure* soap_new_ns2__DirectionStructure(soap*) allocate and default initialize
/// - ns2__DirectionStructure* soap_new_ns2__DirectionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DirectionStructure* soap_new_req_ns2__DirectionStructure(soap*, ...) allocate, set required members
/// - ns2__DirectionStructure* soap_new_set_ns2__DirectionStructure(soap*, ...) allocate, set all public members
/// - ns2__DirectionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DirectionStructure(soap*, ns2__DirectionStructure*) deserialize from a stream
/// - int soap_write_ns2__DirectionStructure(soap*, ns2__DirectionStructure*) serialize to a stream
/// - ns2__DirectionStructure* ns2__DirectionStructure::soap_dup(soap*) returns deep copy of ns2__DirectionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectionStructure::soap_del() deep deletes ns2__DirectionStructure data members, use only after ns2__DirectionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifer of DIRECTION,
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Description of DIRECTION. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
};

/// @brief "http://www.siri.org.uk/siri":ProgressBetweenStopsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Progress between stops.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProgressBetweenStopsStructure operations:
/// - ns2__ProgressBetweenStopsStructure* soap_new_ns2__ProgressBetweenStopsStructure(soap*) allocate and default initialize
/// - ns2__ProgressBetweenStopsStructure* soap_new_ns2__ProgressBetweenStopsStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProgressBetweenStopsStructure* soap_new_req_ns2__ProgressBetweenStopsStructure(soap*, ...) allocate, set required members
/// - ns2__ProgressBetweenStopsStructure* soap_new_set_ns2__ProgressBetweenStopsStructure(soap*, ...) allocate, set all public members
/// - ns2__ProgressBetweenStopsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProgressBetweenStopsStructure(soap*, ns2__ProgressBetweenStopsStructure*) deserialize from a stream
/// - int soap_write_ns2__ProgressBetweenStopsStructure(soap*, ns2__ProgressBetweenStopsStructure*) serialize to a stream
/// - ns2__ProgressBetweenStopsStructure* ns2__ProgressBetweenStopsStructure::soap_dup(soap*) returns deep copy of ns2__ProgressBetweenStopsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProgressBetweenStopsStructure::soap_del() deep deletes ns2__ProgressBetweenStopsStructure data members, use only after ns2__ProgressBetweenStopsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProgressBetweenStopsStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The total distance in metres between the previous stop and the next stop.
/// </BLOCKQUOTE></PRE>
/// Element "LinkDistance" of XSD type xs:decimal.
    xsd__decimal*                        LinkDistance                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Percentage along link that VEHICLE has travelled.
/// </BLOCKQUOTE></PRE>
/// Element "Percentage" of XSD type xs:decimal.
    xsd__decimal*                        Percentage                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractCallStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Abstract CALL at stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractCallStructure operations:
/// - ns2__AbstractCallStructure* soap_new_ns2__AbstractCallStructure(soap*) allocate and default initialize
/// - ns2__AbstractCallStructure* soap_new_ns2__AbstractCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractCallStructure* soap_new_req_ns2__AbstractCallStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractCallStructure* soap_new_set_ns2__AbstractCallStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractCallStructure(soap*, ns2__AbstractCallStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractCallStructure(soap*, ns2__AbstractCallStructure*) serialize to a stream
/// - ns2__AbstractCallStructure* ns2__AbstractCallStructure::soap_dup(soap*) returns deep copy of ns2__AbstractCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractCallStructure::soap_del() deep deletes ns2__AbstractCallStructure data members, use only after ns2__AbstractCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractCallStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="StopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying an ordered visit to a SCHEDULED STOP POINT within a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":AbstractMonitoredCallStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Abstract CALL at stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractMonitoredCallStructure operations:
/// - ns2__AbstractMonitoredCallStructure* soap_new_ns2__AbstractMonitoredCallStructure(soap*) allocate and default initialize
/// - ns2__AbstractMonitoredCallStructure* soap_new_ns2__AbstractMonitoredCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractMonitoredCallStructure* soap_new_req_ns2__AbstractMonitoredCallStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractMonitoredCallStructure* soap_new_set_ns2__AbstractMonitoredCallStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractMonitoredCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractMonitoredCallStructure(soap*, ns2__AbstractMonitoredCallStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractMonitoredCallStructure(soap*, ns2__AbstractMonitoredCallStructure*) serialize to a stream
/// - ns2__AbstractMonitoredCallStructure* ns2__AbstractMonitoredCallStructure::soap_dup(soap*) returns deep copy of ns2__AbstractMonitoredCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractMonitoredCallStructure::soap_del() deep deletes ns2__AbstractMonitoredCallStructure data members, use only after ns2__AbstractMonitoredCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractMonitoredCallStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":OnwardCallsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for CALLing pattern for JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// class ns2__OnwardCallsStructure operations:
/// - ns2__OnwardCallsStructure* soap_new_ns2__OnwardCallsStructure(soap*) allocate and default initialize
/// - ns2__OnwardCallsStructure* soap_new_ns2__OnwardCallsStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OnwardCallsStructure* soap_new_req_ns2__OnwardCallsStructure(soap*, ...) allocate, set required members
/// - ns2__OnwardCallsStructure* soap_new_set_ns2__OnwardCallsStructure(soap*, ...) allocate, set all public members
/// - ns2__OnwardCallsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OnwardCallsStructure(soap*, ns2__OnwardCallsStructure*) deserialize from a stream
/// - int soap_write_ns2__OnwardCallsStructure(soap*, ns2__OnwardCallsStructure*) serialize to a stream
/// - ns2__OnwardCallsStructure* ns2__OnwardCallsStructure::soap_dup(soap*) returns deep copy of ns2__OnwardCallsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OnwardCallsStructure::soap_del() deep deletes ns2__OnwardCallsStructure data members, use only after ns2__OnwardCallsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OnwardCallsStructure : public xsd__anyType
{ public:
/// Vector of ns2__OnwardCallStructure* of length 1..unbounded.
    std::vector<ns2__OnwardCallStructure*> OnwardCall                     1;
};

/// @brief "http://www.siri.org.uk/siri":PredictionQualityStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Prediction Quality quantifcation.
/// </BLOCKQUOTE></PRE>
/// class ns2__PredictionQualityStructure operations:
/// - ns2__PredictionQualityStructure* soap_new_ns2__PredictionQualityStructure(soap*) allocate and default initialize
/// - ns2__PredictionQualityStructure* soap_new_ns2__PredictionQualityStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PredictionQualityStructure* soap_new_req_ns2__PredictionQualityStructure(soap*, ...) allocate, set required members
/// - ns2__PredictionQualityStructure* soap_new_set_ns2__PredictionQualityStructure(soap*, ...) allocate, set all public members
/// - ns2__PredictionQualityStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PredictionQualityStructure(soap*, ns2__PredictionQualityStructure*) deserialize from a stream
/// - int soap_write_ns2__PredictionQualityStructure(soap*, ns2__PredictionQualityStructure*) serialize to a stream
/// - ns2__PredictionQualityStructure* ns2__PredictionQualityStructure::soap_dup(soap*) returns deep copy of ns2__PredictionQualityStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PredictionQualityStructure::soap_del() deep deletes ns2__PredictionQualityStructure data members, use only after ns2__PredictionQualityStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PredictionQualityStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   An approxiimate characterisation of prediction quality as one of five values . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "PredictionLevel" of XSD type "http://www.siri.org.uk/siri":QualityIndexEnumeration.
    enum ns2__QualityIndexEnumeration    PredictionLevel                1;	///< Required element.
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__PredictionQualityStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Percentile associated with range as specified by lower and upper bound +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Percentile" of XSD type xs:decimal.
    xsd__decimal                         Percentile                     0 = "0.9";	///< Default element value="0.9".
/// <PRE><BLOCKQUOTE>
///   Lower bound on time of for prediction for confidence level if different from defaults +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "LowerTimeLimit" of XSD type xs:dateTime.
    xsd__dateTime*                       LowerTimeLimit                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Upper bound on time of for predictios for confidence level if different from defaults +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "HigherTimeLimit" of XSD type xs:dateTime.
    xsd__dateTime*                       HigherTimeLimit                0;	///< Optional element.
    }                                   *__PredictionQualityStructure_sequence 0;
//  END OF SEQUENCE
};

/// @brief "http://www.siri.org.uk/siri":StopAssignmentStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for assignment of a SCHEDULED STOP POINT to a specific QUAY or platform +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopAssignmentStructure operations:
/// - ns2__StopAssignmentStructure* soap_new_ns2__StopAssignmentStructure(soap*) allocate and default initialize
/// - ns2__StopAssignmentStructure* soap_new_ns2__StopAssignmentStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopAssignmentStructure* soap_new_req_ns2__StopAssignmentStructure(soap*, ...) allocate, set required members
/// - ns2__StopAssignmentStructure* soap_new_set_ns2__StopAssignmentStructure(soap*, ...) allocate, set all public members
/// - ns2__StopAssignmentStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopAssignmentStructure(soap*, ns2__StopAssignmentStructure*) deserialize from a stream
/// - int soap_write_ns2__StopAssignmentStructure(soap*, ns2__StopAssignmentStructure*) serialize to a stream
/// - ns2__StopAssignmentStructure* ns2__StopAssignmentStructure::soap_dup(soap*) returns deep copy of ns2__StopAssignmentStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopAssignmentStructure::soap_del() deep deletes ns2__StopAssignmentStructure data members, use only after ns2__StopAssignmentStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopAssignmentStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Physical QUAY to use according to the planned timetable. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AimedQuayRef" of XSD type "http://www.siri.org.uk/siri":QuayRefStructure.
    ns2__QuayRefStructure*               AimedQuayRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Scheduled Platform name. Can be used to indicate platfrom change. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> AimedQuayName                  0;
/// <PRE><BLOCKQUOTE>
///   Physical QUAY to use accoring to the real-time prediction. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedQuayRef" of XSD type "http://www.siri.org.uk/siri":QuayRefStructure.
    ns2__QuayRefStructure*               ExpectedQuayRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Physical QUAY actually used. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ActualQuayRef" of XSD type "http://www.siri.org.uk/siri":QuayRefStructure.
    ns2__QuayRefStructure*               ActualQuayRef                  0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":PlannedStopAssignmentStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for assignment of a SCHEDULED STOP POINT to a specific QUAY or platform +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// class ns2__PlannedStopAssignmentStructure operations:
/// - ns2__PlannedStopAssignmentStructure* soap_new_ns2__PlannedStopAssignmentStructure(soap*) allocate and default initialize
/// - ns2__PlannedStopAssignmentStructure* soap_new_ns2__PlannedStopAssignmentStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PlannedStopAssignmentStructure* soap_new_req_ns2__PlannedStopAssignmentStructure(soap*, ...) allocate, set required members
/// - ns2__PlannedStopAssignmentStructure* soap_new_set_ns2__PlannedStopAssignmentStructure(soap*, ...) allocate, set all public members
/// - ns2__PlannedStopAssignmentStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PlannedStopAssignmentStructure(soap*, ns2__PlannedStopAssignmentStructure*) deserialize from a stream
/// - int soap_write_ns2__PlannedStopAssignmentStructure(soap*, ns2__PlannedStopAssignmentStructure*) serialize to a stream
/// - ns2__PlannedStopAssignmentStructure* ns2__PlannedStopAssignmentStructure::soap_dup(soap*) returns deep copy of ns2__PlannedStopAssignmentStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PlannedStopAssignmentStructure::soap_del() deep deletes ns2__PlannedStopAssignmentStructure data members, use only after ns2__PlannedStopAssignmentStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PlannedStopAssignmentStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Physical QUAY to use according to the planned timetable. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AimedQuayRef" of XSD type "http://www.siri.org.uk/siri":QuayRefStructure.
    ns2__QuayRefStructure*               AimedQuayRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Scheduled Platform name. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> AimedQuayName                  0;
};

/// @brief "http://www.siri.org.uk/siri":MonitoredVehicleJourneyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoredVehicleJourneyStructure operations:
/// - ns2__MonitoredVehicleJourneyStructure* soap_new_ns2__MonitoredVehicleJourneyStructure(soap*) allocate and default initialize
/// - ns2__MonitoredVehicleJourneyStructure* soap_new_ns2__MonitoredVehicleJourneyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoredVehicleJourneyStructure* soap_new_req_ns2__MonitoredVehicleJourneyStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoredVehicleJourneyStructure* soap_new_set_ns2__MonitoredVehicleJourneyStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoredVehicleJourneyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoredVehicleJourneyStructure(soap*, ns2__MonitoredVehicleJourneyStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoredVehicleJourneyStructure(soap*, ns2__MonitoredVehicleJourneyStructure*) serialize to a stream
/// - ns2__MonitoredVehicleJourneyStructure* ns2__MonitoredVehicleJourneyStructure::soap_dup(soap*) returns deep copy of ns2__MonitoredVehicleJourneyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoredVehicleJourneyStructure::soap_del() deep deletes ns2__MonitoredVehicleJourneyStructure data members, use only after ns2__MonitoredVehicleJourneyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoredVehicleJourneyStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="MonitoredJourneyIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying a VEHICLE JOURNEY. LINE and DIRECTION will be same as for journey unless overridden.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to LINE of journey.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to DIRECTION of journey.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A reference to the DATED VEHICLE JOURNEY that the VEHICLE is making, unique with the data horizon of the service.
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="VehicleJourneyInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Common information about a VEHICLE JOURNEY. (Similar to VDV TripInfo)
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="ServiceInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__MonitoredVehicleJourneyStructure_sequence
    {
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
    }                                   *__MonitoredVehicleJourneyStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndNamesGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   End names for journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__MonitoredVehicleJourneyStructure_sequence_
    {
/// <PRE><BLOCKQUOTE>
///   Reference to the origin SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OriginRef.
    ns2__JourneyPlaceRefStructure*       OriginRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of the origin of the journey. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginName                     0;
/// <PRE><BLOCKQUOTE>
///   Short name of the origin of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as Origin Name.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginShortName                0;
/// <PRE><BLOCKQUOTE>
///   DIRECTION name shown for joruney at the origin. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationDisplayAtOrigin     0;
/// <PRE><BLOCKQUOTE>
///   Names of VIA points, used to help identify the LINE, for example, Luton to Luton via Sutton. Currently 3 in VDV. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ViaNameStructure* of length 0..unbounded.
    std::vector<ns2__ViaNameStructure* > Via                            0;
/// <PRE><BLOCKQUOTE>
///   Reference to a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the destination SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DestinationRef.
    ns2__DestinationRefStructure*        DestinationRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the destination stop (vehicle signage), Can be overwritten for a journey, and then also section by section by the entry in an individual CALl. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationName                0;
/// <PRE><BLOCKQUOTE>
///   Short name of the DESTINATION.of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as DestinationName. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationShortName           0;
    }                                   *__MonitoredVehicleJourneyStructure_sequence_ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing a VEHICLE JOURNEY. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul DATED VEHICLE JOURNEYs of the timetable. Each real-time journey (e.g. ESTIMATED VEHICLE JOURNEY or MONITORED VEHICLE JORUNEY) takes its values from the DATED VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For train services with named journeys. Train name, e.g. West Coast Express. If omitted: No train name. Inherited property. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> VehicleJourneyName             0;
/// <PRE><BLOCKQUOTE>
///   Additional descriptive text associated with journey. Inherited property.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> JourneyNote                    0;
/// <PRE><BLOCKQUOTE>
///   Contact details for use by members of public. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "PublicContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         PublicContact                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contact details for use by operational staff. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "OperationsContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         OperationsContact              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndTimesGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Call times for journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__MonitoredVehicleJourneyStructure_sequence__
    {
/// <PRE><BLOCKQUOTE>
///   Whether this is a Headway Service, that is shown as operating at a prescribed interval rather than to a fixed timetable. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HeadwayService" of XSD type xs:boolean.
    bool                                 HeadwayService                 0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Timetabled departure time from Origin.
/// </BLOCKQUOTE></PRE>
/// Element "OriginAimedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       OriginAimedDepartureTime       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timetabled arrival time at Destination.
/// </BLOCKQUOTE></PRE>
/// Element "DestinationAimedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       DestinationAimedArrivalTime    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether journey is first or last journey of day. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FirstOrLastJourney.
    enum ns2__FirstOrLastJourneyEnumeration  FirstOrLastJourney             0 = ns2__FirstOrLastJourneyEnumeration__unspecified;	///< Default element value="unspecified".
    }                                   *__MonitoredVehicleJourneyStructure_sequence__ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DisruptionGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing nature of disruption.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Information about a change of Equipment availabilti at stop or on vehicle that may affect access or use.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Description of any change concerning a MONITORED FACILITY New structure defined in SIRI XSD 1.1 for Facilities Management.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityConditionStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityConditionStructure*> FacilityConditionElement       0;
/// <PRE><BLOCKQUOTE>
///   This sequence is here only for compatibility reasons between Siri 1.0 and Siri 1.1
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A change to the availaibility of EQUIPMENT. Basic structure defined in the first 1.0 SIRI XSd.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityChangeElement.
    ns2__FacilityChangeStructure*        FacilityChangeElement          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__SituationRefStructure*> SituationRef                   0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyProgressGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the real-time progress of a monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether there is real-time information available for journey; if not present, not known.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool*                                Monitored                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Condition indicating nature of real-time fault. Present if VEHICLE JOURNEY is normally monitored but temporarily cannot be Monitored for a known reason.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringError" of XSD type xs:NMTOKENS.
    xsd__NMTOKENS*                       MonitoringError                0;	///< Optional element.
//  BEGIN GROUP <xs:group name="ProgressDataQualityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the qua;ity of real-time progress data of a journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the VEHICLE iis in traffic congestion. If not, present, not known.
/// </BLOCKQUOTE></PRE>
/// Element "InCongestion" of XSD type xs:boolean.
    bool*                                InCongestion                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the panic alarm on the VEHICLE is activated. This may lead to indeterminate predictions. If absent, default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "InPanic" of XSD type xs:boolean.
    bool                                 InPanic                        0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the prediction should be judged as inaccurate.
/// </BLOCKQUOTE></PRE>
/// Element "PredictionInaccurate" of XSD type xs:boolean.
    bool*                                PredictionInaccurate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   System originating real-time data. Can be used to make judgements of relative quality and accuracy compared to other feeds.
/// </BLOCKQUOTE></PRE>
/// Element "DataSource" of XSD type xs:string.
    std::wstring*                        DataSource                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Confidence QUALITY LEVEL of data. Default is 'reliable'.
/// </BLOCKQUOTE></PRE>
/// Element "ConfidenceLevel" of XSD type "http://www.siri.org.uk/siri":QualityIndexEnumeration.
    enum ns2__QualityIndexEnumeration    ConfidenceLevel                0 = ns2__QualityIndexEnumeration__reliable;	///< Default element value="reliable".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ProgressDataGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the real-time progress of a journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Current geospatial location of VEHICLE. Measured to front of vehicle.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleLocation" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              VehicleLocation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bearing in compass degrees in which VEHICLE is heading.
/// </BLOCKQUOTE></PRE>
/// Element "Bearing" of XSD type "http://www.siri.org.uk/siri":AbsoluteBearingType.
    ns2__AbsoluteBearingType*            Bearing                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Rate of progress of VEHICLE. Default is 'normal'
/// </BLOCKQUOTE></PRE>
/// Element "ProgressRate" of XSD type "http://www.siri.org.uk/siri":ProgressRateEnumeration.
    enum ns2__ProgressRateEnumeration*   ProgressRate                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Velocity of VEHICLE. EIther actual speed or average speed may be used. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Velocity" of XSD type "http://www.siri.org.uk/siri":VelocityType.
    ns2__VelocityType*                   Velocity                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the engine of the vehicle is on. Default is 'true' (+SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Element "EngineOn" of XSD type xs:boolean.
    bool                                 EngineOn                       0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   How full the VEHICLE is. If omitted, not known.
/// </BLOCKQUOTE></PRE>
/// Element "Occupancy" of XSD type "http://www.siri.org.uk/siri":OccupancyEnumeration.
    enum ns2__OccupancyEnumeration*      Occupancy                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Delay of VEHICLE against schedule, to a precision in seconds. Early times are shown as negative values.
/// </BLOCKQUOTE></PRE>
/// Element "Delay" of XSD type "http://www.siri.org.uk/siri":DurationType.
    ns2__DurationType*                   Delay                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An arbitrary textual status description of the running of this VEHICLE JOURNEY. (Unbounded 0:* since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ProgressStatus                 0;
/// <PRE><BLOCKQUOTE>
///   An classification of the progress state of running of this VEHICLE JOURNEY. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "VehicleStatus" of XSD type "http://www.siri.org.uk/siri":VehicleStatusEnumeration.
    enum ns2__VehicleStatusEnumeration*  VehicleStatus                  0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="TrainOperationalInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   If a VEHICLE JOURNEY is a coupled journey, i.e. comprises several coupled BLOCKparts, there will be a separate delivery for each BLOCKp art and this element will indicate the vehicles that the journey part uses.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TrainBlockPartStructure* of length 0..unbounded.
    std::vector<ns2__TrainBlockPartStructure*> TrainBlockPart                 0;
//  BEGIN GROUP <xs:group name="OperationalInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="OperationalBlockGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   BLOCK that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "BlockRef" of XSD type "http://www.siri.org.uk/siri":BlockRefStructure.
    ns2__BlockRefStructure*              BlockRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   COURSE OF JOURNEY ('Run') that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "CourseOfJourneyRef" of XSD type "http://www.siri.org.uk/siri":CourseOfJourneyRefStructure.
    ns2__CourseOfJourneyRefStructure*    CourseOfJourneyRef             0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleJourneyRef.
    ns2__VehicleJourneyRefStructure*     VehicleJourneyRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleRef.
    ns2__VehicleRefStructure*            VehicleRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refercence to other VEHICLE Journeys (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FramedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__FramedVehicleJourneyRefStructure*> AdditionalVehicleJourneyRef    0;
/// <PRE><BLOCKQUOTE>
///   A reference to the DRIVER or Crew currently logged in to operate a monitored VEHICLE. May be omitted if real-time data is not available - i.e. it is timetabled data. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               DriverRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The name oo the Driver or Crew +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverName" of XSD type xs:normalizedString.
    xsd__normalizedString*               DriverName                     0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   TRAIN NUMBERs for journey. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class _ns2__MonitoredVehicleJourneyStructure_TrainNumbers operations:
/// - _ns2__MonitoredVehicleJourneyStructure_TrainNumbers* soap_new__ns2__MonitoredVehicleJourneyStructure_TrainNumbers(soap*) allocate and default initialize
/// - _ns2__MonitoredVehicleJourneyStructure_TrainNumbers* soap_new__ns2__MonitoredVehicleJourneyStructure_TrainNumbers(soap*, int num) allocate array and default initialize values
/// - _ns2__MonitoredVehicleJourneyStructure_TrainNumbers* soap_new_req__ns2__MonitoredVehicleJourneyStructure_TrainNumbers(soap*, ...) allocate, set required members
/// - _ns2__MonitoredVehicleJourneyStructure_TrainNumbers* soap_new_set__ns2__MonitoredVehicleJourneyStructure_TrainNumbers(soap*, ...) allocate, set all public members
/// - _ns2__MonitoredVehicleJourneyStructure_TrainNumbers::soap_default(soap*) default initialize members
/// - int soap_read__ns2__MonitoredVehicleJourneyStructure_TrainNumbers(soap*, _ns2__MonitoredVehicleJourneyStructure_TrainNumbers*) deserialize from a stream
/// - int soap_write__ns2__MonitoredVehicleJourneyStructure_TrainNumbers(soap*, _ns2__MonitoredVehicleJourneyStructure_TrainNumbers*) serialize to a stream
/// - _ns2__MonitoredVehicleJourneyStructure_TrainNumbers* _ns2__MonitoredVehicleJourneyStructure_TrainNumbers::soap_dup(soap*) returns deep copy of _ns2__MonitoredVehicleJourneyStructure_TrainNumbers, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__MonitoredVehicleJourneyStructure_TrainNumbers::soap_del() deep deletes _ns2__MonitoredVehicleJourneyStructure_TrainNumbers data members, use only after _ns2__MonitoredVehicleJourneyStructure_TrainNumbers::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__MonitoredVehicleJourneyStructure_TrainNumbers
    {
/// <PRE><BLOCKQUOTE>
///   TRAIN NUMBER assigned to VEHICLE JOURNEY. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TrainNumberRefStructure* of length 1..unbounded.
    std::vector<ns2__TrainNumberRefStructure*> TrainNumberRef                 1;
    }                                   *TrainNumbers                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   JOURNEY PARTs making up JOURNEY +SIRIv2.0 e.
/// </BLOCKQUOTE></PRE>
/// class _ns2__MonitoredVehicleJourneyStructure_JourneyParts operations:
/// - _ns2__MonitoredVehicleJourneyStructure_JourneyParts* soap_new__ns2__MonitoredVehicleJourneyStructure_JourneyParts(soap*) allocate and default initialize
/// - _ns2__MonitoredVehicleJourneyStructure_JourneyParts* soap_new__ns2__MonitoredVehicleJourneyStructure_JourneyParts(soap*, int num) allocate array and default initialize values
/// - _ns2__MonitoredVehicleJourneyStructure_JourneyParts* soap_new_req__ns2__MonitoredVehicleJourneyStructure_JourneyParts(soap*, ...) allocate, set required members
/// - _ns2__MonitoredVehicleJourneyStructure_JourneyParts* soap_new_set__ns2__MonitoredVehicleJourneyStructure_JourneyParts(soap*, ...) allocate, set all public members
/// - _ns2__MonitoredVehicleJourneyStructure_JourneyParts::soap_default(soap*) default initialize members
/// - int soap_read__ns2__MonitoredVehicleJourneyStructure_JourneyParts(soap*, _ns2__MonitoredVehicleJourneyStructure_JourneyParts*) deserialize from a stream
/// - int soap_write__ns2__MonitoredVehicleJourneyStructure_JourneyParts(soap*, _ns2__MonitoredVehicleJourneyStructure_JourneyParts*) serialize to a stream
/// - _ns2__MonitoredVehicleJourneyStructure_JourneyParts* _ns2__MonitoredVehicleJourneyStructure_JourneyParts::soap_dup(soap*) returns deep copy of _ns2__MonitoredVehicleJourneyStructure_JourneyParts, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__MonitoredVehicleJourneyStructure_JourneyParts::soap_del() deep deletes _ns2__MonitoredVehicleJourneyStructure_JourneyParts data members, use only after _ns2__MonitoredVehicleJourneyStructure_JourneyParts::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__MonitoredVehicleJourneyStructure_JourneyParts
    {
/// <PRE><BLOCKQUOTE>
///   Information about Parts of JOURNEY +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__JourneyPartInfoStructure* of length 1..unbounded.
    std::vector<ns2__JourneyPartInfoStructure*> JourneyPartInfo                1;
    }                                   *JourneyParts                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="MonitoredCallingPatternGroup">
/// <PRE><BLOCKQUOTE>
///   The service pattern of a monitored VEHICLE JOURNEY. CALLs should be assigned to one of three groups according to the vehicle's current position.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Information on stops called at previously, origin and all intermediate stops up to but not including the current stop, in order or visits. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Element "PreviousCalls" of XSD type "http://www.siri.org.uk/siri":PreviousCallsStructure.
    ns2__PreviousCallsStructure*         PreviousCalls                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Monitored CALL at the current stop.For SIRI-SM this is the stop for which data is requested. For SIRI-VM this is the most recent stop visited by the VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoredCall" of XSD type "http://www.siri.org.uk/siri":MonitoredCallStructure.
    ns2__MonitoredCallStructure*         MonitoredCall                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information on CALLs at the intermediate stops beyond the current stop, up to and including the destination, in order of visits. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Element "OnwardCalls" of XSD type "http://www.siri.org.uk/siri":OnwardCallsStructure.
    ns2__OnwardCallsStructure*           OnwardCalls                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the above CALL sequence is complete, i.e. represents every CALL of the ROUTE and so can be used to replace a previous CALL sequence. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "IsCompleteStopSequence" of XSD type xs:boolean.
    bool                                 IsCompleteStopSequence         0 = false;	///< Default element value="false".
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":JourneyPartInfoStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a refernces to JOURNEY PARTs. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__JourneyPartInfoStructure operations:
/// - ns2__JourneyPartInfoStructure* soap_new_ns2__JourneyPartInfoStructure(soap*) allocate and default initialize
/// - ns2__JourneyPartInfoStructure* soap_new_ns2__JourneyPartInfoStructure(soap*, int num) allocate array and default initialize values
/// - ns2__JourneyPartInfoStructure* soap_new_req_ns2__JourneyPartInfoStructure(soap*, ...) allocate, set required members
/// - ns2__JourneyPartInfoStructure* soap_new_set_ns2__JourneyPartInfoStructure(soap*, ...) allocate, set all public members
/// - ns2__JourneyPartInfoStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__JourneyPartInfoStructure(soap*, ns2__JourneyPartInfoStructure*) deserialize from a stream
/// - int soap_write_ns2__JourneyPartInfoStructure(soap*, ns2__JourneyPartInfoStructure*) serialize to a stream
/// - ns2__JourneyPartInfoStructure* ns2__JourneyPartInfoStructure::soap_dup(soap*) returns deep copy of ns2__JourneyPartInfoStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__JourneyPartInfoStructure::soap_del() deep deletes ns2__JourneyPartInfoStructure data members, use only after ns2__JourneyPartInfoStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__JourneyPartInfoStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Refrence to a JOURNEY part. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPartRef" of XSD type xs:normalizedString.
    xsd__normalizedString                JourneyPartRef                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Train Number for JOURNEY PART +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "TrainNumberRef" of XSD type "http://www.siri.org.uk/siri":TrainNumberRefStructure.
    ns2__TrainNumberRefStructure*        TrainNumberRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Operator of JOURNEY PART. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":TrainBlockPartStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for BLOCK part elements of VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__TrainBlockPartStructure operations:
/// - ns2__TrainBlockPartStructure* soap_new_ns2__TrainBlockPartStructure(soap*) allocate and default initialize
/// - ns2__TrainBlockPartStructure* soap_new_ns2__TrainBlockPartStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TrainBlockPartStructure* soap_new_req_ns2__TrainBlockPartStructure(soap*, ...) allocate, set required members
/// - ns2__TrainBlockPartStructure* soap_new_set_ns2__TrainBlockPartStructure(soap*, ...) allocate, set all public members
/// - ns2__TrainBlockPartStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TrainBlockPartStructure(soap*, ns2__TrainBlockPartStructure*) deserialize from a stream
/// - int soap_write_ns2__TrainBlockPartStructure(soap*, ns2__TrainBlockPartStructure*) serialize to a stream
/// - ns2__TrainBlockPartStructure* ns2__TrainBlockPartStructure::soap_dup(soap*) returns deep copy of ns2__TrainBlockPartStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TrainBlockPartStructure::soap_del() deep deletes ns2__TrainBlockPartStructure data members, use only after ns2__TrainBlockPartStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TrainBlockPartStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Total number of BLOCK parts making up the train of which this is part.
/// </BLOCKQUOTE></PRE>
/// Element "NumberOfBlockParts" of XSD type xs:positiveInteger.
    xsd__positiveInteger                 NumberOfBlockParts             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a train BLOCK part.
/// </BLOCKQUOTE></PRE>
/// Element "TrainPartRef" of XSD type "http://www.siri.org.uk/siri":TrainPartRefStructure.
    ns2__TrainPartRefStructure*          TrainPartRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Description of position of Train BLOCK Part within Train to guide passengers where to find it. E.g. 'Front four coaches'.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PositionOfTrainBlockPart       0;
};

/// @brief "http://www.siri.org.uk/siri":PreviousCallsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Ordered list of CALLs at previous stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__PreviousCallsStructure operations:
/// - ns2__PreviousCallsStructure* soap_new_ns2__PreviousCallsStructure(soap*) allocate and default initialize
/// - ns2__PreviousCallsStructure* soap_new_ns2__PreviousCallsStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PreviousCallsStructure* soap_new_req_ns2__PreviousCallsStructure(soap*, ...) allocate, set required members
/// - ns2__PreviousCallsStructure* soap_new_set_ns2__PreviousCallsStructure(soap*, ...) allocate, set all public members
/// - ns2__PreviousCallsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PreviousCallsStructure(soap*, ns2__PreviousCallsStructure*) deserialize from a stream
/// - int soap_write_ns2__PreviousCallsStructure(soap*, ns2__PreviousCallsStructure*) serialize to a stream
/// - ns2__PreviousCallsStructure* ns2__PreviousCallsStructure::soap_dup(soap*) returns deep copy of ns2__PreviousCallsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PreviousCallsStructure::soap_del() deep deletes ns2__PreviousCallsStructure data members, use only after ns2__PreviousCallsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PreviousCallsStructure : public xsd__anyType
{ public:
/// Vector of ns2__PreviousCallStructure* of length 1..unbounded.
    std::vector<ns2__PreviousCallStructure*> PreviousCall                   1;
};

/// @brief "http://www.siri.org.uk/siri":ActionsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for list of actions.
/// </BLOCKQUOTE></PRE>
/// class ns2__ActionsStructure operations:
/// - ns2__ActionsStructure* soap_new_ns2__ActionsStructure(soap*) allocate and default initialize
/// - ns2__ActionsStructure* soap_new_ns2__ActionsStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ActionsStructure* soap_new_req_ns2__ActionsStructure(soap*, ...) allocate, set required members
/// - ns2__ActionsStructure* soap_new_set_ns2__ActionsStructure(soap*, ...) allocate, set all public members
/// - ns2__ActionsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ActionsStructure(soap*, ns2__ActionsStructure*) deserialize from a stream
/// - int soap_write_ns2__ActionsStructure(soap*, ns2__ActionsStructure*) serialize to a stream
/// - ns2__ActionsStructure* ns2__ActionsStructure::soap_dup(soap*) returns deep copy of ns2__ActionsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ActionsStructure::soap_del() deep deletes ns2__ActionsStructure data members, use only after ns2__ActionsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ActionsStructure : public xsd__anyType
{ public:
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__ActionsStructure_sequence
    {
//  BEGIN GROUP <xs:group name="ActionsGroup">
/// <PRE><BLOCKQUOTE>
///   Allowed actions to perform to distribute SITUATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To Web.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__PublishToWebActionStructure* element refs of length 0..unbounded.
    std::vector<ns2__PublishToWebActionStructure*> PublishToWebAction             0;
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To WAP and PDA.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__PublishToMobileActionStructure* element refs of length 0..unbounded.
    std::vector<ns2__PublishToMobileActionStructure*> PublishToMobileAction          0;
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To TvService.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":PublishToTvAction.
    ns2__PublishToTvActionStructure*     PublishToTvAction              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To Alert Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__PublishToAlertsActionStructure* element refs of length 0..unbounded.
    std::vector<ns2__PublishToAlertsActionStructure*> PublishToAlertsAction          0;
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION Manually. i.e. a procedure must be carried out.
/// </BLOCKQUOTE></PRE>
/// Vector of _ns2__ManualAction* element refs of length 0..unbounded.
    std::vector<_ns2__ManualAction*    > ManualAction                   0;
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION to a named workgroup or individual by email.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NotifyByEmailActionStructure* element refs of length 0..unbounded.
    std::vector<ns2__NotifyByEmailActionStructure*> NotifyByEmailAction            0;
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION to an individual by SMS.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":NotifyBySmsAction.
    ns2__NotifyBySmsActionStructure*     NotifyBySmsAction              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To pager.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NotifyByPagerActionStructure* element refs of length 0..unbounded.
    std::vector<ns2__NotifyByPagerActionStructure*> NotifyByPagerAction            0;
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To User.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NotifyUserActionStructure* element refs of length 0..unbounded.
    std::vector<ns2__NotifyUserActionStructure*> NotifyUserAction               0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "Extensions" of XSD type xs:anyType.
    xsd__anyType*                        Extensions                     0;	///< Optional element.
    }                                   *__ActionsStructure_sequence    0;
//  END OF SEQUENCE
};

/// @brief "http://www.siri.org.uk/siri":SimpleActionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for list of SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// class ns2__SimpleActionStructure operations:
/// - ns2__SimpleActionStructure* soap_new_ns2__SimpleActionStructure(soap*) allocate and default initialize
/// - ns2__SimpleActionStructure* soap_new_ns2__SimpleActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SimpleActionStructure* soap_new_req_ns2__SimpleActionStructure(soap*, ...) allocate, set required members
/// - ns2__SimpleActionStructure* soap_new_set_ns2__SimpleActionStructure(soap*, ...) allocate, set all public members
/// - ns2__SimpleActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SimpleActionStructure(soap*, ns2__SimpleActionStructure*) deserialize from a stream
/// - int soap_write_ns2__SimpleActionStructure(soap*, ns2__SimpleActionStructure*) serialize to a stream
/// - ns2__SimpleActionStructure* ns2__SimpleActionStructure::soap_dup(soap*) returns deep copy of ns2__SimpleActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SimpleActionStructure::soap_del() deep deletes ns2__SimpleActionStructure data members, use only after ns2__SimpleActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SimpleActionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
};

/// @brief "http://www.siri.org.uk/siri":ActionDataStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for list of SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// class ns2__ActionDataStructure operations:
/// - ns2__ActionDataStructure* soap_new_ns2__ActionDataStructure(soap*) allocate and default initialize
/// - ns2__ActionDataStructure* soap_new_ns2__ActionDataStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ActionDataStructure* soap_new_req_ns2__ActionDataStructure(soap*, ...) allocate, set required members
/// - ns2__ActionDataStructure* soap_new_set_ns2__ActionDataStructure(soap*, ...) allocate, set all public members
/// - ns2__ActionDataStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ActionDataStructure(soap*, ns2__ActionDataStructure*) deserialize from a stream
/// - int soap_write_ns2__ActionDataStructure(soap*, ns2__ActionDataStructure*) serialize to a stream
/// - ns2__ActionDataStructure* ns2__ActionDataStructure::soap_dup(soap*) returns deep copy of ns2__ActionDataStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ActionDataStructure::soap_del() deep deletes ns2__ActionDataStructure data members, use only after ns2__ActionDataStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ActionDataStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Name of action data Element.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN                         Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Data type of action data.
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN                         Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Value for action.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyType* of length 1..unbounded.
    std::vector<xsd__anyType*          > Value                          1;
/// <PRE><BLOCKQUOTE>
///   Display prompt for presenting action to user. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Prompt                         0;
};

/// @brief "http://www.siri.org.uk/siri":AffectedStopPointStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for an SCHEDUELD STOP POINT affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedStopPointStructure operations:
/// - ns2__AffectedStopPointStructure* soap_new_ns2__AffectedStopPointStructure(soap*) allocate and default initialize
/// - ns2__AffectedStopPointStructure* soap_new_ns2__AffectedStopPointStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedStopPointStructure* soap_new_req_ns2__AffectedStopPointStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedStopPointStructure* soap_new_set_ns2__AffectedStopPointStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedStopPointStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedStopPointStructure(soap*, ns2__AffectedStopPointStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedStopPointStructure(soap*, ns2__AffectedStopPointStructure*) serialize to a stream
/// - ns2__AffectedStopPointStructure* ns2__AffectedStopPointStructure::soap_dup(soap*) returns deep copy of ns2__AffectedStopPointStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedStopPointStructure::soap_del() deep deletes ns2__AffectedStopPointStructure data members, use only after ns2__AffectedStopPointStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedStopPointStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Alternative private code of stop.
/// </BLOCKQUOTE></PRE>
/// Element "PrivateRef" of XSD type xs:string.
    std::wstring*                        PrivateRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POIHT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
/// <PRE><BLOCKQUOTE>
///   Type of stop type. Normally implicit in VEHICLE mode. TPEG table pti 17_4
/// </BLOCKQUOTE></PRE>
/// Element "StopPointType" of XSD type "http://www.siri.org.uk/siri":StopPointTypeEnumeration.
    enum ns2__StopPointTypeEnumeration*  StopPointType                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Spatial coordinates of STOP POINT. Derivable from StopRef.
/// </BLOCKQUOTE></PRE>
/// Element "Location" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Location                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Modes within station/stop affected by the SITUATION. If not specified, assume all modes of that station.
/// </BLOCKQUOTE></PRE>
/// Element "AffectedModes" of XSD type "http://www.siri.org.uk/siri":AffectedModesStructure.
    ns2__AffectedModesStructure*         AffectedModes                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refernce to a SITE or TOPOGRAPHIC PLACE affected by the Locality of stop (In UK NPtg Locality Code). Derivable from StopRef.
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type "http://www.siri.org.uk/siri":ZoneRefStructure.
    ns2__ZoneRefStructure*               PlaceRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of locality in which stop is found. Derivable from LocalityRef. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PlaceName                      0;
/// <PRE><BLOCKQUOTE>
///   Assesmentof current ACCESSIBIKITY of the STOP POINT as affected by the SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   CONNECTION links from stop.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedStopPointStructure_ConnectionLinks operations:
/// - _ns2__AffectedStopPointStructure_ConnectionLinks* soap_new__ns2__AffectedStopPointStructure_ConnectionLinks(soap*) allocate and default initialize
/// - _ns2__AffectedStopPointStructure_ConnectionLinks* soap_new__ns2__AffectedStopPointStructure_ConnectionLinks(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedStopPointStructure_ConnectionLinks* soap_new_req__ns2__AffectedStopPointStructure_ConnectionLinks(soap*, ...) allocate, set required members
/// - _ns2__AffectedStopPointStructure_ConnectionLinks* soap_new_set__ns2__AffectedStopPointStructure_ConnectionLinks(soap*, ...) allocate, set all public members
/// - _ns2__AffectedStopPointStructure_ConnectionLinks::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedStopPointStructure_ConnectionLinks(soap*, _ns2__AffectedStopPointStructure_ConnectionLinks*) deserialize from a stream
/// - int soap_write__ns2__AffectedStopPointStructure_ConnectionLinks(soap*, _ns2__AffectedStopPointStructure_ConnectionLinks*) serialize to a stream
/// - _ns2__AffectedStopPointStructure_ConnectionLinks* _ns2__AffectedStopPointStructure_ConnectionLinks::soap_dup(soap*) returns deep copy of _ns2__AffectedStopPointStructure_ConnectionLinks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedStopPointStructure_ConnectionLinks::soap_del() deep deletes _ns2__AffectedStopPointStructure_ConnectionLinks data members, use only after _ns2__AffectedStopPointStructure_ConnectionLinks::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedStopPointStructure_ConnectionLinks
    {
/// <PRE><BLOCKQUOTE>
///   CONNECTION LINKs from stop that are affected by the SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedConnectionLinkStructure* of length 1..unbounded.
    std::vector<ns2__AffectedConnectionLinkStructure*> AffectedConnectionLink         1;
    }                                   *ConnectionLinks                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedModesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for TRANSPORT MODEs affecetd by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedModesStructure operations:
/// - ns2__AffectedModesStructure* soap_new_ns2__AffectedModesStructure(soap*) allocate and default initialize
/// - ns2__AffectedModesStructure* soap_new_ns2__AffectedModesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedModesStructure* soap_new_req_ns2__AffectedModesStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedModesStructure* soap_new_set_ns2__AffectedModesStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedModesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedModesStructure(soap*, ns2__AffectedModesStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedModesStructure(soap*, ns2__AffectedModesStructure*) serialize to a stream
/// - ns2__AffectedModesStructure* ns2__AffectedModesStructure::soap_dup(soap*) returns deep copy of ns2__AffectedModesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedModesStructure::soap_del() deep deletes ns2__AffectedModesStructure data members, use only after ns2__AffectedModesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedModesStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_AffectedModesStructure;	///< Union _ns2__union_AffectedModesStructure selector: set to SOAP_UNION__ns2__union_AffectedModesStructure_<fieldname>
/// Union for choice in ns2__AffectedModesStructure.
    union _ns2__union_AffectedModesStructure
    {
/// <PRE><BLOCKQUOTE>
///   All known modes for stop.
/// </BLOCKQUOTE></PRE>
/// Element "AllModes" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllModes                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Mode affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of Mode of length 0..unbounded.
    std::vector<
/// class _ns2__AffectedModesStructure_Mode operations:
/// - _ns2__AffectedModesStructure_Mode* soap_new__ns2__AffectedModesStructure_Mode(soap*) allocate and default initialize
/// - _ns2__AffectedModesStructure_Mode* soap_new__ns2__AffectedModesStructure_Mode(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedModesStructure_Mode* soap_new_req__ns2__AffectedModesStructure_Mode(soap*, ...) allocate, set required members
/// - _ns2__AffectedModesStructure_Mode* soap_new_set__ns2__AffectedModesStructure_Mode(soap*, ...) allocate, set all public members
/// - _ns2__AffectedModesStructure_Mode::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedModesStructure_Mode(soap*, _ns2__AffectedModesStructure_Mode*) deserialize from a stream
/// - int soap_write__ns2__AffectedModesStructure_Mode(soap*, _ns2__AffectedModesStructure_Mode*) serialize to a stream
/// - _ns2__AffectedModesStructure_Mode* _ns2__AffectedModesStructure_Mode::soap_dup(soap*) returns deep copy of _ns2__AffectedModesStructure_Mode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedModesStructure_Mode::soap_del() deep deletes _ns2__AffectedModesStructure_Mode data members, use only after _ns2__AffectedModesStructure_Mode::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedModesStructure_Mode
    {
//  BEGIN GROUP <xs:group name="AffectedModeGroup">
/// <PRE><BLOCKQUOTE>
///   Mode Submode and OPERATOR. Overrides any value sspecified for (i) Affected Network (ii) General Context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Vehicle mode- Tpeg ModeType pti1.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMode.
    enum ns2__VehicleModesOfTransportEnumeration  VehicleMode                    0 = ns2__VehicleModesOfTransportEnumeration__unknown;	///< Default element value="unknown".
//  BEGIN GROUP <xs:group name="PtNetworkModeChoiceGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Submode of mode.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_AffectedModesStructure_Mode 0;	///< Union _ns2__union_AffectedModesStructure_Mode selector: set to SOAP_UNION__ns2__union_AffectedModesStructure_Mode_<fieldname> or 0 to omit
    union _ns2__union_AffectedModesStructure_Mode
    {
/// <PRE><BLOCKQUOTE>
///   TPEG pti08 Air submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AirSubmode.
    enum ns2__AirSubmodesOfTransportEnumeration  AirSubmode                     0 = ns2__AirSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti05 Bus submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":BusSubmode.
    enum ns2__BusSubmodesOfTransportEnumeration  BusSubmode                     0 = ns2__BusSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti03 Coach submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CoachSubmode.
    enum ns2__CoachSubmodesOfTransportEnumeration  CoachSubmode                   0 = ns2__CoachSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti04 Metro submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MetroSubmode.
    enum ns2__MetroSubmodesOfTransportEnumeration  MetroSubmode                   0 = ns2__MetroSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti02 Rail submodes loc13.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RailSubmode.
    enum ns2__RailSubmodesOfTransportEnumeration  RailSubmode                    0 = ns2__RailSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti06 Tram submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TramSubmode.
    enum ns2__TramSubmodesOfTransportEnumeration  TramSubmode                    0 = ns2__TramSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti07 Water submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":WaterSubmode.
    enum ns2__WaterSubmodesOfTransportEnumeration  WaterSubmode                   0 = ns2__WaterSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
    }                                    union_AffectedModesStructure_Mode;
//  END OF CHOICE
//  END OF GROUP
/// Element "AccessMode" of XSD type "http://www.ifopt.org.uk/ifopt":AccessModesEnumeration.
    enum ns4__AccessModesEnumeration*    AccessMode                     0;	///< Optional element.
//  END OF GROUP
    }>                                  *Mode                           0;
    }                                    union_AffectedModesStructure  ;
//  END OF CHOICE
};

/// @brief "http://www.siri.org.uk/siri":AffectedConnectionLinkStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a reference Information about a CONNECTION link from a given stop that is affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedConnectionLinkStructure operations:
/// - ns2__AffectedConnectionLinkStructure* soap_new_ns2__AffectedConnectionLinkStructure(soap*) allocate and default initialize
/// - ns2__AffectedConnectionLinkStructure* soap_new_ns2__AffectedConnectionLinkStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedConnectionLinkStructure* soap_new_req_ns2__AffectedConnectionLinkStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedConnectionLinkStructure* soap_new_set_ns2__AffectedConnectionLinkStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedConnectionLinkStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedConnectionLinkStructure(soap*, ns2__AffectedConnectionLinkStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedConnectionLinkStructure(soap*, ns2__AffectedConnectionLinkStructure*) serialize to a stream
/// - ns2__AffectedConnectionLinkStructure* ns2__AffectedConnectionLinkStructure::soap_dup(soap*) returns deep copy of ns2__AffectedConnectionLinkStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedConnectionLinkStructure::soap_del() deep deletes ns2__AffectedConnectionLinkStructure data members, use only after ns2__AffectedConnectionLinkStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedConnectionLinkStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a CONNECTION link affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionLinkRefStructure* of length 0..unbounded.
    std::vector<ns2__ConnectionLinkRefStructure*> ConnectionLinkRef              0;
/// <PRE><BLOCKQUOTE>
///   Name of CONNECTION link affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  ConnectionName                 0;	///< Optional element.
//  BEGIN CHOICE <xs:choice minOccurs="0">
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// Element "AllLines" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType*                 AllLines                       nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  BEGIN SEQUENCE <xs:sequence>
//  BEGIN GROUP <xs:group name="LineGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Line to which link connects.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__AffectedConnectionLinkStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__LineRefStructure* element refs of length 1..unbounded.
    std::vector<ns2__LineRefStructure* > LineRef                       ;
    }                                   *__AffectedConnectionLinkStructure_sequence;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reference to other connecting STOP POINT of a CONNECTION link. If blank, both feeder and distributor vehicles go to same stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectingStopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          ConnectingStopPointRef        ;
/// <PRE><BLOCKQUOTE>
///   Name of other connecting STOP POINT of a CONNECTION link. Derivable from StopRef. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ConnectingStopPointName       ;
/// <PRE><BLOCKQUOTE>
///   Zone in which connecting stop lies.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectingZoneRef" of XSD type "http://www.siri.org.uk/siri":ZoneRefStructure.
    ns2__ZoneRefStructure*               ConnectingZoneRef             ;
//  END OF SEQUENCE
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Direction of SERVICE JOURNEY INTERCHANGE. Default is 'both'.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionDirection" of XSD type "http://www.siri.org.uk/siri":ConnectionDirectionEnumeration.
    enum ns2__ConnectionDirectionEnumeration  ConnectionDirection            0 = ns2__ConnectionDirectionEnumeration__both;	///< Default element value="both".
/// <PRE><BLOCKQUOTE>
///   PATH LINKs affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedPathLinkStructure* of length 0..unbounded.
    std::vector<ns2__AffectedPathLinkStructure*> AffectedPathLink               0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedPathLinkStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Information about a CONNECTION link from a given stop affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedPathLinkStructure operations:
/// - ns2__AffectedPathLinkStructure* soap_new_ns2__AffectedPathLinkStructure(soap*) allocate and default initialize
/// - ns2__AffectedPathLinkStructure* soap_new_ns2__AffectedPathLinkStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedPathLinkStructure* soap_new_req_ns2__AffectedPathLinkStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedPathLinkStructure* soap_new_set_ns2__AffectedPathLinkStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedPathLinkStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedPathLinkStructure(soap*, ns2__AffectedPathLinkStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedPathLinkStructure(soap*, ns2__AffectedPathLinkStructure*) serialize to a stream
/// - ns2__AffectedPathLinkStructure* ns2__AffectedPathLinkStructure::soap_dup(soap*) returns deep copy of ns2__AffectedPathLinkStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedPathLinkStructure::soap_del() deep deletes ns2__AffectedPathLinkStructure data members, use only after ns2__AffectedPathLinkStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedPathLinkStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of CONNECTION link.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__NMTOKEN of length 0..unbounded.
    std::vector<xsd__NMTOKEN           > LinkRef                        0;
/// <PRE><BLOCKQUOTE>
///   Description of Link. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> LinkName                       0;
/// <PRE><BLOCKQUOTE>
///   Nature of CONNECTION link.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityFeature" of XSD type "http://www.ifopt.org.uk/ifopt":AccessibilityFeatureEnumeration.
    enum ns4__AccessibilityFeatureEnumeration*  AccessibilityFeature           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of a DIRECTION of CONNECTION link.
/// </BLOCKQUOTE></PRE>
/// Vector of std::wstring of length 0..unbounded.
    std::vector<std::wstring           > LinkDirection                  0;
//  BEGIN GROUP <xs:group name="ProjectionGroup">
/// <PRE><BLOCKQUOTE>
///   GIs projection of Section. NB Line here means Geometry Polyline, not Transmodel Transport Line.
/// </BLOCKQUOTE></PRE>
/// Element "LinkProjection" of XSD type "http://www.ifopt.org.uk/ifopt":LinkProjectionStructure.
    ns4__LinkProjectionStructure*        LinkProjection                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Offset from start or end of section to use when projecting.
/// </BLOCKQUOTE></PRE>
/// Element "Offset" of XSD type "http://www.siri.org.uk/siri":OffsetStructure.
    ns2__OffsetStructure*                Offset                         0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedInterchangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Information about a SERVICE JOURNEY INTERCHANGE at CONNECTION link from a given SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedInterchangeStructure operations:
/// - ns2__AffectedInterchangeStructure* soap_new_ns2__AffectedInterchangeStructure(soap*) allocate and default initialize
/// - ns2__AffectedInterchangeStructure* soap_new_ns2__AffectedInterchangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedInterchangeStructure* soap_new_req_ns2__AffectedInterchangeStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedInterchangeStructure* soap_new_set_ns2__AffectedInterchangeStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedInterchangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedInterchangeStructure(soap*, ns2__AffectedInterchangeStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedInterchangeStructure(soap*, ns2__AffectedInterchangeStructure*) serialize to a stream
/// - ns2__AffectedInterchangeStructure* ns2__AffectedInterchangeStructure::soap_dup(soap*) returns deep copy of ns2__AffectedInterchangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedInterchangeStructure::soap_del() deep deletes ns2__AffectedInterchangeStructure data members, use only after ns2__AffectedInterchangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedInterchangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a SERVICE JOURNEY INTERCHANGE affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of STOP POINT of a stop at which VEHICLE JOURNEY meets for interchange If blank, same stop as destination.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeStopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          InterchangeStopPointRef        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of other Connecting STOP POINT of a connection. Derivable from InterchangeStopRef. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> InterchangeStopPointName       0;
/// <PRE><BLOCKQUOTE>
///   Reference to connecting VEHICLE JOURNEY affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectingVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyRefStructure.
    ns2__DatedVehicleJourneyRefStructure*  ConnectingVehicleJourneyRef    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Status of a SERVICE JOURNEY INTERCHANGE Status TPEG cross reference pti31.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InterchangeStatusType.
    enum ns2__InterchangeStatusEnumeration  InterchangeStatusType          0 = ns2__InterchangeStatusEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Reference to a CONNECTION Link affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedConnectionLinkStructure* of length 0..unbounded.
    std::vector<ns2__AffectedConnectionLinkStructure*> ConnectionLink                 0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedOperatorStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Annotated reference to an OPERATOR affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedOperatorStructure operations:
/// - ns2__AffectedOperatorStructure* soap_new_ns2__AffectedOperatorStructure(soap*) allocate and default initialize
/// - ns2__AffectedOperatorStructure* soap_new_ns2__AffectedOperatorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedOperatorStructure* soap_new_req_ns2__AffectedOperatorStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedOperatorStructure* soap_new_set_ns2__AffectedOperatorStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedOperatorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedOperatorStructure(soap*, ns2__AffectedOperatorStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedOperatorStructure(soap*, ns2__AffectedOperatorStructure*) serialize to a stream
/// - ns2__AffectedOperatorStructure* ns2__AffectedOperatorStructure::soap_dup(soap*) returns deep copy of ns2__AffectedOperatorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedOperatorStructure::soap_del() deep deletes ns2__AffectedOperatorStructure data members, use only after ns2__AffectedOperatorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedOperatorStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to an OPERATOR.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Public Name of OPERATOR. Can be derived from OperatorRef. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> OperatorName                   0;
/// <PRE><BLOCKQUOTE>
///   Short Name for OPERATOR. Can be derived from OperatorRef. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> OperatorShortName              0;
/// <PRE><BLOCKQUOTE>
///   OPERATIONAL UNIT responsible for managing services.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperationalUnitRefStructure* of length 0..unbounded.
    std::vector<ns2__OperationalUnitRefStructure*> OperationalUnitRef             0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":NetworkStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Annotated reference to a NETWORK affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__NetworkStructure operations:
/// - ns2__NetworkStructure* soap_new_ns2__NetworkStructure(soap*) allocate and default initialize
/// - ns2__NetworkStructure* soap_new_ns2__NetworkStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NetworkStructure* soap_new_req_ns2__NetworkStructure(soap*, ...) allocate, set required members
/// - ns2__NetworkStructure* soap_new_set_ns2__NetworkStructure(soap*, ...) allocate, set all public members
/// - ns2__NetworkStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NetworkStructure(soap*, ns2__NetworkStructure*) deserialize from a stream
/// - int soap_write_ns2__NetworkStructure(soap*, ns2__NetworkStructure*) serialize to a stream
/// - ns2__NetworkStructure* ns2__NetworkStructure::soap_dup(soap*) returns deep copy of ns2__NetworkStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NetworkStructure::soap_del() deep deletes ns2__NetworkStructure data members, use only after ns2__NetworkStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NetworkStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a NETWORK.
/// </BLOCKQUOTE></PRE>
/// Element "NetworkRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           NetworkRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of NETWORK. Can be derived from NetworkRef. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> NetworkName                    0;
//  BEGIN GROUP <xs:group name="AffectedModeGroup">
/// <PRE><BLOCKQUOTE>
///   Mode Submode and OPERATOR. Overrides any value sspecified for (i) Affected Network (ii) General Context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Vehicle mode- Tpeg ModeType pti1.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMode.
    enum ns2__VehicleModesOfTransportEnumeration  VehicleMode                    0 = ns2__VehicleModesOfTransportEnumeration__unknown;	///< Default element value="unknown".
//  BEGIN GROUP <xs:group name="PtNetworkModeChoiceGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Submode of mode.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_NetworkStructure       0;	///< Union _ns2__union_NetworkStructure selector: set to SOAP_UNION__ns2__union_NetworkStructure_<fieldname> or 0 to omit
    union _ns2__union_NetworkStructure
    {
/// <PRE><BLOCKQUOTE>
///   TPEG pti08 Air submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AirSubmode.
    enum ns2__AirSubmodesOfTransportEnumeration  AirSubmode                     0 = ns2__AirSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti05 Bus submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":BusSubmode.
    enum ns2__BusSubmodesOfTransportEnumeration  BusSubmode                     0 = ns2__BusSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti03 Coach submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CoachSubmode.
    enum ns2__CoachSubmodesOfTransportEnumeration  CoachSubmode                   0 = ns2__CoachSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti04 Metro submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MetroSubmode.
    enum ns2__MetroSubmodesOfTransportEnumeration  MetroSubmode                   0 = ns2__MetroSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti02 Rail submodes loc13.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RailSubmode.
    enum ns2__RailSubmodesOfTransportEnumeration  RailSubmode                    0 = ns2__RailSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti06 Tram submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TramSubmode.
    enum ns2__TramSubmodesOfTransportEnumeration  TramSubmode                    0 = ns2__TramSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti07 Water submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":WaterSubmode.
    enum ns2__WaterSubmodesOfTransportEnumeration  WaterSubmode                   0 = ns2__WaterSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
    }                                    union_NetworkStructure        ;
//  END OF CHOICE
//  END OF GROUP
/// Element "AccessMode" of XSD type "http://www.ifopt.org.uk/ifopt":AccessModesEnumeration.
    enum ns4__AccessModesEnumeration*    AccessMode                     0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":OffsetStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about the LINEs affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__OffsetStructure operations:
/// - ns2__OffsetStructure* soap_new_ns2__OffsetStructure(soap*) allocate and default initialize
/// - ns2__OffsetStructure* soap_new_ns2__OffsetStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OffsetStructure* soap_new_req_ns2__OffsetStructure(soap*, ...) allocate, set required members
/// - ns2__OffsetStructure* soap_new_set_ns2__OffsetStructure(soap*, ...) allocate, set all public members
/// - ns2__OffsetStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OffsetStructure(soap*, ns2__OffsetStructure*) deserialize from a stream
/// - int soap_write_ns2__OffsetStructure(soap*, ns2__OffsetStructure*) serialize to a stream
/// - ns2__OffsetStructure* ns2__OffsetStructure::soap_dup(soap*) returns deep copy of ns2__OffsetStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OffsetStructure::soap_del() deep deletes ns2__OffsetStructure data members, use only after ns2__OffsetStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OffsetStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Distance in metres from start of link at which SITUATION is to be shown. I f absent use start of link.
/// </BLOCKQUOTE></PRE>
/// Element "DistanceFromStart" of XSD type xs:unsignedInt.
    unsigned int*                        DistanceFromStart              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Distance in metres from end of link at which SITUATION is to be shown. I f absent use end of link.
/// </BLOCKQUOTE></PRE>
/// Element "DistanceFromEnd" of XSD type xs:unsignedInt.
    unsigned int*                        DistanceFromEnd                0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedNetworkStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about the parts of the network affected by an incident. If not explclitly overrided Modes and submodes will be defaulted to any values present in the general Context.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedNetworkStructure operations:
/// - ns2__AffectedNetworkStructure* soap_new_ns2__AffectedNetworkStructure(soap*) allocate and default initialize
/// - ns2__AffectedNetworkStructure* soap_new_ns2__AffectedNetworkStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedNetworkStructure* soap_new_req_ns2__AffectedNetworkStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedNetworkStructure* soap_new_set_ns2__AffectedNetworkStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedNetworkStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedNetworkStructure(soap*, ns2__AffectedNetworkStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedNetworkStructure(soap*, ns2__AffectedNetworkStructure*) serialize to a stream
/// - ns2__AffectedNetworkStructure* ns2__AffectedNetworkStructure::soap_dup(soap*) returns deep copy of ns2__AffectedNetworkStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedNetworkStructure::soap_del() deep deletes ns2__AffectedNetworkStructure data members, use only after ns2__AffectedNetworkStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedNetworkStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Operators of LINEs affected by incident. Overrides any value specified for (i) General Context.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedOperatorStructure* of length 0..unbounded.
    std::vector<ns2__AffectedOperatorStructure*> AffectedOperator               0;
/// <PRE><BLOCKQUOTE>
///   Network of affected LINE. If absent, may be taken from context.
/// </BLOCKQUOTE></PRE>
/// Element "NetworkRef" of XSD type "http://www.siri.org.uk/siri":NetworkRefStructure.
    ns2__NetworkRefStructure*            NetworkRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Network. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> NetworkName                    0;
/// <PRE><BLOCKQUOTE>
///   Textual description of overall routes affected. Should correspond to any structured description in the AffectedLines element. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> RoutesAffected                 0;
//  BEGIN GROUP <xs:group name="AffectedModeGroup">
/// <PRE><BLOCKQUOTE>
///   Mode Submode and OPERATOR. Overrides any value sspecified for (i) Affected Network (ii) General Context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Vehicle mode- Tpeg ModeType pti1.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMode.
    enum ns2__VehicleModesOfTransportEnumeration  VehicleMode                    0 = ns2__VehicleModesOfTransportEnumeration__unknown;	///< Default element value="unknown".
//  BEGIN GROUP <xs:group name="PtNetworkModeChoiceGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Submode of mode.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_AffectedNetworkStructure 0;	///< Union _ns2__union_AffectedNetworkStructure selector: set to SOAP_UNION__ns2__union_AffectedNetworkStructure_<fieldname> or 0 to omit
    union _ns2__union_AffectedNetworkStructure
    {
/// <PRE><BLOCKQUOTE>
///   TPEG pti08 Air submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AirSubmode.
    enum ns2__AirSubmodesOfTransportEnumeration  AirSubmode                     0 = ns2__AirSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti05 Bus submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":BusSubmode.
    enum ns2__BusSubmodesOfTransportEnumeration  BusSubmode                     0 = ns2__BusSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti03 Coach submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CoachSubmode.
    enum ns2__CoachSubmodesOfTransportEnumeration  CoachSubmode                   0 = ns2__CoachSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti04 Metro submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MetroSubmode.
    enum ns2__MetroSubmodesOfTransportEnumeration  MetroSubmode                   0 = ns2__MetroSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti02 Rail submodes loc13.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RailSubmode.
    enum ns2__RailSubmodesOfTransportEnumeration  RailSubmode                    0 = ns2__RailSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti06 Tram submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TramSubmode.
    enum ns2__TramSubmodesOfTransportEnumeration  TramSubmode                    0 = ns2__TramSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti07 Water submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":WaterSubmode.
    enum ns2__WaterSubmodesOfTransportEnumeration  WaterSubmode                   0 = ns2__WaterSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
    }                                    union_AffectedNetworkStructure;
//  END OF CHOICE
//  END OF GROUP
/// Element "AccessMode" of XSD type "http://www.ifopt.org.uk/ifopt":AccessModesEnumeration.
    enum ns4__AccessModesEnumeration*    AccessMode                     0;	///< Optional element.
//  END OF GROUP
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// <PRE><BLOCKQUOTE>
///   All LINEs in the network are affected.
/// </BLOCKQUOTE></PRE>
/// Element "AllLines" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType*                 AllLines                       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Only some ROUTEs are affected, LINE level information not available. See the AffectedRoutes element for textual description.
/// </BLOCKQUOTE></PRE>
/// Element "SelectedRoutes" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType*                 SelectedRoutes                 nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Information about the indvidual LINEs in the network that are affected. If not explclitly overrided Modes and submodes will be defaulted to any values present (i) in the AffectedNetwork (ii) In the general Context.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedLineStructure* of length 1..unbounded.
    std::vector<ns2__AffectedLineStructure*> AffectedLine                  ;
//  END OF SEQUENCE
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedLineStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about the LINEs affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedLineStructure operations:
/// - ns2__AffectedLineStructure* soap_new_ns2__AffectedLineStructure(soap*) allocate and default initialize
/// - ns2__AffectedLineStructure* soap_new_ns2__AffectedLineStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedLineStructure* soap_new_req_ns2__AffectedLineStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedLineStructure* soap_new_set_ns2__AffectedLineStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedLineStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedLineStructure(soap*, ns2__AffectedLineStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedLineStructure(soap*, ns2__AffectedLineStructure*) serialize to a stream
/// - ns2__AffectedLineStructure* ns2__AffectedLineStructure::soap_dup(soap*) returns deep copy of ns2__AffectedLineStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedLineStructure::soap_del() deep deletes ns2__AffectedLineStructure data members, use only after ns2__AffectedLineStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedLineStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Operators of LINEs affected by incident. Overrides any value specified for (i) Affected Network (ii) General Context.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedOperatorStructure* of length 0..unbounded.
    std::vector<ns2__AffectedOperatorStructure*> AffectedOperator               0;
//  BEGIN GROUP <xs:group name="LineGroup">
/// <PRE><BLOCKQUOTE>
///   Line to which link connects.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__LineRefStructure* element refs of length 1..unbounded.
    std::vector<ns2__LineRefStructure* > LineRef                        1;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   DESTINATIONs to which the LINE runs.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedStopPointStructure* of length 0..unbounded.
    std::vector<ns2__AffectedStopPointStructure*> Destinations                   0;
/// <PRE><BLOCKQUOTE>
///   DIRECTIONs affected.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DirectionStructure* of length 0..unbounded.
    std::vector<ns2__DirectionStructure*> Direction                      0;
/// <PRE><BLOCKQUOTE>
///   ROUTEs affected if LINE has multiple ROUTEs.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedLineStructure_Routes operations:
/// - _ns2__AffectedLineStructure_Routes* soap_new__ns2__AffectedLineStructure_Routes(soap*) allocate and default initialize
/// - _ns2__AffectedLineStructure_Routes* soap_new__ns2__AffectedLineStructure_Routes(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedLineStructure_Routes* soap_new_req__ns2__AffectedLineStructure_Routes(soap*, ...) allocate, set required members
/// - _ns2__AffectedLineStructure_Routes* soap_new_set__ns2__AffectedLineStructure_Routes(soap*, ...) allocate, set all public members
/// - _ns2__AffectedLineStructure_Routes::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedLineStructure_Routes(soap*, _ns2__AffectedLineStructure_Routes*) deserialize from a stream
/// - int soap_write__ns2__AffectedLineStructure_Routes(soap*, _ns2__AffectedLineStructure_Routes*) serialize to a stream
/// - _ns2__AffectedLineStructure_Routes* _ns2__AffectedLineStructure_Routes::soap_dup(soap*) returns deep copy of _ns2__AffectedLineStructure_Routes, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedLineStructure_Routes::soap_del() deep deletes _ns2__AffectedLineStructure_Routes data members, use only after _ns2__AffectedLineStructure_Routes::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedLineStructure_Routes
    {
/// <PRE><BLOCKQUOTE>
///   Route.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedRouteStructure* of length 1..unbounded.
    std::vector<ns2__AffectedRouteStructure*> AffectedRoute                  1;
    }                                   *Routes                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sections of LINE affected.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedLineStructure_Sections operations:
/// - _ns2__AffectedLineStructure_Sections* soap_new__ns2__AffectedLineStructure_Sections(soap*) allocate and default initialize
/// - _ns2__AffectedLineStructure_Sections* soap_new__ns2__AffectedLineStructure_Sections(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedLineStructure_Sections* soap_new_req__ns2__AffectedLineStructure_Sections(soap*, ...) allocate, set required members
/// - _ns2__AffectedLineStructure_Sections* soap_new_set__ns2__AffectedLineStructure_Sections(soap*, ...) allocate, set all public members
/// - _ns2__AffectedLineStructure_Sections::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedLineStructure_Sections(soap*, _ns2__AffectedLineStructure_Sections*) deserialize from a stream
/// - int soap_write__ns2__AffectedLineStructure_Sections(soap*, _ns2__AffectedLineStructure_Sections*) serialize to a stream
/// - _ns2__AffectedLineStructure_Sections* _ns2__AffectedLineStructure_Sections::soap_dup(soap*) returns deep copy of _ns2__AffectedLineStructure_Sections, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedLineStructure_Sections::soap_del() deep deletes _ns2__AffectedLineStructure_Sections data members, use only after _ns2__AffectedLineStructure_Sections::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedLineStructure_Sections
    {
/// Vector of ns2__AffectedSectionStructure* of length 1..unbounded.
    std::vector<ns2__AffectedSectionStructure*> AffectedSection                1;
    }                                   *Sections                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedSectionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about the sectons affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedSectionStructure operations:
/// - ns2__AffectedSectionStructure* soap_new_ns2__AffectedSectionStructure(soap*) allocate and default initialize
/// - ns2__AffectedSectionStructure* soap_new_ns2__AffectedSectionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedSectionStructure* soap_new_req_ns2__AffectedSectionStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedSectionStructure* soap_new_set_ns2__AffectedSectionStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedSectionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedSectionStructure(soap*, ns2__AffectedSectionStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedSectionStructure(soap*, ns2__AffectedSectionStructure*) serialize to a stream
/// - ns2__AffectedSectionStructure* ns2__AffectedSectionStructure::soap_dup(soap*) returns deep copy of ns2__AffectedSectionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedSectionStructure::soap_del() deep deletes ns2__AffectedSectionStructure data members, use only after ns2__AffectedSectionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedSectionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a section of ROUTE affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "SectionRef" of XSD type "http://www.siri.org.uk/siri":SectionRefStructure.
    ns2__SectionRefStructure*            SectionRef                     0;	///< Optional element.
//  BEGIN GROUP <xs:group name="ProjectionGroup">
/// <PRE><BLOCKQUOTE>
///   GIs projection of Section. NB Line here means Geometry Polyline, not Transmodel Transport Line.
/// </BLOCKQUOTE></PRE>
/// Element "LinkProjection" of XSD type "http://www.ifopt.org.uk/ifopt":LinkProjectionStructure.
    ns4__LinkProjectionStructure*        LinkProjection                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Offset from start or end of section to use when projecting.
/// </BLOCKQUOTE></PRE>
/// Element "Offset" of XSD type "http://www.siri.org.uk/siri":OffsetStructure.
    ns2__OffsetStructure*                Offset                         0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedRouteStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about the routes affected by a SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedRouteStructure operations:
/// - ns2__AffectedRouteStructure* soap_new_ns2__AffectedRouteStructure(soap*) allocate and default initialize
/// - ns2__AffectedRouteStructure* soap_new_ns2__AffectedRouteStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedRouteStructure* soap_new_req_ns2__AffectedRouteStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedRouteStructure* soap_new_set_ns2__AffectedRouteStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedRouteStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedRouteStructure(soap*, ns2__AffectedRouteStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedRouteStructure(soap*, ns2__AffectedRouteStructure*) serialize to a stream
/// - ns2__AffectedRouteStructure* ns2__AffectedRouteStructure::soap_dup(soap*) returns deep copy of ns2__AffectedRouteStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedRouteStructure::soap_del() deep deletes ns2__AffectedRouteStructure data members, use only after ns2__AffectedRouteStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedRouteStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a ROUTE affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DIRECTIONS affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DirectionStructure* of length 0..unbounded.
    std::vector<ns2__DirectionStructure*> Direction                      0;
/// <PRE><BLOCKQUOTE>
///   Sections of ROUTE affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedRouteStructure_Sections operations:
/// - _ns2__AffectedRouteStructure_Sections* soap_new__ns2__AffectedRouteStructure_Sections(soap*) allocate and default initialize
/// - _ns2__AffectedRouteStructure_Sections* soap_new__ns2__AffectedRouteStructure_Sections(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedRouteStructure_Sections* soap_new_req__ns2__AffectedRouteStructure_Sections(soap*, ...) allocate, set required members
/// - _ns2__AffectedRouteStructure_Sections* soap_new_set__ns2__AffectedRouteStructure_Sections(soap*, ...) allocate, set all public members
/// - _ns2__AffectedRouteStructure_Sections::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedRouteStructure_Sections(soap*, _ns2__AffectedRouteStructure_Sections*) deserialize from a stream
/// - int soap_write__ns2__AffectedRouteStructure_Sections(soap*, _ns2__AffectedRouteStructure_Sections*) serialize to a stream
/// - _ns2__AffectedRouteStructure_Sections* _ns2__AffectedRouteStructure_Sections::soap_dup(soap*) returns deep copy of _ns2__AffectedRouteStructure_Sections, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedRouteStructure_Sections::soap_del() deep deletes _ns2__AffectedRouteStructure_Sections data members, use only after _ns2__AffectedRouteStructure_Sections::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedRouteStructure_Sections
    {
/// <PRE><BLOCKQUOTE>
///   Sections of ROUTE that is affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedSectionStructure* of length 1..unbounded.
    std::vector<ns2__AffectedSectionStructure*> AffectedSection                1;
    }                                   *Sections                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   ROUTE LINKs affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedRouteStructure_RouteLinks operations:
/// - _ns2__AffectedRouteStructure_RouteLinks* soap_new__ns2__AffectedRouteStructure_RouteLinks(soap*) allocate and default initialize
/// - _ns2__AffectedRouteStructure_RouteLinks* soap_new__ns2__AffectedRouteStructure_RouteLinks(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedRouteStructure_RouteLinks* soap_new_req__ns2__AffectedRouteStructure_RouteLinks(soap*, ...) allocate, set required members
/// - _ns2__AffectedRouteStructure_RouteLinks* soap_new_set__ns2__AffectedRouteStructure_RouteLinks(soap*, ...) allocate, set all public members
/// - _ns2__AffectedRouteStructure_RouteLinks::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedRouteStructure_RouteLinks(soap*, _ns2__AffectedRouteStructure_RouteLinks*) deserialize from a stream
/// - int soap_write__ns2__AffectedRouteStructure_RouteLinks(soap*, _ns2__AffectedRouteStructure_RouteLinks*) serialize to a stream
/// - _ns2__AffectedRouteStructure_RouteLinks* _ns2__AffectedRouteStructure_RouteLinks::soap_dup(soap*) returns deep copy of _ns2__AffectedRouteStructure_RouteLinks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedRouteStructure_RouteLinks::soap_del() deep deletes _ns2__AffectedRouteStructure_RouteLinks data members, use only after _ns2__AffectedRouteStructure_RouteLinks::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedRouteStructure_RouteLinks
    {
/// Vector of ns2__RouteLinkRefStructure* of length 1..unbounded.
    std::vector<ns2__RouteLinkRefStructure*> RouteLinkRef                   1;
    }                                   *RouteLinks                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedVehicleJourneyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about a VEHICLE JOURNEY affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedVehicleJourneyStructure operations:
/// - ns2__AffectedVehicleJourneyStructure* soap_new_ns2__AffectedVehicleJourneyStructure(soap*) allocate and default initialize
/// - ns2__AffectedVehicleJourneyStructure* soap_new_ns2__AffectedVehicleJourneyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedVehicleJourneyStructure* soap_new_req_ns2__AffectedVehicleJourneyStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedVehicleJourneyStructure* soap_new_set_ns2__AffectedVehicleJourneyStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedVehicleJourneyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedVehicleJourneyStructure(soap*, ns2__AffectedVehicleJourneyStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedVehicleJourneyStructure(soap*, ns2__AffectedVehicleJourneyStructure*) serialize to a stream
/// - ns2__AffectedVehicleJourneyStructure* ns2__AffectedVehicleJourneyStructure::soap_dup(soap*) returns deep copy of ns2__AffectedVehicleJourneyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedVehicleJourneyStructure::soap_del() deep deletes ns2__AffectedVehicleJourneyStructure data members, use only after ns2__AffectedVehicleJourneyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedVehicleJourneyStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Use of simple reference is deprecated
/// </BLOCKQUOTE></PRE>
   $int                                  __union_AffectedVehicleJourneyStructure 0;	///< Union _ns2__union_AffectedVehicleJourneyStructure selector: set to SOAP_UNION__ns2__union_AffectedVehicleJourneyStructure_<fieldname> or 0 to omit
    union _ns2__union_AffectedVehicleJourneyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Refercence to a VEHICLE JOURENY framed by the day. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Reference to a service VEHICLE JOURNEY affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleJourneyRefStructure* of length 1..unbounded.
    std::vector<ns2__VehicleJourneyRefStructure*> *VehicleJourneyRef              1;
    }                                    union_AffectedVehicleJourneyStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Reference to a specific DATED VEHICLE JOURNEY affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DatedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__DatedVehicleJourneyRefStructure*> DatedVehicleJourneyRef         0;
/// <PRE><BLOCKQUOTE>
///   Name of journey affected by an SITUATION. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> JourneyName                    0;
/// <PRE><BLOCKQUOTE>
///   OPERATOR of LINE affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Operator" of XSD type "http://www.siri.org.uk/siri":AffectedOperatorStructure.
    ns2__AffectedOperatorStructure*      Operator                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the LINE of the journey affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":PublishedLineName.
    ns2__NaturalLanguageStringStructure*  PublishedLineName              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DIRECTION of LINE in which journey runs.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Origin SCHEDULED STOP POINTs from which the LINE runs. [equivalent to pti15 1 start_point route_description_type]
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedStopPointStructure* of length 0..unbounded.
    std::vector<ns2__AffectedStopPointStructure*> Origins                        0;
/// <PRE><BLOCKQUOTE>
///   Destination SCHEDULED STOP POINTs to which the LINE runs. [equivalent to pti15 2 destination route_description_type]
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedStopPointStructure* of length 0..unbounded.
    std::vector<ns2__AffectedStopPointStructure*> Destinations                   0;
/// <PRE><BLOCKQUOTE>
///   ROUTE affected by the SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedRouteStructure* of length 1..unbounded.
    std::vector<ns2__AffectedRouteStructure*> Route                          1;
/// <PRE><BLOCKQUOTE>
///   Timetabled departure tme of journey from Origin.
/// </BLOCKQUOTE></PRE>
/// Element "OriginAimedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       OriginAimedDepartureTime       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timetabled arrival time of journey at Destination.
/// </BLOCKQUOTE></PRE>
/// Element "DestinationAimedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       DestinationAimedArrivalTime    0;	///< Optional element.
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   CALLs making up VEHICLE JOURNEY [equivalent to TPEG pti15 3 stop, 15_5 not-stopping, 15-6 temporary stop route_description_type]
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedVehicleJourneyStructure_Calls operations:
/// - _ns2__AffectedVehicleJourneyStructure_Calls* soap_new__ns2__AffectedVehicleJourneyStructure_Calls(soap*) allocate and default initialize
/// - _ns2__AffectedVehicleJourneyStructure_Calls* soap_new__ns2__AffectedVehicleJourneyStructure_Calls(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedVehicleJourneyStructure_Calls* soap_new_req__ns2__AffectedVehicleJourneyStructure_Calls(soap*, ...) allocate, set required members
/// - _ns2__AffectedVehicleJourneyStructure_Calls* soap_new_set__ns2__AffectedVehicleJourneyStructure_Calls(soap*, ...) allocate, set all public members
/// - _ns2__AffectedVehicleJourneyStructure_Calls::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedVehicleJourneyStructure_Calls(soap*, _ns2__AffectedVehicleJourneyStructure_Calls*) deserialize from a stream
/// - int soap_write__ns2__AffectedVehicleJourneyStructure_Calls(soap*, _ns2__AffectedVehicleJourneyStructure_Calls*) serialize to a stream
/// - _ns2__AffectedVehicleJourneyStructure_Calls* _ns2__AffectedVehicleJourneyStructure_Calls::soap_dup(soap*) returns deep copy of _ns2__AffectedVehicleJourneyStructure_Calls, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedVehicleJourneyStructure_Calls::soap_del() deep deletes _ns2__AffectedVehicleJourneyStructure_Calls data members, use only after _ns2__AffectedVehicleJourneyStructure_Calls::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedVehicleJourneyStructure_Calls
    {
/// Vector of ns2__AffectedCallStructure* of length 1..unbounded.
    std::vector<ns2__AffectedCallStructure*> Call                           1;
    }                                   *Calls                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedPlaceStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for annotated references to a TOPOGRAPHIC PLACE.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedPlaceStructure operations:
/// - ns2__AffectedPlaceStructure* soap_new_ns2__AffectedPlaceStructure(soap*) allocate and default initialize
/// - ns2__AffectedPlaceStructure* soap_new_ns2__AffectedPlaceStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedPlaceStructure* soap_new_req_ns2__AffectedPlaceStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedPlaceStructure* soap_new_set_ns2__AffectedPlaceStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedPlaceStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedPlaceStructure(soap*, ns2__AffectedPlaceStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedPlaceStructure(soap*, ns2__AffectedPlaceStructure*) serialize to a stream
/// - ns2__AffectedPlaceStructure* ns2__AffectedPlaceStructure::soap_dup(soap*) returns deep copy of ns2__AffectedPlaceStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedPlaceStructure::soap_del() deep deletes ns2__AffectedPlaceStructure data members, use only after ns2__AffectedPlaceStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedPlaceStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a SITE or TOPOGRAPHIC PLACE (Locality).
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        PlaceRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of SITE or TOPOGRAPHIC PLACE
/// </BLOCKQUOTE></PRE>
/// Element "PrivateCode" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        PrivateCode                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SITE or TOPOGRAPHIC PLACE (locality) in which stop is found. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PlaceName                      0;
/// <PRE><BLOCKQUOTE>
///   Spatial coordinates of STOP POINT. Derivable from StopRef.
/// </BLOCKQUOTE></PRE>
/// Element "Location" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Location                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Category of TOPGRAPHIC PLACE or SITE.
/// </BLOCKQUOTE></PRE>
/// Element "PlaceCategory" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        PlaceCategory                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an EQUIPMENT found at location.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__NMTOKEN of length 0..unbounded.
    std::vector<xsd__NMTOKEN           > EquipmentRef                   0;
/// <PRE><BLOCKQUOTE>
///   Changes to accessibility for SITE.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedStopPlaceElementStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about the quays affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedStopPlaceElementStructure operations:
/// - ns2__AffectedStopPlaceElementStructure* soap_new_ns2__AffectedStopPlaceElementStructure(soap*) allocate and default initialize
/// - ns2__AffectedStopPlaceElementStructure* soap_new_ns2__AffectedStopPlaceElementStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedStopPlaceElementStructure* soap_new_req_ns2__AffectedStopPlaceElementStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedStopPlaceElementStructure* soap_new_set_ns2__AffectedStopPlaceElementStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedStopPlaceElementStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedStopPlaceElementStructure(soap*, ns2__AffectedStopPlaceElementStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedStopPlaceElementStructure(soap*, ns2__AffectedStopPlaceElementStructure*) serialize to a stream
/// - ns2__AffectedStopPlaceElementStructure* ns2__AffectedStopPlaceElementStructure::soap_dup(soap*) returns deep copy of ns2__AffectedStopPlaceElementStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedStopPlaceElementStructure::soap_del() deep deletes ns2__AffectedStopPlaceElementStructure data members, use only after ns2__AffectedStopPlaceElementStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedStopPlaceElementStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Disruption of accessibility.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":CasualtiesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Information on casualties.
/// </BLOCKQUOTE></PRE>
/// class ns2__CasualtiesStructure operations:
/// - ns2__CasualtiesStructure* soap_new_ns2__CasualtiesStructure(soap*) allocate and default initialize
/// - ns2__CasualtiesStructure* soap_new_ns2__CasualtiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CasualtiesStructure* soap_new_req_ns2__CasualtiesStructure(soap*, ...) allocate, set required members
/// - ns2__CasualtiesStructure* soap_new_set_ns2__CasualtiesStructure(soap*, ...) allocate, set all public members
/// - ns2__CasualtiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CasualtiesStructure(soap*, ns2__CasualtiesStructure*) deserialize from a stream
/// - int soap_write_ns2__CasualtiesStructure(soap*, ns2__CasualtiesStructure*) serialize to a stream
/// - ns2__CasualtiesStructure* ns2__CasualtiesStructure::soap_dup(soap*) returns deep copy of ns2__CasualtiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CasualtiesStructure::soap_del() deep deletes ns2__CasualtiesStructure data members, use only after ns2__CasualtiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CasualtiesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of fatalities.
/// </BLOCKQUOTE></PRE>
/// Element "NumberOfDeaths" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             NumberOfDeaths                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of injured presons.
/// </BLOCKQUOTE></PRE>
/// Element "NumberOfInjured" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             NumberOfInjured                0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractSituationElementStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for abstract EntryAbstract type.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractSituationElementStructure operations:
/// - ns2__AbstractSituationElementStructure* soap_new_ns2__AbstractSituationElementStructure(soap*) allocate and default initialize
/// - ns2__AbstractSituationElementStructure* soap_new_ns2__AbstractSituationElementStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractSituationElementStructure* soap_new_req_ns2__AbstractSituationElementStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractSituationElementStructure* soap_new_set_ns2__AbstractSituationElementStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractSituationElementStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractSituationElementStructure(soap*, ns2__AbstractSituationElementStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractSituationElementStructure(soap*, ns2__AbstractSituationElementStructure*) serialize to a stream
/// - ns2__AbstractSituationElementStructure* ns2__AbstractSituationElementStructure::soap_dup(soap*) returns deep copy of ns2__AbstractSituationElementStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractSituationElementStructure::soap_del() deep deletes ns2__AbstractSituationElementStructure data members, use only after ns2__AbstractSituationElementStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractSituationElementStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Time of creation of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "CreationTime" of XSD type xs:dateTime.
    xsd__dateTime                        CreationTime                   1;	///< Required element.
//  BEGIN GROUP <xs:group name="SituationSharedIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements Reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="SituationBaseIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created SITUATION. Provides namespace for Participant If absent proided from context.
/// </BLOCKQUOTE></PRE>
/// Element "CountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            CountryRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of SITUATION within a Participant. Excludes any version number.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of SITUATION within a Participant. Excldue versionr.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationNumber.
    ns2__EntryQualifierStructure*        SituationNumber                1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationUpdateIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created Update SITUATION element. Provides namespace for VersionParticipant If absent same as.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateCountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            UpdateCountryRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        UpdateParticipantRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of update version within a SITUATION Number Omit if reference to the base SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type "http://www.siri.org.uk/siri":SituationVersion.
    ns2__SituationVersion*               Version                        0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ReferencesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for references.
/// </BLOCKQUOTE></PRE>
/// class ns2__ReferencesStructure operations:
/// - ns2__ReferencesStructure* soap_new_ns2__ReferencesStructure(soap*) allocate and default initialize
/// - ns2__ReferencesStructure* soap_new_ns2__ReferencesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ReferencesStructure* soap_new_req_ns2__ReferencesStructure(soap*, ...) allocate, set required members
/// - ns2__ReferencesStructure* soap_new_set_ns2__ReferencesStructure(soap*, ...) allocate, set all public members
/// - ns2__ReferencesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ReferencesStructure(soap*, ns2__ReferencesStructure*) deserialize from a stream
/// - int soap_write_ns2__ReferencesStructure(soap*, ns2__ReferencesStructure*) serialize to a stream
/// - ns2__ReferencesStructure* ns2__ReferencesStructure::soap_dup(soap*) returns deep copy of ns2__ReferencesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ReferencesStructure::soap_del() deep deletes ns2__ReferencesStructure data members, use only after ns2__ReferencesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ReferencesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to another SITUATION with an indication of the nature of the association, e.g. a cause, a result, an update. Note that a Entry that is an update, i.e. has the same IdentifierNumber but a later version number as a previous Entry alway has a supercedes relationship and this does not need to be expliciitly coded.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__RelatedSituationStructure* of length 1..unbounded.
    std::vector<ns2__RelatedSituationStructure*> RelatedToRef                   1;
};

/// @brief "http://www.siri.org.uk/siri":RelatedSituationStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a reference.
/// </BLOCKQUOTE></PRE>
/// class ns2__RelatedSituationStructure operations:
/// - ns2__RelatedSituationStructure* soap_new_ns2__RelatedSituationStructure(soap*) allocate and default initialize
/// - ns2__RelatedSituationStructure* soap_new_ns2__RelatedSituationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RelatedSituationStructure* soap_new_req_ns2__RelatedSituationStructure(soap*, ...) allocate, set required members
/// - ns2__RelatedSituationStructure* soap_new_set_ns2__RelatedSituationStructure(soap*, ...) allocate, set all public members
/// - ns2__RelatedSituationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RelatedSituationStructure(soap*, ns2__RelatedSituationStructure*) deserialize from a stream
/// - int soap_write_ns2__RelatedSituationStructure(soap*, ns2__RelatedSituationStructure*) serialize to a stream
/// - ns2__RelatedSituationStructure* ns2__RelatedSituationStructure::soap_dup(soap*) returns deep copy of ns2__RelatedSituationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RelatedSituationStructure::soap_del() deep deletes ns2__RelatedSituationStructure data members, use only after ns2__RelatedSituationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RelatedSituationStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Time of creation of 'related to' assocation.
/// </BLOCKQUOTE></PRE>
/// Element "CreationTime" of XSD type xs:dateTime.
    xsd__dateTime                        CreationTime                   1;	///< Required element.
//  BEGIN GROUP <xs:group name="SituationSharedIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements Reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="SituationBaseIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created SITUATION. Provides namespace for Participant If absent proided from context.
/// </BLOCKQUOTE></PRE>
/// Element "CountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            CountryRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of SITUATION within a Participant. Excludes any version number.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of SITUATION within a Participant. Excldue versionr.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationNumber.
    ns2__EntryQualifierStructure*        SituationNumber                1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationUpdateIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created Update SITUATION element. Provides namespace for VersionParticipant If absent same as.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateCountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            UpdateCountryRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        UpdateParticipantRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of update version within a SITUATION Number Omit if reference to the base SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type "http://www.siri.org.uk/siri":SituationVersion.
    ns2__SituationVersion*               Version                        0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   A single string that identifiers the referenced SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalReference" of XSD type xs:string.
    std::wstring*                        ExternalReference              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Relationship of refercence to the referncing SITUATION e.
/// </BLOCKQUOTE></PRE>
/// Element "RelatedAs" of XSD type "http://www.siri.org.uk/siri":RelatedToEnumeration.
    enum ns2__RelatedToEnumeration*      RelatedAs                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedRoadStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Raod scope for scope of SITUATION or effect.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedRoadStructure operations:
/// - ns2__AffectedRoadStructure* soap_new_ns2__AffectedRoadStructure(soap*) allocate and default initialize
/// - ns2__AffectedRoadStructure* soap_new_ns2__AffectedRoadStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedRoadStructure* soap_new_req_ns2__AffectedRoadStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedRoadStructure* soap_new_set_ns2__AffectedRoadStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedRoadStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedRoadStructure(soap*, ns2__AffectedRoadStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedRoadStructure(soap*, ns2__AffectedRoadStructure*) serialize to a stream
/// - ns2__AffectedRoadStructure* ns2__AffectedRoadStructure::soap_dup(soap*) returns deep copy of ns2__AffectedRoadStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedRoadStructure::soap_del() deep deletes ns2__AffectedRoadStructure data members, use only after ns2__AffectedRoadStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedRoadStructure : public xsd__anyType
{ public:
/// Element "Road" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePointLinear.
    ns5__RoadsideReferencePointLinear*   Road                           0;	///< Optional element.
//  BEGIN GROUP <xs:group name="ProjectionGroup">
/// <PRE><BLOCKQUOTE>
///   GIs projection of Section. NB Line here means Geometry Polyline, not Transmodel Transport Line.
/// </BLOCKQUOTE></PRE>
/// Element "LinkProjection" of XSD type "http://www.ifopt.org.uk/ifopt":LinkProjectionStructure.
    ns4__LinkProjectionStructure*        LinkProjection                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Offset from start or end of section to use when projecting.
/// </BLOCKQUOTE></PRE>
/// Element "Offset" of XSD type "http://www.siri.org.uk/siri":OffsetStructure.
    ns2__OffsetStructure*                Offset                         0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":OptionalTrafficElementStructure is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   An event which is not planned by the traffic OPERATOR, which is affecting, or has the potential to affect traffic flow. This SIRI-SX element embeds the Datex2 TrafficElement, making all elements optional because they may alternatvielky be specified by common SIRI-SRX SITUATION elements.
/// </BLOCKQUOTE></PRE>
/// class ns2__OptionalTrafficElementStructure operations:
/// - ns2__OptionalTrafficElementStructure* soap_new_ns2__OptionalTrafficElementStructure(soap*) allocate and default initialize
/// - ns2__OptionalTrafficElementStructure* soap_new_ns2__OptionalTrafficElementStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OptionalTrafficElementStructure* soap_new_req_ns2__OptionalTrafficElementStructure(soap*, ...) allocate, set required members
/// - ns2__OptionalTrafficElementStructure* soap_new_set_ns2__OptionalTrafficElementStructure(soap*, ...) allocate, set all public members
/// - ns2__OptionalTrafficElementStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OptionalTrafficElementStructure(soap*, ns2__OptionalTrafficElementStructure*) deserialize from a stream
/// - int soap_write_ns2__OptionalTrafficElementStructure(soap*, ns2__OptionalTrafficElementStructure*) serialize to a stream
/// - ns2__OptionalTrafficElementStructure* ns2__OptionalTrafficElementStructure::soap_dup(soap*) returns deep copy of ns2__OptionalTrafficElementStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OptionalTrafficElementStructure::soap_del() deep deletes ns2__OptionalTrafficElementStructure data members, use only after ns2__OptionalTrafficElementStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OptionalTrafficElementStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="Datex2ManagementGroup">
/// <PRE><BLOCKQUOTE>
///   Datex2 SITUATION management elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A unique alphanumeric reference (either an external reference or GUID) of the SITUATIONRecord object (the first version of the record) that was created by the original supplier.
/// </BLOCKQUOTE></PRE>
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          situationRecordCreationReference 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The date/time that the SITUATIONRecord object (the first version of the record) was created by the original supplier.
/// </BLOCKQUOTE></PRE>
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordCreationTime    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The date/time that the information represented by the current version of the SITUATIONRecord was observed by the original (potentially external) source of the information.
/// </BLOCKQUOTE></PRE>
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Each record within a SITUATION may iterate through a series of versions during its life time. The SITUATION record version uniquely identifies the version of a particular record within a SITUATION. It is generated and used by systems external to DATEX 2.
/// </BLOCKQUOTE></PRE>
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             situationRecordVersion         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The date/time that this current version of the SITUATIONRecord was written into the database of the supplier which is involved in the data exchange.
/// </BLOCKQUOTE></PRE>
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordVersionTime     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The date/time that the current version of the SITUATION Record was written into the database of the original supplier in the supply chain.
/// </BLOCKQUOTE></PRE>
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordFirstSupplierVersionTime 1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="Datex2SituationGroup">
/// <PRE><BLOCKQUOTE>
///   Datex2 SITUATION common elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An assessment of the degree of likelihood that the reported event will occur.
/// </BLOCKQUOTE></PRE>
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum*  probabilityOfOccurrence        0;	///< Optional element.
/// Element "Source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         Source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="Datex2RoadGroup">
/// <PRE><BLOCKQUOTE>
///   Datex2 Trrffic element road.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Impact of Road SITUATION as specified by Datex2.
/// </BLOCKQUOTE></PRE>
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Impact of Road SITUATION as specified by Datex2 model.
/// </BLOCKQUOTE></PRE>
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Datex 2 comments for public use.
/// </BLOCKQUOTE></PRE>
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// <PRE><BLOCKQUOTE>
///   Ccomments not for public use.
/// </BLOCKQUOTE></PRE>
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// <PRE><BLOCKQUOTE>
///   Datex 2 model of where event ois taking place on the road.
/// </BLOCKQUOTE></PRE>
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="Datex2OtherGroup">
/// <PRE><BLOCKQUOTE>
///   Datex2 Tarffic element.
/// </BLOCKQUOTE></PRE>
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":SituationSourceStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a source, i.e. provider of information.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationSourceStructure operations:
/// - ns2__SituationSourceStructure* soap_new_ns2__SituationSourceStructure(soap*) allocate and default initialize
/// - ns2__SituationSourceStructure* soap_new_ns2__SituationSourceStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationSourceStructure* soap_new_req_ns2__SituationSourceStructure(soap*, ...) allocate, set required members
/// - ns2__SituationSourceStructure* soap_new_set_ns2__SituationSourceStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationSourceStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationSourceStructure(soap*, ns2__SituationSourceStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationSourceStructure(soap*, ns2__SituationSourceStructure*) serialize to a stream
/// - ns2__SituationSourceStructure* ns2__SituationSourceStructure::soap_dup(soap*) returns deep copy of ns2__SituationSourceStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationSourceStructure::soap_del() deep deletes ns2__SituationSourceStructure data members, use only after ns2__SituationSourceStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationSourceStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Country of origin of source element.
/// </BLOCKQUOTE></PRE>
/// Element "Country" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        Country                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of Source.
/// </BLOCKQUOTE></PRE>
/// Element "SourceType" of XSD type "http://www.siri.org.uk/siri":SituationSourceTypeEnumeration.
    enum ns2__SituationSourceTypeEnumeration  SourceType                     1;	///< Required element.
//  BEGIN GROUP <xs:group name="SituationSourceDetailsGroup">
/// <PRE><BLOCKQUOTE>
///   Group of source details.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Email of Supplier of information.
/// </BLOCKQUOTE></PRE>
/// Element "Email" of XSD type "http://www.siri.org.uk/siri":EmailAddressType.
    ns2__EmailAddressType*               Email                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Phone number of Supplier of information.
/// </BLOCKQUOTE></PRE>
/// Element "Phone" of XSD type "http://www.siri.org.uk/siri":PhoneType.
    ns2__PhoneType*                      Phone                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Fax number of Supplier of information.
/// </BLOCKQUOTE></PRE>
/// Element "Fax" of XSD type "http://www.siri.org.uk/siri":PhoneType.
    ns2__PhoneType*                      Fax                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information was obtained from a web site URL of site and/or page.
/// </BLOCKQUOTE></PRE>
/// Element "Web" of XSD type xs:anyURI.
    xsd__anyURI*                         Web                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Other information about source.
/// </BLOCKQUOTE></PRE>
/// Element "Other" of XSD type xs:string.
    std::wstring*                        Other                          0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Nature of method used to get Source.
/// </BLOCKQUOTE></PRE>
/// Element "SourceMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SourceTypeEnum.
    enum ns5__SourceTypeEnum*            SourceMethod                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an Agent, i.e. Capture client user who input an SITUATION. Available for use in intranet exchange of SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// Element "AgentReference" of XSD type xs:string.
    std::wstring*                        AgentReference                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of for source.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Job title of Source.
/// </BLOCKQUOTE></PRE>
/// Element "SourceRole" of XSD type xs:string.
    std::wstring*                        SourceRole                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time of communication of message, if different from creation time.
/// </BLOCKQUOTE></PRE>
/// Element "TimeOfCommunication" of XSD type xs:dateTime.
    xsd__dateTime*                       TimeOfCommunication            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   External system reference to SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalCode" of XSD type xs:string.
    std::wstring*                        ExternalCode                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Electronic file / attachment containing information about SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "SourceFile" of XSD type xs:anyURI.
    xsd__anyURI*                         SourceFile                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectsScopeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Location model for scope of SITUATION or effect.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectsScopeStructure operations:
/// - ns2__AffectsScopeStructure* soap_new_ns2__AffectsScopeStructure(soap*) allocate and default initialize
/// - ns2__AffectsScopeStructure* soap_new_ns2__AffectsScopeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectsScopeStructure* soap_new_req_ns2__AffectsScopeStructure(soap*, ...) allocate, set required members
/// - ns2__AffectsScopeStructure* soap_new_set_ns2__AffectsScopeStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectsScopeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectsScopeStructure(soap*, ns2__AffectsScopeStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectsScopeStructure(soap*, ns2__AffectsScopeStructure*) serialize to a stream
/// - ns2__AffectsScopeStructure* ns2__AffectsScopeStructure::soap_dup(soap*) returns deep copy of ns2__AffectsScopeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectsScopeStructure::soap_del() deep deletes ns2__AffectsScopeStructure data members, use only after ns2__AffectsScopeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectsScopeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Affected overall Geographic scope.
/// </BLOCKQUOTE></PRE>
/// Element "AreaOfInterest" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AreaOfInterestEnum.
    enum ns5__AreaOfInterestEnum*        AreaOfInterest                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Affected OPERATORs, If absent, taken from context. If present, any OPERATORs stated completely replace those from context.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectsScopeStructure_Operators operations:
/// - _ns2__AffectsScopeStructure_Operators* soap_new__ns2__AffectsScopeStructure_Operators(soap*) allocate and default initialize
/// - _ns2__AffectsScopeStructure_Operators* soap_new__ns2__AffectsScopeStructure_Operators(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectsScopeStructure_Operators* soap_new_req__ns2__AffectsScopeStructure_Operators(soap*, ...) allocate, set required members
/// - _ns2__AffectsScopeStructure_Operators* soap_new_set__ns2__AffectsScopeStructure_Operators(soap*, ...) allocate, set all public members
/// - _ns2__AffectsScopeStructure_Operators::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectsScopeStructure_Operators(soap*, _ns2__AffectsScopeStructure_Operators*) deserialize from a stream
/// - int soap_write__ns2__AffectsScopeStructure_Operators(soap*, _ns2__AffectsScopeStructure_Operators*) serialize to a stream
/// - _ns2__AffectsScopeStructure_Operators* _ns2__AffectsScopeStructure_Operators::soap_dup(soap*) returns deep copy of _ns2__AffectsScopeStructure_Operators, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectsScopeStructure_Operators::soap_del() deep deletes _ns2__AffectsScopeStructure_Operators data members, use only after _ns2__AffectsScopeStructure_Operators::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectsScopeStructure_Operators
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_AffectsScopeStructure_Operators;	///< Union _ns2__union_AffectsScopeStructure_Operators selector: set to SOAP_UNION__ns2__union_AffectsScopeStructure_Operators_<fieldname>
/// Union for choice in ns2__Operators.
    union _ns2__union_AffectsScopeStructure_Operators
    {
/// <PRE><BLOCKQUOTE>
///   All OPERATORs.
/// </BLOCKQUOTE></PRE>
/// Element "AllOperators" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllOperators                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Operators of services affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedOperatorStructure* of length 1..unbounded.
    std::vector<ns2__AffectedOperatorStructure*> *AffectedOperator               1;
    }                                    union_AffectsScopeStructure_Operators;
//  END OF CHOICE
    }                                   *Operators                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Networks affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectsScopeStructure_Networks operations:
/// - _ns2__AffectsScopeStructure_Networks* soap_new__ns2__AffectsScopeStructure_Networks(soap*) allocate and default initialize
/// - _ns2__AffectsScopeStructure_Networks* soap_new__ns2__AffectsScopeStructure_Networks(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectsScopeStructure_Networks* soap_new_req__ns2__AffectsScopeStructure_Networks(soap*, ...) allocate, set required members
/// - _ns2__AffectsScopeStructure_Networks* soap_new_set__ns2__AffectsScopeStructure_Networks(soap*, ...) allocate, set all public members
/// - _ns2__AffectsScopeStructure_Networks::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectsScopeStructure_Networks(soap*, _ns2__AffectsScopeStructure_Networks*) deserialize from a stream
/// - int soap_write__ns2__AffectsScopeStructure_Networks(soap*, _ns2__AffectsScopeStructure_Networks*) serialize to a stream
/// - _ns2__AffectsScopeStructure_Networks* _ns2__AffectsScopeStructure_Networks::soap_dup(soap*) returns deep copy of _ns2__AffectsScopeStructure_Networks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectsScopeStructure_Networks::soap_del() deep deletes _ns2__AffectsScopeStructure_Networks data members, use only after _ns2__AffectsScopeStructure_Networks::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectsScopeStructure_Networks
    {
/// <PRE><BLOCKQUOTE>
///   Nrtworks and Route(s) affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of AffectedNetwork of length 1..unbounded.
    std::vector<
/// class _ns2__AffectsScopeStructure_Networks_AffectedNetwork operations:
/// - _ns2__AffectsScopeStructure_Networks_AffectedNetwork* soap_new__ns2__AffectsScopeStructure_Networks_AffectedNetwork(soap*) allocate and default initialize
/// - _ns2__AffectsScopeStructure_Networks_AffectedNetwork* soap_new__ns2__AffectsScopeStructure_Networks_AffectedNetwork(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectsScopeStructure_Networks_AffectedNetwork* soap_new_req__ns2__AffectsScopeStructure_Networks_AffectedNetwork(soap*, ...) allocate, set required members
/// - _ns2__AffectsScopeStructure_Networks_AffectedNetwork* soap_new_set__ns2__AffectsScopeStructure_Networks_AffectedNetwork(soap*, ...) allocate, set all public members
/// - _ns2__AffectsScopeStructure_Networks_AffectedNetwork::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectsScopeStructure_Networks_AffectedNetwork(soap*, _ns2__AffectsScopeStructure_Networks_AffectedNetwork*) deserialize from a stream
/// - int soap_write__ns2__AffectsScopeStructure_Networks_AffectedNetwork(soap*, _ns2__AffectsScopeStructure_Networks_AffectedNetwork*) serialize to a stream
/// - _ns2__AffectsScopeStructure_Networks_AffectedNetwork* _ns2__AffectsScopeStructure_Networks_AffectedNetwork::soap_dup(soap*) returns deep copy of _ns2__AffectsScopeStructure_Networks_AffectedNetwork, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectsScopeStructure_Networks_AffectedNetwork::soap_del() deep deletes _ns2__AffectsScopeStructure_Networks_AffectedNetwork data members, use only after _ns2__AffectsScopeStructure_Networks_AffectedNetwork::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectsScopeStructure_Networks_AffectedNetwork
    {
/// INHERITED FROM ns2__AffectedNetworkStructure:
/// <PRE><BLOCKQUOTE>
///   Operators of LINEs affected by incident. Overrides any value specified for (i) General Context.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedOperatorStructure* of length 0..unbounded.
    std::vector<ns2__AffectedOperatorStructure*> AffectedOperator               0;
/// <PRE><BLOCKQUOTE>
///   Network of affected LINE. If absent, may be taken from context.
/// </BLOCKQUOTE></PRE>
/// Element "NetworkRef" of XSD type "http://www.siri.org.uk/siri":NetworkRefStructure.
    ns2__NetworkRefStructure*            NetworkRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Network. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> NetworkName                    0;
/// <PRE><BLOCKQUOTE>
///   Textual description of overall routes affected. Should correspond to any structured description in the AffectedLines element. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> RoutesAffected                 0;
//  BEGIN GROUP <xs:group name="AffectedModeGroup">
/// <PRE><BLOCKQUOTE>
///   Mode Submode and OPERATOR. Overrides any value sspecified for (i) Affected Network (ii) General Context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Vehicle mode- Tpeg ModeType pti1.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMode.
    enum ns2__VehicleModesOfTransportEnumeration  VehicleMode                    0 = ns2__VehicleModesOfTransportEnumeration__unknown;	///< Default element value="unknown".
//  BEGIN GROUP <xs:group name="PtNetworkModeChoiceGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Submode of mode.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_AffectsScopeStructure_Networks_AffectedNetwork 0;	///< Union _ns2__union_AffectsScopeStructure_Networks_AffectedNetwork selector: set to SOAP_UNION__ns2__union_AffectsScopeStructure_Networks_AffectedNetwork_<fieldname> or 0 to omit
    union _ns2__union_AffectsScopeStructure_Networks_AffectedNetwork
    {
/// <PRE><BLOCKQUOTE>
///   TPEG pti08 Air submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AirSubmode.
    enum ns2__AirSubmodesOfTransportEnumeration  AirSubmode                     0 = ns2__AirSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti05 Bus submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":BusSubmode.
    enum ns2__BusSubmodesOfTransportEnumeration  BusSubmode                     0 = ns2__BusSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti03 Coach submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CoachSubmode.
    enum ns2__CoachSubmodesOfTransportEnumeration  CoachSubmode                   0 = ns2__CoachSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti04 Metro submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MetroSubmode.
    enum ns2__MetroSubmodesOfTransportEnumeration  MetroSubmode                   0 = ns2__MetroSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti02 Rail submodes loc13.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RailSubmode.
    enum ns2__RailSubmodesOfTransportEnumeration  RailSubmode                    0 = ns2__RailSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti06 Tram submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TramSubmode.
    enum ns2__TramSubmodesOfTransportEnumeration  TramSubmode                    0 = ns2__TramSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti07 Water submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":WaterSubmode.
    enum ns2__WaterSubmodesOfTransportEnumeration  WaterSubmode                   0 = ns2__WaterSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
    }                                    union_AffectsScopeStructure_Networks_AffectedNetwork;
//  END OF CHOICE
//  END OF GROUP
/// Element "AccessMode" of XSD type "http://www.ifopt.org.uk/ifopt":AccessModesEnumeration.
    enum ns4__AccessModesEnumeration*    AccessMode                     0;	///< Optional element.
//  END OF GROUP
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// <PRE><BLOCKQUOTE>
///   All LINEs in the network are affected.
/// </BLOCKQUOTE></PRE>
/// Element "AllLines" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType*                 AllLines                       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Only some ROUTEs are affected, LINE level information not available. See the AffectedRoutes element for textual description.
/// </BLOCKQUOTE></PRE>
/// Element "SelectedRoutes" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType*                 SelectedRoutes                 nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Information about the indvidual LINEs in the network that are affected. If not explclitly overrided Modes and submodes will be defaulted to any values present (i) in the AffectedNetwork (ii) In the general Context.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedLineStructure* of length 1..unbounded.
    std::vector<ns2__AffectedLineStructure*> AffectedLine                  ;
//  END OF SEQUENCE
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
//  END OF INHERITED FROM ns2__AffectedNetworkStructure
    }>                                   AffectedNetwork                1;
    }                                   *Networks                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   STOP POINTs affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectsScopeStructure_StopPoints operations:
/// - _ns2__AffectsScopeStructure_StopPoints* soap_new__ns2__AffectsScopeStructure_StopPoints(soap*) allocate and default initialize
/// - _ns2__AffectsScopeStructure_StopPoints* soap_new__ns2__AffectsScopeStructure_StopPoints(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectsScopeStructure_StopPoints* soap_new_req__ns2__AffectsScopeStructure_StopPoints(soap*, ...) allocate, set required members
/// - _ns2__AffectsScopeStructure_StopPoints* soap_new_set__ns2__AffectsScopeStructure_StopPoints(soap*, ...) allocate, set all public members
/// - _ns2__AffectsScopeStructure_StopPoints::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectsScopeStructure_StopPoints(soap*, _ns2__AffectsScopeStructure_StopPoints*) deserialize from a stream
/// - int soap_write__ns2__AffectsScopeStructure_StopPoints(soap*, _ns2__AffectsScopeStructure_StopPoints*) serialize to a stream
/// - _ns2__AffectsScopeStructure_StopPoints* _ns2__AffectsScopeStructure_StopPoints::soap_dup(soap*) returns deep copy of _ns2__AffectsScopeStructure_StopPoints, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectsScopeStructure_StopPoints::soap_del() deep deletes _ns2__AffectsScopeStructure_StopPoints data members, use only after _ns2__AffectsScopeStructure_StopPoints::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectsScopeStructure_StopPoints
    {
/// <PRE><BLOCKQUOTE>
///   Stop affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedStopPointStructure* of length 1..unbounded.
    std::vector<ns2__AffectedStopPointStructure*> AffectedStopPoint              1;
    }                                   *StopPoints                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Places other than STOP POINTs affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectsScopeStructure_StopPlaces operations:
/// - _ns2__AffectsScopeStructure_StopPlaces* soap_new__ns2__AffectsScopeStructure_StopPlaces(soap*) allocate and default initialize
/// - _ns2__AffectsScopeStructure_StopPlaces* soap_new__ns2__AffectsScopeStructure_StopPlaces(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectsScopeStructure_StopPlaces* soap_new_req__ns2__AffectsScopeStructure_StopPlaces(soap*, ...) allocate, set required members
/// - _ns2__AffectsScopeStructure_StopPlaces* soap_new_set__ns2__AffectsScopeStructure_StopPlaces(soap*, ...) allocate, set all public members
/// - _ns2__AffectsScopeStructure_StopPlaces::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectsScopeStructure_StopPlaces(soap*, _ns2__AffectsScopeStructure_StopPlaces*) deserialize from a stream
/// - int soap_write__ns2__AffectsScopeStructure_StopPlaces(soap*, _ns2__AffectsScopeStructure_StopPlaces*) serialize to a stream
/// - _ns2__AffectsScopeStructure_StopPlaces* _ns2__AffectsScopeStructure_StopPlaces::soap_dup(soap*) returns deep copy of _ns2__AffectsScopeStructure_StopPlaces, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectsScopeStructure_StopPlaces::soap_del() deep deletes _ns2__AffectsScopeStructure_StopPlaces data members, use only after _ns2__AffectsScopeStructure_StopPlaces::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectsScopeStructure_StopPlaces
    {
/// <PRE><BLOCKQUOTE>
///   Stop affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedStopPlaceStructure* of length 1..unbounded.
    std::vector<ns2__AffectedStopPlaceStructure*> AffectedStopPlace              1;
    }                                   *StopPlaces                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Places other than STOP POINTs affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectsScopeStructure_Places operations:
/// - _ns2__AffectsScopeStructure_Places* soap_new__ns2__AffectsScopeStructure_Places(soap*) allocate and default initialize
/// - _ns2__AffectsScopeStructure_Places* soap_new__ns2__AffectsScopeStructure_Places(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectsScopeStructure_Places* soap_new_req__ns2__AffectsScopeStructure_Places(soap*, ...) allocate, set required members
/// - _ns2__AffectsScopeStructure_Places* soap_new_set__ns2__AffectsScopeStructure_Places(soap*, ...) allocate, set all public members
/// - _ns2__AffectsScopeStructure_Places::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectsScopeStructure_Places(soap*, _ns2__AffectsScopeStructure_Places*) deserialize from a stream
/// - int soap_write__ns2__AffectsScopeStructure_Places(soap*, _ns2__AffectsScopeStructure_Places*) serialize to a stream
/// - _ns2__AffectsScopeStructure_Places* _ns2__AffectsScopeStructure_Places::soap_dup(soap*) returns deep copy of _ns2__AffectsScopeStructure_Places, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectsScopeStructure_Places::soap_del() deep deletes _ns2__AffectsScopeStructure_Places data members, use only after _ns2__AffectsScopeStructure_Places::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectsScopeStructure_Places
    {
/// <PRE><BLOCKQUOTE>
///   Stop affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedPlaceStructure* of length 1..unbounded.
    std::vector<ns2__AffectedPlaceStructure*> AffectedPlace                  1;
    }                                   *Places                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specific journeys affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectsScopeStructure_VehicleJourneys operations:
/// - _ns2__AffectsScopeStructure_VehicleJourneys* soap_new__ns2__AffectsScopeStructure_VehicleJourneys(soap*) allocate and default initialize
/// - _ns2__AffectsScopeStructure_VehicleJourneys* soap_new__ns2__AffectsScopeStructure_VehicleJourneys(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectsScopeStructure_VehicleJourneys* soap_new_req__ns2__AffectsScopeStructure_VehicleJourneys(soap*, ...) allocate, set required members
/// - _ns2__AffectsScopeStructure_VehicleJourneys* soap_new_set__ns2__AffectsScopeStructure_VehicleJourneys(soap*, ...) allocate, set all public members
/// - _ns2__AffectsScopeStructure_VehicleJourneys::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectsScopeStructure_VehicleJourneys(soap*, _ns2__AffectsScopeStructure_VehicleJourneys*) deserialize from a stream
/// - int soap_write__ns2__AffectsScopeStructure_VehicleJourneys(soap*, _ns2__AffectsScopeStructure_VehicleJourneys*) serialize to a stream
/// - _ns2__AffectsScopeStructure_VehicleJourneys* _ns2__AffectsScopeStructure_VehicleJourneys::soap_dup(soap*) returns deep copy of _ns2__AffectsScopeStructure_VehicleJourneys, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectsScopeStructure_VehicleJourneys::soap_del() deep deletes _ns2__AffectsScopeStructure_VehicleJourneys data members, use only after _ns2__AffectsScopeStructure_VehicleJourneys::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectsScopeStructure_VehicleJourneys
    {
/// <PRE><BLOCKQUOTE>
///   Journeys affected by the SITUATIONj
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedVehicleJourneyStructure* of length 1..unbounded.
    std::vector<ns2__AffectedVehicleJourneyStructure*> AffectedVehicleJourney         1;
    }                                   *VehicleJourneys                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Roads affected by.
/// </BLOCKQUOTE></PRE>
/// Element "Roads" of XSD type "http://www.siri.org.uk/siri":AffectedRoadsStructure.
    ns2__AffectedRoadsStructure*         Roads                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedRoadsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Location model for scope of SITUATION or effect.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedRoadsStructure operations:
/// - ns2__AffectedRoadsStructure* soap_new_ns2__AffectedRoadsStructure(soap*) allocate and default initialize
/// - ns2__AffectedRoadsStructure* soap_new_ns2__AffectedRoadsStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedRoadsStructure* soap_new_req_ns2__AffectedRoadsStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedRoadsStructure* soap_new_set_ns2__AffectedRoadsStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedRoadsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedRoadsStructure(soap*, ns2__AffectedRoadsStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedRoadsStructure(soap*, ns2__AffectedRoadsStructure*) serialize to a stream
/// - ns2__AffectedRoadsStructure* ns2__AffectedRoadsStructure::soap_dup(soap*) returns deep copy of ns2__AffectedRoadsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedRoadsStructure::soap_del() deep deletes ns2__AffectedRoadsStructure data members, use only after ns2__AffectedRoadsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedRoadsStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Refereences to road network locations affected by the SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Datex2Locations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               Datex2Locations                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of affected road.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedRoadStructure* of length 0..unbounded.
    std::vector<ns2__AffectedRoadStructure*> AffectedRoad                   0;
};

/// @brief "http://www.siri.org.uk/siri":ImageStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for image.
/// </BLOCKQUOTE></PRE>
/// class ns2__ImageStructure operations:
/// - ns2__ImageStructure* soap_new_ns2__ImageStructure(soap*) allocate and default initialize
/// - ns2__ImageStructure* soap_new_ns2__ImageStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ImageStructure* soap_new_req_ns2__ImageStructure(soap*, ...) allocate, set required members
/// - ns2__ImageStructure* soap_new_set_ns2__ImageStructure(soap*, ...) allocate, set all public members
/// - ns2__ImageStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ImageStructure(soap*, ns2__ImageStructure*) deserialize from a stream
/// - int soap_write_ns2__ImageStructure(soap*, ns2__ImageStructure*) serialize to a stream
/// - ns2__ImageStructure* ns2__ImageStructure::soap_dup(soap*) returns deep copy of ns2__ImageStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ImageStructure::soap_del() deep deletes ns2__ImageStructure data members, use only after ns2__ImageStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ImageStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ImageStructure        ;	///< Union _ns2__union_ImageStructure selector: set to SOAP_UNION__ns2__union_ImageStructure_<fieldname>
    union _ns2__union_ImageStructure
    {
/// <PRE><BLOCKQUOTE>
///   Reference to an image.
/// </BLOCKQUOTE></PRE>
/// Element "ImageRef" of XSD type xs:anyURI.
    xsd__anyURI*                         ImageRef                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Embedded image.
/// </BLOCKQUOTE></PRE>
/// Element "ImageBinary" of XSD type xs:base64Binary.
    xsd__base64Binary*                   ImageBinary                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ImageStructure          ;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Categorisation of image content.
/// </BLOCKQUOTE></PRE>
/// Element "ImageContent" of XSD type "http://www.siri.org.uk/siri":ImageContentEnumeration.
    enum ns2__ImageContentEnumeration*   ImageContent                   0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":InfoLinkStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a general hyperlink.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoLinkStructure operations:
/// - ns2__InfoLinkStructure* soap_new_ns2__InfoLinkStructure(soap*) allocate and default initialize
/// - ns2__InfoLinkStructure* soap_new_ns2__InfoLinkStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoLinkStructure* soap_new_req_ns2__InfoLinkStructure(soap*, ...) allocate, set required members
/// - ns2__InfoLinkStructure* soap_new_set_ns2__InfoLinkStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoLinkStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoLinkStructure(soap*, ns2__InfoLinkStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoLinkStructure(soap*, ns2__InfoLinkStructure*) serialize to a stream
/// - ns2__InfoLinkStructure* ns2__InfoLinkStructure::soap_dup(soap*) returns deep copy of ns2__InfoLinkStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoLinkStructure::soap_del() deep deletes ns2__InfoLinkStructure data members, use only after ns2__InfoLinkStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoLinkStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   URI for link.
/// </BLOCKQUOTE></PRE>
/// Element "Uri" of XSD type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Label for Link. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Label                          0;
/// <PRE><BLOCKQUOTE>
///   Image to use when presenting hyperlink.
/// </BLOCKQUOTE></PRE>
/// Element "Image" of XSD type "http://www.siri.org.uk/siri":ImageStructure.
    ns2__ImageStructure*                 Image                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Categorisation of link content.
/// </BLOCKQUOTE></PRE>
/// Element "LinkContent" of XSD type "http://www.siri.org.uk/siri":LinkContentEnumeration.
    enum ns2__LinkContentEnumeration*    LinkContent                    0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":PtConsequencesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for list of effects.
/// </BLOCKQUOTE></PRE>
/// class ns2__PtConsequencesStructure operations:
/// - ns2__PtConsequencesStructure* soap_new_ns2__PtConsequencesStructure(soap*) allocate and default initialize
/// - ns2__PtConsequencesStructure* soap_new_ns2__PtConsequencesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PtConsequencesStructure* soap_new_req_ns2__PtConsequencesStructure(soap*, ...) allocate, set required members
/// - ns2__PtConsequencesStructure* soap_new_set_ns2__PtConsequencesStructure(soap*, ...) allocate, set all public members
/// - ns2__PtConsequencesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PtConsequencesStructure(soap*, ns2__PtConsequencesStructure*) deserialize from a stream
/// - int soap_write_ns2__PtConsequencesStructure(soap*, ns2__PtConsequencesStructure*) serialize to a stream
/// - ns2__PtConsequencesStructure* ns2__PtConsequencesStructure::soap_dup(soap*) returns deep copy of ns2__PtConsequencesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PtConsequencesStructure::soap_del() deep deletes ns2__PtConsequencesStructure data members, use only after ns2__PtConsequencesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PtConsequencesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Nature of the effect to disrupt (or restore) service, and further details.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__PtConsequenceStructure* of length 1..unbounded.
    std::vector<ns2__PtConsequenceStructure*> Consequence                    1;
};

/// @brief "http://www.siri.org.uk/siri":PtConsequenceStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for disruption.
/// </BLOCKQUOTE></PRE>
/// class ns2__PtConsequenceStructure operations:
/// - ns2__PtConsequenceStructure* soap_new_ns2__PtConsequenceStructure(soap*) allocate and default initialize
/// - ns2__PtConsequenceStructure* soap_new_ns2__PtConsequenceStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PtConsequenceStructure* soap_new_req_ns2__PtConsequenceStructure(soap*, ...) allocate, set required members
/// - ns2__PtConsequenceStructure* soap_new_set_ns2__PtConsequenceStructure(soap*, ...) allocate, set all public members
/// - ns2__PtConsequenceStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PtConsequenceStructure(soap*, ns2__PtConsequenceStructure*) deserialize from a stream
/// - int soap_write_ns2__PtConsequenceStructure(soap*, ns2__PtConsequenceStructure*) serialize to a stream
/// - ns2__PtConsequenceStructure* ns2__PtConsequenceStructure::soap_dup(soap*) returns deep copy of ns2__PtConsequenceStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PtConsequenceStructure::soap_del() deep deletes ns2__PtConsequenceStructure data members, use only after ns2__PtConsequenceStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PtConsequenceStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Period of effect of disruption, if different from that of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Period" of XSD type "http://www.siri.org.uk/siri":HalfOpenTimestampRangeStructure.
    ns2__HalfOpenTimestampRangeStructure*  Period                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of effect on service. TPEG Pti13 Service Condition values.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Condition.
    enum ns2__ServiceConditionEnumeration*  Condition                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Severity of disruption if different from that of SITUATION. TPEG pti26
/// </BLOCKQUOTE></PRE>
/// Element "Severity" of XSD type "http://www.siri.org.uk/siri":SeverityEnumeration.
    enum ns2__SeverityEnumeration        Severity                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parts of transport network affected by disruption if different from that of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Affects" of XSD type "http://www.siri.org.uk/siri":AffectsScopeStructure.
    ns2__AffectsScopeStructure*          Affects                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Effect on different passenger needs.
/// </BLOCKQUOTE></PRE>
/// class _ns2__PtConsequenceStructure_Suitabilities operations:
/// - _ns2__PtConsequenceStructure_Suitabilities* soap_new__ns2__PtConsequenceStructure_Suitabilities(soap*) allocate and default initialize
/// - _ns2__PtConsequenceStructure_Suitabilities* soap_new__ns2__PtConsequenceStructure_Suitabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__PtConsequenceStructure_Suitabilities* soap_new_req__ns2__PtConsequenceStructure_Suitabilities(soap*, ...) allocate, set required members
/// - _ns2__PtConsequenceStructure_Suitabilities* soap_new_set__ns2__PtConsequenceStructure_Suitabilities(soap*, ...) allocate, set all public members
/// - _ns2__PtConsequenceStructure_Suitabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PtConsequenceStructure_Suitabilities(soap*, _ns2__PtConsequenceStructure_Suitabilities*) deserialize from a stream
/// - int soap_write__ns2__PtConsequenceStructure_Suitabilities(soap*, _ns2__PtConsequenceStructure_Suitabilities*) serialize to a stream
/// - _ns2__PtConsequenceStructure_Suitabilities* _ns2__PtConsequenceStructure_Suitabilities::soap_dup(soap*) returns deep copy of _ns2__PtConsequenceStructure_Suitabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PtConsequenceStructure_Suitabilities::soap_del() deep deletes _ns2__PtConsequenceStructure_Suitabilities data members, use only after _ns2__PtConsequenceStructure_Suitabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PtConsequenceStructure_Suitabilities
    {
/// <PRE><BLOCKQUOTE>
///   Effect on a passenger need.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__SuitabilityStructure* of length 1..unbounded.
    std::vector<ns3__SuitabilityStructure*> Suitability                    1;
    }                                   *Suitabilities                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Advice to passengers.
/// </BLOCKQUOTE></PRE>
/// Element "Advice" of XSD type "http://www.siri.org.uk/siri":PtAdviceStructure.
    ns2__PtAdviceStructure*              Advice                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   How Disruption should be handled in Info systems.
/// </BLOCKQUOTE></PRE>
/// Element "Blocking" of XSD type "http://www.siri.org.uk/siri":BlockingStructure.
    ns2__BlockingStructure*              Blocking                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Change to normal boarding activity allowed at stop.
/// </BLOCKQUOTE></PRE>
/// Element "Boarding" of XSD type "http://www.siri.org.uk/siri":BoardingStructure.
    ns2__BoardingStructure*              Boarding                       0;	///< Optional element.
/// Element "Delays" of XSD type "http://www.siri.org.uk/siri":DelaysStructure.
    ns2__DelaysStructure*                Delays                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information on casualties.
/// </BLOCKQUOTE></PRE>
/// Element "Casualties" of XSD type "http://www.siri.org.uk/siri":CasualtiesStructure.
    ns2__CasualtiesStructure*            Casualties                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of fare exceptions allowed because of disruption.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EasementsStructure* of length 0..unbounded.
    std::vector<ns2__EasementsStructure*> Easements                      0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":BoardingStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for boarding restrictions.
/// </BLOCKQUOTE></PRE>
/// class ns2__BoardingStructure operations:
/// - ns2__BoardingStructure* soap_new_ns2__BoardingStructure(soap*) allocate and default initialize
/// - ns2__BoardingStructure* soap_new_ns2__BoardingStructure(soap*, int num) allocate array and default initialize values
/// - ns2__BoardingStructure* soap_new_req_ns2__BoardingStructure(soap*, ...) allocate, set required members
/// - ns2__BoardingStructure* soap_new_set_ns2__BoardingStructure(soap*, ...) allocate, set all public members
/// - ns2__BoardingStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__BoardingStructure(soap*, ns2__BoardingStructure*) deserialize from a stream
/// - int soap_write_ns2__BoardingStructure(soap*, ns2__BoardingStructure*) serialize to a stream
/// - ns2__BoardingStructure* ns2__BoardingStructure::soap_dup(soap*) returns deep copy of ns2__BoardingStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BoardingStructure::soap_del() deep deletes ns2__BoardingStructure data members, use only after ns2__BoardingStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BoardingStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Type of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// Element "ArrivalBoardingActivity" of XSD type "http://www.siri.org.uk/siri":ArrivalBoardingActivityEnumeration.
    enum ns2__ArrivalBoardingActivityEnumeration  ArrivalBoardingActivity        0 = ns2__ArrivalBoardingActivityEnumeration__alighting;	///< Default element value="alighting".
/// <PRE><BLOCKQUOTE>
///   Type of alighting allowed at stop. Default is 'Boarding'.
/// </BLOCKQUOTE></PRE>
/// Element "DepartureBoardingActivity" of XSD type "http://www.siri.org.uk/siri":DepartureBoardingActivityEnumeration.
    enum ns2__DepartureBoardingActivityEnumeration  DepartureBoardingActivity      0 = ns2__DepartureBoardingActivityEnumeration__boarding;	///< Default element value="boarding".
};

/// @brief "http://www.siri.org.uk/siri":PtAdviceStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for advice.
/// </BLOCKQUOTE></PRE>
/// class ns2__PtAdviceStructure operations:
/// - ns2__PtAdviceStructure* soap_new_ns2__PtAdviceStructure(soap*) allocate and default initialize
/// - ns2__PtAdviceStructure* soap_new_ns2__PtAdviceStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PtAdviceStructure* soap_new_req_ns2__PtAdviceStructure(soap*, ...) allocate, set required members
/// - ns2__PtAdviceStructure* soap_new_set_ns2__PtAdviceStructure(soap*, ...) allocate, set all public members
/// - ns2__PtAdviceStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PtAdviceStructure(soap*, ns2__PtAdviceStructure*) deserialize from a stream
/// - int soap_write_ns2__PtAdviceStructure(soap*, ns2__PtAdviceStructure*) serialize to a stream
/// - ns2__PtAdviceStructure* ns2__PtAdviceStructure::soap_dup(soap*) returns deep copy of ns2__PtAdviceStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PtAdviceStructure::soap_del() deep deletes ns2__PtAdviceStructure data members, use only after ns2__PtAdviceStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PtAdviceStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a standardis advisory NOTICE to be given to passengers if a particular condition arises .
/// </BLOCKQUOTE></PRE>
/// Element "AdviceRef" of XSD type "http://www.siri.org.uk/siri":AdviceRefStructure.
    ns2__AdviceRefStructure*             AdviceRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Further Textual advice to passengers. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Details                        0;
};

/// @brief "http://www.siri.org.uk/siri":BlockingStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for blocking.
/// </BLOCKQUOTE></PRE>
/// class ns2__BlockingStructure operations:
/// - ns2__BlockingStructure* soap_new_ns2__BlockingStructure(soap*) allocate and default initialize
/// - ns2__BlockingStructure* soap_new_ns2__BlockingStructure(soap*, int num) allocate array and default initialize values
/// - ns2__BlockingStructure* soap_new_req_ns2__BlockingStructure(soap*, ...) allocate, set required members
/// - ns2__BlockingStructure* soap_new_set_ns2__BlockingStructure(soap*, ...) allocate, set all public members
/// - ns2__BlockingStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__BlockingStructure(soap*, ns2__BlockingStructure*) deserialize from a stream
/// - int soap_write_ns2__BlockingStructure(soap*, ns2__BlockingStructure*) serialize to a stream
/// - ns2__BlockingStructure* ns2__BlockingStructure::soap_dup(soap*) returns deep copy of ns2__BlockingStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BlockingStructure::soap_del() deep deletes ns2__BlockingStructure data members, use only after ns2__BlockingStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BlockingStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Whether information about parts of the network identified by Affects should be blocked from computation made by a Journey Planner that has a real-tiem feed of the SITUATIONs. Default is 'false'; do not suppress.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPlanner" of XSD type xs:boolean.
    bool                                 JourneyPlanner                 0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether information about parts of the network identified by Affects should be blocked from real-time departureinfo systems. Default is 'false'; do not suppress.
/// </BLOCKQUOTE></PRE>
/// Element "RealTime" of XSD type xs:boolean.
    bool                                 RealTime                       0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":EasementsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for easement info.
/// </BLOCKQUOTE></PRE>
/// class ns2__EasementsStructure operations:
/// - ns2__EasementsStructure* soap_new_ns2__EasementsStructure(soap*) allocate and default initialize
/// - ns2__EasementsStructure* soap_new_ns2__EasementsStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EasementsStructure* soap_new_req_ns2__EasementsStructure(soap*, ...) allocate, set required members
/// - ns2__EasementsStructure* soap_new_set_ns2__EasementsStructure(soap*, ...) allocate, set all public members
/// - ns2__EasementsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EasementsStructure(soap*, ns2__EasementsStructure*) deserialize from a stream
/// - int soap_write_ns2__EasementsStructure(soap*, ns2__EasementsStructure*) serialize to a stream
/// - ns2__EasementsStructure* ns2__EasementsStructure::soap_dup(soap*) returns deep copy of ns2__EasementsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EasementsStructure::soap_del() deep deletes ns2__EasementsStructure data members, use only after ns2__EasementsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EasementsStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Ticket restriction conditiosn in effect. TPEG pti table pti25.
/// </BLOCKQUOTE></PRE>
/// Element "TicketRestrictions" of XSD type "http://www.siri.org.uk/siri":TicketRestrictionEnumeration.
    enum ns2__TicketRestrictionEnumeration*  TicketRestrictions             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of fare exceptions allowed because of disruption. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Easement                       0;
/// <PRE><BLOCKQUOTE>
///   Refernce to a fare exceptions code that is allowed because of the disruption. An easement may relax a fare condition, for exampel "You may use your metro ticket on the bus', or 'You may use your bus ticket in teh metro between these two stops'.
/// </BLOCKQUOTE></PRE>
/// Element "EasementRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               EasementRef                    0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":DelaysStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for easement info.
/// </BLOCKQUOTE></PRE>
/// class ns2__DelaysStructure operations:
/// - ns2__DelaysStructure* soap_new_ns2__DelaysStructure(soap*) allocate and default initialize
/// - ns2__DelaysStructure* soap_new_ns2__DelaysStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DelaysStructure* soap_new_req_ns2__DelaysStructure(soap*, ...) allocate, set required members
/// - ns2__DelaysStructure* soap_new_set_ns2__DelaysStructure(soap*, ...) allocate, set all public members
/// - ns2__DelaysStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DelaysStructure(soap*, ns2__DelaysStructure*) deserialize from a stream
/// - int soap_write_ns2__DelaysStructure(soap*, ns2__DelaysStructure*) serialize to a stream
/// - ns2__DelaysStructure* ns2__DelaysStructure::soap_dup(soap*) returns deep copy of ns2__DelaysStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DelaysStructure::soap_del() deep deletes ns2__DelaysStructure data members, use only after ns2__DelaysStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DelaysStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Time band into which delay will fall.
/// </BLOCKQUOTE></PRE>
/// Element "DelayBand" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DelayBandEnum.
    enum ns5__DelayBandEnum*             DelayBand                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Category of delay.
/// </BLOCKQUOTE></PRE>
/// Element "DelayType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DelaysTypeEnum.
    enum ns5__DelaysTypeEnum*            DelayType                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Additional journey time needed to overcome disruption.
/// </BLOCKQUOTE></PRE>
/// Element "Delay" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           Delay                          0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ProductionTimetableDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for deliveries of production timetable service. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductionTimetableDeliveriesStructure operations:
/// - ns2__ProductionTimetableDeliveriesStructure* soap_new_ns2__ProductionTimetableDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__ProductionTimetableDeliveriesStructure* soap_new_ns2__ProductionTimetableDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductionTimetableDeliveriesStructure* soap_new_req_ns2__ProductionTimetableDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__ProductionTimetableDeliveriesStructure* soap_new_set_ns2__ProductionTimetableDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductionTimetableDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductionTimetableDeliveriesStructure(soap*, ns2__ProductionTimetableDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductionTimetableDeliveriesStructure(soap*, ns2__ProductionTimetableDeliveriesStructure*) serialize to a stream
/// - ns2__ProductionTimetableDeliveriesStructure* ns2__ProductionTimetableDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__ProductionTimetableDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductionTimetableDeliveriesStructure::soap_del() deep deletes ns2__ProductionTimetableDeliveriesStructure data members, use only after ns2__ProductionTimetableDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductionTimetableDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ProductionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ProductionTimetableDeliveryStructure*> ProductionTimetableDelivery    1;
};

/// @brief "http://www.siri.org.uk/siri":DatedVehicleJourneyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Planned VEHICLE JOURNEY (Production Timetable Service).
/// </BLOCKQUOTE></PRE>
/// class ns2__DatedVehicleJourneyStructure operations:
/// - ns2__DatedVehicleJourneyStructure* soap_new_ns2__DatedVehicleJourneyStructure(soap*) allocate and default initialize
/// - ns2__DatedVehicleJourneyStructure* soap_new_ns2__DatedVehicleJourneyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DatedVehicleJourneyStructure* soap_new_req_ns2__DatedVehicleJourneyStructure(soap*, ...) allocate, set required members
/// - ns2__DatedVehicleJourneyStructure* soap_new_set_ns2__DatedVehicleJourneyStructure(soap*, ...) allocate, set all public members
/// - ns2__DatedVehicleJourneyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DatedVehicleJourneyStructure(soap*, ns2__DatedVehicleJourneyStructure*) deserialize from a stream
/// - int soap_write_ns2__DatedVehicleJourneyStructure(soap*, ns2__DatedVehicleJourneyStructure*) serialize to a stream
/// - ns2__DatedVehicleJourneyStructure* ns2__DatedVehicleJourneyStructure::soap_dup(soap*) returns deep copy of ns2__DatedVehicleJourneyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DatedVehicleJourneyStructure::soap_del() deep deletes ns2__DatedVehicleJourneyStructure data members, use only after ns2__DatedVehicleJourneyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DatedVehicleJourneyStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier for a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DatedVehicleJourneyCode" of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyCodeType.
    ns2__DatedVehicleJourneyCodeType     DatedVehicleJourneyCode        1;	///< Required element.
//  BEGIN GROUP <xs:group name="TimetableAlterationGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   If the journey is an alteration to a timetable, indicates the original journey, and the nature of the difference.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__DatedVehicleJourneyStructure_sequence
    {
//  BEGIN CHOICE <xs:choice minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Use of simple reference is deprecated
/// </BLOCKQUOTE></PRE>
   $int                                  __union_DatedVehicleJourneyStructure 0;	///< Union _ns2__union_DatedVehicleJourneyStructure selector: set to SOAP_UNION__ns2__union_DatedVehicleJourneyStructure_<fieldname> or 0 to omit
    union _ns2__union_DatedVehicleJourneyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Refercence to a VEHICLE JOURENY framed by the day. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleJourneyRef.
    ns2__VehicleJourneyRefStructure*     VehicleJourneyRef              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_DatedVehicleJourneyStructure;
//  END OF CHOICE
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_DatedVehicleJourneyStructure_;	///< Union _ns2__union_DatedVehicleJourneyStructure_ selector: set to SOAP_UNION__ns2__union_DatedVehicleJourneyStructure__<fieldname>
    union _ns2__union_DatedVehicleJourneyStructure_
    {
/// <PRE><BLOCKQUOTE>
///   Whether this journey is an addition to the plan. Can only be used when both participants recognise the same schedule version. If omitted, defaults to false: the journey is not an addition.
/// </BLOCKQUOTE></PRE>
/// Element "ExtraJourney" of XSD type xs:boolean.
    bool                                 ExtraJourney                   0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether this journey is a deletion of a journey in the plan. Can only be used when both participants recognise the same schedule version. If omitted, defaults to 'false': Journey is not a deletion.
/// </BLOCKQUOTE></PRE>
/// Element "Cancellation" of XSD type xs:boolean.
    bool                                 Cancellation                   0 = false;	///< Default element value="false".
    }                                    union_DatedVehicleJourneyStructure_;
//  END OF CHOICE
    }                                   *__DatedVehicleJourneyStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing a VEHICLE JOURNEY. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul DATED VEHICLE JOURNEYs of the timetable. Each real-time journey (e.g. ESTIMATED VEHICLE JOURNEY or MONITORED VEHICLE JORUNEY) takes its values from the DATED VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For train services with named journeys. Train name, e.g. West Coast Express. If omitted: No train name. Inherited property. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> VehicleJourneyName             0;
/// <PRE><BLOCKQUOTE>
///   Additional descriptive text associated with journey. Inherited property.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> JourneyNote                    0;
/// <PRE><BLOCKQUOTE>
///   Contact details for use by members of public. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "PublicContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         PublicContact                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contact details for use by operational staff. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "OperationsContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         OperationsContact              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DatedServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   General info elements that apply to all journeys of timetable version unless overriden.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Description of the destination stop (vehicle signage) to show on vehicle, Can be overwritten for a journey, and then also section by section by the entry in an Individual Call. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationDisplay             0;
/// <PRE><BLOCKQUOTE>
///   Additional Text associated with LINE. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> LineNote                       0;
/// <PRE><BLOCKQUOTE>
///   Whether journey is first or last jouurney of day. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FirstOrLastJourney" of XSD type "http://www.siri.org.uk/siri":FirstOrLastJourneyEnumeration.
    enum ns2__FirstOrLastJourneyEnumeration  FirstOrLastJourney             0 = ns2__FirstOrLastJourneyEnumeration__unspecified;	///< Default element value="unspecified".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="TimetableRealtimeInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional descriptive properties of service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether this is a Headway Service, that is, one shown as operating at a prescribed interval rather than to a fixed timetable.
/// </BLOCKQUOTE></PRE>
/// Element "HeadwayService" of XSD type xs:boolean.
    bool*                                HeadwayService                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE JOURNEYs of LINE are normally monitored. Provides a default value for the Monitored element on individual journeys of the timetable.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool                                 Monitored                      0 = true;	///< Default element value="true".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="OperationalBlockGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__DatedVehicleJourneyStructure_sequence_
    {
/// <PRE><BLOCKQUOTE>
///   BLOCK that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "BlockRef" of XSD type "http://www.siri.org.uk/siri":BlockRefStructure.
    ns2__BlockRefStructure*              BlockRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   COURSE OF JOURNEY ('Run') that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "CourseOfJourneyRef" of XSD type "http://www.siri.org.uk/siri":CourseOfJourneyRefStructure.
    ns2__CourseOfJourneyRefStructure*    CourseOfJourneyRef             0;	///< Optional element.
    }                                   *__DatedVehicleJourneyStructure_sequence_ 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Complete sequence of stops along the route path, in calling order.
/// </BLOCKQUOTE></PRE>
/// class _ns2__DatedVehicleJourneyStructure_DatedCalls operations:
/// - _ns2__DatedVehicleJourneyStructure_DatedCalls* soap_new__ns2__DatedVehicleJourneyStructure_DatedCalls(soap*) allocate and default initialize
/// - _ns2__DatedVehicleJourneyStructure_DatedCalls* soap_new__ns2__DatedVehicleJourneyStructure_DatedCalls(soap*, int num) allocate array and default initialize values
/// - _ns2__DatedVehicleJourneyStructure_DatedCalls* soap_new_req__ns2__DatedVehicleJourneyStructure_DatedCalls(soap*, ...) allocate, set required members
/// - _ns2__DatedVehicleJourneyStructure_DatedCalls* soap_new_set__ns2__DatedVehicleJourneyStructure_DatedCalls(soap*, ...) allocate, set all public members
/// - _ns2__DatedVehicleJourneyStructure_DatedCalls::soap_default(soap*) default initialize members
/// - int soap_read__ns2__DatedVehicleJourneyStructure_DatedCalls(soap*, _ns2__DatedVehicleJourneyStructure_DatedCalls*) deserialize from a stream
/// - int soap_write__ns2__DatedVehicleJourneyStructure_DatedCalls(soap*, _ns2__DatedVehicleJourneyStructure_DatedCalls*) serialize to a stream
/// - _ns2__DatedVehicleJourneyStructure_DatedCalls* _ns2__DatedVehicleJourneyStructure_DatedCalls::soap_dup(soap*) returns deep copy of _ns2__DatedVehicleJourneyStructure_DatedCalls, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__DatedVehicleJourneyStructure_DatedCalls::soap_del() deep deletes _ns2__DatedVehicleJourneyStructure_DatedCalls data members, use only after _ns2__DatedVehicleJourneyStructure_DatedCalls::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__DatedVehicleJourneyStructure_DatedCalls
    {
/// <PRE><BLOCKQUOTE>
///   Complete sequence of stops along the route path, in calling order.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DatedCallStructure* element refs of length 2..unbounded.
    std::vector<ns2__DatedCallStructure*> DatedCall                      2;
    }                                    DatedCalls                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractServiceJourneyInterchangeStructure is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   A planned SERVICE JOURNEY INTERCHANGE between two journeys. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractServiceJourneyInterchangeStructure operations:
/// - ns2__AbstractServiceJourneyInterchangeStructure* soap_new_ns2__AbstractServiceJourneyInterchangeStructure(soap*) allocate and default initialize
/// - ns2__AbstractServiceJourneyInterchangeStructure* soap_new_ns2__AbstractServiceJourneyInterchangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractServiceJourneyInterchangeStructure* soap_new_req_ns2__AbstractServiceJourneyInterchangeStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractServiceJourneyInterchangeStructure* soap_new_set_ns2__AbstractServiceJourneyInterchangeStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractServiceJourneyInterchangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractServiceJourneyInterchangeStructure(soap*, ns2__AbstractServiceJourneyInterchangeStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractServiceJourneyInterchangeStructure(soap*, ns2__AbstractServiceJourneyInterchangeStructure*) serialize to a stream
/// - ns2__AbstractServiceJourneyInterchangeStructure* ns2__AbstractServiceJourneyInterchangeStructure::soap_dup(soap*) returns deep copy of ns2__AbstractServiceJourneyInterchangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractServiceJourneyInterchangeStructure::soap_del() deep deletes ns2__AbstractServiceJourneyInterchangeStructure data members, use only after ns2__AbstractServiceJourneyInterchangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractServiceJourneyInterchangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of SERVICE JOURNEY INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeCode" of XSD type "http://www.siri.org.uk/siri":InterchangeCodeType.
    ns2__InterchangeCodeType*            InterchangeCode                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a physical CONNECTION LINK over which the SERVICE JOURNEY INTERCHANGE takes place. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FeederRef" of XSD type "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure.
    ns2__ConnectingJourneyRefStructure*  FeederRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT at which feeder journey arrives. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FeederArrivalStopRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          FeederArrivalStopRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Feeder stop within Feeder JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Element "FeederVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                FeederVisitNumber              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DistributorRef" of XSD type "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure.
    ns2__ConnectingJourneyRefStructure*  DistributorRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT at which distributor journet departs. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DistributorDepartureStopRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          DistributorDepartureStopRef    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Distributor stop within Distributor JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                DistributorVisitNumber         0;	///< Optional element.
//  BEGIN GROUP <xs:group name="InterchangePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Properties of SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the passenger can remain in VEHICLE (i.e. BLOCKlinking). Default is 'false': the passenger must change vehicles for this connection.
/// </BLOCKQUOTE></PRE>
/// Element "StaySeated" of XSD type xs:boolean.
    bool                                 StaySeated                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is guaranteed. Default is 'false'; SERVICE JOURNEY INTERCHANGE is not guaranteed.
/// </BLOCKQUOTE></PRE>
/// Element "Guaranteed" of XSD type xs:boolean.
    bool                                 Guaranteed                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is advertised as a connection. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "Advertised" of XSD type xs:boolean.
    bool                                 Advertised                     0 = false;	///< Default element value="false".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Time Elements for SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="InterchangeWaitTimeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE WAIT TIME.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard wait time for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardWaitTime" of XSD type xs:duration.
    xsd__duration*                       StandardWaitTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum time that Distributor will wait for Feeder for INTERCHANGE. SIRI v1.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumWaitTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum automatic wait time that Distributor will wait for Feeder for INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumAutomaticWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumAutomaticWaitTime       0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTransferDurationGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE TRANSFER duration.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardTransferTime" of XSD type xs:duration.
    xsd__duration*                       StandardTransferTime           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MinimumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MinimumTransferTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MaximumTransferTime            0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":DatedCallStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Planned VEHICLE JOURNEY Stop (Production Timetable Service).
/// </BLOCKQUOTE></PRE>
/// class ns2__DatedCallStructure operations:
/// - ns2__DatedCallStructure* soap_new_ns2__DatedCallStructure(soap*) allocate and default initialize
/// - ns2__DatedCallStructure* soap_new_ns2__DatedCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DatedCallStructure* soap_new_req_ns2__DatedCallStructure(soap*, ...) allocate, set required members
/// - ns2__DatedCallStructure* soap_new_set_ns2__DatedCallStructure(soap*, ...) allocate, set all public members
/// - ns2__DatedCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DatedCallStructure(soap*, ns2__DatedCallStructure*) deserialize from a stream
/// - int soap_write_ns2__DatedCallStructure(soap*, ns2__DatedCallStructure*) serialize to a stream
/// - ns2__DatedCallStructure* ns2__DatedCallStructure::soap_dup(soap*) returns deep copy of ns2__DatedCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DatedCallStructure::soap_del() deep deletes ns2__DatedCallStructure data members, use only after ns2__DatedCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DatedCallStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="StopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying an ordered visit to a SCHEDULED STOP POINT within a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CallPropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the CALL Properties Values for these elements can be specified on an production VEHICLE JOURNEY CALL. Each real-time journey CALL takes its values from the corresponding dated VEHICLE JOURNEY CALL. The absence of a value on an real-time CALL l indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the stop is a TIMING POINT. Times for stops that are not timing points are sometimes interpolated crudely from the timing points, and may represent a lower level of accuracy. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TimingPoint.
    bool                                 TimingPoint                    0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether this is a Hail and Ride Stop. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "BoardingStretch" of XSD type xs:boolean.
    bool                                 BoardingStretch                0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether Vehicle stops only if requested explicitly by passenger. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestStop" of XSD type xs:boolean.
    bool                                 RequestStop                    0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Destination to show for the VEHICLE at the specific stop (vehicle signage), if different to the Destination Name for the full journey.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationDisplay             0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Text annotation that applies to this call.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> CallNote                       0;
//  BEGIN GROUP <xs:group name="AimedCallGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the targeted CALL of a VEHICLE at a stop.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="AimedVehicleArrivalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the arrival of a VEHICLE at a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalPlatformName.
    ns2__NaturalLanguageStringStructure*  ArrivalPlatformName            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalBoardingActivity.
    enum ns2__ArrivalBoardingActivityEnumeration  ArrivalBoardingActivity        0 = ns2__ArrivalBoardingActivityEnumeration__alighting;	///< Default element value="alighting".
/// <PRE><BLOCKQUOTE>
///   Assignment of arrival of Scheduled STOP POINT to a phsyical QUAY (platform). If not given, assume same as for departure +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "ArrivalStopAssignment" of XSD type "http://www.siri.org.uk/siri":PlannedStopAssignmentStructure.
    ns2__PlannedStopAssignmentStructure*  ArrivalStopAssignment          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of servcie up until arrival.. May change for departure. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> ArrivalOperatorRefs            0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="AimedVehicleDepartureGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the departure of a VEHICLE from a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedDepartureTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Inheritable property.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DeparturePlatformName.
    ns2__NaturalLanguageStringStructure*  DeparturePlatformName          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding allowed at stop. Default is 'Boarding'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureBoardingActivity.
    enum ns2__DepartureBoardingActivityEnumeration  DepartureBoardingActivity      0 = ns2__DepartureBoardingActivityEnumeration__boarding;	///< Default element value="boarding".
/// Element "DepartureStopAssignment" of XSD type "http://www.siri.org.uk/siri":PlannedStopAssignmentStructure.
    ns2__PlannedStopAssignmentStructure*  DepartureStopAssignment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of service for departure and onwards.. May change from that for arrival. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> DepartureOperatorRefs          0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Latest target time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedLatestPassengerAccessTime.
    xsd__dateTime*                       AimedLatestPassengerAccessTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For frequency based services, target interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedHeadwayInterval.
    ns2__PositiveDurationType*           AimedHeadwayInterval           0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Information on any planned distributor connections (deprecated from SIRI V2.0 ... see 2 next attributes)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TargetedInterchangeStructure* of length 0..unbounded.
    std::vector<ns2__TargetedInterchangeStructure*> TargetedInterchange            0;
/// <PRE><BLOCKQUOTE>
///   Information on any planned feeder connections. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FromServiceJourneyInterchangeStructure* of length 0..unbounded.
    std::vector<ns2__FromServiceJourneyInterchangeStructure*> FromServiceJourneyInterchange  0;
/// <PRE><BLOCKQUOTE>
///   Information on any planned distributor connections. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ToServiceJourneyInterchangeStructure* of length 0..unbounded.
    std::vector<ns2__ToServiceJourneyInterchangeStructure*> ToServiceJourneyInterchange    0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":TargetedInterchangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Planned Connection between two VEHICLE JOURNEYs.
/// </BLOCKQUOTE></PRE>
/// class ns2__TargetedInterchangeStructure operations:
/// - ns2__TargetedInterchangeStructure* soap_new_ns2__TargetedInterchangeStructure(soap*) allocate and default initialize
/// - ns2__TargetedInterchangeStructure* soap_new_ns2__TargetedInterchangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TargetedInterchangeStructure* soap_new_req_ns2__TargetedInterchangeStructure(soap*, ...) allocate, set required members
/// - ns2__TargetedInterchangeStructure* soap_new_set_ns2__TargetedInterchangeStructure(soap*, ...) allocate, set all public members
/// - ns2__TargetedInterchangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TargetedInterchangeStructure(soap*, ns2__TargetedInterchangeStructure*) deserialize from a stream
/// - int soap_write_ns2__TargetedInterchangeStructure(soap*, ns2__TargetedInterchangeStructure*) serialize to a stream
/// - ns2__TargetedInterchangeStructure* ns2__TargetedInterchangeStructure::soap_dup(soap*) returns deep copy of ns2__TargetedInterchangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TargetedInterchangeStructure::soap_del() deep deletes ns2__TargetedInterchangeStructure data members, use only after ns2__TargetedInterchangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TargetedInterchangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeCode" of XSD type "http://www.siri.org.uk/siri":InterchangeCodeType.
    ns2__InterchangeCodeType*            InterchangeCode                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a (dated) distributor VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyRefStructure.
    ns2__DatedVehicleJourneyRefStructure*  DistributorVehicleJourneyRef   1;	///< Required element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_TargetedInterchangeStructure;	///< Union _ns2__union_TargetedInterchangeStructure selector: set to SOAP_UNION__ns2__union_TargetedInterchangeStructure_<fieldname>
    union _ns2__union_TargetedInterchangeStructure
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a physical CONNECTION LINK over which the SERVICE JOURNEY INTERCHANGE takes place.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     DistributorConnectionLinkRef   nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Link to Interchange stop from which the distributor journey departs. If omitted: the distributor journey stop is the same as the feeder journey stop, i.e. that of theh dated call.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorConnectionLink" of XSD type "http://www.siri.org.uk/siri":ContextualisedConnectionLinkStructure.
    ns2__ContextualisedConnectionLinkStructure*  DistributorConnectionLink      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_TargetedInterchangeStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Distributor stop within Distributor JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                DistributorVisitNumber         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then Order can be used to associate the Order as well if useful for translation.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorOrder" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                DistributorOrder               0;	///< Optional element.
//  BEGIN GROUP <xs:group name="InterchangePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Properties of SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the passenger can remain in VEHICLE (i.e. BLOCKlinking). Default is 'false': the passenger must change vehicles for this connection.
/// </BLOCKQUOTE></PRE>
/// Element "StaySeated" of XSD type xs:boolean.
    bool                                 StaySeated                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is guaranteed. Default is 'false'; SERVICE JOURNEY INTERCHANGE is not guaranteed.
/// </BLOCKQUOTE></PRE>
/// Element "Guaranteed" of XSD type xs:boolean.
    bool                                 Guaranteed                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is advertised as a connection. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "Advertised" of XSD type xs:boolean.
    bool                                 Advertised                     0 = false;	///< Default element value="false".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Time Elements for SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="InterchangeWaitTimeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE WAIT TIME.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard wait time for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardWaitTime" of XSD type xs:duration.
    xsd__duration*                       StandardWaitTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum time that Distributor will wait for Feeder for INTERCHANGE. SIRI v1.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumWaitTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum automatic wait time that Distributor will wait for Feeder for INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumAutomaticWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumAutomaticWaitTime       0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTransferDurationGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE TRANSFER duration.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardTransferTime" of XSD type xs:duration.
    xsd__duration*                       StandardTransferTime           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MinimumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MinimumTransferTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MaximumTransferTime            0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ContextualisedConnectionLinkStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Connection between two stops within a connection area. Used within the context of one or other end.
/// </BLOCKQUOTE></PRE>
/// class ns2__ContextualisedConnectionLinkStructure operations:
/// - ns2__ContextualisedConnectionLinkStructure* soap_new_ns2__ContextualisedConnectionLinkStructure(soap*) allocate and default initialize
/// - ns2__ContextualisedConnectionLinkStructure* soap_new_ns2__ContextualisedConnectionLinkStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ContextualisedConnectionLinkStructure* soap_new_req_ns2__ContextualisedConnectionLinkStructure(soap*, ...) allocate, set required members
/// - ns2__ContextualisedConnectionLinkStructure* soap_new_set_ns2__ContextualisedConnectionLinkStructure(soap*, ...) allocate, set all public members
/// - ns2__ContextualisedConnectionLinkStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ContextualisedConnectionLinkStructure(soap*, ns2__ContextualisedConnectionLinkStructure*) deserialize from a stream
/// - int soap_write_ns2__ContextualisedConnectionLinkStructure(soap*, ns2__ContextualisedConnectionLinkStructure*) serialize to a stream
/// - ns2__ContextualisedConnectionLinkStructure* ns2__ContextualisedConnectionLinkStructure::soap_dup(soap*) returns deep copy of ns2__ContextualisedConnectionLinkStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ContextualisedConnectionLinkStructure::soap_del() deep deletes ns2__ContextualisedConnectionLinkStructure data members, use only after ns2__ContextualisedConnectionLinkStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ContextualisedConnectionLinkStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of CONNECTION LINk.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkCode" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkCodeType.
    ns2__ConnectionLinkCodeType*         ConnectionLinkCode             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointName.
    ns2__NaturalLanguageStringStructure*  StopPointName                  0;	///< Optional element.
//  BEGIN GROUP <xs:group name="ConnectionDurationGroup">
/// <PRE><BLOCKQUOTE>
///   Times for making SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default time (Duration) needeed to traverse SERVICE JOURNEY INTERCHANGE from feeder to distributor.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultDuration" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           DefaultDuration                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time needeed by a traveller whis is familiar with SERVICE JOURNEY INTERCHANGE to traverse it. If absent, use DefaultDuration.
/// </BLOCKQUOTE></PRE>
/// Element "FrequentTravellerDuration" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           FrequentTravellerDuration      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time needeed by a traveller whis is not familiar with SERVICE JOURNEY INTERCHANGE to traverse it. If absent, use DefaultDuration and a standard weighting.
/// </BLOCKQUOTE></PRE>
/// Element "OccasionalTravellerDuration" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           OccasionalTravellerDuration    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time needeed by a traveller wos is mobility impaired to traverse SERVICE JOURNEY INTERCHANGE. If absent, use DefaultDuration and a standard impaired travel speed.
/// </BLOCKQUOTE></PRE>
/// Element "ImpairedAccessDuration" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ImpairedAccessDuration         0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":PermissionsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for abstract permissions.
/// </BLOCKQUOTE></PRE>
/// class ns2__PermissionsStructure operations:
/// - ns2__PermissionsStructure* soap_new_ns2__PermissionsStructure(soap*) allocate and default initialize
/// - ns2__PermissionsStructure* soap_new_ns2__PermissionsStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PermissionsStructure* soap_new_req_ns2__PermissionsStructure(soap*, ...) allocate, set required members
/// - ns2__PermissionsStructure* soap_new_set_ns2__PermissionsStructure(soap*, ...) allocate, set all public members
/// - ns2__PermissionsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PermissionsStructure(soap*, ns2__PermissionsStructure*) deserialize from a stream
/// - int soap_write_ns2__PermissionsStructure(soap*, ns2__PermissionsStructure*) serialize to a stream
/// - ns2__PermissionsStructure* ns2__PermissionsStructure::soap_dup(soap*) returns deep copy of ns2__PermissionsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PermissionsStructure::soap_del() deep deletes ns2__PermissionsStructure data members, use only after ns2__PermissionsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PermissionsStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractTopicPermissionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Abstract Permission Topic.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractTopicPermissionStructure operations:
/// - ns2__AbstractTopicPermissionStructure* soap_new_ns2__AbstractTopicPermissionStructure(soap*) allocate and default initialize
/// - ns2__AbstractTopicPermissionStructure* soap_new_ns2__AbstractTopicPermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractTopicPermissionStructure* soap_new_req_ns2__AbstractTopicPermissionStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractTopicPermissionStructure* soap_new_set_ns2__AbstractTopicPermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractTopicPermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractTopicPermissionStructure(soap*, ns2__AbstractTopicPermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractTopicPermissionStructure(soap*, ns2__AbstractTopicPermissionStructure*) serialize to a stream
/// - ns2__AbstractTopicPermissionStructure* ns2__AbstractTopicPermissionStructure::soap_dup(soap*) returns deep copy of ns2__AbstractTopicPermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractTopicPermissionStructure::soap_del() deep deletes ns2__AbstractTopicPermissionStructure data members, use only after ns2__AbstractTopicPermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractTopicPermissionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Whether the participant may access this topic. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Allow" of XSD type xs:boolean.
    bool                                 Allow                          0 = true;	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":CapabilityAccessControlStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Common Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__CapabilityAccessControlStructure operations:
/// - ns2__CapabilityAccessControlStructure* soap_new_ns2__CapabilityAccessControlStructure(soap*) allocate and default initialize
/// - ns2__CapabilityAccessControlStructure* soap_new_ns2__CapabilityAccessControlStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CapabilityAccessControlStructure* soap_new_req_ns2__CapabilityAccessControlStructure(soap*, ...) allocate, set required members
/// - ns2__CapabilityAccessControlStructure* soap_new_set_ns2__CapabilityAccessControlStructure(soap*, ...) allocate, set all public members
/// - ns2__CapabilityAccessControlStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CapabilityAccessControlStructure(soap*, ns2__CapabilityAccessControlStructure*) deserialize from a stream
/// - int soap_write_ns2__CapabilityAccessControlStructure(soap*, ns2__CapabilityAccessControlStructure*) serialize to a stream
/// - ns2__CapabilityAccessControlStructure* ns2__CapabilityAccessControlStructure::soap_dup(soap*) returns deep copy of ns2__CapabilityAccessControlStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CapabilityAccessControlStructure::soap_del() deep deletes ns2__CapabilityAccessControlStructure data members, use only after ns2__CapabilityAccessControlStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CapabilityAccessControlStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Whether access control of requests is supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestChecking" of XSD type xs:boolean.
    bool                                 RequestChecking                0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":AbstractPermissionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Abstract Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractPermissionStructure operations:
/// - ns2__AbstractPermissionStructure* soap_new_ns2__AbstractPermissionStructure(soap*) allocate and default initialize
/// - ns2__AbstractPermissionStructure* soap_new_ns2__AbstractPermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractPermissionStructure* soap_new_req_ns2__AbstractPermissionStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractPermissionStructure* soap_new_set_ns2__AbstractPermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractPermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractPermissionStructure(soap*, ns2__AbstractPermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractPermissionStructure(soap*, ns2__AbstractPermissionStructure*) serialize to a stream
/// - ns2__AbstractPermissionStructure* ns2__AbstractPermissionStructure::soap_dup(soap*) returns deep copy of ns2__AbstractPermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractPermissionStructure::soap_del() deep deletes ns2__AbstractPermissionStructure data members, use only after ns2__AbstractPermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractPermissionStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_AbstractPermissionStructure;	///< Union _ns2__union_AbstractPermissionStructure selector: set to SOAP_UNION__ns2__union_AbstractPermissionStructure_<fieldname>
    union _ns2__union_AbstractPermissionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Parmissions apply by default to All particpants. May be overidden by other separate permissions for individual.
/// </BLOCKQUOTE></PRE>
/// Element "AllParticipants" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllParticipants                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Permission applies to specified participant.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_AbstractPermissionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Permissions for general capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AbstractPermissionStructure_GeneralCapabilities operations:
/// - _ns2__AbstractPermissionStructure_GeneralCapabilities* soap_new__ns2__AbstractPermissionStructure_GeneralCapabilities(soap*) allocate and default initialize
/// - _ns2__AbstractPermissionStructure_GeneralCapabilities* soap_new__ns2__AbstractPermissionStructure_GeneralCapabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__AbstractPermissionStructure_GeneralCapabilities* soap_new_req__ns2__AbstractPermissionStructure_GeneralCapabilities(soap*, ...) allocate, set required members
/// - _ns2__AbstractPermissionStructure_GeneralCapabilities* soap_new_set__ns2__AbstractPermissionStructure_GeneralCapabilities(soap*, ...) allocate, set all public members
/// - _ns2__AbstractPermissionStructure_GeneralCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AbstractPermissionStructure_GeneralCapabilities(soap*, _ns2__AbstractPermissionStructure_GeneralCapabilities*) deserialize from a stream
/// - int soap_write__ns2__AbstractPermissionStructure_GeneralCapabilities(soap*, _ns2__AbstractPermissionStructure_GeneralCapabilities*) serialize to a stream
/// - _ns2__AbstractPermissionStructure_GeneralCapabilities* _ns2__AbstractPermissionStructure_GeneralCapabilities::soap_dup(soap*) returns deep copy of _ns2__AbstractPermissionStructure_GeneralCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AbstractPermissionStructure_GeneralCapabilities::soap_del() deep deletes _ns2__AbstractPermissionStructure_GeneralCapabilities data members, use only after _ns2__AbstractPermissionStructure_GeneralCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AbstractPermissionStructure_GeneralCapabilities
    {
/// <PRE><BLOCKQUOTE>
///   Participant may make direct requests for data. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Participant may create subscriptions. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                   *GeneralCapabilities            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":EstimatedTimetableDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deliveries for Real-time Timetable Service. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedTimetableDeliveriesStructure operations:
/// - ns2__EstimatedTimetableDeliveriesStructure* soap_new_ns2__EstimatedTimetableDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__EstimatedTimetableDeliveriesStructure* soap_new_ns2__EstimatedTimetableDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedTimetableDeliveriesStructure* soap_new_req_ns2__EstimatedTimetableDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedTimetableDeliveriesStructure* soap_new_set_ns2__EstimatedTimetableDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedTimetableDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedTimetableDeliveriesStructure(soap*, ns2__EstimatedTimetableDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedTimetableDeliveriesStructure(soap*, ns2__EstimatedTimetableDeliveriesStructure*) serialize to a stream
/// - ns2__EstimatedTimetableDeliveriesStructure* ns2__EstimatedTimetableDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedTimetableDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedTimetableDeliveriesStructure::soap_del() deep deletes ns2__EstimatedTimetableDeliveriesStructure data members, use only after ns2__EstimatedTimetableDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedTimetableDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableDeliveryStructure*> EstimatedTimetableDelivery     1;
};

/// @brief "http://www.siri.org.uk/siri":DatedVehicleJourneyIndirectRefStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Origin and Destination stop of a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__DatedVehicleJourneyIndirectRefStructure operations:
/// - ns2__DatedVehicleJourneyIndirectRefStructure* soap_new_ns2__DatedVehicleJourneyIndirectRefStructure(soap*) allocate and default initialize
/// - ns2__DatedVehicleJourneyIndirectRefStructure* soap_new_ns2__DatedVehicleJourneyIndirectRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DatedVehicleJourneyIndirectRefStructure* soap_new_req_ns2__DatedVehicleJourneyIndirectRefStructure(soap*, ...) allocate, set required members
/// - ns2__DatedVehicleJourneyIndirectRefStructure* soap_new_set_ns2__DatedVehicleJourneyIndirectRefStructure(soap*, ...) allocate, set all public members
/// - ns2__DatedVehicleJourneyIndirectRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DatedVehicleJourneyIndirectRefStructure(soap*, ns2__DatedVehicleJourneyIndirectRefStructure*) deserialize from a stream
/// - int soap_write_ns2__DatedVehicleJourneyIndirectRefStructure(soap*, ns2__DatedVehicleJourneyIndirectRefStructure*) serialize to a stream
/// - ns2__DatedVehicleJourneyIndirectRefStructure* ns2__DatedVehicleJourneyIndirectRefStructure::soap_dup(soap*) returns deep copy of ns2__DatedVehicleJourneyIndirectRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DatedVehicleJourneyIndirectRefStructure::soap_del() deep deletes ns2__DatedVehicleJourneyIndirectRefStructure data members, use only after ns2__DatedVehicleJourneyIndirectRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DatedVehicleJourneyIndirectRefStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The origin is used to help identify the VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "OriginRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          OriginRef                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Departure time from origin SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "AimedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime                        AimedDepartureTime             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The destination is used to help identify the VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DestinationRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          DestinationRef                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arrival time at destination SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "AimedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime                        AimedArrivalTime               1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":EstimatedServiceJourneyInterchangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Estimated SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedServiceJourneyInterchangeStructure operations:
/// - ns2__EstimatedServiceJourneyInterchangeStructure* soap_new_ns2__EstimatedServiceJourneyInterchangeStructure(soap*) allocate and default initialize
/// - ns2__EstimatedServiceJourneyInterchangeStructure* soap_new_ns2__EstimatedServiceJourneyInterchangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedServiceJourneyInterchangeStructure* soap_new_req_ns2__EstimatedServiceJourneyInterchangeStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedServiceJourneyInterchangeStructure* soap_new_set_ns2__EstimatedServiceJourneyInterchangeStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedServiceJourneyInterchangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedServiceJourneyInterchangeStructure(soap*, ns2__EstimatedServiceJourneyInterchangeStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedServiceJourneyInterchangeStructure(soap*, ns2__EstimatedServiceJourneyInterchangeStructure*) serialize to a stream
/// - ns2__EstimatedServiceJourneyInterchangeStructure* ns2__EstimatedServiceJourneyInterchangeStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedServiceJourneyInterchangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedServiceJourneyInterchangeStructure::soap_del() deep deletes ns2__EstimatedServiceJourneyInterchangeStructure data members, use only after ns2__EstimatedServiceJourneyInterchangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedServiceJourneyInterchangeStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// <PRE><BLOCKQUOTE>
///   Reference to a SERVCIE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InterchangeRef.
    ns2__InterchangeRefStructure*        InterchangeRef                 nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Reference to a connecting distributor VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FeederJourneyRef" of XSD type "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure.
    ns2__ConnectingJourneyRefStructure*  FeederJourneyRef               nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Reference to a connecting distributor VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DistributorJourneyRef" of XSD type "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure.
    ns2__ConnectingJourneyRefStructure*  DistributorJourneyRef          nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF CHOICE
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_EstimatedServiceJourneyInterchangeStructure_;	///< Union _ns2__union_EstimatedServiceJourneyInterchangeStructure_ selector: set to SOAP_UNION__ns2__union_EstimatedServiceJourneyInterchangeStructure__<fieldname>
    union _ns2__union_EstimatedServiceJourneyInterchangeStructure_
    {
/// <PRE><BLOCKQUOTE>
///   Distributor will not wait (i.e. connection broken) SIRI w.0
/// </BLOCKQUOTE></PRE>
/// Element "WillNotWait" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WillNotWait                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Nature of wait that distributer will make. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "WillWait" of XSD type "http://www.siri.org.uk/siri":WillWaitStructure.
    ns2__WillWaitStructure*              WillWait                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_EstimatedServiceJourneyInterchangeStructure_;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Time at which distributor VEHICLE is expected to depart. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedDepartureTimeOfDistributor" of XSD type xs:dateTime.
    xsd__dateTime*                       ExpectedDepartureTimeOfDistributor 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether connection monitoring is active or not for this connection +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionMonitoring" of XSD type xs:boolean.
    bool*                                ConnectionMonitoring           0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":WillWaitStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Will Wait details
/// </BLOCKQUOTE></PRE>
/// class ns2__WillWaitStructure operations:
/// - ns2__WillWaitStructure* soap_new_ns2__WillWaitStructure(soap*) allocate and default initialize
/// - ns2__WillWaitStructure* soap_new_ns2__WillWaitStructure(soap*, int num) allocate array and default initialize values
/// - ns2__WillWaitStructure* soap_new_req_ns2__WillWaitStructure(soap*, ...) allocate, set required members
/// - ns2__WillWaitStructure* soap_new_set_ns2__WillWaitStructure(soap*, ...) allocate, set all public members
/// - ns2__WillWaitStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__WillWaitStructure(soap*, ns2__WillWaitStructure*) deserialize from a stream
/// - int soap_write_ns2__WillWaitStructure(soap*, ns2__WillWaitStructure*) serialize to a stream
/// - ns2__WillWaitStructure* ns2__WillWaitStructure::soap_dup(soap*) returns deep copy of ns2__WillWaitStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__WillWaitStructure::soap_del() deep deletes ns2__WillWaitStructure data members, use only after ns2__WillWaitStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__WillWaitStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Time up until which the distributor will wait. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "WaitUntilTime" of XSD type xs:dateTime.
    xsd__dateTime                        WaitUntilTime                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Whether an acknowledgement has been received that the driver will wait. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverHasAcknowledgeWIllWait" of XSD type xs:boolean.
    bool*                                DriverHasAcknowledgeWIllWait   0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":EstimatedVehicleJourneyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Real-time info about a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedVehicleJourneyStructure operations:
/// - ns2__EstimatedVehicleJourneyStructure* soap_new_ns2__EstimatedVehicleJourneyStructure(soap*) allocate and default initialize
/// - ns2__EstimatedVehicleJourneyStructure* soap_new_ns2__EstimatedVehicleJourneyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedVehicleJourneyStructure* soap_new_req_ns2__EstimatedVehicleJourneyStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedVehicleJourneyStructure* soap_new_set_ns2__EstimatedVehicleJourneyStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedVehicleJourneyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedVehicleJourneyStructure(soap*, ns2__EstimatedVehicleJourneyStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedVehicleJourneyStructure(soap*, ns2__EstimatedVehicleJourneyStructure*) serialize to a stream
/// - ns2__EstimatedVehicleJourneyStructure* ns2__EstimatedVehicleJourneyStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedVehicleJourneyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedVehicleJourneyStructure::soap_del() deep deletes ns2__EstimatedVehicleJourneyStructure data members, use only after ns2__EstimatedVehicleJourneyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedVehicleJourneyStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="LineIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for identifying a LINE and DIRECTION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE DIRECTION DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="EstimatedTimetableAlterationGroup">
/// <PRE><BLOCKQUOTE>
///   If the journey is an alteration to a timetable, indicates the original journey and the nature of the difference.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_EstimatedVehicleJourneyStructure;	///< Union _ns2__union_EstimatedVehicleJourneyStructure selector: set to SOAP_UNION__ns2__union_EstimatedVehicleJourneyStructure_<fieldname>
    union _ns2__union_EstimatedVehicleJourneyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a dated VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DatedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyRefStructure.
    ns2__DatedVehicleJourneyRefStructure*  DatedVehicleJourneyRef         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   If no VEHICLE JOURNEY reference is available, identify it by origin and destination and the scheduled times at these stops.
/// </BLOCKQUOTE></PRE>
/// Element "DatedVehicleJourneyIndirectRef" of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyIndirectRefStructure.
    ns2__DatedVehicleJourneyIndirectRefStructure*  DatedVehicleJourneyIndirectRef nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   If this is the first message about an extra unplanned VEHICLE JOURNEY, a new and unique code must be given for it. ExtraJourney should be set to 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "EstimatedVehicleJourneyCode" of XSD type "http://www.siri.org.uk/siri":EstimatedVehicleJourneyCodeType.
    ns2__EstimatedVehicleJourneyCodeType*  EstimatedVehicleJourneyCode    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_EstimatedVehicleJourneyStructure;
//  END OF CHOICE
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_EstimatedVehicleJourneyStructure_;	///< Union _ns2__union_EstimatedVehicleJourneyStructure_ selector: set to SOAP_UNION__ns2__union_EstimatedVehicleJourneyStructure__<fieldname>
    union _ns2__union_EstimatedVehicleJourneyStructure_
    {
/// <PRE><BLOCKQUOTE>
///   Whether this VEHICLE JOURNEY is an addition to the planning data already sent. Default is 'false': i.e. not an additional journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExtraJourney" of XSD type xs:boolean.
    bool                                 ExtraJourney                   0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether this VEHICLE JOURNEY is a deletion of a previous scheduled journey. Default is 'false': this is not a VEHICLE JOURNEY that has been cancelled. An Extra Journey may be deleted.
/// </BLOCKQUOTE></PRE>
/// Element "Cancellation" of XSD type xs:boolean.
    bool                                 Cancellation                   0 = false;	///< Default element value="false".
    }                                    union_EstimatedVehicleJourneyStructure_;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__EstimatedVehicleJourneyStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
    }                                   *__EstimatedVehicleJourneyStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndNamesGroup">
/// <PRE><BLOCKQUOTE>
///   End names for journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the origin SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OriginRef.
    ns2__JourneyPlaceRefStructure*       OriginRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of the origin of the journey. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginName                     0;
/// <PRE><BLOCKQUOTE>
///   Short name of the origin of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as Origin Name.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginShortName                0;
/// <PRE><BLOCKQUOTE>
///   DIRECTION name shown for joruney at the origin. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationDisplayAtOrigin     0;
/// <PRE><BLOCKQUOTE>
///   Names of VIA points, used to help identify the LINE, for example, Luton to Luton via Sutton. Currently 3 in VDV. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ViaNameStructure* of length 0..unbounded.
    std::vector<ns2__ViaNameStructure* > Via                            0;
/// <PRE><BLOCKQUOTE>
///   Reference to a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the destination SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DestinationRef.
    ns2__DestinationRefStructure*        DestinationRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the destination stop (vehicle signage), Can be overwritten for a journey, and then also section by section by the entry in an individual CALl. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationName                0;
/// <PRE><BLOCKQUOTE>
///   Short name of the DESTINATION.of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as DestinationName. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationShortName           0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ServiceInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__EstimatedVehicleJourneyStructure_sequence_
    {
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
    }                                   *__EstimatedVehicleJourneyStructure_sequence_ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements describing a VEHICLE JOURNEY. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul DATED VEHICLE JOURNEYs of the timetable. Each real-time journey (e.g. ESTIMATED VEHICLE JOURNEY or MONITORED VEHICLE JORUNEY) takes its values from the DATED VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__EstimatedVehicleJourneyStructure_sequence__
    {
/// <PRE><BLOCKQUOTE>
///   For train services with named journeys. Train name, e.g. West Coast Express. If omitted: No train name. Inherited property. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> VehicleJourneyName             0;
/// <PRE><BLOCKQUOTE>
///   Additional descriptive text associated with journey. Inherited property.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> JourneyNote                    0;
/// <PRE><BLOCKQUOTE>
///   Contact details for use by members of public. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "PublicContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         PublicContact                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contact details for use by operational staff. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "OperationsContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         OperationsContact              0;	///< Optional element.
    }                                   *__EstimatedVehicleJourneyStructure_sequence__ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="EstimatedJourneyInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   General properties of the journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__EstimatedVehicleJourneyStructure_sequence___
    {
/// <PRE><BLOCKQUOTE>
///   Whether this is a Headway Service, that is shown as operating at a prescribed interval rather than to a fixed timetable. Inherited property: if omitted: same as indicated by (i) any preceding update message, or (ii) if no preceding update, by the referenced dated VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "HeadwayService" of XSD type xs:boolean.
    bool*                                HeadwayService                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether journey is first or last journey of day. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FirstOrLastJourney.
    enum ns2__FirstOrLastJourneyEnumeration  FirstOrLastJourney             0 = ns2__FirstOrLastJourneyEnumeration__unspecified;	///< Default element value="unspecified".
    }                                   *__EstimatedVehicleJourneyStructure_sequence___ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DisruptionGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing nature of disruption.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Information about a change of Equipment availabilti at stop or on vehicle that may affect access or use.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Description of any change concerning a MONITORED FACILITY New structure defined in SIRI XSD 1.1 for Facilities Management.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityConditionStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityConditionStructure*> FacilityConditionElement       0;
/// <PRE><BLOCKQUOTE>
///   This sequence is here only for compatibility reasons between Siri 1.0 and Siri 1.1
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A change to the availaibility of EQUIPMENT. Basic structure defined in the first 1.0 SIRI XSd.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityChangeElement.
    ns2__FacilityChangeStructure*        FacilityChangeElement          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__SituationRefStructure*> SituationRef                   0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="EstimatedRealtimeInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Real-time properties of the journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__EstimatedVehicleJourneyStructure_sequence____
    {
/// <PRE><BLOCKQUOTE>
///   Whether the VEHICLE JOURNEY is monitored by an AVMS: true if active. Inherited property: if omitted: same as indicated by (i) any preceding update message, or (ii) if no preceding update, by the referenced dated VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool*                                Monitored                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the prediction for the journey is considered to be of a useful accuracy or not. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "PredictionInaccurate" of XSD type xs:boolean.
    bool                                 PredictionInaccurate           0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   How full the bus is. If omitted: Passenger load is unknown.
/// </BLOCKQUOTE></PRE>
/// Element "Occupancy" of XSD type "http://www.siri.org.uk/siri":OccupancyEnumeration.
    enum ns2__OccupancyEnumeration*      Occupancy                      0;	///< Optional element.
    }                                   *__EstimatedVehicleJourneyStructure_sequence____ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="OperationalInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="OperationalBlockGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   BLOCK that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "BlockRef" of XSD type "http://www.siri.org.uk/siri":BlockRefStructure.
    ns2__BlockRefStructure*              BlockRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   COURSE OF JOURNEY ('Run') that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "CourseOfJourneyRef" of XSD type "http://www.siri.org.uk/siri":CourseOfJourneyRefStructure.
    ns2__CourseOfJourneyRefStructure*    CourseOfJourneyRef             0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleJourneyRef.
    ns2__VehicleJourneyRefStructure*     VehicleJourneyRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleRef.
    ns2__VehicleRefStructure*            VehicleRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refercence to other VEHICLE Journeys (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FramedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__FramedVehicleJourneyRefStructure*> AdditionalVehicleJourneyRef    0;
/// <PRE><BLOCKQUOTE>
///   A reference to the DRIVER or Crew currently logged in to operate a monitored VEHICLE. May be omitted if real-time data is not available - i.e. it is timetabled data. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               DriverRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The name oo the Driver or Crew +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverName" of XSD type xs:normalizedString.
    xsd__normalizedString*               DriverName                     0;	///< Optional element.
//  END OF GROUP
/// class _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls operations:
/// - _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls* soap_new__ns2__EstimatedVehicleJourneyStructure_EstimatedCalls(soap*) allocate and default initialize
/// - _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls* soap_new__ns2__EstimatedVehicleJourneyStructure_EstimatedCalls(soap*, int num) allocate array and default initialize values
/// - _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls* soap_new_req__ns2__EstimatedVehicleJourneyStructure_EstimatedCalls(soap*, ...) allocate, set required members
/// - _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls* soap_new_set__ns2__EstimatedVehicleJourneyStructure_EstimatedCalls(soap*, ...) allocate, set all public members
/// - _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls::soap_default(soap*) default initialize members
/// - int soap_read__ns2__EstimatedVehicleJourneyStructure_EstimatedCalls(soap*, _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls*) deserialize from a stream
/// - int soap_write__ns2__EstimatedVehicleJourneyStructure_EstimatedCalls(soap*, _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls*) serialize to a stream
/// - _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls* _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls::soap_dup(soap*) returns deep copy of _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls::soap_del() deep deletes _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls data members, use only after _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__EstimatedVehicleJourneyStructure_EstimatedCalls
    {
/// <PRE><BLOCKQUOTE>
///   Ordered sequence of SCHEDULED STOP POINTs called at by the VEHICLE JOURNEY If IsCompleteStopSequence is false, may be just those stops that are altered.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedCallStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedCallStructure*> EstimatedCall                  1;
    }                                   *EstimatedCalls                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the above call sequence is complete, i.e. represents every CALL of the SERVICE PATTERN and so can be used to replace a previous call sequence. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "IsCompleteStopSequence" of XSD type xs:boolean.
    bool                                 IsCompleteStopSequence         0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":EstimatedCallStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Rea-ltime info about a VEHICLE JOURNEY Stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedCallStructure operations:
/// - ns2__EstimatedCallStructure* soap_new_ns2__EstimatedCallStructure(soap*) allocate and default initialize
/// - ns2__EstimatedCallStructure* soap_new_ns2__EstimatedCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedCallStructure* soap_new_req_ns2__EstimatedCallStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedCallStructure* soap_new_set_ns2__EstimatedCallStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedCallStructure(soap*, ns2__EstimatedCallStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedCallStructure(soap*, ns2__EstimatedCallStructure*) serialize to a stream
/// - ns2__EstimatedCallStructure* ns2__EstimatedCallStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedCallStructure::soap_del() deep deletes ns2__EstimatedCallStructure data members, use only after ns2__EstimatedCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedCallStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="StopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying an ordered visit to a SCHEDULED STOP POINT within a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_EstimatedCallStructure 0;	///< Union _ns2__union_EstimatedCallStructure selector: set to SOAP_UNION__ns2__union_EstimatedCallStructure_<fieldname> or 0 to omit
    union _ns2__union_EstimatedCallStructure
    {
/// <PRE><BLOCKQUOTE>
///   This call is additional and unplanned. If omitted: CALL is planned.
/// </BLOCKQUOTE></PRE>
/// Element "ExtraCall" of XSD type xs:boolean.
    bool                                 ExtraCall                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This call is a cancellation of a previously announced call.
/// </BLOCKQUOTE></PRE>
/// Element "Cancellation" of XSD type xs:boolean.
    bool                                 Cancellation                   0;	///< Optional element.
    }                                    union_EstimatedCallStructure  ;
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="CallRealTimeInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information relating to real-time properties of call.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the prediction for the specific stop is considered to be of a useful accuracy or not. Default is 'false', i.e. prediction is not known to be inaccurate. {DOUBLE NEGATIVE IS BAD _ BETTER AS PredictionAccurate. Default is 'true'?]. If prediction is degraded, e.g. because in congestion, used to 9indicate a lowered quality of data. Inherited property. {SHOULD THIS JUST BE THE SPECIFIC InCongestion INDICATOR INSTEAD, OR IS IT MORE GENERAL]
/// </BLOCKQUOTE></PRE>
/// Element "PredictionInaccurate" of XSD type xs:boolean.
    bool*                                PredictionInaccurate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   How full the bus is at the stop. If omitted: Passenger load is unknown.
/// </BLOCKQUOTE></PRE>
/// Element "Occupancy" of XSD type "http://www.siri.org.uk/siri":OccupancyEnumeration.
    enum ns2__OccupancyEnumeration*      Occupancy                      0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CallPropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the CALL Properties Values for these elements can be specified on an production VEHICLE JOURNEY CALL. Each real-time journey CALL takes its values from the corresponding dated VEHICLE JOURNEY CALL. The absence of a value on an real-time CALL l indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the stop is a TIMING POINT. Times for stops that are not timing points are sometimes interpolated crudely from the timing points, and may represent a lower level of accuracy. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TimingPoint.
    bool                                 TimingPoint                    0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether this is a Hail and Ride Stop. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "BoardingStretch" of XSD type xs:boolean.
    bool                                 BoardingStretch                0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether Vehicle stops only if requested explicitly by passenger. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestStop" of XSD type xs:boolean.
    bool                                 RequestStop                    0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Destination to show for the VEHICLE at the specific stop (vehicle signage), if different to the Destination Name for the full journey.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationDisplay             0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CallNoteGroup">
/// <PRE><BLOCKQUOTE>
///   Annotations of the CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Text annotation that applies to this CALL.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> CallNote                       0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DisruptionGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing nature of disruption.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Information about a change of Equipment availabilti at stop or on vehicle that may affect access or use.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Description of any change concerning a MONITORED FACILITY New structure defined in SIRI XSD 1.1 for Facilities Management.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityConditionStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityConditionStructure*> FacilityConditionElement       0;
/// <PRE><BLOCKQUOTE>
///   This sequence is here only for compatibility reasons between Siri 1.0 and Siri 1.1
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A change to the availaibility of EQUIPMENT. Basic structure defined in the first 1.0 SIRI XSd.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityChangeElement.
    ns2__FacilityChangeStructure*        FacilityChangeElement          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__SituationRefStructure*> SituationRef                   0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="OnwardsCallGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the CALL. Values for these elements can be specified on an production VEHICLE JOURNEY CALL. Each real-time journey CALL takes its values from the corresponding dated VEHICLE JOURNEY CALL. The absence of a value on an real-time CALL l indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="OnwardVehicleArrivalTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for Arrival in onward CALl.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE at stop .
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedArrivalTime.
    xsd__dateTime*                       ExpectedArrivalTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Prediction quality, either as approximate level, or more quantitayive percentile range of predictions will fall within a given range of times. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedArrivalPredictionQuality" of XSD type "http://www.siri.org.uk/siri":PredictionQualityStructure.
    ns2__PredictionQualityStructure*     ExpectedArrivalPredictionQuality 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="MonitoredStopArrivalStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the arrival status of a VEHICLE at a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the visit according to a fixed list of values. If not specified, same as DepartureStatus.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalStatus.
    enum ns2__CallStatusEnumeration*     ArrivalStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary text string to show to indicate the status of the departure of the VEHICLE for example, Enroute, 5 Km, Approaching. May depend on the policy of the OPERATOR, for example show Approaching if less than 200metres away from stop. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalProximityText.
    ns2__NaturalLanguageStringStructure*  ArrivalProximityText           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bay or platform (QUAY) name to show passenger i.e. expected platform for vehicel to arrive at.Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is(i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element;(iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalPlatformName.
    ns2__NaturalLanguageStringStructure*  ArrivalPlatformName            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Type of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalBoardingActivity.
    enum ns2__ArrivalBoardingActivityEnumeration  ArrivalBoardingActivity        0 = ns2__ArrivalBoardingActivityEnumeration__alighting;	///< Default element value="alighting".
/// <PRE><BLOCKQUOTE>
///   Assignment of arrival of Scheduled STOP POINT to a phsyical QUAY (platform). If not given, assume same as for departure +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "ArrivalStopAssignment" of XSD type "http://www.siri.org.uk/siri":StopAssignmentStructure.
    ns2__StopAssignmentStructure*        ArrivalStopAssignment          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of servcie up until arrival.. May change for departure. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> ArrivalOperatorRefs            0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="OnwardVehicleDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for departure in ONWARD CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedDepartureTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE, most likely taking into account all control actions such as waiting.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedDepartureTime.
    xsd__dateTime*                       ExpectedDepartureTime          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Expected departure time of VEHICLE without waiting time due to operational actions. For people at stop this would normally be shown if different from Expected departure time. So if servcie decides not to wait may leave earler than expected departure time +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "ProvisionalExpectedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ProvisionalExpectedDepartureTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Earliest time at which VEHICLE may leave the stop. Used to secure connections. Used for passenger announcements. Passengers must be at boarding point by this time to be sure of catching VEHICLE. i.e. "Vehicle will not leave before this time" - may be revised from original aimed time. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "EarliestExpectedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       EarliestExpectedDepartureTime  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Prediction quality, either as approximate level, or more quantitayive percentile range of predictions will fall within a given range of times. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedDeparturePredictionQuality" of XSD type "http://www.siri.org.uk/siri":PredictionQualityStructure.
    ns2__PredictionQualityStructure*     ExpectedDeparturePredictionQuality 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="PassengerDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Passenget arrivel times at STOP PLACE in order to meet VEHICLEdeparture times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target Latest time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times as itmay include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Latest target time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedLatestPassengerAccessTime.
    xsd__dateTime*                       AimedLatestPassengerAccessTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Expected Latest time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times as it may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Latest expected time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedLatestPassengerAccessTime.
    xsd__dateTime*                       ExpectedLatestPassengerAccessTime 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="MonitoredStopDepartureStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the departure status of a VEHICLE from a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the departure part of the CALL, according to a fixed list of values. This may reflect a presentation policy, for example CALLs less than one minute behind target time are still classified as on-time. Applications may use this to guide their own presentation of times.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureStatus.
    enum ns2__CallStatusEnumeration*     DepartureStatus                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary text string to show to indicate the status of the departure of the vehicle, for example, Boarding, GatesClosed. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureProximityText.
    ns2__NaturalLanguageStringStructure*  DepartureProximityText         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Defaulted taken from from planned timetable..
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Inheritable property.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DeparturePlatformName.
    ns2__NaturalLanguageStringStructure*  DeparturePlatformName          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding allowed at stop. Default is 'Boarding'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureBoardingActivity.
    enum ns2__DepartureBoardingActivityEnumeration  DepartureBoardingActivity      0 = ns2__DepartureBoardingActivityEnumeration__boarding;	///< Default element value="boarding".
/// <PRE><BLOCKQUOTE>
///   Assignments of departure platfiorm for Scheduled STOP POINT to a physical QUAY. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "DepartureStopAssignment" of XSD type "http://www.siri.org.uk/siri":StopAssignmentStructure.
    ns2__StopAssignmentStructure*        DepartureStopAssignment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of service for departure and onwards.. May change from that for arrival. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> DepartureOperatorRefs          0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="HeadwayIntervalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the HEADWAY INTERVALs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For frequency based services, target interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedHeadwayInterval.
    ns2__PositiveDurationType*           AimedHeadwayInterval           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For frequency based services, expected interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedHeadwayInterval.
    ns2__PositiveDurationType*           ExpectedHeadwayInterval        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopProximityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the distance from the stop of a VEHICLE. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Distance of VEHICLE from stop of CALL as measured along ROUTE track. Only shown if detail level is 'calls' or higher. Positive value denotes distance before stop. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "DistanceFromStop" of XSD type "http://www.siri.org.uk/siri":DistanceType.
    ns2__DistanceType*                   DistanceFromStop               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Count of stops along SERVICE PATTERN between current position of VEHICLE and stop of CALL as measured along ROUTE track. Only shown if detail level is 'calls' or higher. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "NumberOfStopsAway" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             NumberOfStopsAway              0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":RecordedCallStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for recroded Real-time info about a VEHICLE JOURNEY Stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__RecordedCallStructure operations:
/// - ns2__RecordedCallStructure* soap_new_ns2__RecordedCallStructure(soap*) allocate and default initialize
/// - ns2__RecordedCallStructure* soap_new_ns2__RecordedCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RecordedCallStructure* soap_new_req_ns2__RecordedCallStructure(soap*, ...) allocate, set required members
/// - ns2__RecordedCallStructure* soap_new_set_ns2__RecordedCallStructure(soap*, ...) allocate, set all public members
/// - ns2__RecordedCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RecordedCallStructure(soap*, ns2__RecordedCallStructure*) deserialize from a stream
/// - int soap_write_ns2__RecordedCallStructure(soap*, ns2__RecordedCallStructure*) serialize to a stream
/// - ns2__RecordedCallStructure* ns2__RecordedCallStructure::soap_dup(soap*) returns deep copy of ns2__RecordedCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RecordedCallStructure::soap_del() deep deletes ns2__RecordedCallStructure data members, use only after ns2__RecordedCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RecordedCallStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="StopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying an ordered visit to a SCHEDULED STOP POINT within a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_RecordedCallStructure  0;	///< Union _ns2__union_RecordedCallStructure selector: set to SOAP_UNION__ns2__union_RecordedCallStructure_<fieldname> or 0 to omit
    union _ns2__union_RecordedCallStructure
    {
/// <PRE><BLOCKQUOTE>
///   This call is additional and unplanned. If omitted: CALL is planned.
/// </BLOCKQUOTE></PRE>
/// Element "ExtraCall" of XSD type xs:boolean.
    bool                                 ExtraCall                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This call is a cancellation of a previously announced call.
/// </BLOCKQUOTE></PRE>
/// Element "Cancellation" of XSD type xs:boolean.
    bool                                 Cancellation                   0;	///< Optional element.
    }                                    union_RecordedCallStructure   ;
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="CallRealTimeInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information relating to real-time properties of call.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the prediction for the specific stop is considered to be of a useful accuracy or not. Default is 'false', i.e. prediction is not known to be inaccurate. {DOUBLE NEGATIVE IS BAD _ BETTER AS PredictionAccurate. Default is 'true'?]. If prediction is degraded, e.g. because in congestion, used to 9indicate a lowered quality of data. Inherited property. {SHOULD THIS JUST BE THE SPECIFIC InCongestion INDICATOR INSTEAD, OR IS IT MORE GENERAL]
/// </BLOCKQUOTE></PRE>
/// Element "PredictionInaccurate" of XSD type xs:boolean.
    bool*                                PredictionInaccurate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   How full the bus is at the stop. If omitted: Passenger load is unknown.
/// </BLOCKQUOTE></PRE>
/// Element "Occupancy" of XSD type "http://www.siri.org.uk/siri":OccupancyEnumeration.
    enum ns2__OccupancyEnumeration*      Occupancy                      0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="RecordedCallGroup">
/// <PRE><BLOCKQUOTE>
///   Information relating to recorded real-time properties of call.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE at stop .
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedArrivalTime.
    xsd__dateTime*                       ExpectedArrivalTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Observed time of arrival of VEHICLE at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ActualArrivalTime.
    xsd__dateTime*                       ActualArrivalTime              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bay or platform (QUAY) name to show passenger i.e. expected platform for vehicel to arrive at.Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is
///   (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element;
///   (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalPlatformName.
    ns2__NaturalLanguageStringStructure*  ArrivalPlatformName            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedDepartureTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedDepartureTime.
    xsd__dateTime*                       ExpectedDepartureTime          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Defaulted taken from from planned timetable..
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Inheritable property.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DeparturePlatformName.
    ns2__NaturalLanguageStringStructure*  DeparturePlatformName          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Observed time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ActualDepartureTime.
    xsd__dateTime*                       ActualDepartureTime            0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopTimetableDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for stop timetable deliveries. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopTimetableDeliveriesStructure operations:
/// - ns2__StopTimetableDeliveriesStructure* soap_new_ns2__StopTimetableDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__StopTimetableDeliveriesStructure* soap_new_ns2__StopTimetableDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopTimetableDeliveriesStructure* soap_new_req_ns2__StopTimetableDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__StopTimetableDeliveriesStructure* soap_new_set_ns2__StopTimetableDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__StopTimetableDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopTimetableDeliveriesStructure(soap*, ns2__StopTimetableDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__StopTimetableDeliveriesStructure(soap*, ns2__StopTimetableDeliveriesStructure*) serialize to a stream
/// - ns2__StopTimetableDeliveriesStructure* ns2__StopTimetableDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__StopTimetableDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopTimetableDeliveriesStructure::soap_del() deep deletes ns2__StopTimetableDeliveriesStructure data members, use only after ns2__StopTimetableDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopTimetableDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopTimetableDelivery.
    ns2__StopTimetableDeliveryStructure*  StopTimetableDelivery          1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":TargetedVehicleJourneyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a targeted VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__TargetedVehicleJourneyStructure operations:
/// - ns2__TargetedVehicleJourneyStructure* soap_new_ns2__TargetedVehicleJourneyStructure(soap*) allocate and default initialize
/// - ns2__TargetedVehicleJourneyStructure* soap_new_ns2__TargetedVehicleJourneyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TargetedVehicleJourneyStructure* soap_new_req_ns2__TargetedVehicleJourneyStructure(soap*, ...) allocate, set required members
/// - ns2__TargetedVehicleJourneyStructure* soap_new_set_ns2__TargetedVehicleJourneyStructure(soap*, ...) allocate, set all public members
/// - ns2__TargetedVehicleJourneyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TargetedVehicleJourneyStructure(soap*, ns2__TargetedVehicleJourneyStructure*) deserialize from a stream
/// - int soap_write_ns2__TargetedVehicleJourneyStructure(soap*, ns2__TargetedVehicleJourneyStructure*) serialize to a stream
/// - ns2__TargetedVehicleJourneyStructure* ns2__TargetedVehicleJourneyStructure::soap_dup(soap*) returns deep copy of ns2__TargetedVehicleJourneyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TargetedVehicleJourneyStructure::soap_del() deep deletes ns2__TargetedVehicleJourneyStructure data members, use only after ns2__TargetedVehicleJourneyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TargetedVehicleJourneyStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="JourneyIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the dated VEHICLE JOURNEY that the VEHICLE is making.
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="VehicleJourneyInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Common information about a VEHICLE JOURNEY. (Similar to VDV TripInfo)
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="ServiceInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__TargetedVehicleJourneyStructure_sequence
    {
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
    }                                   *__TargetedVehicleJourneyStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndNamesGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   End names for journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__TargetedVehicleJourneyStructure_sequence_
    {
/// <PRE><BLOCKQUOTE>
///   Reference to the origin SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OriginRef.
    ns2__JourneyPlaceRefStructure*       OriginRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of the origin of the journey. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginName                     0;
/// <PRE><BLOCKQUOTE>
///   Short name of the origin of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as Origin Name.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginShortName                0;
/// <PRE><BLOCKQUOTE>
///   DIRECTION name shown for joruney at the origin. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationDisplayAtOrigin     0;
/// <PRE><BLOCKQUOTE>
///   Names of VIA points, used to help identify the LINE, for example, Luton to Luton via Sutton. Currently 3 in VDV. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ViaNameStructure* of length 0..unbounded.
    std::vector<ns2__ViaNameStructure* > Via                            0;
/// <PRE><BLOCKQUOTE>
///   Reference to a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the destination SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DestinationRef.
    ns2__DestinationRefStructure*        DestinationRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the destination stop (vehicle signage), Can be overwritten for a journey, and then also section by section by the entry in an individual CALl. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationName                0;
/// <PRE><BLOCKQUOTE>
///   Short name of the DESTINATION.of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as DestinationName. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationShortName           0;
    }                                   *__TargetedVehicleJourneyStructure_sequence_ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing a VEHICLE JOURNEY. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul DATED VEHICLE JOURNEYs of the timetable. Each real-time journey (e.g. ESTIMATED VEHICLE JOURNEY or MONITORED VEHICLE JORUNEY) takes its values from the DATED VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For train services with named journeys. Train name, e.g. West Coast Express. If omitted: No train name. Inherited property. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> VehicleJourneyName             0;
/// <PRE><BLOCKQUOTE>
///   Additional descriptive text associated with journey. Inherited property.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> JourneyNote                    0;
/// <PRE><BLOCKQUOTE>
///   Contact details for use by members of public. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "PublicContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         PublicContact                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contact details for use by operational staff. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "OperationsContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         OperationsContact              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndTimesGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Call times for journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__TargetedVehicleJourneyStructure_sequence__
    {
/// <PRE><BLOCKQUOTE>
///   Whether this is a Headway Service, that is shown as operating at a prescribed interval rather than to a fixed timetable. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HeadwayService" of XSD type xs:boolean.
    bool                                 HeadwayService                 0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Timetabled departure time from Origin.
/// </BLOCKQUOTE></PRE>
/// Element "OriginAimedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       OriginAimedDepartureTime       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timetabled arrival time at Destination.
/// </BLOCKQUOTE></PRE>
/// Element "DestinationAimedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       DestinationAimedArrivalTime    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether journey is first or last journey of day. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FirstOrLastJourney.
    enum ns2__FirstOrLastJourneyEnumeration  FirstOrLastJourney             0 = ns2__FirstOrLastJourneyEnumeration__unspecified;	///< Default element value="unspecified".
    }                                   *__TargetedVehicleJourneyStructure_sequence__ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Information about the call at the stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TargetedCall.
    ns2__TargetedCallStructure*          TargetedCall                   0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":TargetedCallStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a targeted call.
/// </BLOCKQUOTE></PRE>
/// class ns2__TargetedCallStructure operations:
/// - ns2__TargetedCallStructure* soap_new_ns2__TargetedCallStructure(soap*) allocate and default initialize
/// - ns2__TargetedCallStructure* soap_new_ns2__TargetedCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TargetedCallStructure* soap_new_req_ns2__TargetedCallStructure(soap*, ...) allocate, set required members
/// - ns2__TargetedCallStructure* soap_new_set_ns2__TargetedCallStructure(soap*, ...) allocate, set all public members
/// - ns2__TargetedCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TargetedCallStructure(soap*, ns2__TargetedCallStructure*) deserialize from a stream
/// - int soap_write_ns2__TargetedCallStructure(soap*, ns2__TargetedCallStructure*) serialize to a stream
/// - ns2__TargetedCallStructure* ns2__TargetedCallStructure::soap_dup(soap*) returns deep copy of ns2__TargetedCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TargetedCallStructure::soap_del() deep deletes ns2__TargetedCallStructure data members, use only after ns2__TargetedCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TargetedCallStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="TargetedCallGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for a targeted call.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT. Normally this will omitted as will be the same as the monitoring point.
/// </BLOCKQUOTE></PRE>
/// Element "StopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType                 VisitNumber                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the stop is a TIMING POINT. Times for stops that are not timing points are sometimes interpolated crudely from the timing points, and may represent a lower level of accuracy. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TimingPoint.
    bool                                 TimingPoint                    0 = true;	///< Default element value="true".
//  BEGIN GROUP <xs:group name="ServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="AimedCallGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the targeted CALL of a VEHICLE at a stop.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="AimedVehicleArrivalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the arrival of a VEHICLE at a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalPlatformName.
    ns2__NaturalLanguageStringStructure*  ArrivalPlatformName            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalBoardingActivity.
    enum ns2__ArrivalBoardingActivityEnumeration  ArrivalBoardingActivity        0 = ns2__ArrivalBoardingActivityEnumeration__alighting;	///< Default element value="alighting".
/// <PRE><BLOCKQUOTE>
///   Assignment of arrival of Scheduled STOP POINT to a phsyical QUAY (platform). If not given, assume same as for departure +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "ArrivalStopAssignment" of XSD type "http://www.siri.org.uk/siri":PlannedStopAssignmentStructure.
    ns2__PlannedStopAssignmentStructure*  ArrivalStopAssignment          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of servcie up until arrival.. May change for departure. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> ArrivalOperatorRefs            0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="AimedVehicleDepartureGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the departure of a VEHICLE from a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedDepartureTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Inheritable property.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DeparturePlatformName.
    ns2__NaturalLanguageStringStructure*  DeparturePlatformName          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding allowed at stop. Default is 'Boarding'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureBoardingActivity.
    enum ns2__DepartureBoardingActivityEnumeration  DepartureBoardingActivity      0 = ns2__DepartureBoardingActivityEnumeration__boarding;	///< Default element value="boarding".
/// Element "DepartureStopAssignment" of XSD type "http://www.siri.org.uk/siri":PlannedStopAssignmentStructure.
    ns2__PlannedStopAssignmentStructure*  DepartureStopAssignment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of service for departure and onwards.. May change from that for arrival. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> DepartureOperatorRefs          0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Latest target time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedLatestPassengerAccessTime.
    xsd__dateTime*                       AimedLatestPassengerAccessTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For frequency based services, target interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedHeadwayInterval.
    ns2__PositiveDurationType*           AimedHeadwayInterval           0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringFilterStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for an individual Stop Monitoring a Multiple Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringFilterStructure operations:
/// - ns2__StopMonitoringFilterStructure* soap_new_ns2__StopMonitoringFilterStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringFilterStructure* soap_new_ns2__StopMonitoringFilterStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringFilterStructure* soap_new_req_ns2__StopMonitoringFilterStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringFilterStructure* soap_new_set_ns2__StopMonitoringFilterStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringFilterStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringFilterStructure(soap*, ns2__StopMonitoringFilterStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringFilterStructure(soap*, ns2__StopMonitoringFilterStructure*) serialize to a stream
/// - ns2__StopMonitoringFilterStructure* ns2__StopMonitoringFilterStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringFilterStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringFilterStructure::soap_del() deep deletes ns2__StopMonitoringFilterStructure data members, use only after ns2__StopMonitoringFilterStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringFilterStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="StopMonitoringTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Forward duration for which Visits should be included, that is, interval before predicted arrival at the stop for which to include Visits: only journeys which will arrive or depart within this time span will be returned.
/// </BLOCKQUOTE></PRE>
/// Element "PreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           PreviewInterval                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Start time for PreviewInterval. If absent, then current time is assumed.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    xsd__dateTime*                       StartTime                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to Monitoring Point(s) about which data is requested. May be a STOP POINT, timing point, or a group of points under a single reference.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Stop Visits for VEHICLEs run by the specified OPERATOR.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Stop Visits for VEHICLEs for the given LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Stop Visits for vehicles running in a specific relative DIRECTION, for example, "inbound" or "outbound". (Direction does not specify a destination.)
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only journeys to the DESTINATION of the journey.
/// </BLOCKQUOTE></PRE>
/// Element "DestinationRef" of XSD type "http://www.siri.org.uk/siri":DestinationRefStructure.
    ns2__DestinationRefStructure*        DestinationRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether to include arrival Visits, departure Visits, or all. Default is 'all'.
/// </BLOCKQUOTE></PRE>
/// Element "StopVisitTypes" of XSD type "http://www.siri.org.uk/siri":StopVisitTypeEnumeration.
    enum ns2__StopVisitTypeEnumeration   StopVisitTypes                 0 = ns2__StopVisitTypeEnumeration__all;	///< Default element value="all".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopMonitoringRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of stops returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:boolean.
    bool                                 Language                       0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The maximum number of Stop Visits to include in a given delivery. The first n Stop Visits within the look ahead window are included. Only Visits within the Lookahead Interval are returned. The MinimumStopVisits parameter can be used to reduce the the number of entries for each LINE within the total returned.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumStopVisits" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             MaximumStopVisits              0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_StopMonitoringFilterStructure;	///< Union _ns2__union_StopMonitoringFilterStructure selector: set to SOAP_UNION__ns2__union_StopMonitoringFilterStructure_<fieldname>
    union _ns2__union_StopMonitoringFilterStructure
    {
/// <PRE><BLOCKQUOTE>
///   The minimum number of Stop Visits for a given LINE to include in a given delivery. If there are more Visits within the LookAheadInterval than allowed by MaximumStopVisits and a MinimumStopVisits value is specified, then at least the minimum number will be delivered for each LINE. I.e Stop Visits will be included even if the Stop Visits are later than those for some other LINE for which the minimum number of Stop Visits has already been supplied. This allows the Consumer to obtain at least one entry for every available LINE with vehicles approaching the stop. Only STOP Visits within the Look ahead Interval are returned.
/// </BLOCKQUOTE></PRE>
/// Element "MinimumStopVisitsPerLine" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             MinimumStopVisitsPerLine       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The minimum number of Stop Visits for a given LINE and VIA combination to include in a given delivery. As for MinimumStopVisitsPerLine but with Via also taken into account. SIRI+v2.0
/// </BLOCKQUOTE></PRE>
/// Element "MinimumStopVisitsPerLineVia" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             MinimumStopVisitsPerLineVia    0;	///< Optional element.
    }                                    union_StopMonitoringFilterStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Maximum length of text to return for text elements. Default is 30.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumTextLength" of XSD type xs:positiveInteger.
    xsd__positiveInteger                 MaximumTextLength              0 = "30";	///< Default element value="30".
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'.
/// </BLOCKQUOTE></PRE>
/// Element "StopMonitoringDetailLevel" of XSD type "http://www.siri.org.uk/siri":StopMonitoringDetailEnumeration.
    enum ns2__StopMonitoringDetailEnumeration  StopMonitoringDetailLevel      0 = ns2__StopMonitoringDetailEnumeration__normal;	///< Default element value="normal".
/// <PRE><BLOCKQUOTE>
///   Whether any related SITUATIONs should be included in the ServiceDelivery. Default is 'false'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "IncludeSituations" of XSD type xs:boolean.
    bool*                                IncludeSituations              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If calls are to be returned, maximum number of calls to include in response. If absent, exclude all calls.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls operations:
/// - _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls* soap_new__ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls(soap*) allocate and default initialize
/// - _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls* soap_new__ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls(soap*, int num) allocate array and default initialize values
/// - _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls* soap_new_req__ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls(soap*, ...) allocate, set required members
/// - _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls* soap_new_set__ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls(soap*, ...) allocate, set all public members
/// - _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls(soap*, _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls*) deserialize from a stream
/// - int soap_write__ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls(soap*, _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls*) serialize to a stream
/// - _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls* _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls::soap_dup(soap*) returns deep copy of _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls::soap_del() deep deletes _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls data members, use only after _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopMonitoringFilterStructure_MaximumNumberOfCalls
    {
/// <PRE><BLOCKQUOTE>
///   Maximum number of ONWARDS CALLs to include in results. Only applies if StopMonitoringDetailLevel of 'calls' specified. Zero for none. If StopMonitoringDetailLevel of 'calls' specified but MaximumNumberOfCalls.Previous absent, include all ONWARDS CALLs.
/// </BLOCKQUOTE></PRE>
/// Element "Previous" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             Previous                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum number of ONWARDS CALLs to include in results. Zero for none. Only applies if StopMonitoringDetailLevel of 'calls'specified. Zero for none. If StopMonitoringDetailLevel of 'calls' specified but MaximumNumberOfCalls.Onwards absent, include all ONWARDS CALLs.
/// </BLOCKQUOTE></PRE>
/// Element "Onwards" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             Onwards                        0;	///< Optional element.
    }                                   *MaximumNumberOfCalls           0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":DeliveryVariantStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delviery Variant +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__DeliveryVariantStructure operations:
/// - ns2__DeliveryVariantStructure* soap_new_ns2__DeliveryVariantStructure(soap*) allocate and default initialize
/// - ns2__DeliveryVariantStructure* soap_new_ns2__DeliveryVariantStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DeliveryVariantStructure* soap_new_req_ns2__DeliveryVariantStructure(soap*, ...) allocate, set required members
/// - ns2__DeliveryVariantStructure* soap_new_set_ns2__DeliveryVariantStructure(soap*, ...) allocate, set all public members
/// - ns2__DeliveryVariantStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DeliveryVariantStructure(soap*, ns2__DeliveryVariantStructure*) deserialize from a stream
/// - int soap_write_ns2__DeliveryVariantStructure(soap*, ns2__DeliveryVariantStructure*) serialize to a stream
/// - ns2__DeliveryVariantStructure* ns2__DeliveryVariantStructure::soap_dup(soap*) returns deep copy of ns2__DeliveryVariantStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DeliveryVariantStructure::soap_del() deep deletes ns2__DeliveryVariantStructure data members, use only after ns2__DeliveryVariantStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DeliveryVariantStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Classification of DELIVERY VARIANT +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "VariantType" of XSD type xs:normalizedString.
    xsd__normalizedString*               VariantType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Variant text. SIRI v".0
/// </BLOCKQUOTE></PRE>
/// Element "Content" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Content                        1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deliveries for Stop Monitoring Service. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringDeliveriesStructure operations:
/// - ns2__StopMonitoringDeliveriesStructure* soap_new_ns2__StopMonitoringDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringDeliveriesStructure* soap_new_ns2__StopMonitoringDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringDeliveriesStructure* soap_new_req_ns2__StopMonitoringDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringDeliveriesStructure* soap_new_set_ns2__StopMonitoringDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringDeliveriesStructure(soap*, ns2__StopMonitoringDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringDeliveriesStructure(soap*, ns2__StopMonitoringDeliveriesStructure*) serialize to a stream
/// - ns2__StopMonitoringDeliveriesStructure* ns2__StopMonitoringDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringDeliveriesStructure::soap_del() deep deletes ns2__StopMonitoringDeliveriesStructure data members, use only after ns2__StopMonitoringDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Event service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringDeliveryStructure*> StopMonitoringDelivery         1;
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deliveries for VEHICLE monitoring services Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringDeliveriesStructure operations:
/// - ns2__VehicleMonitoringDeliveriesStructure* soap_new_ns2__VehicleMonitoringDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringDeliveriesStructure* soap_new_ns2__VehicleMonitoringDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringDeliveriesStructure* soap_new_req_ns2__VehicleMonitoringDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringDeliveriesStructure* soap_new_set_ns2__VehicleMonitoringDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringDeliveriesStructure(soap*, ns2__VehicleMonitoringDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringDeliveriesStructure(soap*, ns2__VehicleMonitoringDeliveriesStructure*) serialize to a stream
/// - ns2__VehicleMonitoringDeliveriesStructure* ns2__VehicleMonitoringDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringDeliveriesStructure::soap_del() deep deletes ns2__VehicleMonitoringDeliveriesStructure data members, use only after ns2__VehicleMonitoringDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Moniroting Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringDeliveryStructure*> VehicleMonitoringDelivery      1;
};

/// @brief "http://www.siri.org.uk/siri":ConnectionTimetableDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deliveries for Connection Timetable Service. Used in WSDl.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionTimetableDeliveriesStructure operations:
/// - ns2__ConnectionTimetableDeliveriesStructure* soap_new_ns2__ConnectionTimetableDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__ConnectionTimetableDeliveriesStructure* soap_new_ns2__ConnectionTimetableDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionTimetableDeliveriesStructure* soap_new_req_ns2__ConnectionTimetableDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionTimetableDeliveriesStructure* soap_new_set_ns2__ConnectionTimetableDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionTimetableDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionTimetableDeliveriesStructure(soap*, ns2__ConnectionTimetableDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionTimetableDeliveriesStructure(soap*, ns2__ConnectionTimetableDeliveriesStructure*) serialize to a stream
/// - ns2__ConnectionTimetableDeliveriesStructure* ns2__ConnectionTimetableDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionTimetableDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionTimetableDeliveriesStructure::soap_del() deep deletes ns2__ConnectionTimetableDeliveriesStructure data members, use only after ns2__ConnectionTimetableDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionTimetableDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionTimetableDelivery.
    ns2__ConnectionTimetableDeliveryStructure*  ConnectionTimetableDelivery    1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":InterchangeJourneyStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for feeder or Distributor Journey info about a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__InterchangeJourneyStructure operations:
/// - ns2__InterchangeJourneyStructure* soap_new_ns2__InterchangeJourneyStructure(soap*) allocate and default initialize
/// - ns2__InterchangeJourneyStructure* soap_new_ns2__InterchangeJourneyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InterchangeJourneyStructure* soap_new_req_ns2__InterchangeJourneyStructure(soap*, ...) allocate, set required members
/// - ns2__InterchangeJourneyStructure* soap_new_set_ns2__InterchangeJourneyStructure(soap*, ...) allocate, set all public members
/// - ns2__InterchangeJourneyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InterchangeJourneyStructure(soap*, ns2__InterchangeJourneyStructure*) deserialize from a stream
/// - int soap_write_ns2__InterchangeJourneyStructure(soap*, ns2__InterchangeJourneyStructure*) serialize to a stream
/// - ns2__InterchangeJourneyStructure* ns2__InterchangeJourneyStructure::soap_dup(soap*) returns deep copy of ns2__InterchangeJourneyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InterchangeJourneyStructure::soap_del() deep deletes ns2__InterchangeJourneyStructure data members, use only after ns2__InterchangeJourneyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InterchangeJourneyStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="JourneyIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the dated VEHICLE JOURNEY that the VEHICLE is making.
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__InterchangeJourneyStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
    }                                   *__InterchangeJourneyStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="VehicleJourneyInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Common information about a VEHICLE JOURNEY. (Similar to VDV TripInfo)
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__InterchangeJourneyStructure_sequence_
    {
//  BEGIN GROUP <xs:group name="ServiceInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__InterchangeJourneyStructure_sequence__
    {
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
    }                                   *__InterchangeJourneyStructure_sequence__ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndNamesGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   End names for journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__InterchangeJourneyStructure_sequence___
    {
/// <PRE><BLOCKQUOTE>
///   Reference to the origin SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OriginRef.
    ns2__JourneyPlaceRefStructure*       OriginRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of the origin of the journey. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginName                     0;
/// <PRE><BLOCKQUOTE>
///   Short name of the origin of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as Origin Name.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginShortName                0;
/// <PRE><BLOCKQUOTE>
///   DIRECTION name shown for joruney at the origin. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationDisplayAtOrigin     0;
/// <PRE><BLOCKQUOTE>
///   Names of VIA points, used to help identify the LINE, for example, Luton to Luton via Sutton. Currently 3 in VDV. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ViaNameStructure* of length 0..unbounded.
    std::vector<ns2__ViaNameStructure* > Via                            0;
/// <PRE><BLOCKQUOTE>
///   Reference to a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the destination SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DestinationRef.
    ns2__DestinationRefStructure*        DestinationRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the destination stop (vehicle signage), Can be overwritten for a journey, and then also section by section by the entry in an individual CALl. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationName                0;
/// <PRE><BLOCKQUOTE>
///   Short name of the DESTINATION.of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as DestinationName. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationShortName           0;
    }                                   *__InterchangeJourneyStructure_sequence___ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing a VEHICLE JOURNEY. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul DATED VEHICLE JOURNEYs of the timetable. Each real-time journey (e.g. ESTIMATED VEHICLE JOURNEY or MONITORED VEHICLE JORUNEY) takes its values from the DATED VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For train services with named journeys. Train name, e.g. West Coast Express. If omitted: No train name. Inherited property. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> VehicleJourneyName             0;
/// <PRE><BLOCKQUOTE>
///   Additional descriptive text associated with journey. Inherited property.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> JourneyNote                    0;
/// <PRE><BLOCKQUOTE>
///   Contact details for use by members of public. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "PublicContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         PublicContact                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contact details for use by operational staff. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "OperationsContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         OperationsContact              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndTimesGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Call times for journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__InterchangeJourneyStructure_sequence____
    {
/// <PRE><BLOCKQUOTE>
///   Whether this is a Headway Service, that is shown as operating at a prescribed interval rather than to a fixed timetable. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HeadwayService" of XSD type xs:boolean.
    bool                                 HeadwayService                 0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Timetabled departure time from Origin.
/// </BLOCKQUOTE></PRE>
/// Element "OriginAimedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       OriginAimedDepartureTime       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timetabled arrival time at Destination.
/// </BLOCKQUOTE></PRE>
/// Element "DestinationAimedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       DestinationAimedArrivalTime    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether journey is first or last journey of day. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FirstOrLastJourney.
    enum ns2__FirstOrLastJourneyEnumeration  FirstOrLastJourney             0 = ns2__FirstOrLastJourneyEnumeration__unspecified;	///< Default element value="unspecified".
    }                                   *__InterchangeJourneyStructure_sequence____ 0;
//  END OF SEQUENCE
//  END OF GROUP
    }                                   *__InterchangeJourneyStructure_sequence_ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DisruptionGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements describing nature of disruption.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__InterchangeJourneyStructure_sequence_____
    {
/// <PRE><BLOCKQUOTE>
///   Information about a change of Equipment availabilti at stop or on vehicle that may affect access or use.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Description of any change concerning a MONITORED FACILITY New structure defined in SIRI XSD 1.1 for Facilities Management.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityConditionStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityConditionStructure*> FacilityConditionElement       0;
/// <PRE><BLOCKQUOTE>
///   This sequence is here only for compatibility reasons between Siri 1.0 and Siri 1.1
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A change to the availaibility of EQUIPMENT. Basic structure defined in the first 1.0 SIRI XSd.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityChangeElement.
    ns2__FacilityChangeStructure*        FacilityChangeElement          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__SituationRefStructure*> SituationRef                   0;
    }                                   *__InterchangeJourneyStructure_sequence_____ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="OperationalInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__InterchangeJourneyStructure_sequence______
    {
//  BEGIN GROUP <xs:group name="OperationalBlockGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   BLOCK that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "BlockRef" of XSD type "http://www.siri.org.uk/siri":BlockRefStructure.
    ns2__BlockRefStructure*              BlockRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   COURSE OF JOURNEY ('Run') that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "CourseOfJourneyRef" of XSD type "http://www.siri.org.uk/siri":CourseOfJourneyRefStructure.
    ns2__CourseOfJourneyRefStructure*    CourseOfJourneyRef             0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleJourneyRef.
    ns2__VehicleJourneyRefStructure*     VehicleJourneyRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleRef.
    ns2__VehicleRefStructure*            VehicleRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refercence to other VEHICLE Journeys (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FramedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__FramedVehicleJourneyRefStructure*> AdditionalVehicleJourneyRef    0;
/// <PRE><BLOCKQUOTE>
///   A reference to the DRIVER or Crew currently logged in to operate a monitored VEHICLE. May be omitted if real-time data is not available - i.e. it is timetabled data. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               DriverRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The name oo the Driver or Crew +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverName" of XSD type xs:normalizedString.
    xsd__normalizedString*               DriverName                     0;	///< Optional element.
    }                                   *__InterchangeJourneyStructure_sequence______ 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Whether there is real-time information available for journey; if not present, not known.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool*                                Monitored                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   On a Distributor journey , a Timetabled departure time of the VEHICLE JOURNEY from the CONNECTION LINK for the SERVICE JOURNEY INTERCHANGE. On a Feeder journey a Timetabled arrival time of the VEHICLE JOURNEY at the CONNECTION link for the SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// Element "AimedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectingJourneyFilterStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for filter for connecting journeys.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectingJourneyFilterStructure operations:
/// - ns2__ConnectingJourneyFilterStructure* soap_new_ns2__ConnectingJourneyFilterStructure(soap*) allocate and default initialize
/// - ns2__ConnectingJourneyFilterStructure* soap_new_ns2__ConnectingJourneyFilterStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectingJourneyFilterStructure* soap_new_req_ns2__ConnectingJourneyFilterStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectingJourneyFilterStructure* soap_new_set_ns2__ConnectingJourneyFilterStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectingJourneyFilterStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectingJourneyFilterStructure(soap*, ns2__ConnectingJourneyFilterStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectingJourneyFilterStructure(soap*, ns2__ConnectingJourneyFilterStructure*) serialize to a stream
/// - ns2__ConnectingJourneyFilterStructure* ns2__ConnectingJourneyFilterStructure::soap_dup(soap*) returns deep copy of ns2__ConnectingJourneyFilterStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectingJourneyFilterStructure::soap_del() deep deletes ns2__ConnectingJourneyFilterStructure data members, use only after ns2__ConnectingJourneyFilterStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectingJourneyFilterStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to a dated VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DatedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyCodeType.
    ns2__DatedVehicleJourneyCodeType     DatedVehicleJourneyRef         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timetabled arrival time at the connection point.
/// </BLOCKQUOTE></PRE>
/// Element "TimetabledArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime                        TimetabledArrivalTime          1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectingTimeFilterStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for time filter for connecting journeys.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectingTimeFilterStructure operations:
/// - ns2__ConnectingTimeFilterStructure* soap_new_ns2__ConnectingTimeFilterStructure(soap*) allocate and default initialize
/// - ns2__ConnectingTimeFilterStructure* soap_new_ns2__ConnectingTimeFilterStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectingTimeFilterStructure* soap_new_req_ns2__ConnectingTimeFilterStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectingTimeFilterStructure* soap_new_set_ns2__ConnectingTimeFilterStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectingTimeFilterStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectingTimeFilterStructure(soap*, ns2__ConnectingTimeFilterStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectingTimeFilterStructure(soap*, ns2__ConnectingTimeFilterStructure*) serialize to a stream
/// - ns2__ConnectingTimeFilterStructure* ns2__ConnectingTimeFilterStructure::soap_dup(soap*) returns deep copy of ns2__ConnectingTimeFilterStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectingTimeFilterStructure::soap_del() deep deletes ns2__ConnectingTimeFilterStructure data members, use only after ns2__ConnectingTimeFilterStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectingTimeFilterStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Feeder LINE for which data is to be supplied.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Feeder for which data is to be supplied.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Earliest managed arrival time at the connection point.
/// </BLOCKQUOTE></PRE>
/// Element "EarliestArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       EarliestArrivalTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Latest managedarrival time at the connection point.
/// </BLOCKQUOTE></PRE>
/// Element "LatestArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       LatestArrivalTime              0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deliveries for Connection Monitoring Service. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionMonitoringDeliveriesStructure operations:
/// - ns2__ConnectionMonitoringDeliveriesStructure* soap_new_ns2__ConnectionMonitoringDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__ConnectionMonitoringDeliveriesStructure* soap_new_ns2__ConnectionMonitoringDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionMonitoringDeliveriesStructure* soap_new_req_ns2__ConnectionMonitoringDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionMonitoringDeliveriesStructure* soap_new_set_ns2__ConnectionMonitoringDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionMonitoringDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionMonitoringDeliveriesStructure(soap*, ns2__ConnectionMonitoringDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionMonitoringDeliveriesStructure(soap*, ns2__ConnectionMonitoringDeliveriesStructure*) serialize to a stream
/// - ns2__ConnectionMonitoringDeliveriesStructure* ns2__ConnectionMonitoringDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionMonitoringDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionMonitoringDeliveriesStructure::soap_del() deep deletes ns2__ConnectionMonitoringDeliveriesStructure data members, use only after ns2__ConnectionMonitoringDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionMonitoringDeliveriesStructure : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ConnectionMonitoringDeliveriesStructure;	///< Union _ns2__union_ConnectionMonitoringDeliveriesStructure selector: set to SOAP_UNION__ns2__union_ConnectionMonitoringDeliveriesStructure_<fieldname>
    union _ns2__union_ConnectionMonitoringDeliveriesStructure
    {
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Feeder Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Feeder Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringFeederDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringFeederDeliveryStructure*> *ConnectionMonitoringFeederDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Distributor i.e. Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Distributor Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringDistributorDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringDistributorDeliveryStructure*> *ConnectionMonitoringDistributorDelivery 1;
    }                                    union_ConnectionMonitoringDeliveriesStructure;
//  END OF CHOICE
};

/// @brief "http://www.siri.org.uk/siri":GeneralMessageDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deliveries. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__GeneralMessageDeliveriesStructure operations:
/// - ns2__GeneralMessageDeliveriesStructure* soap_new_ns2__GeneralMessageDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__GeneralMessageDeliveriesStructure* soap_new_ns2__GeneralMessageDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GeneralMessageDeliveriesStructure* soap_new_req_ns2__GeneralMessageDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__GeneralMessageDeliveriesStructure* soap_new_set_ns2__GeneralMessageDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__GeneralMessageDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GeneralMessageDeliveriesStructure(soap*, ns2__GeneralMessageDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__GeneralMessageDeliveriesStructure(soap*, ns2__GeneralMessageDeliveriesStructure*) serialize to a stream
/// - ns2__GeneralMessageDeliveriesStructure* ns2__GeneralMessageDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__GeneralMessageDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GeneralMessageDeliveriesStructure::soap_del() deep deletes ns2__GeneralMessageDeliveriesStructure data members, use only after ns2__GeneralMessageDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GeneralMessageDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for general Message service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for General Message Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageDeliveryStructure*> GeneralMessageDelivery         1;
};

/// @brief "http://www.siri.org.uk/siri":AccessibilityNeedsFilterStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about Accessibility Facilities status.
/// </BLOCKQUOTE></PRE>
/// class ns2__AccessibilityNeedsFilterStructure operations:
/// - ns2__AccessibilityNeedsFilterStructure* soap_new_ns2__AccessibilityNeedsFilterStructure(soap*) allocate and default initialize
/// - ns2__AccessibilityNeedsFilterStructure* soap_new_ns2__AccessibilityNeedsFilterStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AccessibilityNeedsFilterStructure* soap_new_req_ns2__AccessibilityNeedsFilterStructure(soap*, ...) allocate, set required members
/// - ns2__AccessibilityNeedsFilterStructure* soap_new_set_ns2__AccessibilityNeedsFilterStructure(soap*, ...) allocate, set all public members
/// - ns2__AccessibilityNeedsFilterStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AccessibilityNeedsFilterStructure(soap*, ns2__AccessibilityNeedsFilterStructure*) deserialize from a stream
/// - int soap_write_ns2__AccessibilityNeedsFilterStructure(soap*, ns2__AccessibilityNeedsFilterStructure*) serialize to a stream
/// - ns2__AccessibilityNeedsFilterStructure* ns2__AccessibilityNeedsFilterStructure::soap_dup(soap*) returns deep copy of ns2__AccessibilityNeedsFilterStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AccessibilityNeedsFilterStructure::soap_del() deep deletes ns2__AccessibilityNeedsFilterStructure data members, use only after ns2__AccessibilityNeedsFilterStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AccessibilityNeedsFilterStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   User need to be monitored.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__UserNeedStructure* of length 1..unbounded.
    std::vector<ns3__UserNeedStructure*> UserNeed                       1;
};

/// @brief "http://www.siri.org.uk/siri":FacilityMonitoringDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deliveries for VEHICLE monitoring services Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityMonitoringDeliveriesStructure operations:
/// - ns2__FacilityMonitoringDeliveriesStructure* soap_new_ns2__FacilityMonitoringDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__FacilityMonitoringDeliveriesStructure* soap_new_ns2__FacilityMonitoringDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityMonitoringDeliveriesStructure* soap_new_req_ns2__FacilityMonitoringDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityMonitoringDeliveriesStructure* soap_new_set_ns2__FacilityMonitoringDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityMonitoringDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityMonitoringDeliveriesStructure(soap*, ns2__FacilityMonitoringDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityMonitoringDeliveriesStructure(soap*, ns2__FacilityMonitoringDeliveriesStructure*) serialize to a stream
/// - ns2__FacilityMonitoringDeliveriesStructure* ns2__FacilityMonitoringDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__FacilityMonitoringDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityMonitoringDeliveriesStructure::soap_del() deep deletes ns2__FacilityMonitoringDeliveriesStructure data members, use only after ns2__FacilityMonitoringDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityMonitoringDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Activity Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringDeliveryStructure*> FacilityMonitoringDelivery     1;
};

/// @brief "http://www.siri.org.uk/siri":RoadFilterStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Parameters to filter Situation Exchange Service requests, based on the SITUATION Road, Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
/// class ns2__RoadFilterStructure operations:
/// - ns2__RoadFilterStructure* soap_new_ns2__RoadFilterStructure(soap*) allocate and default initialize
/// - ns2__RoadFilterStructure* soap_new_ns2__RoadFilterStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RoadFilterStructure* soap_new_req_ns2__RoadFilterStructure(soap*, ...) allocate, set required members
/// - ns2__RoadFilterStructure* soap_new_set_ns2__RoadFilterStructure(soap*, ...) allocate, set all public members
/// - ns2__RoadFilterStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RoadFilterStructure(soap*, ns2__RoadFilterStructure*) deserialize from a stream
/// - int soap_write_ns2__RoadFilterStructure(soap*, ns2__RoadFilterStructure*) serialize to a stream
/// - ns2__RoadFilterStructure* ns2__RoadFilterStructure::soap_dup(soap*) returns deep copy of ns2__RoadFilterStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RoadFilterStructure::soap_del() deep deletes ns2__RoadFilterStructure data members, use only after ns2__RoadFilterStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RoadFilterStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier or number of the road on which the reference POINT is located.
/// </BLOCKQUOTE></PRE>
/// Element "roadNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         roadNumber                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The DIRECTION at the reference point in terms of general destination DIRECTION. If absent both.
/// </BLOCKQUOTE></PRE>
/// Element "directionBound" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DirectionEnum.
    enum ns5__DirectionEnum*             directionBound                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Road reference POINT identifier, unique on the specified road.
/// </BLOCKQUOTE></PRE>
/// Element "referencePointIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         referencePointIdentifier       0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ContextStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Common parameters for all SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// class ns2__ContextStructure operations:
/// - ns2__ContextStructure* soap_new_ns2__ContextStructure(soap*) allocate and default initialize
/// - ns2__ContextStructure* soap_new_ns2__ContextStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ContextStructure* soap_new_req_ns2__ContextStructure(soap*, ...) allocate, set required members
/// - ns2__ContextStructure* soap_new_set_ns2__ContextStructure(soap*, ...) allocate, set all public members
/// - ns2__ContextStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ContextStructure(soap*, ns2__ContextStructure*) deserialize from a stream
/// - int soap_write_ns2__ContextStructure(soap*, ns2__ContextStructure*) serialize to a stream
/// - ns2__ContextStructure* ns2__ContextStructure::soap_dup(soap*) returns deep copy of ns2__ContextStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ContextStructure::soap_del() deep deletes ns2__ContextStructure data members, use only after ns2__ContextStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ContextStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a Country of a Participant who published SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "CountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            CountryRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a system publishing SITUATIONs. If SITUATIONs from other participants are included in delivery, then ParticipantRef of immediate publisher must be given here.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Refrence to a TOPOGRAPHIC PLACE (locality). Also Derivable from an individual StopRef.
/// </BLOCKQUOTE></PRE>
/// Element "TopographicPlaceRef" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        TopographicPlaceRef            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of locality in which SITUATIONs apply. Derivable from LocalityRef. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> TopographicPlaceName           0;
/// <PRE><BLOCKQUOTE>
///   Default language of text.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Default context for common properties of Public Transport SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// Element "NetworkContext" of XSD type "http://www.siri.org.uk/siri":NetworkContextStructure.
    ns2__NetworkContextStructure*        NetworkContext                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Actions that apply to all SITUATIONs unless overridden.
/// </BLOCKQUOTE></PRE>
/// Element "Actions" of XSD type "http://www.siri.org.uk/siri":ActionsStructure.
    ns2__ActionsStructure*               Actions                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":NetworkContextStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for shared context.
/// </BLOCKQUOTE></PRE>
/// class ns2__NetworkContextStructure operations:
/// - ns2__NetworkContextStructure* soap_new_ns2__NetworkContextStructure(soap*) allocate and default initialize
/// - ns2__NetworkContextStructure* soap_new_ns2__NetworkContextStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NetworkContextStructure* soap_new_req_ns2__NetworkContextStructure(soap*, ...) allocate, set required members
/// - ns2__NetworkContextStructure* soap_new_set_ns2__NetworkContextStructure(soap*, ...) allocate, set all public members
/// - ns2__NetworkContextStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NetworkContextStructure(soap*, ns2__NetworkContextStructure*) deserialize from a stream
/// - int soap_write_ns2__NetworkContextStructure(soap*, ns2__NetworkContextStructure*) serialize to a stream
/// - ns2__NetworkContextStructure* ns2__NetworkContextStructure::soap_dup(soap*) returns deep copy of ns2__NetworkContextStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NetworkContextStructure::soap_del() deep deletes ns2__NetworkContextStructure data members, use only after ns2__NetworkContextStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NetworkContextStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Default OPERATOR for SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedOperatorStructure* of length 0..unbounded.
    std::vector<ns2__AffectedOperatorStructure*> Operator                       0;
/// <PRE><BLOCKQUOTE>
///   Default Network of affected LINEs. These values apply to all SITUATIONs unless overridden on individual instances.
/// </BLOCKQUOTE></PRE>
/// Element "Network" of XSD type "http://www.siri.org.uk/siri":NetworkStructure.
    ns2__NetworkStructure*               Network                        0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SituationExchangeDeliveriesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deliveries for Situation Exchange Service. Used in WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationExchangeDeliveriesStructure operations:
/// - ns2__SituationExchangeDeliveriesStructure* soap_new_ns2__SituationExchangeDeliveriesStructure(soap*) allocate and default initialize
/// - ns2__SituationExchangeDeliveriesStructure* soap_new_ns2__SituationExchangeDeliveriesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationExchangeDeliveriesStructure* soap_new_req_ns2__SituationExchangeDeliveriesStructure(soap*, ...) allocate, set required members
/// - ns2__SituationExchangeDeliveriesStructure* soap_new_set_ns2__SituationExchangeDeliveriesStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationExchangeDeliveriesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationExchangeDeliveriesStructure(soap*, ns2__SituationExchangeDeliveriesStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationExchangeDeliveriesStructure(soap*, ns2__SituationExchangeDeliveriesStructure*) serialize to a stream
/// - ns2__SituationExchangeDeliveriesStructure* ns2__SituationExchangeDeliveriesStructure::soap_dup(soap*) returns deep copy of ns2__SituationExchangeDeliveriesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationExchangeDeliveriesStructure::soap_del() deep deletes ns2__SituationExchangeDeliveriesStructure data members, use only after ns2__SituationExchangeDeliveriesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationExchangeDeliveriesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Activity Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeDeliveryStructure*> SituationExchangeDelivery      1;
};

/// @brief "http://www.siri.org.uk/siri":AnnotatedLineStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Summary information about a LINE type.
/// </BLOCKQUOTE></PRE>
/// class ns2__AnnotatedLineStructure operations:
/// - ns2__AnnotatedLineStructure* soap_new_ns2__AnnotatedLineStructure(soap*) allocate and default initialize
/// - ns2__AnnotatedLineStructure* soap_new_ns2__AnnotatedLineStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AnnotatedLineStructure* soap_new_req_ns2__AnnotatedLineStructure(soap*, ...) allocate, set required members
/// - ns2__AnnotatedLineStructure* soap_new_set_ns2__AnnotatedLineStructure(soap*, ...) allocate, set all public members
/// - ns2__AnnotatedLineStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AnnotatedLineStructure(soap*, ns2__AnnotatedLineStructure*) deserialize from a stream
/// - int soap_write_ns2__AnnotatedLineStructure(soap*, ns2__AnnotatedLineStructure*) serialize to a stream
/// - ns2__AnnotatedLineStructure* ns2__AnnotatedLineStructure::soap_dup(soap*) returns deep copy of ns2__AnnotatedLineStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AnnotatedLineStructure::soap_del() deep deletes ns2__AnnotatedLineStructure data members, use only after ns2__AnnotatedLineStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AnnotatedLineStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of LINE. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 1..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> LineName                       1;
/// <PRE><BLOCKQUOTE>
///   Whether the LINE has real-time info. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool                                 Monitored                      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   DESTINATIONs to which the LINE runs. Detail level is 'normal'
/// </BLOCKQUOTE></PRE>
/// class _ns2__AnnotatedLineStructure_Destinations operations:
/// - _ns2__AnnotatedLineStructure_Destinations* soap_new__ns2__AnnotatedLineStructure_Destinations(soap*) allocate and default initialize
/// - _ns2__AnnotatedLineStructure_Destinations* soap_new__ns2__AnnotatedLineStructure_Destinations(soap*, int num) allocate array and default initialize values
/// - _ns2__AnnotatedLineStructure_Destinations* soap_new_req__ns2__AnnotatedLineStructure_Destinations(soap*, ...) allocate, set required members
/// - _ns2__AnnotatedLineStructure_Destinations* soap_new_set__ns2__AnnotatedLineStructure_Destinations(soap*, ...) allocate, set all public members
/// - _ns2__AnnotatedLineStructure_Destinations::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AnnotatedLineStructure_Destinations(soap*, _ns2__AnnotatedLineStructure_Destinations*) deserialize from a stream
/// - int soap_write__ns2__AnnotatedLineStructure_Destinations(soap*, _ns2__AnnotatedLineStructure_Destinations*) serialize to a stream
/// - _ns2__AnnotatedLineStructure_Destinations* _ns2__AnnotatedLineStructure_Destinations::soap_dup(soap*) returns deep copy of _ns2__AnnotatedLineStructure_Destinations, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AnnotatedLineStructure_Destinations::soap_del() deep deletes _ns2__AnnotatedLineStructure_Destinations data members, use only after _ns2__AnnotatedLineStructure_Destinations::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AnnotatedLineStructure_Destinations
    {
/// <PRE><BLOCKQUOTE>
///   Description of a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AnnotatedDestinationStructure* element refs of length 1..unbounded.
    std::vector<ns2__AnnotatedDestinationStructure*> Destination                    1;
    }                                   *Destinations                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DIRECTIONs and Stops for the LINE. 'normal'
/// </BLOCKQUOTE></PRE>
/// class _ns2__AnnotatedLineStructure_Directions operations:
/// - _ns2__AnnotatedLineStructure_Directions* soap_new__ns2__AnnotatedLineStructure_Directions(soap*) allocate and default initialize
/// - _ns2__AnnotatedLineStructure_Directions* soap_new__ns2__AnnotatedLineStructure_Directions(soap*, int num) allocate array and default initialize values
/// - _ns2__AnnotatedLineStructure_Directions* soap_new_req__ns2__AnnotatedLineStructure_Directions(soap*, ...) allocate, set required members
/// - _ns2__AnnotatedLineStructure_Directions* soap_new_set__ns2__AnnotatedLineStructure_Directions(soap*, ...) allocate, set all public members
/// - _ns2__AnnotatedLineStructure_Directions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AnnotatedLineStructure_Directions(soap*, _ns2__AnnotatedLineStructure_Directions*) deserialize from a stream
/// - int soap_write__ns2__AnnotatedLineStructure_Directions(soap*, _ns2__AnnotatedLineStructure_Directions*) serialize to a stream
/// - _ns2__AnnotatedLineStructure_Directions* _ns2__AnnotatedLineStructure_Directions::soap_dup(soap*) returns deep copy of _ns2__AnnotatedLineStructure_Directions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AnnotatedLineStructure_Directions::soap_del() deep deletes _ns2__AnnotatedLineStructure_Directions data members, use only after _ns2__AnnotatedLineStructure_Directions::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AnnotatedLineStructure_Directions
    {
/// <PRE><BLOCKQUOTE>
///   Directions of Route
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__RouteDirectionStructure* of length 1..unbounded.
    std::vector<ns2__RouteDirectionStructure*> Direction                      1;
    }                                   *Directions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AnnotatedDestinationStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for DESTINATION and place name.
/// </BLOCKQUOTE></PRE>
/// class ns2__AnnotatedDestinationStructure operations:
/// - ns2__AnnotatedDestinationStructure* soap_new_ns2__AnnotatedDestinationStructure(soap*) allocate and default initialize
/// - ns2__AnnotatedDestinationStructure* soap_new_ns2__AnnotatedDestinationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AnnotatedDestinationStructure* soap_new_req_ns2__AnnotatedDestinationStructure(soap*, ...) allocate, set required members
/// - ns2__AnnotatedDestinationStructure* soap_new_set_ns2__AnnotatedDestinationStructure(soap*, ...) allocate, set all public members
/// - ns2__AnnotatedDestinationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AnnotatedDestinationStructure(soap*, ns2__AnnotatedDestinationStructure*) deserialize from a stream
/// - int soap_write_ns2__AnnotatedDestinationStructure(soap*, ns2__AnnotatedDestinationStructure*) serialize to a stream
/// - ns2__AnnotatedDestinationStructure* ns2__AnnotatedDestinationStructure::soap_dup(soap*) returns deep copy of ns2__AnnotatedDestinationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AnnotatedDestinationStructure::soap_del() deep deletes ns2__AnnotatedDestinationStructure data members, use only after ns2__AnnotatedDestinationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AnnotatedDestinationStructure : public xsd__anyType
{ public:
/// Element "DestinationRef" of XSD type "http://www.siri.org.uk/siri":DestinationRefStructure.
    ns2__DestinationRefStructure*        DestinationRef                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of destination TOPOGRAPHIC PLACE. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 1..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PlaceName                      1;
/// <PRE><BLOCKQUOTE>
///   Direction in which destination lies. relatoive to currernt stop SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AnnotatedStopPointStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   View of a SCHEDULED STOP POINT description.
/// </BLOCKQUOTE></PRE>
/// class ns2__AnnotatedStopPointStructure operations:
/// - ns2__AnnotatedStopPointStructure* soap_new_ns2__AnnotatedStopPointStructure(soap*) allocate and default initialize
/// - ns2__AnnotatedStopPointStructure* soap_new_ns2__AnnotatedStopPointStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AnnotatedStopPointStructure* soap_new_req_ns2__AnnotatedStopPointStructure(soap*, ...) allocate, set required members
/// - ns2__AnnotatedStopPointStructure* soap_new_set_ns2__AnnotatedStopPointStructure(soap*, ...) allocate, set all public members
/// - ns2__AnnotatedStopPointStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AnnotatedStopPointStructure(soap*, ns2__AnnotatedStopPointStructure*) deserialize from a stream
/// - int soap_write_ns2__AnnotatedStopPointStructure(soap*, ns2__AnnotatedStopPointStructure*) serialize to a stream
/// - ns2__AnnotatedStopPointStructure* ns2__AnnotatedStopPointStructure::soap_dup(soap*) returns deep copy of ns2__AnnotatedStopPointStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AnnotatedStopPointStructure::soap_del() deep deletes ns2__AnnotatedStopPointStructure data members, use only after ns2__AnnotatedStopPointStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AnnotatedStopPointStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifer of the stop.
/// </BLOCKQUOTE></PRE>
/// Element "StopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          StopPointRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Whether the stop is a TIMING POINT. Times for stops that are not timing points are sometimes interpolated crudely from the timing points, and may represent a lower level of accuracy. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TimingPoint.
    bool                                 TimingPoint                    0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether real-time data is available for the stop. Default is 'true'. Detail level is 'normal'.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool                                 Monitored                      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. Detail level is 'normal'. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopName                       0;
/// <PRE><BLOCKQUOTE>
///   Identifer of the sSTOP AREA to which SCHEDULED STOP POINT belongs. +SIRI.v2.0
/// </BLOCKQUOTE></PRE>
/// Element "StopAreaRef" of XSD type "http://www.siri.org.uk/siri":StopAreaRefStructure.
    ns2__StopAreaRefStructure*           StopAreaRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Service features of stop. Detail level is 'full'
/// </BLOCKQUOTE></PRE>
/// class _ns2__AnnotatedStopPointStructure_Features operations:
/// - _ns2__AnnotatedStopPointStructure_Features* soap_new__ns2__AnnotatedStopPointStructure_Features(soap*) allocate and default initialize
/// - _ns2__AnnotatedStopPointStructure_Features* soap_new__ns2__AnnotatedStopPointStructure_Features(soap*, int num) allocate array and default initialize values
/// - _ns2__AnnotatedStopPointStructure_Features* soap_new_req__ns2__AnnotatedStopPointStructure_Features(soap*, ...) allocate, set required members
/// - _ns2__AnnotatedStopPointStructure_Features* soap_new_set__ns2__AnnotatedStopPointStructure_Features(soap*, ...) allocate, set all public members
/// - _ns2__AnnotatedStopPointStructure_Features::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AnnotatedStopPointStructure_Features(soap*, _ns2__AnnotatedStopPointStructure_Features*) deserialize from a stream
/// - int soap_write__ns2__AnnotatedStopPointStructure_Features(soap*, _ns2__AnnotatedStopPointStructure_Features*) serialize to a stream
/// - _ns2__AnnotatedStopPointStructure_Features* _ns2__AnnotatedStopPointStructure_Features::soap_dup(soap*) returns deep copy of _ns2__AnnotatedStopPointStructure_Features, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AnnotatedStopPointStructure_Features::soap_del() deep deletes _ns2__AnnotatedStopPointStructure_Features data members, use only after _ns2__AnnotatedStopPointStructure_Features::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AnnotatedStopPointStructure_Features
    {
//  BEGIN CHOICE <xs:choice maxOccurs="unbounded">
   $int                                  __size_AnnotatedStopPointStructure_Features 0;
    class __ns2__union_AnnotatedStopPointStructure_Features
    {
   $int                                  __union_AnnotatedStopPointStructure_Features;	///< Union _ns2__union_AnnotatedStopPointStructure_Features selector: set to SOAP_UNION__ns2__union_AnnotatedStopPointStructure_Features_<fieldname>
/// Union for choice in ns2__Features.
    union _ns2__union_AnnotatedStopPointStructure_Features
    {
/// <PRE><BLOCKQUOTE>
///   Description of Service features of stop.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceFeature" of XSD type "http://www.siri.org.uk/siri":ServiceFeatureStructure.
    ns2__ServiceFeatureStructure*        ServiceFeature                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceFeatureRef.
    ns2__ServiceFeatureRefStructure*     ServiceFeatureRef              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_AnnotatedStopPointStructure_Features;
    }                                   *__union_AnnotatedStopPointStructure_Features;
//  END OF CHOICE
    }                                   *Features                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   LINEs that use stop. Detail level is 'full'
/// </BLOCKQUOTE></PRE>
/// class _ns2__AnnotatedStopPointStructure_Lines operations:
/// - _ns2__AnnotatedStopPointStructure_Lines* soap_new__ns2__AnnotatedStopPointStructure_Lines(soap*) allocate and default initialize
/// - _ns2__AnnotatedStopPointStructure_Lines* soap_new__ns2__AnnotatedStopPointStructure_Lines(soap*, int num) allocate array and default initialize values
/// - _ns2__AnnotatedStopPointStructure_Lines* soap_new_req__ns2__AnnotatedStopPointStructure_Lines(soap*, ...) allocate, set required members
/// - _ns2__AnnotatedStopPointStructure_Lines* soap_new_set__ns2__AnnotatedStopPointStructure_Lines(soap*, ...) allocate, set all public members
/// - _ns2__AnnotatedStopPointStructure_Lines::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AnnotatedStopPointStructure_Lines(soap*, _ns2__AnnotatedStopPointStructure_Lines*) deserialize from a stream
/// - int soap_write__ns2__AnnotatedStopPointStructure_Lines(soap*, _ns2__AnnotatedStopPointStructure_Lines*) serialize to a stream
/// - _ns2__AnnotatedStopPointStructure_Lines* _ns2__AnnotatedStopPointStructure_Lines::soap_dup(soap*) returns deep copy of _ns2__AnnotatedStopPointStructure_Lines, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AnnotatedStopPointStructure_Lines::soap_del() deep deletes _ns2__AnnotatedStopPointStructure_Lines data members, use only after _ns2__AnnotatedStopPointStructure_Lines::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AnnotatedStopPointStructure_Lines
    {
//  BEGIN CHOICE <xs:choice maxOccurs="unbounded">
   $int                                  __size_AnnotatedStopPointStructure_Lines 0;
    class __ns2__union_AnnotatedStopPointStructure_Lines
    {
   $int                                  __union_AnnotatedStopPointStructure_Lines;	///< Union _ns2__union_AnnotatedStopPointStructure_Lines selector: set to SOAP_UNION__ns2__union_AnnotatedStopPointStructure_Lines_<fieldname>
/// Union for choice in ns2__Lines.
    union _ns2__union_AnnotatedStopPointStructure_Lines
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE that calls at stop.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE that calls at stop. and its direction +SIRI V2.0
/// </BLOCKQUOTE></PRE>
/// Element "LineDirection" of XSD type "http://www.siri.org.uk/siri":LineDirectionStructure.
    ns2__LineDirectionStructure*         LineDirection                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_AnnotatedStopPointStructure_Lines;
    }                                   *__union_AnnotatedStopPointStructure_Lines;
//  END OF CHOICE
    }                                   *Lines                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Coordinates to use to show stop as a poitn on map. Detail level is 'normal'.+SIRI.v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Location" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Location                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Web page associated with Stop. Detail level is 'full'+SIRI.v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Url" of XSD type xs:anyURI.
    xsd__anyURI*                         Url                            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ProductCategoryStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for TYPE OF PRODUCT CATEGORY description.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductCategoryStructure operations:
/// - ns2__ProductCategoryStructure* soap_new_ns2__ProductCategoryStructure(soap*) allocate and default initialize
/// - ns2__ProductCategoryStructure* soap_new_ns2__ProductCategoryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductCategoryStructure* soap_new_req_ns2__ProductCategoryStructure(soap*, ...) allocate, set required members
/// - ns2__ProductCategoryStructure* soap_new_set_ns2__ProductCategoryStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductCategoryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductCategoryStructure(soap*, ns2__ProductCategoryStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductCategoryStructure(soap*, ns2__ProductCategoryStructure*) serialize to a stream
/// - ns2__ProductCategoryStructure* ns2__ProductCategoryStructure::soap_dup(soap*) returns deep copy of ns2__ProductCategoryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductCategoryStructure::soap_del() deep deletes ns2__ProductCategoryStructure data members, use only after ns2__ProductCategoryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductCategoryStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of TYPE OF PRODUCT CATEGORY classification. SIRI provides a recommended set of values covering most usages, intended to be TPEG compatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryCode" of XSD type "http://www.siri.org.uk/siri":ProductCategoryCodeType.
    ns2__ProductCategoryCodeType         ProductCategoryCode            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of classification (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 1..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Name                           1;
/// <PRE><BLOCKQUOTE>
///   Icon used to represent TYPE OF PRODUCT CATEGORY.
/// </BLOCKQUOTE></PRE>
/// Element "Icon" of XSD type xs:anyURI.
    xsd__anyURI*                         Icon                           0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ServiceFeatureStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Service Feature description.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceFeatureStructure operations:
/// - ns2__ServiceFeatureStructure* soap_new_ns2__ServiceFeatureStructure(soap*) allocate and default initialize
/// - ns2__ServiceFeatureStructure* soap_new_ns2__ServiceFeatureStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceFeatureStructure* soap_new_req_ns2__ServiceFeatureStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceFeatureStructure* soap_new_set_ns2__ServiceFeatureStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceFeatureStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceFeatureStructure(soap*, ns2__ServiceFeatureStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceFeatureStructure(soap*, ns2__ServiceFeatureStructure*) serialize to a stream
/// - ns2__ServiceFeatureStructure* ns2__ServiceFeatureStructure::soap_dup(soap*) returns deep copy of ns2__ServiceFeatureStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceFeatureStructure::soap_del() deep deletes ns2__ServiceFeatureStructure data members, use only after ns2__ServiceFeatureStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceFeatureStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of classification. SIRI provides a recommended set of values covering most usages, intended to be TPEG compatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceFeatureCode" of XSD type "http://www.siri.org.uk/siri":ServiceFeatureCodeType.
    ns2__ServiceFeatureCodeType          ServiceFeatureCode             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of classification. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 1..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Name                           1;
/// <PRE><BLOCKQUOTE>
///   Icon associated with feature.
/// </BLOCKQUOTE></PRE>
/// Element "Icon" of XSD type xs:anyURI.
    xsd__anyURI                          Icon                           1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":VehicleFeaturesStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for description of feature of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleFeaturesStructure operations:
/// - ns2__VehicleFeaturesStructure* soap_new_ns2__VehicleFeaturesStructure(soap*) allocate and default initialize
/// - ns2__VehicleFeaturesStructure* soap_new_ns2__VehicleFeaturesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleFeaturesStructure* soap_new_req_ns2__VehicleFeaturesStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleFeaturesStructure* soap_new_set_ns2__VehicleFeaturesStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleFeaturesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleFeaturesStructure(soap*, ns2__VehicleFeaturesStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleFeaturesStructure(soap*, ns2__VehicleFeaturesStructure*) serialize to a stream
/// - ns2__VehicleFeaturesStructure* ns2__VehicleFeaturesStructure::soap_dup(soap*) returns deep copy of ns2__VehicleFeaturesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleFeaturesStructure::soap_del() deep deletes ns2__VehicleFeaturesStructure data members, use only after ns2__VehicleFeaturesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleFeaturesStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of feature of VEHICLE. SIRI provides a recommended set of values covering most usages, intended to be TPEG compatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleFeatureCode" of XSD type "http://www.siri.org.uk/siri":VehicleFeatureCodeType.
    ns2__VehicleFeatureCodeType          VehicleFeatureCode             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of feature of VEHICLE. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 1..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Name                           1;
/// <PRE><BLOCKQUOTE>
///   Icon used to represent feature of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element "Icon" of XSD type xs:anyURI.
    xsd__anyURI                          Icon                           1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":InfoChannelStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Info Channels description.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoChannelStructure operations:
/// - ns2__InfoChannelStructure* soap_new_ns2__InfoChannelStructure(soap*) allocate and default initialize
/// - ns2__InfoChannelStructure* soap_new_ns2__InfoChannelStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoChannelStructure* soap_new_req_ns2__InfoChannelStructure(soap*, ...) allocate, set required members
/// - ns2__InfoChannelStructure* soap_new_set_ns2__InfoChannelStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoChannelStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoChannelStructure(soap*, ns2__InfoChannelStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoChannelStructure(soap*, ns2__InfoChannelStructure*) serialize to a stream
/// - ns2__InfoChannelStructure* ns2__InfoChannelStructure::soap_dup(soap*) returns deep copy of ns2__InfoChannelStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoChannelStructure::soap_del() deep deletes ns2__InfoChannelStructure data members, use only after ns2__InfoChannelStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoChannelStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of classification.
/// </BLOCKQUOTE></PRE>
/// Element "InfoChannelCode" of XSD type "http://www.siri.org.uk/siri":InfoChannelCodeType.
    ns2__InfoChannelCodeType             InfoChannelCode                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of Info Channel.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Icon associated with Info Channel.
/// </BLOCKQUOTE></PRE>
/// Element "Icon" of XSD type xs:anyURI.
    xsd__anyURI                          Icon                           1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":AnnotatedConnectionLinkStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   View of a SCHEDULED CONNECTION LINK description.
/// </BLOCKQUOTE></PRE>
/// class ns2__AnnotatedConnectionLinkStructure operations:
/// - ns2__AnnotatedConnectionLinkStructure* soap_new_ns2__AnnotatedConnectionLinkStructure(soap*) allocate and default initialize
/// - ns2__AnnotatedConnectionLinkStructure* soap_new_ns2__AnnotatedConnectionLinkStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AnnotatedConnectionLinkStructure* soap_new_req_ns2__AnnotatedConnectionLinkStructure(soap*, ...) allocate, set required members
/// - ns2__AnnotatedConnectionLinkStructure* soap_new_set_ns2__AnnotatedConnectionLinkStructure(soap*, ...) allocate, set all public members
/// - ns2__AnnotatedConnectionLinkStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AnnotatedConnectionLinkStructure(soap*, ns2__AnnotatedConnectionLinkStructure*) deserialize from a stream
/// - int soap_write_ns2__AnnotatedConnectionLinkStructure(soap*, ns2__AnnotatedConnectionLinkStructure*) serialize to a stream
/// - ns2__AnnotatedConnectionLinkStructure* ns2__AnnotatedConnectionLinkStructure::soap_dup(soap*) returns deep copy of ns2__AnnotatedConnectionLinkStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AnnotatedConnectionLinkStructure::soap_del() deep deletes ns2__AnnotatedConnectionLinkStructure data members, use only after ns2__AnnotatedConnectionLinkStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AnnotatedConnectionLinkStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifer of the connection link. DetailLevel=minimum
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifer of the feeder's stop. DetailLevel=normal
/// </BLOCKQUOTE></PRE>
/// Element "FeederStopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          FeederStopPointRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifer of the distributor's stop. DetailLevel=normal
/// </BLOCKQUOTE></PRE>
/// Element "DistributorStopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          DistributorStopPointRef        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether real-time data is available for the connection link. Default is 'true'. DetailLevel=minimum
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool                                 Monitored                      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED CONNECTION LINK. DetailLevel=minimum
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ConnectionLinkName             0;
/// <PRE><BLOCKQUOTE>
///   Name of the feeder's stop. DetailLevel=full
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> FeederStopPointName            0;
/// <PRE><BLOCKQUOTE>
///   Name of the distributor's stop. DetailLevel=full
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DistributorStopPointName       0;
/// <PRE><BLOCKQUOTE>
///   Web page associated with connection link. DetailLevel=full
/// </BLOCKQUOTE></PRE>
/// Element "Url" of XSD type xs:anyURI.
    xsd__anyURI*                         Url                            0;	///< Optional element.
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":Siri
/// <PRE><BLOCKQUOTE>
///   SIRI Service Interface for Real-time Operation.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":Siri is a complexType.
///
/// class _ns2__Siri operations:
/// - _ns2__Siri* soap_new__ns2__Siri(soap*) allocate and default initialize
/// - _ns2__Siri* soap_new__ns2__Siri(soap*, int num) allocate array and default initialize values
/// - _ns2__Siri* soap_new_req__ns2__Siri(soap*, ...) allocate, set required members
/// - _ns2__Siri* soap_new_set__ns2__Siri(soap*, ...) allocate, set all public members
/// - _ns2__Siri::soap_default(soap*) default initialize members
/// - int soap_read__ns2__Siri(soap*, _ns2__Siri*) deserialize from a stream
/// - int soap_write__ns2__Siri(soap*, _ns2__Siri*) serialize to a stream
/// - _ns2__Siri* _ns2__Siri::soap_dup(soap*) returns deep copy of _ns2__Siri, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__Siri::soap_del() deep deletes _ns2__Siri data members, use only after _ns2__Siri::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__Siri
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="RequestGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI All Requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ServiceRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Requests for service provision.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_Siri__                ;	///< Union _ns2__union_Siri__ selector: set to SOAP_UNION__ns2__union_Siri___<fieldname>
    union _ns2__union_Siri__
    {
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer for immediate delivery of data. Answered with a ServiceDelivery (or a DataReadyRequest)
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceRequest.
    _ns2__ServiceRequest*                ServiceRequest                 nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Producer for a subscription. Answered with a SubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SubscriptionRequest.
    _ns2__SubscriptionRequest*           SubscriptionRequest            nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Subscription Manager to terminate a subscription. Answered with a TerminateSubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TerminateSubscriptionRequest.
    ns2__TerminateSubscriptionRequestStructure*  TerminateSubscriptionRequest   nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_Siri__                  ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryRequestGroup">
/// <PRE><BLOCKQUOTE>
///   General requests for fetched data delivery.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_Siri___               ;	///< Union _ns2__union_Siri___ selector: set to SOAP_UNION__ns2__union_Siri____<fieldname>
    union _ns2__union_Siri___
    {
/// <PRE><BLOCKQUOTE>
///   Request from Producer to Consumer to notify that data update is ready to fetch. Answered with a DataReadyResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DataReadyNotification.
    ns2__DataReadyRequestStructure*      DataReadyNotification          nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer to fetch update previously notified by a Data ready message. Answered with a Service Delivery.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DataSupplyRequest.
    ns2__DataSupplyRequestStructure*     DataSupplyRequest              nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_Siri___                 ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StatusRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Requests about system status.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_Siri____              ;	///< Union _ns2__union_Siri____ selector: set to SOAP_UNION__ns2__union_Siri_____<fieldname>
    union _ns2__union_Siri____
    {
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer to check whether services is working. Answers a CheckStatusRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckStatusRequest.
    ns2__CheckStatusRequestStructure*    CheckStatusRequest             nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Notification from Producer to Consumer to indicate that the service is running normally.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":HeartbeatNotification.
    ns2__HeartbeatNotificationStructure*  HeartbeatNotification          nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_Siri____                ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SiriDiscoveryRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Requests for reference data for use in SIRI Functional Service requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// <PRE><BLOCKQUOTE>
///   Requests a the current capabilities of the server. Answred with a CpabailitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilitiesRequest.
    ns2__CapabilitiesRequestStructure*   CapabilitiesRequest            nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  BEGIN GROUP <xs:group name="SiriReferenceDiscoveryRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Requests for reference data for use in service requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_Siri______            ;	///< Union _ns2__union_Siri______ selector: set to SOAP_UNION__ns2__union_Siri_______<fieldname>
    union _ns2__union_Siri______
    {
/// <PRE><BLOCKQUOTE>
///   Requests a list of the STOP POINTs and places covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointsRequest.
    _ns2__StopPointsRequest*             StopPointsRequest              nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the LINEs covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinesRequest.
    ns2__LinesDiscoveryRequestStructure*  LinesRequest                   nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Service Features covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceFeaturesRequest.
    _ns2__ServiceFeaturesRequest*        ServiceFeaturesRequest         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Product Categories covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductCategoriesRequest.
    ns2__ProductCategoriesDiscoveryRequestStructure*  ProductCategoriesRequest       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Vehicle Features covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleFeaturesRequest.
    ns2__VehicleFeaturesRequestStructure*  VehicleFeaturesRequest         nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Info Channels covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InfoChannelRequest.
    ns2__InfoChannelDiscoveryRequestStructure*  InfoChannelRequest             nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Facilities covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityRequest.
    ns2__FacilityRequestStructure*       FacilityRequest                nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the CONNECTION LINKs covered by a Producer. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionLinksRequest.
    ns2__ConnectionLinksDiscoveryRequestStructure*  ConnectionLinksRequest         nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_Siri______              ;
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ResponseGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Service Responses.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ServiceResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Responses to requests other than deliveries and status information.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_Siri________          ;	///< Union _ns2__union_Siri________ selector: set to SOAP_UNION__ns2__union_Siri_________<fieldname>
    union _ns2__union_Siri________
    {
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to inform whether subscriptions have been created. Answers a previous SubscriptionRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SubscriptionResponse.
    ns2__SubscriptionResponseStructure*  SubscriptionResponse           nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Subscription Manager to terminate a subscription. Answered with a TerminateSubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TerminateSubscriptionResponse.
    ns2__TerminateSubscriptionResponseStructure*  TerminateSubscriptionResponse  nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_Siri________            ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Responses that deliver payload content.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_Siri_________         ;	///< Union _ns2__union_Siri_________ selector: set to SOAP_UNION__ns2__union_Siri__________<fieldname>
    union _ns2__union_Siri_________
    {
/// <PRE><BLOCKQUOTE>
///   Response from Consumer to Producer to acknowledge to Producer that a DataReadyRequest has been received.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DataReadyAcknowledgement.
    ns2__DataReadyResponseStructure*     DataReadyAcknowledgement       nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to deliver payload data. Either answers a direct ServiceRequest, or asynchronously satisfies a subscription. May be sent directly in one step, or fetched in response to a DataSupply Request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceDelivery.
    _ns2__ServiceDelivery*               ServiceDelivery                nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Response from Consumer to Producer to acknowledge that data hase been received. Used as optioanl extra step if reliable delivery is needed. Answers a ServiceDelivery.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DataReceivedAcknowledgement.
    ns2__DataReceivedResponseStructure*  DataReceivedAcknowledgement    nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_Siri_________           ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StatusResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Responses that infrom about the service status.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_Siri__________        ;	///< Union _ns2__union_Siri__________ selector: set to SOAP_UNION__ns2__union_Siri___________<fieldname>
    union _ns2__union_Siri__________
    {
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to inform whether services is working. Answers a CheckStatusRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckStatusResponse.
    ns2__CheckStatusResponseStructure*   CheckStatusResponse            nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_Siri__________          ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SiriDiscoveryResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Responses with reference data for use in SIRI Functional Service requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// <PRE><BLOCKQUOTE>
///   Responses with the capabilities of an implementation. Answers a CapabilityRequest.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Responses with the capabilities of an implementation.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilitiesResponse.
    ns2__CapabilitiesResponseStructure*  CapabilitiesResponse           nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  BEGIN GROUP <xs:group name="SiriDiscoveryReferenceDeliveryGroup">
/// <PRE><BLOCKQUOTE>
///   Responses with reference data for use in service requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_Siri____________      ;	///< Union _ns2__union_Siri____________ selector: set to SOAP_UNION__ns2__union_Siri_____________<fieldname>
    union _ns2__union_Siri____________
    {
/// <PRE><BLOCKQUOTE>
///   Returns basic details about the STOP POINTs/places covered by a service. Answers a StopPointsRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointsDelivery.
    ns2__StopPointsDeliveryStructure*    StopPointsDelivery             nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the LINEs covered by a web service. Answers a LINEsRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinesDelivery.
    ns2__LinesDeliveryStructure*         LinesDelivery                  nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the Product Categories covered by a service. Answers a ProductCategoriesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductCategoriesDelivery.
    ns2__ProductCategoriesDeliveryStructure*  ProductCategoriesDelivery      nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the SERVICE FEATUREs covered by a service. Answers a ServiceFeaturesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceFeaturesDelivery.
    ns2__ServiceFeaturesDeliveryStructure*  ServiceFeaturesDelivery        nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the Vehicle Features covered by a service. Answers a VehicleFeaturesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleFeaturesDelivery.
    ns2__VehicleFeaturesDeliveryStructure*  VehicleFeaturesDelivery        nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the Info Channels covered by a service. Answers a InfoChannelRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InfoChannelDelivery.
    ns2__InfoChannelDeliveryStructure*   InfoChannelDelivery            nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the Facilities covered by a service. Answers a StopPointsRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityDelivery.
    ns2__FacilityDeliveryStructure*      FacilityDelivery               nullptr;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Returns the CONNECTION LINKs covered by a web service. Answers a LINEsRequest. +Siri v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionLinksDelivery.
    ns2__ConnectionLinksDeliveryStructure*  ConnectionLinksDelivery        nullptr;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_Siri____________        ;
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                    ;
//  END OF CHOICE
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":LinePermissions
/// <PRE><BLOCKQUOTE>
///   The LINEs that the participant may access.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":LinePermissions is a complexType.
///
/// class _ns2__LinePermissions operations:
/// - _ns2__LinePermissions* soap_new__ns2__LinePermissions(soap*) allocate and default initialize
/// - _ns2__LinePermissions* soap_new__ns2__LinePermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__LinePermissions* soap_new_req__ns2__LinePermissions(soap*, ...) allocate, set required members
/// - _ns2__LinePermissions* soap_new_set__ns2__LinePermissions(soap*, ...) allocate, set all public members
/// - _ns2__LinePermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__LinePermissions(soap*, _ns2__LinePermissions*) deserialize from a stream
/// - int soap_write__ns2__LinePermissions(soap*, _ns2__LinePermissions*) serialize to a stream
/// - _ns2__LinePermissions* _ns2__LinePermissions::soap_dup(soap*) returns deep copy of _ns2__LinePermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__LinePermissions::soap_del() deep deletes _ns2__LinePermissions data members, use only after _ns2__LinePermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__LinePermissions
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_LinePermissions       ;	///< Union _ns2__union_LinePermissions selector: set to SOAP_UNION__ns2__union_LinePermissions_<fieldname>
/// Union for choice in ns2__LinePermissions.
    union _ns2__union_LinePermissions
    {
/// <PRE><BLOCKQUOTE>
///   Allow access to all topics known to the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowAll.
    bool                                 AllowAll                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Participant's permission for this LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__LinePermissionStructure* of length 1..unbounded.
    std::vector<ns2__LinePermissionStructure*> *LinePermission                 1;
    }                                    union_LinePermissions         ;
//  END OF CHOICE
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":OperatorPermissions
/// <PRE><BLOCKQUOTE>
///   The OPERATOR data that the participant may access.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":OperatorPermissions is a complexType.
///
/// class _ns2__OperatorPermissions operations:
/// - _ns2__OperatorPermissions* soap_new__ns2__OperatorPermissions(soap*) allocate and default initialize
/// - _ns2__OperatorPermissions* soap_new__ns2__OperatorPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__OperatorPermissions* soap_new_req__ns2__OperatorPermissions(soap*, ...) allocate, set required members
/// - _ns2__OperatorPermissions* soap_new_set__ns2__OperatorPermissions(soap*, ...) allocate, set all public members
/// - _ns2__OperatorPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__OperatorPermissions(soap*, _ns2__OperatorPermissions*) deserialize from a stream
/// - int soap_write__ns2__OperatorPermissions(soap*, _ns2__OperatorPermissions*) serialize to a stream
/// - _ns2__OperatorPermissions* _ns2__OperatorPermissions::soap_dup(soap*) returns deep copy of _ns2__OperatorPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__OperatorPermissions::soap_del() deep deletes _ns2__OperatorPermissions data members, use only after _ns2__OperatorPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__OperatorPermissions
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_OperatorPermissions   ;	///< Union _ns2__union_OperatorPermissions selector: set to SOAP_UNION__ns2__union_OperatorPermissions_<fieldname>
/// Union for choice in ns2__OperatorPermissions.
    union _ns2__union_OperatorPermissions
    {
/// <PRE><BLOCKQUOTE>
///   Allow access to all topics known to the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowAll.
    bool                                 AllowAll                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Participant's permission for this OPERATOR.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorPermissionStructure* of length 1..unbounded.
    std::vector<ns2__OperatorPermissionStructure*> *OperatorPermission             1;
    }                                    union_OperatorPermissions     ;
//  END OF CHOICE
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionLinkPermissions
/// <PRE><BLOCKQUOTE>
///   The CONNECTION links that the participant may access.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ConnectionLinkPermissions is a complexType.
///
/// class _ns2__ConnectionLinkPermissions operations:
/// - _ns2__ConnectionLinkPermissions* soap_new__ns2__ConnectionLinkPermissions(soap*) allocate and default initialize
/// - _ns2__ConnectionLinkPermissions* soap_new__ns2__ConnectionLinkPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__ConnectionLinkPermissions* soap_new_req__ns2__ConnectionLinkPermissions(soap*, ...) allocate, set required members
/// - _ns2__ConnectionLinkPermissions* soap_new_set__ns2__ConnectionLinkPermissions(soap*, ...) allocate, set all public members
/// - _ns2__ConnectionLinkPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ConnectionLinkPermissions(soap*, _ns2__ConnectionLinkPermissions*) deserialize from a stream
/// - int soap_write__ns2__ConnectionLinkPermissions(soap*, _ns2__ConnectionLinkPermissions*) serialize to a stream
/// - _ns2__ConnectionLinkPermissions* _ns2__ConnectionLinkPermissions::soap_dup(soap*) returns deep copy of _ns2__ConnectionLinkPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ConnectionLinkPermissions::soap_del() deep deletes _ns2__ConnectionLinkPermissions data members, use only after _ns2__ConnectionLinkPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ConnectionLinkPermissions
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ConnectionLinkPermissions;	///< Union _ns2__union_ConnectionLinkPermissions selector: set to SOAP_UNION__ns2__union_ConnectionLinkPermissions_<fieldname>
/// Union for choice in ns2__ConnectionLinkPermissions.
    union _ns2__union_ConnectionLinkPermissions
    {
/// <PRE><BLOCKQUOTE>
///   Allow access to all topics known to the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowAll.
    bool                                 AllowAll                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Participant's permission for this CONNECTION link.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionLinkPermissionStructure* of length 1..unbounded.
    std::vector<ns2__ConnectionLinkPermissionStructure*> *ConnectionLinkPermission       1;
    }                                    union_ConnectionLinkPermissions;
//  END OF CHOICE
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionMonitoringPermissions
/// <PRE><BLOCKQUOTE>
///   Participants permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringPermissions is a complexType.
///
/// class _ns2__ConnectionMonitoringPermissions operations:
/// - _ns2__ConnectionMonitoringPermissions* soap_new__ns2__ConnectionMonitoringPermissions(soap*) allocate and default initialize
/// - _ns2__ConnectionMonitoringPermissions* soap_new__ns2__ConnectionMonitoringPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__ConnectionMonitoringPermissions* soap_new_req__ns2__ConnectionMonitoringPermissions(soap*, ...) allocate, set required members
/// - _ns2__ConnectionMonitoringPermissions* soap_new_set__ns2__ConnectionMonitoringPermissions(soap*, ...) allocate, set all public members
/// - _ns2__ConnectionMonitoringPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ConnectionMonitoringPermissions(soap*, _ns2__ConnectionMonitoringPermissions*) deserialize from a stream
/// - int soap_write__ns2__ConnectionMonitoringPermissions(soap*, _ns2__ConnectionMonitoringPermissions*) serialize to a stream
/// - _ns2__ConnectionMonitoringPermissions* _ns2__ConnectionMonitoringPermissions::soap_dup(soap*) returns deep copy of _ns2__ConnectionMonitoringPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ConnectionMonitoringPermissions::soap_del() deep deletes _ns2__ConnectionMonitoringPermissions data members, use only after _ns2__ConnectionMonitoringPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ConnectionMonitoringPermissions
{ public:
/// Vector of ns2__ConnectionServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__ConnectionServicePermissionStructure*> ConnectionMonitoringPermission 0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.ifopt.org.uk/acsb":AccessibilityLimitationStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for limitation on navigation.
/// </BLOCKQUOTE></PRE>
/// class ns3__AccessibilityLimitationStructure operations:
/// - ns3__AccessibilityLimitationStructure* soap_new_ns3__AccessibilityLimitationStructure(soap*) allocate and default initialize
/// - ns3__AccessibilityLimitationStructure* soap_new_ns3__AccessibilityLimitationStructure(soap*, int num) allocate array and default initialize values
/// - ns3__AccessibilityLimitationStructure* soap_new_req_ns3__AccessibilityLimitationStructure(soap*, ...) allocate, set required members
/// - ns3__AccessibilityLimitationStructure* soap_new_set_ns3__AccessibilityLimitationStructure(soap*, ...) allocate, set all public members
/// - ns3__AccessibilityLimitationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AccessibilityLimitationStructure(soap*, ns3__AccessibilityLimitationStructure*) deserialize from a stream
/// - int soap_write_ns3__AccessibilityLimitationStructure(soap*, ns3__AccessibilityLimitationStructure*) serialize to a stream
/// - ns3__AccessibilityLimitationStructure* ns3__AccessibilityLimitationStructure::soap_dup(soap*) returns deep copy of ns3__AccessibilityLimitationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AccessibilityLimitationStructure::soap_del() deep deletes ns3__AccessibilityLimitationStructure data members, use only after ns3__AccessibilityLimitationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AccessibilityLimitationStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of LIMITATION.
/// </BLOCKQUOTE></PRE>
/// Element "LimitationId" of XSD type "http://www.ifopt.org.uk/acsb":LimitationIdType.
    ns3__LimitationIdType*               LimitationId                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Validty condition governing applicability of LIMITATION.
/// </BLOCKQUOTE></PRE>
/// Element "ValidityConditionJJLL" of XSD type "http://www.ifopt.org.uk/ifopt":ValidityConditionStructure.
    ns4__ValidityConditionStructure*     ValidityConditionJJLL          0;	///< Optional element.
//  BEGIN GROUP <xs:group name="MobilityLimitationGroup">
/// <PRE><BLOCKQUOTE>
///   Group of mobility LIMITATIONs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT is wheelchair accessible.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":WheelchairAccess.
    ns3__AccessibilityStructure*         WheelchairAccess               0;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has step free access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":StepFreeAccess.
    ns3__AccessibilityStructure*         StepFreeAccess                 0;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has escalator free access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":EscalatorFreeAccess.
    ns3__AccessibilityStructure*         EscalatorFreeAccess            0;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has lift free access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":LiftFreeAccess.
    ns3__AccessibilityStructure*         LiftFreeAccess                 0;	///< Default element value="unknown".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SensoryLimitationGroup">
/// <PRE><BLOCKQUOTE>
///   Group of sensory LIMITATIONs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has Audible signals for the viusally impaired.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT is wheelchair accessible.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":AudibleSignalsAvailable.
    ns3__AccessibilityStructure*         AudibleSignalsAvailable        0;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has Visual signals for the hearing impaired.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has Visual signals availble for the free access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/acsb":VisualSignsAvailable.
    ns3__AccessibilityStructure*         VisualSignsAvailable           0;	///< Default element value="unknown".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Arbitrary extensions.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/ifopt":Extensions.
    _ns4__Extensions*                    ns4__Extensions                0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for Assesment.
/// </BLOCKQUOTE></PRE>
/// class ns3__AccessibilityAssessmentStructure operations:
/// - ns3__AccessibilityAssessmentStructure* soap_new_ns3__AccessibilityAssessmentStructure(soap*) allocate and default initialize
/// - ns3__AccessibilityAssessmentStructure* soap_new_ns3__AccessibilityAssessmentStructure(soap*, int num) allocate array and default initialize values
/// - ns3__AccessibilityAssessmentStructure* soap_new_req_ns3__AccessibilityAssessmentStructure(soap*, ...) allocate, set required members
/// - ns3__AccessibilityAssessmentStructure* soap_new_set_ns3__AccessibilityAssessmentStructure(soap*, ...) allocate, set all public members
/// - ns3__AccessibilityAssessmentStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AccessibilityAssessmentStructure(soap*, ns3__AccessibilityAssessmentStructure*) deserialize from a stream
/// - int soap_write_ns3__AccessibilityAssessmentStructure(soap*, ns3__AccessibilityAssessmentStructure*) serialize to a stream
/// - ns3__AccessibilityAssessmentStructure* ns3__AccessibilityAssessmentStructure::soap_dup(soap*) returns deep copy of ns3__AccessibilityAssessmentStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AccessibilityAssessmentStructure::soap_del() deep deletes ns3__AccessibilityAssessmentStructure data members, use only after ns3__AccessibilityAssessmentStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AccessibilityAssessmentStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Summary indication as to whether the component is considered to be accessible or not.
/// </BLOCKQUOTE></PRE>
/// Element "MobilityImpairedAccess" of XSD type xs:boolean.
    bool                                 MobilityImpairedAccess         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Limitations that apply to component.
/// </BLOCKQUOTE></PRE>
/// class _ns3__AccessibilityAssessmentStructure_Limitations operations:
/// - _ns3__AccessibilityAssessmentStructure_Limitations* soap_new__ns3__AccessibilityAssessmentStructure_Limitations(soap*) allocate and default initialize
/// - _ns3__AccessibilityAssessmentStructure_Limitations* soap_new__ns3__AccessibilityAssessmentStructure_Limitations(soap*, int num) allocate array and default initialize values
/// - _ns3__AccessibilityAssessmentStructure_Limitations* soap_new_req__ns3__AccessibilityAssessmentStructure_Limitations(soap*, ...) allocate, set required members
/// - _ns3__AccessibilityAssessmentStructure_Limitations* soap_new_set__ns3__AccessibilityAssessmentStructure_Limitations(soap*, ...) allocate, set all public members
/// - _ns3__AccessibilityAssessmentStructure_Limitations::soap_default(soap*) default initialize members
/// - int soap_read__ns3__AccessibilityAssessmentStructure_Limitations(soap*, _ns3__AccessibilityAssessmentStructure_Limitations*) deserialize from a stream
/// - int soap_write__ns3__AccessibilityAssessmentStructure_Limitations(soap*, _ns3__AccessibilityAssessmentStructure_Limitations*) serialize to a stream
/// - _ns3__AccessibilityAssessmentStructure_Limitations* _ns3__AccessibilityAssessmentStructure_Limitations::soap_dup(soap*) returns deep copy of _ns3__AccessibilityAssessmentStructure_Limitations, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns3__AccessibilityAssessmentStructure_Limitations::soap_del() deep deletes _ns3__AccessibilityAssessmentStructure_Limitations data members, use only after _ns3__AccessibilityAssessmentStructure_Limitations::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns3__AccessibilityAssessmentStructure_Limitations
    {
/// <PRE><BLOCKQUOTE>
///   The accessibility limitations of a component.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__AccessibilityLimitationStructure* of length 1..unbounded.
    std::vector<ns3__AccessibilityLimitationStructure*> AccessibilityLimitation        1;
    }                                   *Limitations                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Suitability of the component to meet specifc user needs.
/// </BLOCKQUOTE></PRE>
/// class _ns3__AccessibilityAssessmentStructure_Suitabilities operations:
/// - _ns3__AccessibilityAssessmentStructure_Suitabilities* soap_new__ns3__AccessibilityAssessmentStructure_Suitabilities(soap*) allocate and default initialize
/// - _ns3__AccessibilityAssessmentStructure_Suitabilities* soap_new__ns3__AccessibilityAssessmentStructure_Suitabilities(soap*, int num) allocate array and default initialize values
/// - _ns3__AccessibilityAssessmentStructure_Suitabilities* soap_new_req__ns3__AccessibilityAssessmentStructure_Suitabilities(soap*, ...) allocate, set required members
/// - _ns3__AccessibilityAssessmentStructure_Suitabilities* soap_new_set__ns3__AccessibilityAssessmentStructure_Suitabilities(soap*, ...) allocate, set all public members
/// - _ns3__AccessibilityAssessmentStructure_Suitabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns3__AccessibilityAssessmentStructure_Suitabilities(soap*, _ns3__AccessibilityAssessmentStructure_Suitabilities*) deserialize from a stream
/// - int soap_write__ns3__AccessibilityAssessmentStructure_Suitabilities(soap*, _ns3__AccessibilityAssessmentStructure_Suitabilities*) serialize to a stream
/// - _ns3__AccessibilityAssessmentStructure_Suitabilities* _ns3__AccessibilityAssessmentStructure_Suitabilities::soap_dup(soap*) returns deep copy of _ns3__AccessibilityAssessmentStructure_Suitabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns3__AccessibilityAssessmentStructure_Suitabilities::soap_del() deep deletes _ns3__AccessibilityAssessmentStructure_Suitabilities data members, use only after _ns3__AccessibilityAssessmentStructure_Suitabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns3__AccessibilityAssessmentStructure_Suitabilities
    {
/// <PRE><BLOCKQUOTE>
///   The Suitability of com[onent to meet a specifc user need.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__SuitabilityStructure* of length 1..unbounded.
    std::vector<ns3__SuitabilityStructure*> Suitability                    1;
    }                                   *Suitabilities                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary extensions.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/acsb:""http://www.ifopt.org.uk/ifopt":Extensions.
    _ns4__Extensions*                    ns4__Extensions                0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/acsb":PassengerAccessibilityNeedsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for accessibility needs. Records the requirementrs of a passenger that may affect choice of facilities.
/// </BLOCKQUOTE></PRE>
/// class ns3__PassengerAccessibilityNeedsStructure operations:
/// - ns3__PassengerAccessibilityNeedsStructure* soap_new_ns3__PassengerAccessibilityNeedsStructure(soap*) allocate and default initialize
/// - ns3__PassengerAccessibilityNeedsStructure* soap_new_ns3__PassengerAccessibilityNeedsStructure(soap*, int num) allocate array and default initialize values
/// - ns3__PassengerAccessibilityNeedsStructure* soap_new_req_ns3__PassengerAccessibilityNeedsStructure(soap*, ...) allocate, set required members
/// - ns3__PassengerAccessibilityNeedsStructure* soap_new_set_ns3__PassengerAccessibilityNeedsStructure(soap*, ...) allocate, set all public members
/// - ns3__PassengerAccessibilityNeedsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PassengerAccessibilityNeedsStructure(soap*, ns3__PassengerAccessibilityNeedsStructure*) deserialize from a stream
/// - int soap_write_ns3__PassengerAccessibilityNeedsStructure(soap*, ns3__PassengerAccessibilityNeedsStructure*) serialize to a stream
/// - ns3__PassengerAccessibilityNeedsStructure* ns3__PassengerAccessibilityNeedsStructure::soap_dup(soap*) returns deep copy of ns3__PassengerAccessibilityNeedsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PassengerAccessibilityNeedsStructure::soap_del() deep deletes ns3__PassengerAccessibilityNeedsStructure data members, use only after ns3__PassengerAccessibilityNeedsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PassengerAccessibilityNeedsStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Specific pyschosensory need that may constrain choice of services and facilities.
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__UserNeedStructure* of length 0..unbounded.
    std::vector<ns3__UserNeedStructure*> UserNeed                       0;
/// <PRE><BLOCKQUOTE>
///   Whether the passenger is accompanied by a carer or assistant.
/// </BLOCKQUOTE></PRE>
/// Element "AccompaniedByCarer" of XSD type xs:boolean.
    bool*                                AccompaniedByCarer             0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/acsb":UserNeedStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for of a specific need.
/// </BLOCKQUOTE></PRE>
/// class ns3__UserNeedStructure operations:
/// - ns3__UserNeedStructure* soap_new_ns3__UserNeedStructure(soap*) allocate and default initialize
/// - ns3__UserNeedStructure* soap_new_ns3__UserNeedStructure(soap*, int num) allocate array and default initialize values
/// - ns3__UserNeedStructure* soap_new_req_ns3__UserNeedStructure(soap*, ...) allocate, set required members
/// - ns3__UserNeedStructure* soap_new_set_ns3__UserNeedStructure(soap*, ...) allocate, set all public members
/// - ns3__UserNeedStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__UserNeedStructure(soap*, ns3__UserNeedStructure*) deserialize from a stream
/// - int soap_write_ns3__UserNeedStructure(soap*, ns3__UserNeedStructure*) serialize to a stream
/// - ns3__UserNeedStructure* ns3__UserNeedStructure::soap_dup(soap*) returns deep copy of ns3__UserNeedStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__UserNeedStructure::soap_del() deep deletes ns3__UserNeedStructure data members, use only after ns3__UserNeedStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__UserNeedStructure : public xsd__anyType
{ public:
//  BEGIN GROUP <xs:group name="UserNeedGroup">
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_UserNeedStructure     ;	///< Union _ns3__union_UserNeedStructure selector: set to SOAP_UNION__ns3__union_UserNeedStructure_<fieldname>
    union _ns3__union_UserNeedStructure
    {
/// <PRE><BLOCKQUOTE>
///   Passenger mobility USER NEED for which SUITABILITY is specified.
/// </BLOCKQUOTE></PRE>
/// Element "MobilityNeed" of XSD type "http://www.ifopt.org.uk/acsb":MobilityEnumeration.
    enum ns3__MobilityEnumeration        MobilityNeed                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Passenger mobility USER NEED for which SUITABILITY is specified.
/// </BLOCKQUOTE></PRE>
/// Element "PsychosensoryNeed" of XSD type "http://www.ifopt.org.uk/acsb":PyschosensoryNeedEnumeration.
    enum ns3__PyschosensoryNeedEnumeration  PsychosensoryNeed              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Passenger medical USER NEED for which SUITABILITY is specified.
/// </BLOCKQUOTE></PRE>
    enum ns3__MedicalNeedEnumeration                                   
                                        *MedicalNeed                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Passenger enceumbrance USER NEED for which SUITABILITY is specified.
/// </BLOCKQUOTE></PRE>
/// Element "EncumbranceNeed" of XSD type "http://www.ifopt.org.uk/acsb":EncumbranceEnumeration.
    enum ns3__EncumbranceEnumeration     EncumbranceNeed                1;	///< Required element.
    }                                    union_UserNeedStructure       ;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Whether USER NEED is included or excluded. Default is 'included'.
/// </BLOCKQUOTE></PRE>
/// Element "Excluded" of XSD type xs:boolean.
    bool*                                Excluded                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Relative ranking of USER NEED on a sclae 1-5
/// </BLOCKQUOTE></PRE>
/// Element "NeedRanking" of XSD type xs:integer.
    xsd__integer*                        NeedRanking                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to USETR NEED.
/// </BLOCKQUOTE></PRE>
/// Element "Extensions" of XSD type xs:anyType.
    xsd__anyType*                        Extensions                     0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/acsb":SuitabilityStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for of a specific SUITABILITY.
/// </BLOCKQUOTE></PRE>
/// class ns3__SuitabilityStructure operations:
/// - ns3__SuitabilityStructure* soap_new_ns3__SuitabilityStructure(soap*) allocate and default initialize
/// - ns3__SuitabilityStructure* soap_new_ns3__SuitabilityStructure(soap*, int num) allocate array and default initialize values
/// - ns3__SuitabilityStructure* soap_new_req_ns3__SuitabilityStructure(soap*, ...) allocate, set required members
/// - ns3__SuitabilityStructure* soap_new_set_ns3__SuitabilityStructure(soap*, ...) allocate, set all public members
/// - ns3__SuitabilityStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SuitabilityStructure(soap*, ns3__SuitabilityStructure*) deserialize from a stream
/// - int soap_write_ns3__SuitabilityStructure(soap*, ns3__SuitabilityStructure*) serialize to a stream
/// - ns3__SuitabilityStructure* ns3__SuitabilityStructure::soap_dup(soap*) returns deep copy of ns3__SuitabilityStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SuitabilityStructure::soap_del() deep deletes ns3__SuitabilityStructure data members, use only after ns3__SuitabilityStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SuitabilityStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Whether the Facility is suitable.
/// </BLOCKQUOTE></PRE>
/// Element "Suitable" of XSD type "http://www.ifopt.org.uk/acsb":SuitabilityEnumeration.
    enum ns3__SuitabilityEnumeration     Suitable                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   USER NEED for which SUITABILITY is specified.
/// </BLOCKQUOTE></PRE>
/// Element "UserNeed" of XSD type "http://www.ifopt.org.uk/acsb":UserNeedStructure.
    ns3__UserNeedStructure*              UserNeed                       1;	///< Required element.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.ifopt.org.uk/ifopt":HalfOpenTimeRangeStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a range of times. Start time must be specified, end time is optional.
/// </BLOCKQUOTE></PRE>
/// class ns4__HalfOpenTimeRangeStructure operations:
/// - ns4__HalfOpenTimeRangeStructure* soap_new_ns4__HalfOpenTimeRangeStructure(soap*) allocate and default initialize
/// - ns4__HalfOpenTimeRangeStructure* soap_new_ns4__HalfOpenTimeRangeStructure(soap*, int num) allocate array and default initialize values
/// - ns4__HalfOpenTimeRangeStructure* soap_new_req_ns4__HalfOpenTimeRangeStructure(soap*, ...) allocate, set required members
/// - ns4__HalfOpenTimeRangeStructure* soap_new_set_ns4__HalfOpenTimeRangeStructure(soap*, ...) allocate, set all public members
/// - ns4__HalfOpenTimeRangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__HalfOpenTimeRangeStructure(soap*, ns4__HalfOpenTimeRangeStructure*) deserialize from a stream
/// - int soap_write_ns4__HalfOpenTimeRangeStructure(soap*, ns4__HalfOpenTimeRangeStructure*) serialize to a stream
/// - ns4__HalfOpenTimeRangeStructure* ns4__HalfOpenTimeRangeStructure::soap_dup(soap*) returns deep copy of ns4__HalfOpenTimeRangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__HalfOpenTimeRangeStructure::soap_del() deep deletes ns4__HalfOpenTimeRangeStructure data members, use only after ns4__HalfOpenTimeRangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__HalfOpenTimeRangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start time.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:time.
    xsd__time                            StartTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end time. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:time.
    xsd__time*                           EndTime                        0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/ifopt":ValidityConditionStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a validity condition.
/// </BLOCKQUOTE></PRE>
/// class ns4__ValidityConditionStructure operations:
/// - ns4__ValidityConditionStructure* soap_new_ns4__ValidityConditionStructure(soap*) allocate and default initialize
/// - ns4__ValidityConditionStructure* soap_new_ns4__ValidityConditionStructure(soap*, int num) allocate array and default initialize values
/// - ns4__ValidityConditionStructure* soap_new_req_ns4__ValidityConditionStructure(soap*, ...) allocate, set required members
/// - ns4__ValidityConditionStructure* soap_new_set_ns4__ValidityConditionStructure(soap*, ...) allocate, set all public members
/// - ns4__ValidityConditionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__ValidityConditionStructure(soap*, ns4__ValidityConditionStructure*) deserialize from a stream
/// - int soap_write_ns4__ValidityConditionStructure(soap*, ns4__ValidityConditionStructure*) serialize to a stream
/// - ns4__ValidityConditionStructure* ns4__ValidityConditionStructure::soap_dup(soap*) returns deep copy of ns4__ValidityConditionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__ValidityConditionStructure::soap_del() deep deletes ns4__ValidityConditionStructure data members, use only after ns4__ValidityConditionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__ValidityConditionStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start date and time.
/// </BLOCKQUOTE></PRE>
/// Element "FromDateTime" of XSD type xs:dateTime.
    xsd__dateTime*                       FromDateTime                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end time. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
/// </BLOCKQUOTE></PRE>
/// Element "ToDateTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ToDateTime                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Day type for which timeband applies. If absent all day types in context.
/// </BLOCKQUOTE></PRE>
/// Element "DayType" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        DayType                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Any timebands which further qualify the validity condition.
/// </BLOCKQUOTE></PRE>
/// Vector of Timebands of length 0..unbounded.
    std::vector<
/// class _ns4__ValidityConditionStructure_Timebands operations:
/// - _ns4__ValidityConditionStructure_Timebands* soap_new__ns4__ValidityConditionStructure_Timebands(soap*) allocate and default initialize
/// - _ns4__ValidityConditionStructure_Timebands* soap_new__ns4__ValidityConditionStructure_Timebands(soap*, int num) allocate array and default initialize values
/// - _ns4__ValidityConditionStructure_Timebands* soap_new_req__ns4__ValidityConditionStructure_Timebands(soap*, ...) allocate, set required members
/// - _ns4__ValidityConditionStructure_Timebands* soap_new_set__ns4__ValidityConditionStructure_Timebands(soap*, ...) allocate, set all public members
/// - _ns4__ValidityConditionStructure_Timebands::soap_default(soap*) default initialize members
/// - int soap_read__ns4__ValidityConditionStructure_Timebands(soap*, _ns4__ValidityConditionStructure_Timebands*) deserialize from a stream
/// - int soap_write__ns4__ValidityConditionStructure_Timebands(soap*, _ns4__ValidityConditionStructure_Timebands*) serialize to a stream
/// - _ns4__ValidityConditionStructure_Timebands* _ns4__ValidityConditionStructure_Timebands::soap_dup(soap*) returns deep copy of _ns4__ValidityConditionStructure_Timebands, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__ValidityConditionStructure_Timebands::soap_del() deep deletes _ns4__ValidityConditionStructure_Timebands data members, use only after _ns4__ValidityConditionStructure_Timebands::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns4__ValidityConditionStructure_Timebands
    {
/// <PRE><BLOCKQUOTE>
///   Timeband during which element is available or in effect.
/// </BLOCKQUOTE></PRE>
/// Element "Timeband" of XSD type "http://www.ifopt.org.uk/ifopt":TimebandStructure.
    ns4__TimebandStructure*              Timeband                       1;	///< Required element.
    }>                                   Timebands                      0;
};

/// @brief "http://www.ifopt.org.uk/ifopt":ValidityConditionsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A collection of one or more validity conditions.
/// </BLOCKQUOTE></PRE>
/// class ns4__ValidityConditionsStructure operations:
/// - ns4__ValidityConditionsStructure* soap_new_ns4__ValidityConditionsStructure(soap*) allocate and default initialize
/// - ns4__ValidityConditionsStructure* soap_new_ns4__ValidityConditionsStructure(soap*, int num) allocate array and default initialize values
/// - ns4__ValidityConditionsStructure* soap_new_req_ns4__ValidityConditionsStructure(soap*, ...) allocate, set required members
/// - ns4__ValidityConditionsStructure* soap_new_set_ns4__ValidityConditionsStructure(soap*, ...) allocate, set all public members
/// - ns4__ValidityConditionsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__ValidityConditionsStructure(soap*, ns4__ValidityConditionsStructure*) deserialize from a stream
/// - int soap_write_ns4__ValidityConditionsStructure(soap*, ns4__ValidityConditionsStructure*) serialize to a stream
/// - ns4__ValidityConditionsStructure* ns4__ValidityConditionsStructure::soap_dup(soap*) returns deep copy of ns4__ValidityConditionsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__ValidityConditionsStructure::soap_del() deep deletes ns4__ValidityConditionsStructure data members, use only after ns4__ValidityConditionsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__ValidityConditionsStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to the identifier of an administrative area.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__ValidityConditionStructure* of length 1..unbounded.
    std::vector<ns4__ValidityConditionStructure*> ValidityCondition              1;
};

/// @brief "http://www.ifopt.org.uk/ifopt":InfoLinksStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for collection of info links.
/// </BLOCKQUOTE></PRE>
/// class ns4__InfoLinksStructure operations:
/// - ns4__InfoLinksStructure* soap_new_ns4__InfoLinksStructure(soap*) allocate and default initialize
/// - ns4__InfoLinksStructure* soap_new_ns4__InfoLinksStructure(soap*, int num) allocate array and default initialize values
/// - ns4__InfoLinksStructure* soap_new_req_ns4__InfoLinksStructure(soap*, ...) allocate, set required members
/// - ns4__InfoLinksStructure* soap_new_set_ns4__InfoLinksStructure(soap*, ...) allocate, set all public members
/// - ns4__InfoLinksStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__InfoLinksStructure(soap*, ns4__InfoLinksStructure*) deserialize from a stream
/// - int soap_write_ns4__InfoLinksStructure(soap*, ns4__InfoLinksStructure*) serialize to a stream
/// - ns4__InfoLinksStructure* ns4__InfoLinksStructure::soap_dup(soap*) returns deep copy of ns4__InfoLinksStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__InfoLinksStructure::soap_del() deep deletes ns4__InfoLinksStructure data members, use only after ns4__InfoLinksStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__InfoLinksStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Info Link .
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__InfoLinkStructure* element refs of length 1..unbounded.
    std::vector<ns4__InfoLinkStructure*> InfoLink                       1;
};

/// @brief "http://www.ifopt.org.uk/ifopt":AdministrativeAreaRefsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a collection of one or more references to ADMINISTRATIVE ZONEs.
/// </BLOCKQUOTE></PRE>
/// class ns4__AdministrativeAreaRefsStructure operations:
/// - ns4__AdministrativeAreaRefsStructure* soap_new_ns4__AdministrativeAreaRefsStructure(soap*) allocate and default initialize
/// - ns4__AdministrativeAreaRefsStructure* soap_new_ns4__AdministrativeAreaRefsStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AdministrativeAreaRefsStructure* soap_new_req_ns4__AdministrativeAreaRefsStructure(soap*, ...) allocate, set required members
/// - ns4__AdministrativeAreaRefsStructure* soap_new_set_ns4__AdministrativeAreaRefsStructure(soap*, ...) allocate, set all public members
/// - ns4__AdministrativeAreaRefsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AdministrativeAreaRefsStructure(soap*, ns4__AdministrativeAreaRefsStructure*) deserialize from a stream
/// - int soap_write_ns4__AdministrativeAreaRefsStructure(soap*, ns4__AdministrativeAreaRefsStructure*) serialize to a stream
/// - ns4__AdministrativeAreaRefsStructure* ns4__AdministrativeAreaRefsStructure::soap_dup(soap*) returns deep copy of ns4__AdministrativeAreaRefsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AdministrativeAreaRefsStructure::soap_del() deep deletes ns4__AdministrativeAreaRefsStructure data members, use only after ns4__AdministrativeAreaRefsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AdministrativeAreaRefsStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to the identifier of an ADMINISTRATIVE ZONE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__AdministrativeAreaVersionedRefStructure* of length 1..unbounded.
    std::vector<ns4__AdministrativeAreaVersionedRefStructure*> AdministrativeAreaRef          1;
};

/// @brief "http://www.ifopt.org.uk/ifopt":VersionedObjectStructure is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Abstract Type for a versioned object.
/// </BLOCKQUOTE></PRE>
/// class ns4__VersionedObjectStructure operations:
/// - ns4__VersionedObjectStructure* soap_new_ns4__VersionedObjectStructure(soap*) allocate and default initialize
/// - ns4__VersionedObjectStructure* soap_new_ns4__VersionedObjectStructure(soap*, int num) allocate array and default initialize values
/// - ns4__VersionedObjectStructure* soap_new_req_ns4__VersionedObjectStructure(soap*, ...) allocate, set required members
/// - ns4__VersionedObjectStructure* soap_new_set_ns4__VersionedObjectStructure(soap*, ...) allocate, set all public members
/// - ns4__VersionedObjectStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__VersionedObjectStructure(soap*, ns4__VersionedObjectStructure*) deserialize from a stream
/// - int soap_write_ns4__VersionedObjectStructure(soap*, ns4__VersionedObjectStructure*) serialize to a stream
/// - ns4__VersionedObjectStructure* ns4__VersionedObjectStructure::soap_dup(soap*) returns deep copy of ns4__VersionedObjectStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__VersionedObjectStructure::soap_del() deep deletes ns4__VersionedObjectStructure data members, use only after ns4__VersionedObjectStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__VersionedObjectStructure : public xsd__anyType
{ public:
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup ref=""http://www.ifopt.org.uk/ifopt":RequiredModificationDetailsGroup">.
/// Attribute "created" of XSD type xs:dateTime.
   @xsd__dateTime                        created                        1;	///< Required attribute.
/// Attribute "lastUpdated" of XSD type xs:dateTime.
   @xsd__dateTime                        lastUpdated                    1;	///< Required attribute.
/// Attribute "modification" of XSD type "http://www.ifopt.org.uk/ifopt":ModificationEnumeration.
   @enum ns4__ModificationEnumeration    modification                   0 = ns4__ModificationEnumeration__new_;	///< Default attribute value="new".
/// Attribute "version" of XSD type "http://www.ifopt.org.uk/ifopt":RevisionNumberType.
   @ns4__RevisionNumberType*             version                        0;	///< Optional attribute.
/// Attribute "status" of XSD type "http://www.ifopt.org.uk/ifopt":StatusEnumeration.
   @enum ns4__StatusEnumeration          status                         0 = ns4__StatusEnumeration__active;	///< Default attribute value="active".
//  END OF ATTRIBUTEGROUP
};

/// @brief "http://www.ifopt.org.uk/ifopt":AbstractProjection is a complexType.
///
/// class ns4__AbstractProjection operations:
/// - ns4__AbstractProjection* soap_new_ns4__AbstractProjection(soap*) allocate and default initialize
/// - ns4__AbstractProjection* soap_new_ns4__AbstractProjection(soap*, int num) allocate array and default initialize values
/// - ns4__AbstractProjection* soap_new_req_ns4__AbstractProjection(soap*, ...) allocate, set required members
/// - ns4__AbstractProjection* soap_new_set_ns4__AbstractProjection(soap*, ...) allocate, set all public members
/// - ns4__AbstractProjection::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AbstractProjection(soap*, ns4__AbstractProjection*) deserialize from a stream
/// - int soap_write_ns4__AbstractProjection(soap*, ns4__AbstractProjection*) serialize to a stream
/// - ns4__AbstractProjection* ns4__AbstractProjection::soap_dup(soap*) returns deep copy of ns4__AbstractProjection, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AbstractProjection::soap_del() deep deletes ns4__AbstractProjection data members, use only after ns4__AbstractProjection::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AbstractProjection : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   GIS Features that this element projects onto.
/// </BLOCKQUOTE></PRE>
/// class _ns4__AbstractProjection_Features operations:
/// - _ns4__AbstractProjection_Features* soap_new__ns4__AbstractProjection_Features(soap*) allocate and default initialize
/// - _ns4__AbstractProjection_Features* soap_new__ns4__AbstractProjection_Features(soap*, int num) allocate array and default initialize values
/// - _ns4__AbstractProjection_Features* soap_new_req__ns4__AbstractProjection_Features(soap*, ...) allocate, set required members
/// - _ns4__AbstractProjection_Features* soap_new_set__ns4__AbstractProjection_Features(soap*, ...) allocate, set all public members
/// - _ns4__AbstractProjection_Features::soap_default(soap*) default initialize members
/// - int soap_read__ns4__AbstractProjection_Features(soap*, _ns4__AbstractProjection_Features*) deserialize from a stream
/// - int soap_write__ns4__AbstractProjection_Features(soap*, _ns4__AbstractProjection_Features*) serialize to a stream
/// - _ns4__AbstractProjection_Features* _ns4__AbstractProjection_Features::soap_dup(soap*) returns deep copy of _ns4__AbstractProjection_Features, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__AbstractProjection_Features::soap_del() deep deletes _ns4__AbstractProjection_Features data members, use only after _ns4__AbstractProjection_Features::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns4__AbstractProjection_Features
    {
/// <PRE><BLOCKQUOTE>
///   Identifier of FEATURE in a GIS data system.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__FeatureRefStructure* of length 1..unbounded.
    std::vector<ns4__FeatureRefStructure*> GisFeatureRef                  1;
    }                                   *Features                       0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/ifopt":FeatureRefStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a FEATURE.
/// </BLOCKQUOTE></PRE>
/// class ns4__FeatureRefStructure operations:
/// - ns4__FeatureRefStructure* soap_new_ns4__FeatureRefStructure(soap*) allocate and default initialize
/// - ns4__FeatureRefStructure* soap_new_ns4__FeatureRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__FeatureRefStructure* soap_new_req_ns4__FeatureRefStructure(soap*, ...) allocate, set required members
/// - ns4__FeatureRefStructure* soap_new_set_ns4__FeatureRefStructure(soap*, ...) allocate, set all public members
/// - ns4__FeatureRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__FeatureRefStructure(soap*, ns4__FeatureRefStructure*) deserialize from a stream
/// - int soap_write_ns4__FeatureRefStructure(soap*, ns4__FeatureRefStructure*) serialize to a stream
/// - ns4__FeatureRefStructure* ns4__FeatureRefStructure::soap_dup(soap*) returns deep copy of ns4__FeatureRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__FeatureRefStructure::soap_del() deep deletes ns4__FeatureRefStructure data members, use only after ns4__FeatureRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__FeatureRefStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identfiier of referenced element, eg TOId.
/// </BLOCKQUOTE></PRE>
/// Element "FeatureIdRef" of XSD type "http://www.ifopt.org.uk/ifopt":FeatureIdRefStructure.
    ns4__FeatureIdRefStructure*          FeatureIdRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type for identifier of FEATURE.
/// </BLOCKQUOTE></PRE>
/// Element "FeatureType" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        FeatureType                    0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceRefsStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a collection of one or more references to a STOP PLACE.
/// </BLOCKQUOTE></PRE>
/// class ns4__StopPlaceRefsStructure operations:
/// - ns4__StopPlaceRefsStructure* soap_new_ns4__StopPlaceRefsStructure(soap*) allocate and default initialize
/// - ns4__StopPlaceRefsStructure* soap_new_ns4__StopPlaceRefsStructure(soap*, int num) allocate array and default initialize values
/// - ns4__StopPlaceRefsStructure* soap_new_req_ns4__StopPlaceRefsStructure(soap*, ...) allocate, set required members
/// - ns4__StopPlaceRefsStructure* soap_new_set_ns4__StopPlaceRefsStructure(soap*, ...) allocate, set all public members
/// - ns4__StopPlaceRefsStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__StopPlaceRefsStructure(soap*, ns4__StopPlaceRefsStructure*) deserialize from a stream
/// - int soap_write_ns4__StopPlaceRefsStructure(soap*, ns4__StopPlaceRefsStructure*) serialize to a stream
/// - ns4__StopPlaceRefsStructure* ns4__StopPlaceRefsStructure::soap_dup(soap*) returns deep copy of ns4__StopPlaceRefsStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__StopPlaceRefsStructure::soap_del() deep deletes ns4__StopPlaceRefsStructure data members, use only after ns4__StopPlaceRefsStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__StopPlaceRefsStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP PLACE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__StopPlaceRefStructure* element refs of length 1..unbounded.
    std::vector<ns4__StopPlaceRefStructure*> StopPlaceRef                   1;
};

/// @brief "http://www.ifopt.org.uk/ifopt":AliasStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Alternative Private Code.
/// </BLOCKQUOTE></PRE>
/// class ns4__AliasStructure operations:
/// - ns4__AliasStructure* soap_new_ns4__AliasStructure(soap*) allocate and default initialize
/// - ns4__AliasStructure* soap_new_ns4__AliasStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AliasStructure* soap_new_req_ns4__AliasStructure(soap*, ...) allocate, set required members
/// - ns4__AliasStructure* soap_new_set_ns4__AliasStructure(soap*, ...) allocate, set all public members
/// - ns4__AliasStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AliasStructure(soap*, ns4__AliasStructure*) deserialize from a stream
/// - int soap_write_ns4__AliasStructure(soap*, ns4__AliasStructure*) serialize to a stream
/// - ns4__AliasStructure* ns4__AliasStructure::soap_dup(soap*) returns deep copy of ns4__AliasStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AliasStructure::soap_del() deep deletes ns4__AliasStructure data members, use only after ns4__AliasStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AliasStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Alternative identifier.
/// </BLOCKQUOTE></PRE>
/// Element "PrivateCode" of XSD type "http://www.ifopt.org.uk/ifopt":PrivateCodeType.
    ns4__PrivateCodeType                 PrivateCode                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of Identifier.
/// </BLOCKQUOTE></PRE>
/// Element "IdentifierType" of XSD type xs:normalizedString.
    xsd__normalizedString*               IdentifierType                 0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/ifopt":CheckPointStructure is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type for a CHECK CONSTRAINT Hazard that can be associated with.
/// </BLOCKQUOTE></PRE>
/// class ns4__CheckPointStructure operations:
/// - ns4__CheckPointStructure* soap_new_ns4__CheckPointStructure(soap*) allocate and default initialize
/// - ns4__CheckPointStructure* soap_new_ns4__CheckPointStructure(soap*, int num) allocate array and default initialize values
/// - ns4__CheckPointStructure* soap_new_req_ns4__CheckPointStructure(soap*, ...) allocate, set required members
/// - ns4__CheckPointStructure* soap_new_set_ns4__CheckPointStructure(soap*, ...) allocate, set all public members
/// - ns4__CheckPointStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__CheckPointStructure(soap*, ns4__CheckPointStructure*) deserialize from a stream
/// - int soap_write_ns4__CheckPointStructure(soap*, ns4__CheckPointStructure*) serialize to a stream
/// - ns4__CheckPointStructure* ns4__CheckPointStructure::soap_dup(soap*) returns deep copy of ns4__CheckPointStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__CheckPointStructure::soap_del() deep deletes ns4__CheckPointStructure data members, use only after ns4__CheckPointStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__CheckPointStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of CHECK CONSTRAINt.
/// </BLOCKQUOTE></PRE>
/// Element "CheckPointId" of XSD type "http://www.ifopt.org.uk/ifopt":CheckPointIdType.
    ns4__CheckPointIdType*               CheckPointId                   0;	///< Optional element.
//  BEGIN GROUP <xs:group name="CheckPointGroup">
/// <PRE><BLOCKQUOTE>
///   Validty condition governing applicability of CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// Element "ValidityCondition" of XSD type "http://www.ifopt.org.uk/ifopt":ValidityConditionStructure.
    ns4__ValidityConditionStructure*     ValidityCondition              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of process that may occur at CHECK CONSTRAINt.
/// </BLOCKQUOTE></PRE>
/// Element "CheckPointProcess" of XSD type "http://www.ifopt.org.uk/ifopt":CheckPointProcessEnumeration.
    enum ns4__CheckPointProcessEnumeration*  CheckPointProcess              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of process that may occur at CHECK CONSTRAINt.
/// </BLOCKQUOTE></PRE>
/// Element "CheckPointService" of XSD type "http://www.ifopt.org.uk/ifopt":CheckPointServiceEnumeration.
    enum ns4__CheckPointServiceEnumeration*  CheckPointService              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of physical featrue that may slow use of CHECK CONSTRAINt.
/// </BLOCKQUOTE></PRE>
/// Element "AccessFeatureType" of XSD type "http://www.ifopt.org.uk/ifopt":AccessibilityFeatureEnumeration.
    enum ns4__AccessibilityFeatureEnumeration*  AccessFeatureType              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of crowding that may slow use of CHECK CONSTRAINt.
/// </BLOCKQUOTE></PRE>
/// Element "Congestion" of XSD type "http://www.ifopt.org.uk/ifopt":CongestionEnumeration.
    enum ns4__CongestionEnumeration*     Congestion                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of feature of CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// Element "FacilityRef" of XSD type xs:string.
    std::wstring*                        FacilityRef                    0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelayGroup">
/// <PRE><BLOCKQUOTE>
///   Group of delays found at a stop group. Duratiosn relate to given validity condition.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Minimum duration needed to pass through CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// Element "MinimumLikelyDelay" of XSD type "http://www.siri.org.uk/siri":DurationType.
    ns2__DurationType*                   MinimumLikelyDelay             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Average duration expected to pass through CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// Element "AverageDelay" of XSD type "http://www.siri.org.uk/siri":DurationType.
    ns2__DurationType*                   AverageDelay                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum duration expected to pass through CHECK CONSTRAINT.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumLikelyDelay" of XSD type "http://www.siri.org.uk/siri":DurationType.
    ns2__DurationType*                   MaximumLikelyDelay             0;	///< Optional element.
//  END OF GROUP
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCArea is a complexType.
///
/// class ns5__AlertCArea operations:
/// - ns5__AlertCArea* soap_new_ns5__AlertCArea(soap*) allocate and default initialize
/// - ns5__AlertCArea* soap_new_ns5__AlertCArea(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCArea* soap_new_req_ns5__AlertCArea(soap*, ...) allocate, set required members
/// - ns5__AlertCArea* soap_new_set_ns5__AlertCArea(soap*, ...) allocate, set all public members
/// - ns5__AlertCArea::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCArea(soap*, ns5__AlertCArea*) deserialize from a stream
/// - int soap_write_ns5__AlertCArea(soap*, ns5__AlertCArea*) serialize to a stream
/// - ns5__AlertCArea* ns5__AlertCArea::soap_dup(soap*) returns deep copy of ns5__AlertCArea, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCArea::soap_del() deep deletes ns5__AlertCArea data members, use only after ns5__AlertCArea::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCArea : public xsd__anyType
{ public:
/// Element "alertCLocationCountryCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationCountryCode      1;	///< Required element.
/// Element "alertCLocationTableNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableNumber      1;	///< Required element.
/// Element "alertCLocationTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableVersion     1;	///< Required element.
/// Element "areaLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocation.
    ns5__AlertCLocation*                 areaLocation                   1;	///< Required element.
/// Element "alertCAreaExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCAreaExtension            0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCDirection is a complexType.
///
/// class ns5__AlertCDirection operations:
/// - ns5__AlertCDirection* soap_new_ns5__AlertCDirection(soap*) allocate and default initialize
/// - ns5__AlertCDirection* soap_new_ns5__AlertCDirection(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCDirection* soap_new_req_ns5__AlertCDirection(soap*, ...) allocate, set required members
/// - ns5__AlertCDirection* soap_new_set_ns5__AlertCDirection(soap*, ...) allocate, set all public members
/// - ns5__AlertCDirection::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCDirection(soap*, ns5__AlertCDirection*) deserialize from a stream
/// - int soap_write_ns5__AlertCDirection(soap*, ns5__AlertCDirection*) serialize to a stream
/// - ns5__AlertCDirection* ns5__AlertCDirection::soap_dup(soap*) returns deep copy of ns5__AlertCDirection, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCDirection::soap_del() deep deletes ns5__AlertCDirection data members, use only after ns5__AlertCDirection::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCDirection : public xsd__anyType
{ public:
/// Element "alertCDirectionCoded" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCDirectionEnum.
    enum ns5__AlertCDirectionEnum        alertCDirectionCoded           1;	///< Required element.
/// Element "alertCDirectionNamed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             alertCDirectionNamed           0;	///< Optional element.
/// Element "alertCDirectionSense" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        alertCDirectionSense           0;	///< Optional element.
/// Element "alertCDirectionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCDirectionExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCLinear is an abstract complexType.
///
/// class ns5__AlertCLinear operations:
/// - ns5__AlertCLinear* soap_new_ns5__AlertCLinear(soap*) allocate and default initialize
/// - ns5__AlertCLinear* soap_new_ns5__AlertCLinear(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCLinear* soap_new_req_ns5__AlertCLinear(soap*, ...) allocate, set required members
/// - ns5__AlertCLinear* soap_new_set_ns5__AlertCLinear(soap*, ...) allocate, set all public members
/// - ns5__AlertCLinear::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCLinear(soap*, ns5__AlertCLinear*) deserialize from a stream
/// - int soap_write_ns5__AlertCLinear(soap*, ns5__AlertCLinear*) serialize to a stream
/// - ns5__AlertCLinear* ns5__AlertCLinear::soap_dup(soap*) returns deep copy of ns5__AlertCLinear, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCLinear::soap_del() deep deletes ns5__AlertCLinear data members, use only after ns5__AlertCLinear::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCLinear : public xsd__anyType
{ public:
/// Element "alertCLocationCountryCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationCountryCode      1;	///< Required element.
/// Element "alertCLocationTableNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableNumber      1;	///< Required element.
/// Element "alertCLocationTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableVersion     1;	///< Required element.
/// Element "alertCLinearExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCLinearExtension          0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocation is a complexType.
///
/// class ns5__AlertCLocation operations:
/// - ns5__AlertCLocation* soap_new_ns5__AlertCLocation(soap*) allocate and default initialize
/// - ns5__AlertCLocation* soap_new_ns5__AlertCLocation(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCLocation* soap_new_req_ns5__AlertCLocation(soap*, ...) allocate, set required members
/// - ns5__AlertCLocation* soap_new_set_ns5__AlertCLocation(soap*, ...) allocate, set all public members
/// - ns5__AlertCLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCLocation(soap*, ns5__AlertCLocation*) deserialize from a stream
/// - int soap_write_ns5__AlertCLocation(soap*, ns5__AlertCLocation*) serialize to a stream
/// - ns5__AlertCLocation* ns5__AlertCLocation::soap_dup(soap*) returns deep copy of ns5__AlertCLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCLocation::soap_del() deep deletes ns5__AlertCLocation data members, use only after ns5__AlertCLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCLocation : public xsd__anyType
{ public:
/// Element "alertCLocationName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             alertCLocationName             0;	///< Optional element.
/// Element "specificLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocationCode.
    ns5__AlertCLocationCode              specificLocation               1;	///< Required element.
/// Element "alertCLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCLocationExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod2PrimaryPointLocation is a complexType.
///
/// class ns5__AlertCMethod2PrimaryPointLocation operations:
/// - ns5__AlertCMethod2PrimaryPointLocation* soap_new_ns5__AlertCMethod2PrimaryPointLocation(soap*) allocate and default initialize
/// - ns5__AlertCMethod2PrimaryPointLocation* soap_new_ns5__AlertCMethod2PrimaryPointLocation(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCMethod2PrimaryPointLocation* soap_new_req_ns5__AlertCMethod2PrimaryPointLocation(soap*, ...) allocate, set required members
/// - ns5__AlertCMethod2PrimaryPointLocation* soap_new_set_ns5__AlertCMethod2PrimaryPointLocation(soap*, ...) allocate, set all public members
/// - ns5__AlertCMethod2PrimaryPointLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCMethod2PrimaryPointLocation(soap*, ns5__AlertCMethod2PrimaryPointLocation*) deserialize from a stream
/// - int soap_write_ns5__AlertCMethod2PrimaryPointLocation(soap*, ns5__AlertCMethod2PrimaryPointLocation*) serialize to a stream
/// - ns5__AlertCMethod2PrimaryPointLocation* ns5__AlertCMethod2PrimaryPointLocation::soap_dup(soap*) returns deep copy of ns5__AlertCMethod2PrimaryPointLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCMethod2PrimaryPointLocation::soap_del() deep deletes ns5__AlertCMethod2PrimaryPointLocation data members, use only after ns5__AlertCMethod2PrimaryPointLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCMethod2PrimaryPointLocation : public xsd__anyType
{ public:
/// Element "alertCLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocation.
    ns5__AlertCLocation*                 alertCLocation                 1;	///< Required element.
/// Element "alertCMethod2PrimaryPointLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCMethod2PrimaryPointLocationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod2SecondaryPointLocation is a complexType.
///
/// class ns5__AlertCMethod2SecondaryPointLocation operations:
/// - ns5__AlertCMethod2SecondaryPointLocation* soap_new_ns5__AlertCMethod2SecondaryPointLocation(soap*) allocate and default initialize
/// - ns5__AlertCMethod2SecondaryPointLocation* soap_new_ns5__AlertCMethod2SecondaryPointLocation(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCMethod2SecondaryPointLocation* soap_new_req_ns5__AlertCMethod2SecondaryPointLocation(soap*, ...) allocate, set required members
/// - ns5__AlertCMethod2SecondaryPointLocation* soap_new_set_ns5__AlertCMethod2SecondaryPointLocation(soap*, ...) allocate, set all public members
/// - ns5__AlertCMethod2SecondaryPointLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCMethod2SecondaryPointLocation(soap*, ns5__AlertCMethod2SecondaryPointLocation*) deserialize from a stream
/// - int soap_write_ns5__AlertCMethod2SecondaryPointLocation(soap*, ns5__AlertCMethod2SecondaryPointLocation*) serialize to a stream
/// - ns5__AlertCMethod2SecondaryPointLocation* ns5__AlertCMethod2SecondaryPointLocation::soap_dup(soap*) returns deep copy of ns5__AlertCMethod2SecondaryPointLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCMethod2SecondaryPointLocation::soap_del() deep deletes ns5__AlertCMethod2SecondaryPointLocation data members, use only after ns5__AlertCMethod2SecondaryPointLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCMethod2SecondaryPointLocation : public xsd__anyType
{ public:
/// Element "alertCLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocation.
    ns5__AlertCLocation*                 alertCLocation                 1;	///< Required element.
/// Element "alertCMethod2SecondaryPointLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCMethod2SecondaryPointLocationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod4PrimaryPointLocation is a complexType.
///
/// class ns5__AlertCMethod4PrimaryPointLocation operations:
/// - ns5__AlertCMethod4PrimaryPointLocation* soap_new_ns5__AlertCMethod4PrimaryPointLocation(soap*) allocate and default initialize
/// - ns5__AlertCMethod4PrimaryPointLocation* soap_new_ns5__AlertCMethod4PrimaryPointLocation(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCMethod4PrimaryPointLocation* soap_new_req_ns5__AlertCMethod4PrimaryPointLocation(soap*, ...) allocate, set required members
/// - ns5__AlertCMethod4PrimaryPointLocation* soap_new_set_ns5__AlertCMethod4PrimaryPointLocation(soap*, ...) allocate, set all public members
/// - ns5__AlertCMethod4PrimaryPointLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCMethod4PrimaryPointLocation(soap*, ns5__AlertCMethod4PrimaryPointLocation*) deserialize from a stream
/// - int soap_write_ns5__AlertCMethod4PrimaryPointLocation(soap*, ns5__AlertCMethod4PrimaryPointLocation*) serialize to a stream
/// - ns5__AlertCMethod4PrimaryPointLocation* ns5__AlertCMethod4PrimaryPointLocation::soap_dup(soap*) returns deep copy of ns5__AlertCMethod4PrimaryPointLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCMethod4PrimaryPointLocation::soap_del() deep deletes ns5__AlertCMethod4PrimaryPointLocation data members, use only after ns5__AlertCMethod4PrimaryPointLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCMethod4PrimaryPointLocation : public xsd__anyType
{ public:
/// Element "alertCLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocation.
    ns5__AlertCLocation*                 alertCLocation                 1;	///< Required element.
/// Element "offsetDistance" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OffsetDistance.
    ns5__OffsetDistance*                 offsetDistance                 1;	///< Required element.
/// Element "alertCMethod4PrimaryPointLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCMethod4PrimaryPointLocationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod4SecondaryPointLocation is a complexType.
///
/// class ns5__AlertCMethod4SecondaryPointLocation operations:
/// - ns5__AlertCMethod4SecondaryPointLocation* soap_new_ns5__AlertCMethod4SecondaryPointLocation(soap*) allocate and default initialize
/// - ns5__AlertCMethod4SecondaryPointLocation* soap_new_ns5__AlertCMethod4SecondaryPointLocation(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCMethod4SecondaryPointLocation* soap_new_req_ns5__AlertCMethod4SecondaryPointLocation(soap*, ...) allocate, set required members
/// - ns5__AlertCMethod4SecondaryPointLocation* soap_new_set_ns5__AlertCMethod4SecondaryPointLocation(soap*, ...) allocate, set all public members
/// - ns5__AlertCMethod4SecondaryPointLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCMethod4SecondaryPointLocation(soap*, ns5__AlertCMethod4SecondaryPointLocation*) deserialize from a stream
/// - int soap_write_ns5__AlertCMethod4SecondaryPointLocation(soap*, ns5__AlertCMethod4SecondaryPointLocation*) serialize to a stream
/// - ns5__AlertCMethod4SecondaryPointLocation* ns5__AlertCMethod4SecondaryPointLocation::soap_dup(soap*) returns deep copy of ns5__AlertCMethod4SecondaryPointLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCMethod4SecondaryPointLocation::soap_del() deep deletes ns5__AlertCMethod4SecondaryPointLocation data members, use only after ns5__AlertCMethod4SecondaryPointLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCMethod4SecondaryPointLocation : public xsd__anyType
{ public:
/// Element "alertCLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocation.
    ns5__AlertCLocation*                 alertCLocation                 1;	///< Required element.
/// Element "offsetDistance" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OffsetDistance.
    ns5__OffsetDistance*                 offsetDistance                 1;	///< Required element.
/// Element "alertCMethod4SecondaryPointLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCMethod4SecondaryPointLocationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCPoint is an abstract complexType.
///
/// class ns5__AlertCPoint operations:
/// - ns5__AlertCPoint* soap_new_ns5__AlertCPoint(soap*) allocate and default initialize
/// - ns5__AlertCPoint* soap_new_ns5__AlertCPoint(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCPoint* soap_new_req_ns5__AlertCPoint(soap*, ...) allocate, set required members
/// - ns5__AlertCPoint* soap_new_set_ns5__AlertCPoint(soap*, ...) allocate, set all public members
/// - ns5__AlertCPoint::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCPoint(soap*, ns5__AlertCPoint*) deserialize from a stream
/// - int soap_write_ns5__AlertCPoint(soap*, ns5__AlertCPoint*) serialize to a stream
/// - ns5__AlertCPoint* ns5__AlertCPoint::soap_dup(soap*) returns deep copy of ns5__AlertCPoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCPoint::soap_del() deep deletes ns5__AlertCPoint data members, use only after ns5__AlertCPoint::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCPoint : public xsd__anyType
{ public:
/// Element "alertCLocationCountryCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationCountryCode      1;	///< Required element.
/// Element "alertCLocationTableNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableNumber      1;	///< Required element.
/// Element "alertCLocationTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableVersion     1;	///< Required element.
/// Element "alertCPointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCPointExtension           0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AxleSpacing is a complexType.
///
/// class ns5__AxleSpacing operations:
/// - ns5__AxleSpacing* soap_new_ns5__AxleSpacing(soap*) allocate and default initialize
/// - ns5__AxleSpacing* soap_new_ns5__AxleSpacing(soap*, int num) allocate array and default initialize values
/// - ns5__AxleSpacing* soap_new_req_ns5__AxleSpacing(soap*, ...) allocate, set required members
/// - ns5__AxleSpacing* soap_new_set_ns5__AxleSpacing(soap*, ...) allocate, set all public members
/// - ns5__AxleSpacing::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AxleSpacing(soap*, ns5__AxleSpacing*) deserialize from a stream
/// - int soap_write_ns5__AxleSpacing(soap*, ns5__AxleSpacing*) serialize to a stream
/// - ns5__AxleSpacing* ns5__AxleSpacing::soap_dup(soap*) returns deep copy of ns5__AxleSpacing, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AxleSpacing::soap_del() deep deletes ns5__AxleSpacing data members, use only after ns5__AxleSpacing::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AxleSpacing : public xsd__anyType
{ public:
/// Element "axleSpacing" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat                   axleSpacing                    1;	///< Required element.
/// Element "axleSpacingSequenceIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              axleSpacingSequenceIdentifier  1;	///< Required element.
/// Element "axleSpacingExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  axleSpacingExtension           0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AxleWeight is a complexType.
///
/// class ns5__AxleWeight operations:
/// - ns5__AxleWeight* soap_new_ns5__AxleWeight(soap*) allocate and default initialize
/// - ns5__AxleWeight* soap_new_ns5__AxleWeight(soap*, int num) allocate array and default initialize values
/// - ns5__AxleWeight* soap_new_req_ns5__AxleWeight(soap*, ...) allocate, set required members
/// - ns5__AxleWeight* soap_new_set_ns5__AxleWeight(soap*, ...) allocate, set all public members
/// - ns5__AxleWeight::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AxleWeight(soap*, ns5__AxleWeight*) deserialize from a stream
/// - int soap_write_ns5__AxleWeight(soap*, ns5__AxleWeight*) serialize to a stream
/// - ns5__AxleWeight* ns5__AxleWeight::soap_dup(soap*) returns deep copy of ns5__AxleWeight, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AxleWeight::soap_del() deep deletes ns5__AxleWeight data members, use only after ns5__AxleWeight::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AxleWeight : public xsd__anyType
{ public:
/// Element "axlePositionIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              axlePositionIdentifier         1;	///< Required element.
/// Element "axleWeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Tonnes.
    ns5__Tonnes*                         axleWeight                     0;	///< Optional element.
/// Element "maximumPermittedAxleWeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Tonnes.
    ns5__Tonnes*                         maximumPermittedAxleWeight     0;	///< Optional element.
/// Element "axleWeightExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  axleWeightExtension            0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":BasicDataValue is an abstract complexType.
///
/// class ns5__BasicDataValue operations:
/// - ns5__BasicDataValue* soap_new_ns5__BasicDataValue(soap*) allocate and default initialize
/// - ns5__BasicDataValue* soap_new_ns5__BasicDataValue(soap*, int num) allocate array and default initialize values
/// - ns5__BasicDataValue* soap_new_req_ns5__BasicDataValue(soap*, ...) allocate, set required members
/// - ns5__BasicDataValue* soap_new_set_ns5__BasicDataValue(soap*, ...) allocate, set all public members
/// - ns5__BasicDataValue::soap_default(soap*) default initialize members
/// - int soap_read_ns5__BasicDataValue(soap*, ns5__BasicDataValue*) deserialize from a stream
/// - int soap_write_ns5__BasicDataValue(soap*, ns5__BasicDataValue*) serialize to a stream
/// - ns5__BasicDataValue* ns5__BasicDataValue::soap_dup(soap*) returns deep copy of ns5__BasicDataValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__BasicDataValue::soap_del() deep deletes ns5__BasicDataValue data members, use only after ns5__BasicDataValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__BasicDataValue : public xsd__anyType
{ public:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":CatalogueReference is a complexType.
///
/// class ns5__CatalogueReference operations:
/// - ns5__CatalogueReference* soap_new_ns5__CatalogueReference(soap*) allocate and default initialize
/// - ns5__CatalogueReference* soap_new_ns5__CatalogueReference(soap*, int num) allocate array and default initialize values
/// - ns5__CatalogueReference* soap_new_req_ns5__CatalogueReference(soap*, ...) allocate, set required members
/// - ns5__CatalogueReference* soap_new_set_ns5__CatalogueReference(soap*, ...) allocate, set all public members
/// - ns5__CatalogueReference::soap_default(soap*) default initialize members
/// - int soap_read_ns5__CatalogueReference(soap*, ns5__CatalogueReference*) deserialize from a stream
/// - int soap_write_ns5__CatalogueReference(soap*, ns5__CatalogueReference*) serialize to a stream
/// - ns5__CatalogueReference* ns5__CatalogueReference::soap_dup(soap*) returns deep copy of ns5__CatalogueReference, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__CatalogueReference::soap_del() deep deletes ns5__CatalogueReference data members, use only after ns5__CatalogueReference::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__CatalogueReference : public xsd__anyType
{ public:
/// Element "keyCatalogueReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference                       keyCatalogueReference          1;	///< Required element.
/// Element "catalogueReferenceExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  catalogueReferenceExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Cause is an abstract complexType.
///
/// class ns5__Cause operations:
/// - ns5__Cause* soap_new_ns5__Cause(soap*) allocate and default initialize
/// - ns5__Cause* soap_new_ns5__Cause(soap*, int num) allocate array and default initialize values
/// - ns5__Cause* soap_new_req_ns5__Cause(soap*, ...) allocate, set required members
/// - ns5__Cause* soap_new_set_ns5__Cause(soap*, ...) allocate, set all public members
/// - ns5__Cause::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Cause(soap*, ns5__Cause*) deserialize from a stream
/// - int soap_write_ns5__Cause(soap*, ns5__Cause*) serialize to a stream
/// - ns5__Cause* ns5__Cause::soap_dup(soap*) returns deep copy of ns5__Cause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Cause::soap_del() deep deletes ns5__Cause data members, use only after ns5__Cause::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Cause : public xsd__anyType
{ public:
/// Element "causeExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  causeExtension                 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Comment is a complexType.
///
/// class ns5__Comment operations:
/// - ns5__Comment* soap_new_ns5__Comment(soap*) allocate and default initialize
/// - ns5__Comment* soap_new_ns5__Comment(soap*, int num) allocate array and default initialize values
/// - ns5__Comment* soap_new_req_ns5__Comment(soap*, ...) allocate, set required members
/// - ns5__Comment* soap_new_set_ns5__Comment(soap*, ...) allocate, set all public members
/// - ns5__Comment::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Comment(soap*, ns5__Comment*) deserialize from a stream
/// - int soap_write_ns5__Comment(soap*, ns5__Comment*) serialize to a stream
/// - ns5__Comment* ns5__Comment::soap_dup(soap*) returns deep copy of ns5__Comment, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Comment::soap_del() deep deletes ns5__Comment data members, use only after ns5__Comment::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Comment : public xsd__anyType
{ public:
/// Element "comment" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             comment                        1;	///< Required element.
/// Element "commentDateTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       commentDateTime                0;	///< Optional element.
/// Element "commentExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  commentExtension               0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":D2LogicalModel is a complexType.
///
/// class ns5__D2LogicalModel operations:
/// - ns5__D2LogicalModel* soap_new_ns5__D2LogicalModel(soap*) allocate and default initialize
/// - ns5__D2LogicalModel* soap_new_ns5__D2LogicalModel(soap*, int num) allocate array and default initialize values
/// - ns5__D2LogicalModel* soap_new_req_ns5__D2LogicalModel(soap*, ...) allocate, set required members
/// - ns5__D2LogicalModel* soap_new_set_ns5__D2LogicalModel(soap*, ...) allocate, set all public members
/// - ns5__D2LogicalModel::soap_default(soap*) default initialize members
/// - int soap_read_ns5__D2LogicalModel(soap*, ns5__D2LogicalModel*) deserialize from a stream
/// - int soap_write_ns5__D2LogicalModel(soap*, ns5__D2LogicalModel*) serialize to a stream
/// - ns5__D2LogicalModel* ns5__D2LogicalModel::soap_dup(soap*) returns deep copy of ns5__D2LogicalModel, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__D2LogicalModel::soap_del() deep deletes ns5__D2LogicalModel data members, use only after ns5__D2LogicalModel::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__D2LogicalModel : public xsd__anyType
{ public:
/// Element "exchange" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Exchange.
    ns5__Exchange*                       exchange                       1;	///< Required element.
/// Element "payloadPublication" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication.
    ns5__PayloadPublication*             payloadPublication             0;	///< Optional element.
/// Element "d2LogicalModelExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  d2LogicalModelExtension        0;	///< Optional element.
/// Attribute "modelBaseVersion" has no type or ref: assuming string content.
   @std::wstring                         modelBaseVersion               1;	///< Fixed attribute value="2.0RC1".
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DayWeekMonth is a complexType.
///
/// class ns5__DayWeekMonth operations:
/// - ns5__DayWeekMonth* soap_new_ns5__DayWeekMonth(soap*) allocate and default initialize
/// - ns5__DayWeekMonth* soap_new_ns5__DayWeekMonth(soap*, int num) allocate array and default initialize values
/// - ns5__DayWeekMonth* soap_new_req_ns5__DayWeekMonth(soap*, ...) allocate, set required members
/// - ns5__DayWeekMonth* soap_new_set_ns5__DayWeekMonth(soap*, ...) allocate, set all public members
/// - ns5__DayWeekMonth::soap_default(soap*) default initialize members
/// - int soap_read_ns5__DayWeekMonth(soap*, ns5__DayWeekMonth*) deserialize from a stream
/// - int soap_write_ns5__DayWeekMonth(soap*, ns5__DayWeekMonth*) serialize to a stream
/// - ns5__DayWeekMonth* ns5__DayWeekMonth::soap_dup(soap*) returns deep copy of ns5__DayWeekMonth, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__DayWeekMonth::soap_del() deep deletes ns5__DayWeekMonth data members, use only after ns5__DayWeekMonth::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__DayWeekMonth : public xsd__anyType
{ public:
/// Vector of enum ns5__DayEnum of length 0..7.
    std::vector<enum ns5__DayEnum      > applicableDay                  0:7;
/// Vector of enum ns5__WeekOfMonthEnum of length 0..5.
    std::vector<enum ns5__WeekOfMonthEnum> applicableWeek                 0:5;
/// Vector of enum ns5__MonthOfYearEnum of length 0..12.
    std::vector<enum ns5__MonthOfYearEnum> applicableMonth                0:12;
/// Element "dayWeekMonthExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  dayWeekMonthExtension          0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Delays is a complexType.
///
/// class ns5__Delays operations:
/// - ns5__Delays* soap_new_ns5__Delays(soap*) allocate and default initialize
/// - ns5__Delays* soap_new_ns5__Delays(soap*, int num) allocate array and default initialize values
/// - ns5__Delays* soap_new_req_ns5__Delays(soap*, ...) allocate, set required members
/// - ns5__Delays* soap_new_set_ns5__Delays(soap*, ...) allocate, set all public members
/// - ns5__Delays::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Delays(soap*, ns5__Delays*) deserialize from a stream
/// - int soap_write_ns5__Delays(soap*, ns5__Delays*) serialize to a stream
/// - ns5__Delays* ns5__Delays::soap_dup(soap*) returns deep copy of ns5__Delays, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Delays::soap_del() deep deletes ns5__Delays data members, use only after ns5__Delays::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Delays : public xsd__anyType
{ public:
/// Element "delayBand" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DelayBandEnum.
    enum ns5__DelayBandEnum*             delayBand                      0;	///< Optional element.
/// Element "delaysType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DelaysTypeEnum.
    enum ns5__DelaysTypeEnum*            delaysType                     0;	///< Optional element.
/// Element "delayTimeValue" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        delayTimeValue                 0;	///< Optional element.
/// Element "delaysExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  delaysExtension                0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Destination is an abstract complexType.
///
/// class ns5__Destination operations:
/// - ns5__Destination* soap_new_ns5__Destination(soap*) allocate and default initialize
/// - ns5__Destination* soap_new_ns5__Destination(soap*, int num) allocate array and default initialize values
/// - ns5__Destination* soap_new_req_ns5__Destination(soap*, ...) allocate, set required members
/// - ns5__Destination* soap_new_set_ns5__Destination(soap*, ...) allocate, set all public members
/// - ns5__Destination::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Destination(soap*, ns5__Destination*) deserialize from a stream
/// - int soap_write_ns5__Destination(soap*, ns5__Destination*) serialize to a stream
/// - ns5__Destination* ns5__Destination::soap_dup(soap*) returns deep copy of ns5__Destination, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Destination::soap_del() deep deletes ns5__Destination data members, use only after ns5__Destination::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Destination : public xsd__anyType
{ public:
/// Element "destinationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  destinationExtension           0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ElaboratedData is a complexType.
///
/// class ns5__ElaboratedData operations:
/// - ns5__ElaboratedData* soap_new_ns5__ElaboratedData(soap*) allocate and default initialize
/// - ns5__ElaboratedData* soap_new_ns5__ElaboratedData(soap*, int num) allocate array and default initialize values
/// - ns5__ElaboratedData* soap_new_req_ns5__ElaboratedData(soap*, ...) allocate, set required members
/// - ns5__ElaboratedData* soap_new_set_ns5__ElaboratedData(soap*, ...) allocate, set all public members
/// - ns5__ElaboratedData::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ElaboratedData(soap*, ns5__ElaboratedData*) deserialize from a stream
/// - int soap_write_ns5__ElaboratedData(soap*, ns5__ElaboratedData*) serialize to a stream
/// - ns5__ElaboratedData* ns5__ElaboratedData::soap_dup(soap*) returns deep copy of ns5__ElaboratedData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ElaboratedData::soap_del() deep deletes ns5__ElaboratedData data members, use only after ns5__ElaboratedData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ElaboratedData : public xsd__anyType
{ public:
/// Element "forecast" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        forecast                       0;	///< Optional element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       0;	///< Optional element.
/// Element "basicDataValue" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":BasicDataValue.
    ns5__BasicDataValue*                 basicDataValue                 1;	///< Required element.
/// Element "elaboratedDataExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  elaboratedDataExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Exchange is a complexType.
///
/// class ns5__Exchange operations:
/// - ns5__Exchange* soap_new_ns5__Exchange(soap*) allocate and default initialize
/// - ns5__Exchange* soap_new_ns5__Exchange(soap*, int num) allocate array and default initialize values
/// - ns5__Exchange* soap_new_req_ns5__Exchange(soap*, ...) allocate, set required members
/// - ns5__Exchange* soap_new_set_ns5__Exchange(soap*, ...) allocate, set all public members
/// - ns5__Exchange::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Exchange(soap*, ns5__Exchange*) deserialize from a stream
/// - int soap_write_ns5__Exchange(soap*, ns5__Exchange*) serialize to a stream
/// - ns5__Exchange* ns5__Exchange::soap_dup(soap*) returns deep copy of ns5__Exchange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Exchange::soap_del() deep deletes ns5__Exchange data members, use only after ns5__Exchange::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Exchange : public xsd__anyType
{ public:
/// Element "changedFlag" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ChangedFlagEnum.
    enum ns5__ChangedFlagEnum*           changedFlag                    0;	///< Optional element.
/// Element "clientIdentification" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         clientIdentification           0;	///< Optional element.
/// Element "deliveryBreak" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        deliveryBreak                  0;	///< Optional element.
/// Element "denyReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DenyReasonEnum.
    enum ns5__DenyReasonEnum*            denyReason                     0;	///< Optional element.
/// Element "historicalStartDate" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       historicalStartDate            0;	///< Optional element.
/// Element "historicalStopDate" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       historicalStopDate             0;	///< Optional element.
/// Element "keepAlive" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        keepAlive                      0;	///< Optional element.
/// Element "requestType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RequestTypeEnum.
    enum ns5__RequestTypeEnum*           requestType                    0;	///< Optional element.
/// Element "response" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ResponseEnum.
    enum ns5__ResponseEnum*              response                       0;	///< Optional element.
/// Element "subscriptionReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         subscriptionReference          0;	///< Optional element.
/// Element "supplierIdentification" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        supplierIdentification         1;	///< Required element.
/// Element "target" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Target.
    ns5__Target*                         target                         0;	///< Optional element.
/// Element "subscription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Subscription.
    ns5__Subscription*                   subscription                   0;	///< Optional element.
/// Vector of ns5__FilterReference* of length 0..unbounded.
    std::vector<ns5__FilterReference*  > filterReference                0;
/// Vector of ns5__CatalogueReference* of length 0..unbounded.
    std::vector<ns5__CatalogueReference*> catalogueReference             0;
/// Element "exchangeExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  exchangeExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType is a complexType.
///
/// class ns5__ExtensionType operations:
/// - ns5__ExtensionType* soap_new_ns5__ExtensionType(soap*) allocate and default initialize
/// - ns5__ExtensionType* soap_new_ns5__ExtensionType(soap*, int num) allocate array and default initialize values
/// - ns5__ExtensionType* soap_new_req_ns5__ExtensionType(soap*, ...) allocate, set required members
/// - ns5__ExtensionType* soap_new_set_ns5__ExtensionType(soap*, ...) allocate, set all public members
/// - ns5__ExtensionType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ExtensionType(soap*, ns5__ExtensionType*) deserialize from a stream
/// - int soap_write_ns5__ExtensionType(soap*, ns5__ExtensionType*) serialize to a stream
/// - ns5__ExtensionType* ns5__ExtensionType::soap_dup(soap*) returns deep copy of ns5__ExtensionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ExtensionType::soap_del() deep deletes ns5__ExtensionType data members, use only after ns5__ExtensionType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ExtensionType : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ExternalReferencing is a complexType.
///
/// class ns5__ExternalReferencing operations:
/// - ns5__ExternalReferencing* soap_new_ns5__ExternalReferencing(soap*) allocate and default initialize
/// - ns5__ExternalReferencing* soap_new_ns5__ExternalReferencing(soap*, int num) allocate array and default initialize values
/// - ns5__ExternalReferencing* soap_new_req_ns5__ExternalReferencing(soap*, ...) allocate, set required members
/// - ns5__ExternalReferencing* soap_new_set_ns5__ExternalReferencing(soap*, ...) allocate, set all public members
/// - ns5__ExternalReferencing::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ExternalReferencing(soap*, ns5__ExternalReferencing*) deserialize from a stream
/// - int soap_write_ns5__ExternalReferencing(soap*, ns5__ExternalReferencing*) serialize to a stream
/// - ns5__ExternalReferencing* ns5__ExternalReferencing::soap_dup(soap*) returns deep copy of ns5__ExternalReferencing, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ExternalReferencing::soap_del() deep deletes ns5__ExternalReferencing data members, use only after ns5__ExternalReferencing::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ExternalReferencing : public xsd__anyType
{ public:
/// Element "externalLocationCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          externalLocationCode           1;	///< Required element.
/// Element "externalReferencingSystem" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          externalReferencingSystem      1;	///< Required element.
/// Element "externalReferencingExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  externalReferencingExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":FilterExitManagement is a complexType.
///
/// class ns5__FilterExitManagement operations:
/// - ns5__FilterExitManagement* soap_new_ns5__FilterExitManagement(soap*) allocate and default initialize
/// - ns5__FilterExitManagement* soap_new_ns5__FilterExitManagement(soap*, int num) allocate array and default initialize values
/// - ns5__FilterExitManagement* soap_new_req_ns5__FilterExitManagement(soap*, ...) allocate, set required members
/// - ns5__FilterExitManagement* soap_new_set_ns5__FilterExitManagement(soap*, ...) allocate, set all public members
/// - ns5__FilterExitManagement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__FilterExitManagement(soap*, ns5__FilterExitManagement*) deserialize from a stream
/// - int soap_write_ns5__FilterExitManagement(soap*, ns5__FilterExitManagement*) serialize to a stream
/// - ns5__FilterExitManagement* ns5__FilterExitManagement::soap_dup(soap*) returns deep copy of ns5__FilterExitManagement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__FilterExitManagement::soap_del() deep deletes ns5__FilterExitManagement data members, use only after ns5__FilterExitManagement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__FilterExitManagement : public xsd__anyType
{ public:
/// Element "filterEnd" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean                         filterEnd                      1;	///< Required element.
/// Element "filterOutOfRange" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean                         filterOutOfRange               1;	///< Required element.
/// Element "filterExitManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  filterExitManagementExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":FilterReference is a complexType.
///
/// class ns5__FilterReference operations:
/// - ns5__FilterReference* soap_new_ns5__FilterReference(soap*) allocate and default initialize
/// - ns5__FilterReference* soap_new_ns5__FilterReference(soap*, int num) allocate array and default initialize values
/// - ns5__FilterReference* soap_new_req_ns5__FilterReference(soap*, ...) allocate, set required members
/// - ns5__FilterReference* soap_new_set_ns5__FilterReference(soap*, ...) allocate, set all public members
/// - ns5__FilterReference::soap_default(soap*) default initialize members
/// - int soap_read_ns5__FilterReference(soap*, ns5__FilterReference*) deserialize from a stream
/// - int soap_write_ns5__FilterReference(soap*, ns5__FilterReference*) serialize to a stream
/// - ns5__FilterReference* ns5__FilterReference::soap_dup(soap*) returns deep copy of ns5__FilterReference, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__FilterReference::soap_del() deep deletes ns5__FilterReference data members, use only after ns5__FilterReference::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__FilterReference : public xsd__anyType
{ public:
/// Element "deleteFilter" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        deleteFilter                   0;	///< Optional element.
/// Element "filterOperationApproved" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        filterOperationApproved        0;	///< Optional element.
/// Element "keyFilterReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference                       keyFilterReference             1;	///< Required element.
/// Element "filterReferenceExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  filterReferenceExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GrossWeightCharacteristic is a complexType.
///
/// class ns5__GrossWeightCharacteristic operations:
/// - ns5__GrossWeightCharacteristic* soap_new_ns5__GrossWeightCharacteristic(soap*) allocate and default initialize
/// - ns5__GrossWeightCharacteristic* soap_new_ns5__GrossWeightCharacteristic(soap*, int num) allocate array and default initialize values
/// - ns5__GrossWeightCharacteristic* soap_new_req_ns5__GrossWeightCharacteristic(soap*, ...) allocate, set required members
/// - ns5__GrossWeightCharacteristic* soap_new_set_ns5__GrossWeightCharacteristic(soap*, ...) allocate, set all public members
/// - ns5__GrossWeightCharacteristic::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GrossWeightCharacteristic(soap*, ns5__GrossWeightCharacteristic*) deserialize from a stream
/// - int soap_write_ns5__GrossWeightCharacteristic(soap*, ns5__GrossWeightCharacteristic*) serialize to a stream
/// - ns5__GrossWeightCharacteristic* ns5__GrossWeightCharacteristic::soap_dup(soap*) returns deep copy of ns5__GrossWeightCharacteristic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GrossWeightCharacteristic::soap_del() deep deletes ns5__GrossWeightCharacteristic data members, use only after ns5__GrossWeightCharacteristic::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GrossWeightCharacteristic : public xsd__anyType
{ public:
/// Element "comparisonOperator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComparisonOperatorEnum.
    enum ns5__ComparisonOperatorEnum     comparisonOperator             1;	///< Required element.
/// Element "grossVehicleWeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Tonnes.
    ns5__Tonnes                          grossVehicleWeight             1;	///< Required element.
/// Element "grossWeightCharacteristicExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  grossWeightCharacteristicExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations is an abstract complexType.
///
/// class ns5__GroupOfLocations operations:
/// - ns5__GroupOfLocations* soap_new_ns5__GroupOfLocations(soap*) allocate and default initialize
/// - ns5__GroupOfLocations* soap_new_ns5__GroupOfLocations(soap*, int num) allocate array and default initialize values
/// - ns5__GroupOfLocations* soap_new_req_ns5__GroupOfLocations(soap*, ...) allocate, set required members
/// - ns5__GroupOfLocations* soap_new_set_ns5__GroupOfLocations(soap*, ...) allocate, set all public members
/// - ns5__GroupOfLocations::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GroupOfLocations(soap*, ns5__GroupOfLocations*) deserialize from a stream
/// - int soap_write_ns5__GroupOfLocations(soap*, ns5__GroupOfLocations*) serialize to a stream
/// - ns5__GroupOfLocations* ns5__GroupOfLocations::soap_dup(soap*) returns deep copy of ns5__GroupOfLocations, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GroupOfLocations::soap_del() deep deletes ns5__GroupOfLocations data members, use only after ns5__GroupOfLocations::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GroupOfLocations : public xsd__anyType
{ public:
/// Element "groupOfLocationsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  groupOfLocationsExtension      0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GroupOfPeopleInvolved is a complexType.
///
/// class ns5__GroupOfPeopleInvolved operations:
/// - ns5__GroupOfPeopleInvolved* soap_new_ns5__GroupOfPeopleInvolved(soap*) allocate and default initialize
/// - ns5__GroupOfPeopleInvolved* soap_new_ns5__GroupOfPeopleInvolved(soap*, int num) allocate array and default initialize values
/// - ns5__GroupOfPeopleInvolved* soap_new_req_ns5__GroupOfPeopleInvolved(soap*, ...) allocate, set required members
/// - ns5__GroupOfPeopleInvolved* soap_new_set_ns5__GroupOfPeopleInvolved(soap*, ...) allocate, set all public members
/// - ns5__GroupOfPeopleInvolved::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GroupOfPeopleInvolved(soap*, ns5__GroupOfPeopleInvolved*) deserialize from a stream
/// - int soap_write_ns5__GroupOfPeopleInvolved(soap*, ns5__GroupOfPeopleInvolved*) serialize to a stream
/// - ns5__GroupOfPeopleInvolved* ns5__GroupOfPeopleInvolved::soap_dup(soap*) returns deep copy of ns5__GroupOfPeopleInvolved, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GroupOfPeopleInvolved::soap_del() deep deletes ns5__GroupOfPeopleInvolved data members, use only after ns5__GroupOfPeopleInvolved::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GroupOfPeopleInvolved : public xsd__anyType
{ public:
/// Element "numberOfPeople" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfPeople                 0;	///< Optional element.
/// Element "injuryStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InjuryStatusTypeEnum.
    enum ns5__InjuryStatusTypeEnum*      injuryStatus                   0;	///< Optional element.
/// Element "involvementRole" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InvolvementRolesEnum.
    enum ns5__InvolvementRolesEnum*      involvementRole                0;	///< Optional element.
/// Element "categoryOfPeopleInvolved" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PersonCategoryEnum.
    enum ns5__PersonCategoryEnum*        categoryOfPeopleInvolved       0;	///< Optional element.
/// Element "groupOfPeopleInvolvedExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  groupOfPeopleInvolvedExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GroupOfVehiclesInvolved is a complexType.
///
/// class ns5__GroupOfVehiclesInvolved operations:
/// - ns5__GroupOfVehiclesInvolved* soap_new_ns5__GroupOfVehiclesInvolved(soap*) allocate and default initialize
/// - ns5__GroupOfVehiclesInvolved* soap_new_ns5__GroupOfVehiclesInvolved(soap*, int num) allocate array and default initialize values
/// - ns5__GroupOfVehiclesInvolved* soap_new_req_ns5__GroupOfVehiclesInvolved(soap*, ...) allocate, set required members
/// - ns5__GroupOfVehiclesInvolved* soap_new_set_ns5__GroupOfVehiclesInvolved(soap*, ...) allocate, set all public members
/// - ns5__GroupOfVehiclesInvolved::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GroupOfVehiclesInvolved(soap*, ns5__GroupOfVehiclesInvolved*) deserialize from a stream
/// - int soap_write_ns5__GroupOfVehiclesInvolved(soap*, ns5__GroupOfVehiclesInvolved*) serialize to a stream
/// - ns5__GroupOfVehiclesInvolved* ns5__GroupOfVehiclesInvolved::soap_dup(soap*) returns deep copy of ns5__GroupOfVehiclesInvolved, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GroupOfVehiclesInvolved::soap_del() deep deletes ns5__GroupOfVehiclesInvolved data members, use only after ns5__GroupOfVehiclesInvolved::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GroupOfVehiclesInvolved : public xsd__anyType
{ public:
/// Element "numberOfVehicles" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfVehicles               0;	///< Optional element.
/// Element "vehicleStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleStatusEnum.
    enum ns5__VehicleStatusEnum*         vehicleStatus                  0;	///< Optional element.
/// Element "vehicleCharacteristics" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         vehicleCharacteristics         0;	///< Optional element.
/// Element "groupOfVehiclesInvolvedExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  groupOfVehiclesInvolvedExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":HazardousMaterials is a complexType.
///
/// class ns5__HazardousMaterials operations:
/// - ns5__HazardousMaterials* soap_new_ns5__HazardousMaterials(soap*) allocate and default initialize
/// - ns5__HazardousMaterials* soap_new_ns5__HazardousMaterials(soap*, int num) allocate array and default initialize values
/// - ns5__HazardousMaterials* soap_new_req_ns5__HazardousMaterials(soap*, ...) allocate, set required members
/// - ns5__HazardousMaterials* soap_new_set_ns5__HazardousMaterials(soap*, ...) allocate, set all public members
/// - ns5__HazardousMaterials::soap_default(soap*) default initialize members
/// - int soap_read_ns5__HazardousMaterials(soap*, ns5__HazardousMaterials*) deserialize from a stream
/// - int soap_write_ns5__HazardousMaterials(soap*, ns5__HazardousMaterials*) serialize to a stream
/// - ns5__HazardousMaterials* ns5__HazardousMaterials::soap_dup(soap*) returns deep copy of ns5__HazardousMaterials, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__HazardousMaterials::soap_del() deep deletes ns5__HazardousMaterials data members, use only after ns5__HazardousMaterials::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__HazardousMaterials : public xsd__anyType
{ public:
/// Element "chemicalName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             chemicalName                   1;	///< Required element.
/// Element "dangerousGoodsFlashPoint" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TemperatureCelsius.
    ns5__TemperatureCelsius*             dangerousGoodsFlashPoint       0;	///< Optional element.
/// Element "dangerousGoodsRegulations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DangerousGoodsRegulationsEnum.
    enum ns5__DangerousGoodsRegulationsEnum*  dangerousGoodsRegulations      0;	///< Optional element.
/// Element "hazardCodeIdentification" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         hazardCodeIdentification       0;	///< Optional element.
/// Element "hazardCodeVersionNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             hazardCodeVersionNumber        0;	///< Optional element.
/// Element "hazardSubstanceItemPageNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         hazardSubstanceItemPageNumber  0;	///< Optional element.
/// Element "tremCardNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         tremCardNumber                 0;	///< Optional element.
/// Element "undgNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         undgNumber                     0;	///< Optional element.
/// Element "volumeOfDangerousGoods" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":CubicMetres.
    ns5__CubicMetres*                    volumeOfDangerousGoods         0;	///< Optional element.
/// Element "weightOfDangerousGoods" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Tonnes.
    ns5__Tonnes*                         weightOfDangerousGoods         0;	///< Optional element.
/// Element "hazardousMaterialsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  hazardousMaterialsExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":HeaderInformation is a complexType.
///
/// class ns5__HeaderInformation operations:
/// - ns5__HeaderInformation* soap_new_ns5__HeaderInformation(soap*) allocate and default initialize
/// - ns5__HeaderInformation* soap_new_ns5__HeaderInformation(soap*, int num) allocate array and default initialize values
/// - ns5__HeaderInformation* soap_new_req_ns5__HeaderInformation(soap*, ...) allocate, set required members
/// - ns5__HeaderInformation* soap_new_set_ns5__HeaderInformation(soap*, ...) allocate, set all public members
/// - ns5__HeaderInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__HeaderInformation(soap*, ns5__HeaderInformation*) deserialize from a stream
/// - int soap_write_ns5__HeaderInformation(soap*, ns5__HeaderInformation*) serialize to a stream
/// - ns5__HeaderInformation* ns5__HeaderInformation::soap_dup(soap*) returns deep copy of ns5__HeaderInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__HeaderInformation::soap_del() deep deletes ns5__HeaderInformation data members, use only after ns5__HeaderInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__HeaderInformation : public xsd__anyType
{ public:
/// Element "areaOfInterest" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AreaOfInterestEnum.
    enum ns5__AreaOfInterestEnum*        areaOfInterest                 0;	///< Optional element.
/// Element "confidentiality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum   confidentiality                1;	///< Required element.
/// Element "informationStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InformationStatusEnum.
    enum ns5__InformationStatusEnum      informationStatus              1;	///< Required element.
/// Element "urgency" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":UrgencyEnum.
    enum ns5__UrgencyEnum*               urgency                        0;	///< Optional element.
/// Element "headerInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  headerInformationExtension     0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":HeaviestAxleWeightCharacteristic is a complexType.
///
/// class ns5__HeaviestAxleWeightCharacteristic operations:
/// - ns5__HeaviestAxleWeightCharacteristic* soap_new_ns5__HeaviestAxleWeightCharacteristic(soap*) allocate and default initialize
/// - ns5__HeaviestAxleWeightCharacteristic* soap_new_ns5__HeaviestAxleWeightCharacteristic(soap*, int num) allocate array and default initialize values
/// - ns5__HeaviestAxleWeightCharacteristic* soap_new_req_ns5__HeaviestAxleWeightCharacteristic(soap*, ...) allocate, set required members
/// - ns5__HeaviestAxleWeightCharacteristic* soap_new_set_ns5__HeaviestAxleWeightCharacteristic(soap*, ...) allocate, set all public members
/// - ns5__HeaviestAxleWeightCharacteristic::soap_default(soap*) default initialize members
/// - int soap_read_ns5__HeaviestAxleWeightCharacteristic(soap*, ns5__HeaviestAxleWeightCharacteristic*) deserialize from a stream
/// - int soap_write_ns5__HeaviestAxleWeightCharacteristic(soap*, ns5__HeaviestAxleWeightCharacteristic*) serialize to a stream
/// - ns5__HeaviestAxleWeightCharacteristic* ns5__HeaviestAxleWeightCharacteristic::soap_dup(soap*) returns deep copy of ns5__HeaviestAxleWeightCharacteristic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__HeaviestAxleWeightCharacteristic::soap_del() deep deletes ns5__HeaviestAxleWeightCharacteristic data members, use only after ns5__HeaviestAxleWeightCharacteristic::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__HeaviestAxleWeightCharacteristic : public xsd__anyType
{ public:
/// Element "comparisonOperator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComparisonOperatorEnum.
    enum ns5__ComparisonOperatorEnum     comparisonOperator             1;	///< Required element.
/// Element "heaviestAxleWeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Tonnes.
    ns5__Tonnes                          heaviestAxleWeight             1;	///< Required element.
/// Element "heaviestAxleWeightCharacteristicExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  heaviestAxleWeightCharacteristicExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":HeightCharacteristic is a complexType.
///
/// class ns5__HeightCharacteristic operations:
/// - ns5__HeightCharacteristic* soap_new_ns5__HeightCharacteristic(soap*) allocate and default initialize
/// - ns5__HeightCharacteristic* soap_new_ns5__HeightCharacteristic(soap*, int num) allocate array and default initialize values
/// - ns5__HeightCharacteristic* soap_new_req_ns5__HeightCharacteristic(soap*, ...) allocate, set required members
/// - ns5__HeightCharacteristic* soap_new_set_ns5__HeightCharacteristic(soap*, ...) allocate, set all public members
/// - ns5__HeightCharacteristic::soap_default(soap*) default initialize members
/// - int soap_read_ns5__HeightCharacteristic(soap*, ns5__HeightCharacteristic*) deserialize from a stream
/// - int soap_write_ns5__HeightCharacteristic(soap*, ns5__HeightCharacteristic*) serialize to a stream
/// - ns5__HeightCharacteristic* ns5__HeightCharacteristic::soap_dup(soap*) returns deep copy of ns5__HeightCharacteristic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__HeightCharacteristic::soap_del() deep deletes ns5__HeightCharacteristic data members, use only after ns5__HeightCharacteristic::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__HeightCharacteristic : public xsd__anyType
{ public:
/// Element "comparisonOperator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComparisonOperatorEnum.
    enum ns5__ComparisonOperatorEnum     comparisonOperator             1;	///< Required element.
/// Element "vehicleHeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat                   vehicleHeight                  1;	///< Required element.
/// Element "heightCharacteristicExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  heightCharacteristicExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Humidity is a complexType.
///
/// class ns5__Humidity operations:
/// - ns5__Humidity* soap_new_ns5__Humidity(soap*) allocate and default initialize
/// - ns5__Humidity* soap_new_ns5__Humidity(soap*, int num) allocate array and default initialize values
/// - ns5__Humidity* soap_new_req_ns5__Humidity(soap*, ...) allocate, set required members
/// - ns5__Humidity* soap_new_set_ns5__Humidity(soap*, ...) allocate, set all public members
/// - ns5__Humidity::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Humidity(soap*, ns5__Humidity*) deserialize from a stream
/// - int soap_write_ns5__Humidity(soap*, ns5__Humidity*) serialize to a stream
/// - ns5__Humidity* ns5__Humidity::soap_dup(soap*) returns deep copy of ns5__Humidity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Humidity::soap_del() deep deletes ns5__Humidity data members, use only after ns5__Humidity::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Humidity : public xsd__anyType
{ public:
/// Element "relativeHumidity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage                      relativeHumidity               1;	///< Required element.
/// Element "humidityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  humidityExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Impact is a complexType.
///
/// class ns5__Impact operations:
/// - ns5__Impact* soap_new_ns5__Impact(soap*) allocate and default initialize
/// - ns5__Impact* soap_new_ns5__Impact(soap*, int num) allocate array and default initialize values
/// - ns5__Impact* soap_new_req_ns5__Impact(soap*, ...) allocate, set required members
/// - ns5__Impact* soap_new_set_ns5__Impact(soap*, ...) allocate, set all public members
/// - ns5__Impact::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Impact(soap*, ns5__Impact*) deserialize from a stream
/// - int soap_write_ns5__Impact(soap*, ns5__Impact*) serialize to a stream
/// - ns5__Impact* ns5__Impact::soap_dup(soap*) returns deep copy of ns5__Impact, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Impact::soap_del() deep deletes ns5__Impact data members, use only after ns5__Impact::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Impact : public xsd__anyType
{ public:
/// Element "capacityRemaining" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     capacityRemaining              0;	///< Optional element.
/// Element "numberOfLanesRestricted" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfLanesRestricted        0;	///< Optional element.
/// Element "numberOfOperationalLanes" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfOperationalLanes       0;	///< Optional element.
/// Element "originalNumberOfLanes" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             originalNumberOfLanes          0;	///< Optional element.
/// Element "residualRoadWidth" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  residualRoadWidth              0;	///< Optional element.
/// Element "trafficConstrictionType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficConstrictionTypeEnum.
    enum ns5__TrafficConstrictionTypeEnum*  trafficConstrictionType        0;	///< Optional element.
/// Element "delays" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Delays.
    ns5__Delays*                         delays                         0;	///< Optional element.
/// Element "impactExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  impactExtension                0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier is a complexType.
///
/// class ns5__InternationalIdentifier operations:
/// - ns5__InternationalIdentifier* soap_new_ns5__InternationalIdentifier(soap*) allocate and default initialize
/// - ns5__InternationalIdentifier* soap_new_ns5__InternationalIdentifier(soap*, int num) allocate array and default initialize values
/// - ns5__InternationalIdentifier* soap_new_req_ns5__InternationalIdentifier(soap*, ...) allocate, set required members
/// - ns5__InternationalIdentifier* soap_new_set_ns5__InternationalIdentifier(soap*, ...) allocate, set all public members
/// - ns5__InternationalIdentifier::soap_default(soap*) default initialize members
/// - int soap_read_ns5__InternationalIdentifier(soap*, ns5__InternationalIdentifier*) deserialize from a stream
/// - int soap_write_ns5__InternationalIdentifier(soap*, ns5__InternationalIdentifier*) serialize to a stream
/// - ns5__InternationalIdentifier* ns5__InternationalIdentifier::soap_dup(soap*) returns deep copy of ns5__InternationalIdentifier, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__InternationalIdentifier::soap_del() deep deletes ns5__InternationalIdentifier data members, use only after ns5__InternationalIdentifier::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__InternationalIdentifier : public xsd__anyType
{ public:
/// Element "country" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":CountryEnum.
    enum ns5__CountryEnum                country                        1;	///< Required element.
/// Element "nationalIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          nationalIdentifier             1;	///< Required element.
/// Element "internationalIdentifierExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  internationalIdentifierExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":LengthCharacteristic is a complexType.
///
/// class ns5__LengthCharacteristic operations:
/// - ns5__LengthCharacteristic* soap_new_ns5__LengthCharacteristic(soap*) allocate and default initialize
/// - ns5__LengthCharacteristic* soap_new_ns5__LengthCharacteristic(soap*, int num) allocate array and default initialize values
/// - ns5__LengthCharacteristic* soap_new_req_ns5__LengthCharacteristic(soap*, ...) allocate, set required members
/// - ns5__LengthCharacteristic* soap_new_set_ns5__LengthCharacteristic(soap*, ...) allocate, set all public members
/// - ns5__LengthCharacteristic::soap_default(soap*) default initialize members
/// - int soap_read_ns5__LengthCharacteristic(soap*, ns5__LengthCharacteristic*) deserialize from a stream
/// - int soap_write_ns5__LengthCharacteristic(soap*, ns5__LengthCharacteristic*) serialize to a stream
/// - ns5__LengthCharacteristic* ns5__LengthCharacteristic::soap_dup(soap*) returns deep copy of ns5__LengthCharacteristic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__LengthCharacteristic::soap_del() deep deletes ns5__LengthCharacteristic data members, use only after ns5__LengthCharacteristic::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__LengthCharacteristic : public xsd__anyType
{ public:
/// Element "comparisonOperator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComparisonOperatorEnum.
    enum ns5__ComparisonOperatorEnum     comparisonOperator             1;	///< Required element.
/// Element "vehicleLength" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat                   vehicleLength                  1;	///< Required element.
/// Element "lengthCharacteristicExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  lengthCharacteristicExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":LifeCycleManagement is a complexType.
///
/// class ns5__LifeCycleManagement operations:
/// - ns5__LifeCycleManagement* soap_new_ns5__LifeCycleManagement(soap*) allocate and default initialize
/// - ns5__LifeCycleManagement* soap_new_ns5__LifeCycleManagement(soap*, int num) allocate array and default initialize values
/// - ns5__LifeCycleManagement* soap_new_req_ns5__LifeCycleManagement(soap*, ...) allocate, set required members
/// - ns5__LifeCycleManagement* soap_new_set_ns5__LifeCycleManagement(soap*, ...) allocate, set all public members
/// - ns5__LifeCycleManagement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__LifeCycleManagement(soap*, ns5__LifeCycleManagement*) deserialize from a stream
/// - int soap_write_ns5__LifeCycleManagement(soap*, ns5__LifeCycleManagement*) serialize to a stream
/// - ns5__LifeCycleManagement* ns5__LifeCycleManagement::soap_dup(soap*) returns deep copy of ns5__LifeCycleManagement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__LifeCycleManagement::soap_del() deep deletes ns5__LifeCycleManagement data members, use only after ns5__LifeCycleManagement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__LifeCycleManagement : public xsd__anyType
{ public:
/// Element "cancel" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        cancel                         0;	///< Optional element.
/// Element "end" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        end                            0;	///< Optional element.
/// Element "lifeCycleManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  lifeCycleManagementExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":LinearTrafficView is a complexType.
///
/// class ns5__LinearTrafficView operations:
/// - ns5__LinearTrafficView* soap_new_ns5__LinearTrafficView(soap*) allocate and default initialize
/// - ns5__LinearTrafficView* soap_new_ns5__LinearTrafficView(soap*, int num) allocate array and default initialize values
/// - ns5__LinearTrafficView* soap_new_req_ns5__LinearTrafficView(soap*, ...) allocate, set required members
/// - ns5__LinearTrafficView* soap_new_set_ns5__LinearTrafficView(soap*, ...) allocate, set all public members
/// - ns5__LinearTrafficView::soap_default(soap*) default initialize members
/// - int soap_read_ns5__LinearTrafficView(soap*, ns5__LinearTrafficView*) deserialize from a stream
/// - int soap_write_ns5__LinearTrafficView(soap*, ns5__LinearTrafficView*) serialize to a stream
/// - ns5__LinearTrafficView* ns5__LinearTrafficView::soap_dup(soap*) returns deep copy of ns5__LinearTrafficView, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__LinearTrafficView::soap_del() deep deletes ns5__LinearTrafficView data members, use only after ns5__LinearTrafficView::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__LinearTrafficView : public xsd__anyType
{ public:
/// Element "linearPredefinedLocationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference                       linearPredefinedLocationReference 1;	///< Required element.
/// Vector of ns5__TrafficViewRecord* of length 1..unbounded.
    std::vector<ns5__TrafficViewRecord*> trafficViewRecord              1;
/// Element "linearTrafficViewExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  linearTrafficViewExtension     0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Location is an abstract complexType.
///
/// class ns5__Location operations:
/// - ns5__Location* soap_new_ns5__Location(soap*) allocate and default initialize
/// - ns5__Location* soap_new_ns5__Location(soap*, int num) allocate array and default initialize values
/// - ns5__Location* soap_new_req_ns5__Location(soap*, ...) allocate, set required members
/// - ns5__Location* soap_new_set_ns5__Location(soap*, ...) allocate, set all public members
/// - ns5__Location::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Location(soap*, ns5__Location*) deserialize from a stream
/// - int soap_write_ns5__Location(soap*, ns5__Location*) serialize to a stream
/// - ns5__Location* ns5__Location::soap_dup(soap*) returns deep copy of ns5__Location, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Location::soap_del() deep deletes ns5__Location data members, use only after ns5__Location::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Location : public xsd__anyType
{ public:
/// Vector of ns5__ExternalReferencing* of length 0..unbounded.
    std::vector<ns5__ExternalReferencing*> externalReferencing            0;
/// Element "locationForDisplay" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               locationForDisplay             0;	///< Optional element.
/// Element "locationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":LocationCharacteristicsOverride is a complexType.
///
/// class ns5__LocationCharacteristicsOverride operations:
/// - ns5__LocationCharacteristicsOverride* soap_new_ns5__LocationCharacteristicsOverride(soap*) allocate and default initialize
/// - ns5__LocationCharacteristicsOverride* soap_new_ns5__LocationCharacteristicsOverride(soap*, int num) allocate array and default initialize values
/// - ns5__LocationCharacteristicsOverride* soap_new_req_ns5__LocationCharacteristicsOverride(soap*, ...) allocate, set required members
/// - ns5__LocationCharacteristicsOverride* soap_new_set_ns5__LocationCharacteristicsOverride(soap*, ...) allocate, set all public members
/// - ns5__LocationCharacteristicsOverride::soap_default(soap*) default initialize members
/// - int soap_read_ns5__LocationCharacteristicsOverride(soap*, ns5__LocationCharacteristicsOverride*) deserialize from a stream
/// - int soap_write_ns5__LocationCharacteristicsOverride(soap*, ns5__LocationCharacteristicsOverride*) serialize to a stream
/// - ns5__LocationCharacteristicsOverride* ns5__LocationCharacteristicsOverride::soap_dup(soap*) returns deep copy of ns5__LocationCharacteristicsOverride, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__LocationCharacteristicsOverride::soap_del() deep deletes ns5__LocationCharacteristicsOverride data members, use only after ns5__LocationCharacteristicsOverride::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__LocationCharacteristicsOverride : public xsd__anyType
{ public:
/// Element "measurementLanesOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":LaneEnum.
    enum ns5__LaneEnum*                  measurementLanesOverride       0;	///< Optional element.
/// Element "reversedFlow" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        reversedFlow                   0;	///< Optional element.
/// Element "locationCharacteristicsOverrideExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationCharacteristicsOverrideExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MaintenanceVehicles is a complexType.
///
/// class ns5__MaintenanceVehicles operations:
/// - ns5__MaintenanceVehicles* soap_new_ns5__MaintenanceVehicles(soap*) allocate and default initialize
/// - ns5__MaintenanceVehicles* soap_new_ns5__MaintenanceVehicles(soap*, int num) allocate array and default initialize values
/// - ns5__MaintenanceVehicles* soap_new_req_ns5__MaintenanceVehicles(soap*, ...) allocate, set required members
/// - ns5__MaintenanceVehicles* soap_new_set_ns5__MaintenanceVehicles(soap*, ...) allocate, set all public members
/// - ns5__MaintenanceVehicles::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MaintenanceVehicles(soap*, ns5__MaintenanceVehicles*) deserialize from a stream
/// - int soap_write_ns5__MaintenanceVehicles(soap*, ns5__MaintenanceVehicles*) serialize to a stream
/// - ns5__MaintenanceVehicles* ns5__MaintenanceVehicles::soap_dup(soap*) returns deep copy of ns5__MaintenanceVehicles, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MaintenanceVehicles::soap_del() deep deletes ns5__MaintenanceVehicles data members, use only after ns5__MaintenanceVehicles::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MaintenanceVehicles : public xsd__anyType
{ public:
/// Element "numberOfMaintenanceVehicles" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfMaintenanceVehicles    0;	///< Optional element.
/// Vector of enum ns5__MaintenanceVehicleActionsEnum of length 0..unbounded.
    std::vector<enum ns5__MaintenanceVehicleActionsEnum> maintenanceVehicleActions      0;
/// Element "maintenanceVehiclesExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  maintenanceVehiclesExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Management is a complexType.
///
/// class ns5__Management operations:
/// - ns5__Management* soap_new_ns5__Management(soap*) allocate and default initialize
/// - ns5__Management* soap_new_ns5__Management(soap*, int num) allocate array and default initialize values
/// - ns5__Management* soap_new_req_ns5__Management(soap*, ...) allocate, set required members
/// - ns5__Management* soap_new_set_ns5__Management(soap*, ...) allocate, set all public members
/// - ns5__Management::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Management(soap*, ns5__Management*) deserialize from a stream
/// - int soap_write_ns5__Management(soap*, ns5__Management*) serialize to a stream
/// - ns5__Management* ns5__Management::soap_dup(soap*) returns deep copy of ns5__Management, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Management::soap_del() deep deletes ns5__Management data members, use only after ns5__Management::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Management : public xsd__anyType
{ public:
/// Element "lifeCycleManagement" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":LifeCycleManagement.
    ns5__LifeCycleManagement*            lifeCycleManagement            0;	///< Optional element.
/// Element "filterExitManagement" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":FilterExitManagement.
    ns5__FilterExitManagement*           filterExitManagement           0;	///< Optional element.
/// Element "managementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  managementExtension            0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MeasuredValue is a complexType.
///
/// class ns5__MeasuredValue operations:
/// - ns5__MeasuredValue* soap_new_ns5__MeasuredValue(soap*) allocate and default initialize
/// - ns5__MeasuredValue* soap_new_ns5__MeasuredValue(soap*, int num) allocate array and default initialize values
/// - ns5__MeasuredValue* soap_new_req_ns5__MeasuredValue(soap*, ...) allocate, set required members
/// - ns5__MeasuredValue* soap_new_set_ns5__MeasuredValue(soap*, ...) allocate, set all public members
/// - ns5__MeasuredValue::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MeasuredValue(soap*, ns5__MeasuredValue*) deserialize from a stream
/// - int soap_write_ns5__MeasuredValue(soap*, ns5__MeasuredValue*) serialize to a stream
/// - ns5__MeasuredValue* ns5__MeasuredValue::soap_dup(soap*) returns deep copy of ns5__MeasuredValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MeasuredValue::soap_del() deep deletes ns5__MeasuredValue data members, use only after ns5__MeasuredValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MeasuredValue : public xsd__anyType
{ public:
/// Element "measurementEquipmentTypeUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             measurementEquipmentTypeUsed   0;	///< Optional element.
/// Element "locationCharacteristicsOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":LocationCharacteristicsOverride.
    ns5__LocationCharacteristicsOverride*  locationCharacteristicsOverride 0;	///< Optional element.
/// Element "basicDataValue" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":BasicDataValue.
    ns5__BasicDataValue*                 basicDataValue                 1;	///< Required element.
/// Element "measuredValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  measuredValueExtension         0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MeasurementSiteRecord is a complexType.
///
/// class ns5__MeasurementSiteRecord operations:
/// - ns5__MeasurementSiteRecord* soap_new_ns5__MeasurementSiteRecord(soap*) allocate and default initialize
/// - ns5__MeasurementSiteRecord* soap_new_ns5__MeasurementSiteRecord(soap*, int num) allocate array and default initialize values
/// - ns5__MeasurementSiteRecord* soap_new_req_ns5__MeasurementSiteRecord(soap*, ...) allocate, set required members
/// - ns5__MeasurementSiteRecord* soap_new_set_ns5__MeasurementSiteRecord(soap*, ...) allocate, set all public members
/// - ns5__MeasurementSiteRecord::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MeasurementSiteRecord(soap*, ns5__MeasurementSiteRecord*) deserialize from a stream
/// - int soap_write_ns5__MeasurementSiteRecord(soap*, ns5__MeasurementSiteRecord*) serialize to a stream
/// - ns5__MeasurementSiteRecord* ns5__MeasurementSiteRecord::soap_dup(soap*) returns deep copy of ns5__MeasurementSiteRecord, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MeasurementSiteRecord::soap_del() deep deletes ns5__MeasurementSiteRecord data members, use only after ns5__MeasurementSiteRecord::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MeasurementSiteRecord : public xsd__anyType
{ public:
/// Element "measurementSiteRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             measurementSiteRecordVersion   0;	///< Optional element.
/// Element "measurementSiteRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       measurementSiteRecordVersionTime 0;	///< Optional element.
/// Element "computationMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationMethod              0;	///< Optional element.
/// Element "measurementEquipmentReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         measurementEquipmentReference  0;	///< Optional element.
/// Element "measurementEquipmentTypeUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             measurementEquipmentTypeUsed   0;	///< Optional element.
/// Element "measurementSiteName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             measurementSiteName            0;	///< Optional element.
/// Element "measurementSiteNumberOfLanes" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             measurementSiteNumberOfLanes   0;	///< Optional element.
/// Element "measurementSiteIdentification" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         measurementSiteIdentification  0;	///< Optional element.
/// Element "measurementSide" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DirectionEnum.
    enum ns5__DirectionEnum*             measurementSide                0;	///< Optional element.
/// Vector of measurementSpecificCharacteristics of length 1..unbounded.
    std::vector<
/// class _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics operations:
/// - _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics* soap_new__ns5__MeasurementSiteRecord_measurementSpecificCharacteristics(soap*) allocate and default initialize
/// - _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics* soap_new__ns5__MeasurementSiteRecord_measurementSpecificCharacteristics(soap*, int num) allocate array and default initialize values
/// - _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics* soap_new_req__ns5__MeasurementSiteRecord_measurementSpecificCharacteristics(soap*, ...) allocate, set required members
/// - _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics* soap_new_set__ns5__MeasurementSiteRecord_measurementSpecificCharacteristics(soap*, ...) allocate, set all public members
/// - _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics::soap_default(soap*) default initialize members
/// - int soap_read__ns5__MeasurementSiteRecord_measurementSpecificCharacteristics(soap*, _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics*) deserialize from a stream
/// - int soap_write__ns5__MeasurementSiteRecord_measurementSpecificCharacteristics(soap*, _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics*) serialize to a stream
/// - _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics* _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics::soap_dup(soap*) returns deep copy of _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics::soap_del() deep deletes _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics data members, use only after _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns5__MeasurementSiteRecord_measurementSpecificCharacteristics
    {
/// INHERITED FROM ns5__MeasurementSpecificCharacteristics:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "specificLane" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":LaneEnum.
    enum ns5__LaneEnum*                  specificLane                   0;	///< Optional element.
/// Element "specificMeasurementValueType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MeasuredOrDerivedDataTypeEnum.
    enum ns5__MeasuredOrDerivedDataTypeEnum  specificMeasurementValueType   1;	///< Required element.
/// Element "specificVehicleCharacteristics" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         specificVehicleCharacteristics 0;	///< Optional element.
/// Element "measurementSpecificCharacteristicsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  measurementSpecificCharacteristicsExtension 0;	///< Optional element.
//  END OF INHERITED FROM ns5__MeasurementSpecificCharacteristics
/// Attribute "index" of XSD type xs:int.
   @int                                  index                          1;	///< Required attribute.
    }>                                   measurementSpecificCharacteristics 1;
/// Element "measurementSiteLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Location.
    ns5__Location*                       measurementSiteLocation        1;	///< Required element.
/// Element "measurementSiteRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  measurementSiteRecordExtension 0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MeasurementSiteTable is a complexType.
///
/// class ns5__MeasurementSiteTable operations:
/// - ns5__MeasurementSiteTable* soap_new_ns5__MeasurementSiteTable(soap*) allocate and default initialize
/// - ns5__MeasurementSiteTable* soap_new_ns5__MeasurementSiteTable(soap*, int num) allocate array and default initialize values
/// - ns5__MeasurementSiteTable* soap_new_req_ns5__MeasurementSiteTable(soap*, ...) allocate, set required members
/// - ns5__MeasurementSiteTable* soap_new_set_ns5__MeasurementSiteTable(soap*, ...) allocate, set all public members
/// - ns5__MeasurementSiteTable::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MeasurementSiteTable(soap*, ns5__MeasurementSiteTable*) deserialize from a stream
/// - int soap_write_ns5__MeasurementSiteTable(soap*, ns5__MeasurementSiteTable*) serialize to a stream
/// - ns5__MeasurementSiteTable* ns5__MeasurementSiteTable::soap_dup(soap*) returns deep copy of ns5__MeasurementSiteTable, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MeasurementSiteTable::soap_del() deep deletes ns5__MeasurementSiteTable data members, use only after ns5__MeasurementSiteTable::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MeasurementSiteTable : public xsd__anyType
{ public:
/// Element "measurementSiteTableIdentification" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         measurementSiteTableIdentification 0;	///< Optional element.
/// Element "measurementSiteTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             measurementSiteTableVersion    0;	///< Optional element.
/// Vector of ns5__MeasurementSiteRecord* of length 1..unbounded.
    std::vector<ns5__MeasurementSiteRecord*> measurementSiteRecord          1;
/// Element "measurementSiteTableExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  measurementSiteTableExtension  0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MeasurementSpecificCharacteristics is a complexType.
///
/// class ns5__MeasurementSpecificCharacteristics operations:
/// - ns5__MeasurementSpecificCharacteristics* soap_new_ns5__MeasurementSpecificCharacteristics(soap*) allocate and default initialize
/// - ns5__MeasurementSpecificCharacteristics* soap_new_ns5__MeasurementSpecificCharacteristics(soap*, int num) allocate array and default initialize values
/// - ns5__MeasurementSpecificCharacteristics* soap_new_req_ns5__MeasurementSpecificCharacteristics(soap*, ...) allocate, set required members
/// - ns5__MeasurementSpecificCharacteristics* soap_new_set_ns5__MeasurementSpecificCharacteristics(soap*, ...) allocate, set all public members
/// - ns5__MeasurementSpecificCharacteristics::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MeasurementSpecificCharacteristics(soap*, ns5__MeasurementSpecificCharacteristics*) deserialize from a stream
/// - int soap_write_ns5__MeasurementSpecificCharacteristics(soap*, ns5__MeasurementSpecificCharacteristics*) serialize to a stream
/// - ns5__MeasurementSpecificCharacteristics* ns5__MeasurementSpecificCharacteristics::soap_dup(soap*) returns deep copy of ns5__MeasurementSpecificCharacteristics, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MeasurementSpecificCharacteristics::soap_del() deep deletes ns5__MeasurementSpecificCharacteristics data members, use only after ns5__MeasurementSpecificCharacteristics::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MeasurementSpecificCharacteristics : public xsd__anyType
{ public:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "specificLane" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":LaneEnum.
    enum ns5__LaneEnum*                  specificLane                   0;	///< Optional element.
/// Element "specificMeasurementValueType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MeasuredOrDerivedDataTypeEnum.
    enum ns5__MeasuredOrDerivedDataTypeEnum  specificMeasurementValueType   1;	///< Required element.
/// Element "specificVehicleCharacteristics" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         specificVehicleCharacteristics 0;	///< Optional element.
/// Element "measurementSpecificCharacteristicsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  measurementSpecificCharacteristicsExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Mobility is a complexType.
///
/// class ns5__Mobility operations:
/// - ns5__Mobility* soap_new_ns5__Mobility(soap*) allocate and default initialize
/// - ns5__Mobility* soap_new_ns5__Mobility(soap*, int num) allocate array and default initialize values
/// - ns5__Mobility* soap_new_req_ns5__Mobility(soap*, ...) allocate, set required members
/// - ns5__Mobility* soap_new_set_ns5__Mobility(soap*, ...) allocate, set all public members
/// - ns5__Mobility::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Mobility(soap*, ns5__Mobility*) deserialize from a stream
/// - int soap_write_ns5__Mobility(soap*, ns5__Mobility*) serialize to a stream
/// - ns5__Mobility* ns5__Mobility::soap_dup(soap*) returns deep copy of ns5__Mobility, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Mobility::soap_del() deep deletes ns5__Mobility data members, use only after ns5__Mobility::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Mobility : public xsd__anyType
{ public:
/// Element "mobilityType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MobilityEnum.
    enum ns5__MobilityEnum               mobilityType                   1;	///< Required element.
/// Element "mobilityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  mobilityExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString is a complexType.
///
/// class ns5__MultilingualString operations:
/// - ns5__MultilingualString* soap_new_ns5__MultilingualString(soap*) allocate and default initialize
/// - ns5__MultilingualString* soap_new_ns5__MultilingualString(soap*, int num) allocate array and default initialize values
/// - ns5__MultilingualString* soap_new_req_ns5__MultilingualString(soap*, ...) allocate, set required members
/// - ns5__MultilingualString* soap_new_set_ns5__MultilingualString(soap*, ...) allocate, set all public members
/// - ns5__MultilingualString::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MultilingualString(soap*, ns5__MultilingualString*) deserialize from a stream
/// - int soap_write_ns5__MultilingualString(soap*, ns5__MultilingualString*) serialize to a stream
/// - ns5__MultilingualString* ns5__MultilingualString::soap_dup(soap*) returns deep copy of ns5__MultilingualString, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MultilingualString::soap_del() deep deletes ns5__MultilingualString data members, use only after ns5__MultilingualString::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MultilingualString : public xsd__anyType
{ public:
/// class _ns5__MultilingualString_values operations:
/// - _ns5__MultilingualString_values* soap_new__ns5__MultilingualString_values(soap*) allocate and default initialize
/// - _ns5__MultilingualString_values* soap_new__ns5__MultilingualString_values(soap*, int num) allocate array and default initialize values
/// - _ns5__MultilingualString_values* soap_new_req__ns5__MultilingualString_values(soap*, ...) allocate, set required members
/// - _ns5__MultilingualString_values* soap_new_set__ns5__MultilingualString_values(soap*, ...) allocate, set all public members
/// - _ns5__MultilingualString_values::soap_default(soap*) default initialize members
/// - int soap_read__ns5__MultilingualString_values(soap*, _ns5__MultilingualString_values*) deserialize from a stream
/// - int soap_write__ns5__MultilingualString_values(soap*, _ns5__MultilingualString_values*) serialize to a stream
/// - _ns5__MultilingualString_values* _ns5__MultilingualString_values::soap_dup(soap*) returns deep copy of _ns5__MultilingualString_values, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns5__MultilingualString_values::soap_del() deep deletes _ns5__MultilingualString_values data members, use only after _ns5__MultilingualString_values::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns5__MultilingualString_values
    {
/// Vector of ns5__MultilingualStringValue* of length 1..unbounded.
    std::vector<ns5__MultilingualStringValue*> value                          1;
    }                                    values                         1;	///< Required element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":NumberOfAxlesCharacteristic is a complexType.
///
/// class ns5__NumberOfAxlesCharacteristic operations:
/// - ns5__NumberOfAxlesCharacteristic* soap_new_ns5__NumberOfAxlesCharacteristic(soap*) allocate and default initialize
/// - ns5__NumberOfAxlesCharacteristic* soap_new_ns5__NumberOfAxlesCharacteristic(soap*, int num) allocate array and default initialize values
/// - ns5__NumberOfAxlesCharacteristic* soap_new_req_ns5__NumberOfAxlesCharacteristic(soap*, ...) allocate, set required members
/// - ns5__NumberOfAxlesCharacteristic* soap_new_set_ns5__NumberOfAxlesCharacteristic(soap*, ...) allocate, set all public members
/// - ns5__NumberOfAxlesCharacteristic::soap_default(soap*) default initialize members
/// - int soap_read_ns5__NumberOfAxlesCharacteristic(soap*, ns5__NumberOfAxlesCharacteristic*) deserialize from a stream
/// - int soap_write_ns5__NumberOfAxlesCharacteristic(soap*, ns5__NumberOfAxlesCharacteristic*) serialize to a stream
/// - ns5__NumberOfAxlesCharacteristic* ns5__NumberOfAxlesCharacteristic::soap_dup(soap*) returns deep copy of ns5__NumberOfAxlesCharacteristic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__NumberOfAxlesCharacteristic::soap_del() deep deletes ns5__NumberOfAxlesCharacteristic data members, use only after ns5__NumberOfAxlesCharacteristic::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__NumberOfAxlesCharacteristic : public xsd__anyType
{ public:
/// Element "comparisonOperator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComparisonOperatorEnum.
    enum ns5__ComparisonOperatorEnum     comparisonOperator             1;	///< Required element.
/// Element "numberOfAxles" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              numberOfAxles                  1;	///< Required element.
/// Element "numberOfAxlesCharacteristicExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  numberOfAxlesCharacteristicExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":OffsetDistance is a complexType.
///
/// class ns5__OffsetDistance operations:
/// - ns5__OffsetDistance* soap_new_ns5__OffsetDistance(soap*) allocate and default initialize
/// - ns5__OffsetDistance* soap_new_ns5__OffsetDistance(soap*, int num) allocate array and default initialize values
/// - ns5__OffsetDistance* soap_new_req_ns5__OffsetDistance(soap*, ...) allocate, set required members
/// - ns5__OffsetDistance* soap_new_set_ns5__OffsetDistance(soap*, ...) allocate, set all public members
/// - ns5__OffsetDistance::soap_default(soap*) default initialize members
/// - int soap_read_ns5__OffsetDistance(soap*, ns5__OffsetDistance*) deserialize from a stream
/// - int soap_write_ns5__OffsetDistance(soap*, ns5__OffsetDistance*) serialize to a stream
/// - ns5__OffsetDistance* ns5__OffsetDistance::soap_dup(soap*) returns deep copy of ns5__OffsetDistance, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__OffsetDistance::soap_del() deep deletes ns5__OffsetDistance data members, use only after ns5__OffsetDistance::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__OffsetDistance : public xsd__anyType
{ public:
/// Element "offsetDistance" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsNonNegativeInteger.
    ns5__MetresAsNonNegativeInteger      offsetDistance                 1;	///< Required element.
/// Element "offsetDistanceExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  offsetDistanceExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":OverallPeriod is a complexType.
///
/// class ns5__OverallPeriod operations:
/// - ns5__OverallPeriod* soap_new_ns5__OverallPeriod(soap*) allocate and default initialize
/// - ns5__OverallPeriod* soap_new_ns5__OverallPeriod(soap*, int num) allocate array and default initialize values
/// - ns5__OverallPeriod* soap_new_req_ns5__OverallPeriod(soap*, ...) allocate, set required members
/// - ns5__OverallPeriod* soap_new_set_ns5__OverallPeriod(soap*, ...) allocate, set all public members
/// - ns5__OverallPeriod::soap_default(soap*) default initialize members
/// - int soap_read_ns5__OverallPeriod(soap*, ns5__OverallPeriod*) deserialize from a stream
/// - int soap_write_ns5__OverallPeriod(soap*, ns5__OverallPeriod*) serialize to a stream
/// - ns5__OverallPeriod* ns5__OverallPeriod::soap_dup(soap*) returns deep copy of ns5__OverallPeriod, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__OverallPeriod::soap_del() deep deletes ns5__OverallPeriod data members, use only after ns5__OverallPeriod::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__OverallPeriod : public xsd__anyType
{ public:
/// Element "overallStartTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        overallStartTime               1;	///< Required element.
/// Element "overallEndTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       overallEndTime                 0;	///< Optional element.
/// Vector of ns5__Period* of length 0..unbounded.
    std::vector<ns5__Period*           > validPeriod                    0;
/// Vector of ns5__Period* of length 0..unbounded.
    std::vector<ns5__Period*           > exceptionPeriod                0;
/// Element "overallPeriodExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  overallPeriodExtension         0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication is an abstract complexType.
///
/// class ns5__PayloadPublication operations:
/// - ns5__PayloadPublication* soap_new_ns5__PayloadPublication(soap*) allocate and default initialize
/// - ns5__PayloadPublication* soap_new_ns5__PayloadPublication(soap*, int num) allocate array and default initialize values
/// - ns5__PayloadPublication* soap_new_req_ns5__PayloadPublication(soap*, ...) allocate, set required members
/// - ns5__PayloadPublication* soap_new_set_ns5__PayloadPublication(soap*, ...) allocate, set all public members
/// - ns5__PayloadPublication::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PayloadPublication(soap*, ns5__PayloadPublication*) deserialize from a stream
/// - int soap_write_ns5__PayloadPublication(soap*, ns5__PayloadPublication*) serialize to a stream
/// - ns5__PayloadPublication* ns5__PayloadPublication::soap_dup(soap*) returns deep copy of ns5__PayloadPublication, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PayloadPublication::soap_del() deep deletes ns5__PayloadPublication data members, use only after ns5__PayloadPublication::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PayloadPublication : public xsd__anyType
{ public:
/// Element "feedDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             feedDescription                0;	///< Optional element.
/// Element "feedType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         feedType                       0;	///< Optional element.
/// Element "publicationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        publicationTime                1;	///< Required element.
/// Element "publicationCreator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        publicationCreator             1;	///< Required element.
/// Element "payloadPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  payloadPublicationExtension    0;	///< Optional element.
/// Attribute "lang" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Language.
   @ns5__Language                        lang                           1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Period is a complexType.
///
/// class ns5__Period operations:
/// - ns5__Period* soap_new_ns5__Period(soap*) allocate and default initialize
/// - ns5__Period* soap_new_ns5__Period(soap*, int num) allocate array and default initialize values
/// - ns5__Period* soap_new_req_ns5__Period(soap*, ...) allocate, set required members
/// - ns5__Period* soap_new_set_ns5__Period(soap*, ...) allocate, set all public members
/// - ns5__Period::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Period(soap*, ns5__Period*) deserialize from a stream
/// - int soap_write_ns5__Period(soap*, ns5__Period*) serialize to a stream
/// - ns5__Period* ns5__Period::soap_dup(soap*) returns deep copy of ns5__Period, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Period::soap_del() deep deletes ns5__Period data members, use only after ns5__Period::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Period : public xsd__anyType
{ public:
/// Element "startOfPeriod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       startOfPeriod                  0;	///< Optional element.
/// Element "endOfPeriod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       endOfPeriod                    0;	///< Optional element.
/// Element "periodName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             periodName                     0;	///< Optional element.
/// Vector of ns5__TimePeriodOfDay* of length 0..unbounded.
    std::vector<ns5__TimePeriodOfDay*  > recurringTimePeriodOfDay       0;
/// Vector of ns5__DayWeekMonth* of length 0..unbounded.
    std::vector<ns5__DayWeekMonth*     > recurringDayWeekMonthPeriod    0;
/// Element "periodExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  periodExtension                0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PointByCoordinates is a complexType.
///
/// class ns5__PointByCoordinates operations:
/// - ns5__PointByCoordinates* soap_new_ns5__PointByCoordinates(soap*) allocate and default initialize
/// - ns5__PointByCoordinates* soap_new_ns5__PointByCoordinates(soap*, int num) allocate array and default initialize values
/// - ns5__PointByCoordinates* soap_new_req_ns5__PointByCoordinates(soap*, ...) allocate, set required members
/// - ns5__PointByCoordinates* soap_new_set_ns5__PointByCoordinates(soap*, ...) allocate, set all public members
/// - ns5__PointByCoordinates::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PointByCoordinates(soap*, ns5__PointByCoordinates*) deserialize from a stream
/// - int soap_write_ns5__PointByCoordinates(soap*, ns5__PointByCoordinates*) serialize to a stream
/// - ns5__PointByCoordinates* ns5__PointByCoordinates::soap_dup(soap*) returns deep copy of ns5__PointByCoordinates, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PointByCoordinates::soap_del() deep deletes ns5__PointByCoordinates data members, use only after ns5__PointByCoordinates::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PointByCoordinates : public xsd__anyType
{ public:
/// Element "bearing" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             bearing                        0;	///< Optional element.
/// Element "pointCoordinates" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               pointCoordinates               1;	///< Required element.
/// Element "pointByCoordinatesExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  pointByCoordinatesExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates is a complexType.
///
/// class ns5__PointCoordinates operations:
/// - ns5__PointCoordinates* soap_new_ns5__PointCoordinates(soap*) allocate and default initialize
/// - ns5__PointCoordinates* soap_new_ns5__PointCoordinates(soap*, int num) allocate array and default initialize values
/// - ns5__PointCoordinates* soap_new_req_ns5__PointCoordinates(soap*, ...) allocate, set required members
/// - ns5__PointCoordinates* soap_new_set_ns5__PointCoordinates(soap*, ...) allocate, set all public members
/// - ns5__PointCoordinates::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PointCoordinates(soap*, ns5__PointCoordinates*) deserialize from a stream
/// - int soap_write_ns5__PointCoordinates(soap*, ns5__PointCoordinates*) serialize to a stream
/// - ns5__PointCoordinates* ns5__PointCoordinates::soap_dup(soap*) returns deep copy of ns5__PointCoordinates, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PointCoordinates::soap_del() deep deletes ns5__PointCoordinates data members, use only after ns5__PointCoordinates::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PointCoordinates : public xsd__anyType
{ public:
/// Element "latitude" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float                           latitude                       1;	///< Required element.
/// Element "longitude" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float                           longitude                      1;	///< Required element.
/// Element "pointCoordinatesExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  pointCoordinatesExtension      0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PollutionMeasurement is a complexType.
///
/// class ns5__PollutionMeasurement operations:
/// - ns5__PollutionMeasurement* soap_new_ns5__PollutionMeasurement(soap*) allocate and default initialize
/// - ns5__PollutionMeasurement* soap_new_ns5__PollutionMeasurement(soap*, int num) allocate array and default initialize values
/// - ns5__PollutionMeasurement* soap_new_req_ns5__PollutionMeasurement(soap*, ...) allocate, set required members
/// - ns5__PollutionMeasurement* soap_new_set_ns5__PollutionMeasurement(soap*, ...) allocate, set all public members
/// - ns5__PollutionMeasurement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PollutionMeasurement(soap*, ns5__PollutionMeasurement*) deserialize from a stream
/// - int soap_write_ns5__PollutionMeasurement(soap*, ns5__PollutionMeasurement*) serialize to a stream
/// - ns5__PollutionMeasurement* ns5__PollutionMeasurement::soap_dup(soap*) returns deep copy of ns5__PollutionMeasurement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PollutionMeasurement::soap_del() deep deletes ns5__PollutionMeasurement data members, use only after ns5__PollutionMeasurement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PollutionMeasurement : public xsd__anyType
{ public:
/// Element "pollutantConcentration" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConcentrationMicrogramsPerCubicMetre.
    ns5__ConcentrationMicrogramsPerCubicMetre  pollutantConcentration         1;	///< Required element.
/// Element "pollutantType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PollutantTypeEnum.
    enum ns5__PollutantTypeEnum          pollutantType                  1;	///< Required element.
/// Element "pollutionMeasurementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  pollutionMeasurementExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PrecipitationDetail is a complexType.
///
/// class ns5__PrecipitationDetail operations:
/// - ns5__PrecipitationDetail* soap_new_ns5__PrecipitationDetail(soap*) allocate and default initialize
/// - ns5__PrecipitationDetail* soap_new_ns5__PrecipitationDetail(soap*, int num) allocate array and default initialize values
/// - ns5__PrecipitationDetail* soap_new_req_ns5__PrecipitationDetail(soap*, ...) allocate, set required members
/// - ns5__PrecipitationDetail* soap_new_set_ns5__PrecipitationDetail(soap*, ...) allocate, set all public members
/// - ns5__PrecipitationDetail::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PrecipitationDetail(soap*, ns5__PrecipitationDetail*) deserialize from a stream
/// - int soap_write_ns5__PrecipitationDetail(soap*, ns5__PrecipitationDetail*) serialize to a stream
/// - ns5__PrecipitationDetail* ns5__PrecipitationDetail::soap_dup(soap*) returns deep copy of ns5__PrecipitationDetail, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PrecipitationDetail::soap_del() deep deletes ns5__PrecipitationDetail data members, use only after ns5__PrecipitationDetail::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PrecipitationDetail : public xsd__anyType
{ public:
/// Element "depositionDepth" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  depositionDepth                0;	///< Optional element.
/// Element "precipitationIntensity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":IntensityMillimetresPerHour.
    ns5__IntensityMillimetresPerHour*    precipitationIntensity         0;	///< Optional element.
/// Element "precipitationType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PrecipitationTypeEnum.
    enum ns5__PrecipitationTypeEnum*     precipitationType              0;	///< Optional element.
/// Element "precipitationDetailExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  precipitationDetailExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PredefinedLocation is a complexType.
///
/// class ns5__PredefinedLocation operations:
/// - ns5__PredefinedLocation* soap_new_ns5__PredefinedLocation(soap*) allocate and default initialize
/// - ns5__PredefinedLocation* soap_new_ns5__PredefinedLocation(soap*, int num) allocate array and default initialize values
/// - ns5__PredefinedLocation* soap_new_req_ns5__PredefinedLocation(soap*, ...) allocate, set required members
/// - ns5__PredefinedLocation* soap_new_set_ns5__PredefinedLocation(soap*, ...) allocate, set all public members
/// - ns5__PredefinedLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PredefinedLocation(soap*, ns5__PredefinedLocation*) deserialize from a stream
/// - int soap_write_ns5__PredefinedLocation(soap*, ns5__PredefinedLocation*) serialize to a stream
/// - ns5__PredefinedLocation* ns5__PredefinedLocation::soap_dup(soap*) returns deep copy of ns5__PredefinedLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PredefinedLocation::soap_del() deep deletes ns5__PredefinedLocation data members, use only after ns5__PredefinedLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PredefinedLocation : public xsd__anyType
{ public:
/// Element "predefinedLocationName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             predefinedLocationName         0;	///< Optional element.
/// Element "predefinedLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Location.
    ns5__Location*                       predefinedLocation             1;	///< Required element.
/// Element "predefinedLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  predefinedLocationExtension    0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PredefinedLocationSet is a complexType.
///
/// class ns5__PredefinedLocationSet operations:
/// - ns5__PredefinedLocationSet* soap_new_ns5__PredefinedLocationSet(soap*) allocate and default initialize
/// - ns5__PredefinedLocationSet* soap_new_ns5__PredefinedLocationSet(soap*, int num) allocate array and default initialize values
/// - ns5__PredefinedLocationSet* soap_new_req_ns5__PredefinedLocationSet(soap*, ...) allocate, set required members
/// - ns5__PredefinedLocationSet* soap_new_set_ns5__PredefinedLocationSet(soap*, ...) allocate, set all public members
/// - ns5__PredefinedLocationSet::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PredefinedLocationSet(soap*, ns5__PredefinedLocationSet*) deserialize from a stream
/// - int soap_write_ns5__PredefinedLocationSet(soap*, ns5__PredefinedLocationSet*) serialize to a stream
/// - ns5__PredefinedLocationSet* ns5__PredefinedLocationSet::soap_dup(soap*) returns deep copy of ns5__PredefinedLocationSet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PredefinedLocationSet::soap_del() deep deletes ns5__PredefinedLocationSet data members, use only after ns5__PredefinedLocationSet::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PredefinedLocationSet : public xsd__anyType
{ public:
/// Element "predefinedLocationSetName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             predefinedLocationSetName      0;	///< Optional element.
/// Element "predefinedLocationSetVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             predefinedLocationSetVersion   0;	///< Optional element.
/// Vector of ns5__PredefinedLocation* of length 1..unbounded.
    std::vector<ns5__PredefinedLocation*> predefinedLocation             1;
/// Element "predefinedLocationSetExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  predefinedLocationSetExtension 0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ReferenceSettings is a complexType.
///
/// class ns5__ReferenceSettings operations:
/// - ns5__ReferenceSettings* soap_new_ns5__ReferenceSettings(soap*) allocate and default initialize
/// - ns5__ReferenceSettings* soap_new_ns5__ReferenceSettings(soap*, int num) allocate array and default initialize values
/// - ns5__ReferenceSettings* soap_new_req_ns5__ReferenceSettings(soap*, ...) allocate, set required members
/// - ns5__ReferenceSettings* soap_new_set_ns5__ReferenceSettings(soap*, ...) allocate, set all public members
/// - ns5__ReferenceSettings::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ReferenceSettings(soap*, ns5__ReferenceSettings*) deserialize from a stream
/// - int soap_write_ns5__ReferenceSettings(soap*, ns5__ReferenceSettings*) serialize to a stream
/// - ns5__ReferenceSettings* ns5__ReferenceSettings::soap_dup(soap*) returns deep copy of ns5__ReferenceSettings, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ReferenceSettings::soap_del() deep deletes ns5__ReferenceSettings data members, use only after ns5__ReferenceSettings::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ReferenceSettings : public xsd__anyType
{ public:
/// Element "predefinedLocationSetReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference*                      predefinedLocationSetReference 0;	///< Optional element.
/// Element "trafficStatusDefault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficStatusEnum.
    enum ns5__TrafficStatusEnum*         trafficStatusDefault           0;	///< Optional element.
/// Element "referenceSettingsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  referenceSettingsExtension     0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePoint is a complexType.
///
/// class ns5__RoadsideReferencePoint operations:
/// - ns5__RoadsideReferencePoint* soap_new_ns5__RoadsideReferencePoint(soap*) allocate and default initialize
/// - ns5__RoadsideReferencePoint* soap_new_ns5__RoadsideReferencePoint(soap*, int num) allocate array and default initialize values
/// - ns5__RoadsideReferencePoint* soap_new_req_ns5__RoadsideReferencePoint(soap*, ...) allocate, set required members
/// - ns5__RoadsideReferencePoint* soap_new_set_ns5__RoadsideReferencePoint(soap*, ...) allocate, set all public members
/// - ns5__RoadsideReferencePoint::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadsideReferencePoint(soap*, ns5__RoadsideReferencePoint*) deserialize from a stream
/// - int soap_write_ns5__RoadsideReferencePoint(soap*, ns5__RoadsideReferencePoint*) serialize to a stream
/// - ns5__RoadsideReferencePoint* ns5__RoadsideReferencePoint::soap_dup(soap*) returns deep copy of ns5__RoadsideReferencePoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadsideReferencePoint::soap_del() deep deletes ns5__RoadsideReferencePoint data members, use only after ns5__RoadsideReferencePoint::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadsideReferencePoint : public xsd__anyType
{ public:
/// Element "roadsideReferencePointIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          roadsideReferencePointIdentifier 1;	///< Required element.
/// Element "administrativeArea" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             administrativeArea             0;	///< Optional element.
/// Element "roadName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             roadName                       0;	///< Optional element.
/// Element "roadNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         roadNumber                     0;	///< Optional element.
/// Element "directionBound" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DirectionEnum.
    enum ns5__DirectionEnum*             directionBound                 0;	///< Optional element.
/// Element "directionRelative" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ReferencePointDirectionEnum.
    enum ns5__ReferencePointDirectionEnum*  directionRelative              0;	///< Optional element.
/// Element "distanceFromPrevious" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  distanceFromPrevious           0;	///< Optional element.
/// Element "distanceToNext" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  distanceToNext                 0;	///< Optional element.
/// Element "elevatedRoadSection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        elevatedRoadSection            0;	///< Optional element.
/// Element "roadsideReferencePointDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             roadsideReferencePointDescription 0;	///< Optional element.
/// Element "roadsideReferencePointDistance" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  roadsideReferencePointDistance 0;	///< Optional element.
/// Element "roadsideReferencePointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadsideReferencePointExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePointLinear is a complexType.
///
/// class ns5__RoadsideReferencePointLinear operations:
/// - ns5__RoadsideReferencePointLinear* soap_new_ns5__RoadsideReferencePointLinear(soap*) allocate and default initialize
/// - ns5__RoadsideReferencePointLinear* soap_new_ns5__RoadsideReferencePointLinear(soap*, int num) allocate array and default initialize values
/// - ns5__RoadsideReferencePointLinear* soap_new_req_ns5__RoadsideReferencePointLinear(soap*, ...) allocate, set required members
/// - ns5__RoadsideReferencePointLinear* soap_new_set_ns5__RoadsideReferencePointLinear(soap*, ...) allocate, set all public members
/// - ns5__RoadsideReferencePointLinear::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadsideReferencePointLinear(soap*, ns5__RoadsideReferencePointLinear*) deserialize from a stream
/// - int soap_write_ns5__RoadsideReferencePointLinear(soap*, ns5__RoadsideReferencePointLinear*) serialize to a stream
/// - ns5__RoadsideReferencePointLinear* ns5__RoadsideReferencePointLinear::soap_dup(soap*) returns deep copy of ns5__RoadsideReferencePointLinear, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadsideReferencePointLinear::soap_del() deep deletes ns5__RoadsideReferencePointLinear data members, use only after ns5__RoadsideReferencePointLinear::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadsideReferencePointLinear : public xsd__anyType
{ public:
/// Element "roadsideReferencePointPrimaryLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePointPrimaryLocation.
    ns5__RoadsideReferencePointPrimaryLocation*  roadsideReferencePointPrimaryLocation 1;	///< Required element.
/// Element "roadsideReferencePointSecondaryLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePointSecondaryLocation.
    ns5__RoadsideReferencePointSecondaryLocation*  roadsideReferencePointSecondaryLocation 1;	///< Required element.
/// Element "roadsideReferencePointLinearExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadsideReferencePointLinearExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePointPrimaryLocation is a complexType.
///
/// class ns5__RoadsideReferencePointPrimaryLocation operations:
/// - ns5__RoadsideReferencePointPrimaryLocation* soap_new_ns5__RoadsideReferencePointPrimaryLocation(soap*) allocate and default initialize
/// - ns5__RoadsideReferencePointPrimaryLocation* soap_new_ns5__RoadsideReferencePointPrimaryLocation(soap*, int num) allocate array and default initialize values
/// - ns5__RoadsideReferencePointPrimaryLocation* soap_new_req_ns5__RoadsideReferencePointPrimaryLocation(soap*, ...) allocate, set required members
/// - ns5__RoadsideReferencePointPrimaryLocation* soap_new_set_ns5__RoadsideReferencePointPrimaryLocation(soap*, ...) allocate, set all public members
/// - ns5__RoadsideReferencePointPrimaryLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadsideReferencePointPrimaryLocation(soap*, ns5__RoadsideReferencePointPrimaryLocation*) deserialize from a stream
/// - int soap_write_ns5__RoadsideReferencePointPrimaryLocation(soap*, ns5__RoadsideReferencePointPrimaryLocation*) serialize to a stream
/// - ns5__RoadsideReferencePointPrimaryLocation* ns5__RoadsideReferencePointPrimaryLocation::soap_dup(soap*) returns deep copy of ns5__RoadsideReferencePointPrimaryLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadsideReferencePointPrimaryLocation::soap_del() deep deletes ns5__RoadsideReferencePointPrimaryLocation data members, use only after ns5__RoadsideReferencePointPrimaryLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadsideReferencePointPrimaryLocation : public xsd__anyType
{ public:
/// Element "roadsideReferencePoint" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePoint.
    ns5__RoadsideReferencePoint*         roadsideReferencePoint         1;	///< Required element.
/// Element "roadsideReferencePointPrimaryLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadsideReferencePointPrimaryLocationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePointSecondaryLocation is a complexType.
///
/// class ns5__RoadsideReferencePointSecondaryLocation operations:
/// - ns5__RoadsideReferencePointSecondaryLocation* soap_new_ns5__RoadsideReferencePointSecondaryLocation(soap*) allocate and default initialize
/// - ns5__RoadsideReferencePointSecondaryLocation* soap_new_ns5__RoadsideReferencePointSecondaryLocation(soap*, int num) allocate array and default initialize values
/// - ns5__RoadsideReferencePointSecondaryLocation* soap_new_req_ns5__RoadsideReferencePointSecondaryLocation(soap*, ...) allocate, set required members
/// - ns5__RoadsideReferencePointSecondaryLocation* soap_new_set_ns5__RoadsideReferencePointSecondaryLocation(soap*, ...) allocate, set all public members
/// - ns5__RoadsideReferencePointSecondaryLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadsideReferencePointSecondaryLocation(soap*, ns5__RoadsideReferencePointSecondaryLocation*) deserialize from a stream
/// - int soap_write_ns5__RoadsideReferencePointSecondaryLocation(soap*, ns5__RoadsideReferencePointSecondaryLocation*) serialize to a stream
/// - ns5__RoadsideReferencePointSecondaryLocation* ns5__RoadsideReferencePointSecondaryLocation::soap_dup(soap*) returns deep copy of ns5__RoadsideReferencePointSecondaryLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadsideReferencePointSecondaryLocation::soap_del() deep deletes ns5__RoadsideReferencePointSecondaryLocation data members, use only after ns5__RoadsideReferencePointSecondaryLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadsideReferencePointSecondaryLocation : public xsd__anyType
{ public:
/// Element "roadsideReferencePoint" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePoint.
    ns5__RoadsideReferencePoint*         roadsideReferencePoint         1;	///< Required element.
/// Element "roadsideReferencePointSecondaryLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadsideReferencePointSecondaryLocationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadSurfaceConditionMeasurements is a complexType.
///
/// class ns5__RoadSurfaceConditionMeasurements operations:
/// - ns5__RoadSurfaceConditionMeasurements* soap_new_ns5__RoadSurfaceConditionMeasurements(soap*) allocate and default initialize
/// - ns5__RoadSurfaceConditionMeasurements* soap_new_ns5__RoadSurfaceConditionMeasurements(soap*, int num) allocate array and default initialize values
/// - ns5__RoadSurfaceConditionMeasurements* soap_new_req_ns5__RoadSurfaceConditionMeasurements(soap*, ...) allocate, set required members
/// - ns5__RoadSurfaceConditionMeasurements* soap_new_set_ns5__RoadSurfaceConditionMeasurements(soap*, ...) allocate, set all public members
/// - ns5__RoadSurfaceConditionMeasurements::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadSurfaceConditionMeasurements(soap*, ns5__RoadSurfaceConditionMeasurements*) deserialize from a stream
/// - int soap_write_ns5__RoadSurfaceConditionMeasurements(soap*, ns5__RoadSurfaceConditionMeasurements*) serialize to a stream
/// - ns5__RoadSurfaceConditionMeasurements* ns5__RoadSurfaceConditionMeasurements::soap_dup(soap*) returns deep copy of ns5__RoadSurfaceConditionMeasurements, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadSurfaceConditionMeasurements::soap_del() deep deletes ns5__RoadSurfaceConditionMeasurements data members, use only after ns5__RoadSurfaceConditionMeasurements::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadSurfaceConditionMeasurements : public xsd__anyType
{ public:
/// Element "deIcingApplicationRate" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":IntensityKilogrammesPerSquareMetre.
    ns5__IntensityKilogrammesPerSquareMetre*  deIcingApplicationRate         0;	///< Optional element.
/// Element "deIcingConcentration" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConcentrationGramsPerCubicCentimetre.
    ns5__ConcentrationGramsPerCubicCentimetre*  deIcingConcentration           0;	///< Optional element.
/// Element "depthOfSnow" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  depthOfSnow                    0;	///< Optional element.
/// Element "protectionTemperature" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TemperatureCelsius.
    ns5__TemperatureCelsius*             protectionTemperature          0;	///< Optional element.
/// Element "roadSurfaceTemperature" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TemperatureCelsius.
    ns5__TemperatureCelsius*             roadSurfaceTemperature         0;	///< Optional element.
/// Element "waterFilmThickness" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  waterFilmThickness             0;	///< Optional element.
/// Element "roadSurfaceConditionMeasurementsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadSurfaceConditionMeasurementsExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SiteMeasurements is a complexType.
///
/// class ns5__SiteMeasurements operations:
/// - ns5__SiteMeasurements* soap_new_ns5__SiteMeasurements(soap*) allocate and default initialize
/// - ns5__SiteMeasurements* soap_new_ns5__SiteMeasurements(soap*, int num) allocate array and default initialize values
/// - ns5__SiteMeasurements* soap_new_req_ns5__SiteMeasurements(soap*, ...) allocate, set required members
/// - ns5__SiteMeasurements* soap_new_set_ns5__SiteMeasurements(soap*, ...) allocate, set all public members
/// - ns5__SiteMeasurements::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SiteMeasurements(soap*, ns5__SiteMeasurements*) deserialize from a stream
/// - int soap_write_ns5__SiteMeasurements(soap*, ns5__SiteMeasurements*) serialize to a stream
/// - ns5__SiteMeasurements* ns5__SiteMeasurements::soap_dup(soap*) returns deep copy of ns5__SiteMeasurements, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SiteMeasurements::soap_del() deep deletes ns5__SiteMeasurements data members, use only after ns5__SiteMeasurements::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SiteMeasurements : public xsd__anyType
{ public:
/// Element "measurementSiteReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference                       measurementSiteReference       1;	///< Required element.
/// Element "measurementTimeDefault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        measurementTimeDefault         1;	///< Required element.
/// Vector of measuredValue of length 1..unbounded.
    std::vector<
/// class _ns5__SiteMeasurements_measuredValue operations:
/// - _ns5__SiteMeasurements_measuredValue* soap_new__ns5__SiteMeasurements_measuredValue(soap*) allocate and default initialize
/// - _ns5__SiteMeasurements_measuredValue* soap_new__ns5__SiteMeasurements_measuredValue(soap*, int num) allocate array and default initialize values
/// - _ns5__SiteMeasurements_measuredValue* soap_new_req__ns5__SiteMeasurements_measuredValue(soap*, ...) allocate, set required members
/// - _ns5__SiteMeasurements_measuredValue* soap_new_set__ns5__SiteMeasurements_measuredValue(soap*, ...) allocate, set all public members
/// - _ns5__SiteMeasurements_measuredValue::soap_default(soap*) default initialize members
/// - int soap_read__ns5__SiteMeasurements_measuredValue(soap*, _ns5__SiteMeasurements_measuredValue*) deserialize from a stream
/// - int soap_write__ns5__SiteMeasurements_measuredValue(soap*, _ns5__SiteMeasurements_measuredValue*) serialize to a stream
/// - _ns5__SiteMeasurements_measuredValue* _ns5__SiteMeasurements_measuredValue::soap_dup(soap*) returns deep copy of _ns5__SiteMeasurements_measuredValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns5__SiteMeasurements_measuredValue::soap_del() deep deletes _ns5__SiteMeasurements_measuredValue data members, use only after _ns5__SiteMeasurements_measuredValue::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns5__SiteMeasurements_measuredValue
    {
/// INHERITED FROM ns5__MeasuredValue:
/// Element "measurementEquipmentTypeUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             measurementEquipmentTypeUsed   0;	///< Optional element.
/// Element "locationCharacteristicsOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":LocationCharacteristicsOverride.
    ns5__LocationCharacteristicsOverride*  locationCharacteristicsOverride 0;	///< Optional element.
/// Element "basicDataValue" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":BasicDataValue.
    ns5__BasicDataValue*                 basicDataValue                 1;	///< Required element.
/// Element "measuredValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  measuredValueExtension         0;	///< Optional element.
//  END OF INHERITED FROM ns5__MeasuredValue
/// Attribute "index" of XSD type xs:int.
   @int                                  index                          1;	///< Required attribute.
    }>                                   measuredValue                  1;
/// Element "siteMeasurementsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  siteMeasurementsExtension      0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Situation is a complexType.
///
/// class ns5__Situation operations:
/// - ns5__Situation* soap_new_ns5__Situation(soap*) allocate and default initialize
/// - ns5__Situation* soap_new_ns5__Situation(soap*, int num) allocate array and default initialize values
/// - ns5__Situation* soap_new_req_ns5__Situation(soap*, ...) allocate, set required members
/// - ns5__Situation* soap_new_set_ns5__Situation(soap*, ...) allocate, set all public members
/// - ns5__Situation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Situation(soap*, ns5__Situation*) deserialize from a stream
/// - int soap_write_ns5__Situation(soap*, ns5__Situation*) serialize to a stream
/// - ns5__Situation* ns5__Situation::soap_dup(soap*) returns deep copy of ns5__Situation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Situation::soap_del() deep deletes ns5__Situation data members, use only after ns5__Situation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Situation : public xsd__anyType
{ public:
/// Element "overallSeverity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OverallSeverityEnum.
    enum ns5__OverallSeverityEnum*       overallSeverity                0;	///< Optional element.
/// Vector of ns5__Reference of length 0..unbounded.
    std::vector<ns5__Reference         > relatedSituation               0;
/// Element "situationVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             situationVersion               0;	///< Optional element.
/// Element "situationVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationVersionTime           0;	///< Optional element.
/// Element "headerInformation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":HeaderInformation.
    ns5__HeaderInformation*              headerInformation              1;	///< Required element.
/// Vector of ns5__SituationRecord* of length 1..unbounded.
    std::vector<ns5__SituationRecord*  > situationRecord                1;
/// Element "situationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationExtension             0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SituationRecord is an abstract complexType.
///
/// class ns5__SituationRecord operations:
/// - ns5__SituationRecord* soap_new_ns5__SituationRecord(soap*) allocate and default initialize
/// - ns5__SituationRecord* soap_new_ns5__SituationRecord(soap*, int num) allocate array and default initialize values
/// - ns5__SituationRecord* soap_new_req_ns5__SituationRecord(soap*, ...) allocate, set required members
/// - ns5__SituationRecord* soap_new_set_ns5__SituationRecord(soap*, ...) allocate, set all public members
/// - ns5__SituationRecord::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SituationRecord(soap*, ns5__SituationRecord*) deserialize from a stream
/// - int soap_write_ns5__SituationRecord(soap*, ns5__SituationRecord*) serialize to a stream
/// - ns5__SituationRecord* ns5__SituationRecord::soap_dup(soap*) returns deep copy of ns5__SituationRecord, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SituationRecord::soap_del() deep deletes ns5__SituationRecord data members, use only after ns5__SituationRecord::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SituationRecord : public xsd__anyType
{ public:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Source is a complexType.
///
/// class ns5__Source operations:
/// - ns5__Source* soap_new_ns5__Source(soap*) allocate and default initialize
/// - ns5__Source* soap_new_ns5__Source(soap*, int num) allocate array and default initialize values
/// - ns5__Source* soap_new_req_ns5__Source(soap*, ...) allocate, set required members
/// - ns5__Source* soap_new_set_ns5__Source(soap*, ...) allocate, set all public members
/// - ns5__Source::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Source(soap*, ns5__Source*) deserialize from a stream
/// - int soap_write_ns5__Source(soap*, ns5__Source*) serialize to a stream
/// - ns5__Source* ns5__Source::soap_dup(soap*) returns deep copy of ns5__Source, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Source::soap_del() deep deletes ns5__Source data members, use only after ns5__Source::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Source : public xsd__anyType
{ public:
/// Element "sourceCountry" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":CountryEnum.
    enum ns5__CountryEnum*               sourceCountry                  0;	///< Optional element.
/// Element "sourceIdentification" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         sourceIdentification           0;	///< Optional element.
/// Element "sourceName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             sourceName                     0;	///< Optional element.
/// Element "sourceType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SourceTypeEnum.
    enum ns5__SourceTypeEnum*            sourceType                     0;	///< Optional element.
/// Element "reliable" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        reliable                       0;	///< Optional element.
/// Element "sourceExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  sourceExtension                0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SpeedPercentile is a complexType.
///
/// class ns5__SpeedPercentile operations:
/// - ns5__SpeedPercentile* soap_new_ns5__SpeedPercentile(soap*) allocate and default initialize
/// - ns5__SpeedPercentile* soap_new_ns5__SpeedPercentile(soap*, int num) allocate array and default initialize values
/// - ns5__SpeedPercentile* soap_new_req_ns5__SpeedPercentile(soap*, ...) allocate, set required members
/// - ns5__SpeedPercentile* soap_new_set_ns5__SpeedPercentile(soap*, ...) allocate, set all public members
/// - ns5__SpeedPercentile::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SpeedPercentile(soap*, ns5__SpeedPercentile*) deserialize from a stream
/// - int soap_write_ns5__SpeedPercentile(soap*, ns5__SpeedPercentile*) serialize to a stream
/// - ns5__SpeedPercentile* ns5__SpeedPercentile::soap_dup(soap*) returns deep copy of ns5__SpeedPercentile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SpeedPercentile::soap_del() deep deletes ns5__SpeedPercentile data members, use only after ns5__SpeedPercentile::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SpeedPercentile : public xsd__anyType
{ public:
/// Element "vehiclePercentage" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage                      vehiclePercentage              1;	///< Required element.
/// Element "speedPercentile" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":KilometresPerHour.
    ns5__KilometresPerHour               speedPercentile                1;	///< Required element.
/// Element "speedPercentileExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  speedPercentileExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Subjects is a complexType.
///
/// class ns5__Subjects operations:
/// - ns5__Subjects* soap_new_ns5__Subjects(soap*) allocate and default initialize
/// - ns5__Subjects* soap_new_ns5__Subjects(soap*, int num) allocate array and default initialize values
/// - ns5__Subjects* soap_new_req_ns5__Subjects(soap*, ...) allocate, set required members
/// - ns5__Subjects* soap_new_set_ns5__Subjects(soap*, ...) allocate, set all public members
/// - ns5__Subjects::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Subjects(soap*, ns5__Subjects*) deserialize from a stream
/// - int soap_write_ns5__Subjects(soap*, ns5__Subjects*) serialize to a stream
/// - ns5__Subjects* ns5__Subjects::soap_dup(soap*) returns deep copy of ns5__Subjects, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Subjects::soap_del() deep deletes ns5__Subjects data members, use only after ns5__Subjects::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Subjects : public xsd__anyType
{ public:
/// Element "subjectTypeOfWorks" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SubjectTypeOfWorksEnum.
    enum ns5__SubjectTypeOfWorksEnum     subjectTypeOfWorks             1;	///< Required element.
/// Element "numberOfSubjects" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfSubjects               0;	///< Optional element.
/// Element "subjectsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  subjectsExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Subscription is a complexType.
///
/// class ns5__Subscription operations:
/// - ns5__Subscription* soap_new_ns5__Subscription(soap*) allocate and default initialize
/// - ns5__Subscription* soap_new_ns5__Subscription(soap*, int num) allocate array and default initialize values
/// - ns5__Subscription* soap_new_req_ns5__Subscription(soap*, ...) allocate, set required members
/// - ns5__Subscription* soap_new_set_ns5__Subscription(soap*, ...) allocate, set all public members
/// - ns5__Subscription::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Subscription(soap*, ns5__Subscription*) deserialize from a stream
/// - int soap_write_ns5__Subscription(soap*, ns5__Subscription*) serialize to a stream
/// - ns5__Subscription* ns5__Subscription::soap_dup(soap*) returns deep copy of ns5__Subscription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Subscription::soap_del() deep deletes ns5__Subscription data members, use only after ns5__Subscription::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Subscription : public xsd__anyType
{ public:
/// Element "deleteSubscription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        deleteSubscription             0;	///< Optional element.
/// Element "deliveryInterval" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        deliveryInterval               0;	///< Optional element.
/// Element "operatingMode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatingModeEnum.
    enum ns5__OperatingModeEnum          operatingMode                  1;	///< Required element.
/// Element "subscriptionStartTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        subscriptionStartTime          1;	///< Required element.
/// Element "subscriptionState" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SubscriptionStateEnum.
    enum ns5__SubscriptionStateEnum      subscriptionState              1;	///< Required element.
/// Element "subscriptionStopTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       subscriptionStopTime           0;	///< Optional element.
/// Element "updateMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":UpdateMethodEnum.
    enum ns5__UpdateMethodEnum           updateMethod                   1;	///< Required element.
/// Vector of ns5__Target* of length 1..unbounded.
    std::vector<ns5__Target*           > target                         1;
/// Element "filterReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":FilterReference.
    ns5__FilterReference*                filterReference                0;	///< Optional element.
/// Element "catalogueReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":CatalogueReference.
    ns5__CatalogueReference*             catalogueReference             0;	///< Optional element.
/// Element "subscriptionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  subscriptionExtension          0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SupplementaryPositionalDescription is a complexType.
///
/// class ns5__SupplementaryPositionalDescription operations:
/// - ns5__SupplementaryPositionalDescription* soap_new_ns5__SupplementaryPositionalDescription(soap*) allocate and default initialize
/// - ns5__SupplementaryPositionalDescription* soap_new_ns5__SupplementaryPositionalDescription(soap*, int num) allocate array and default initialize values
/// - ns5__SupplementaryPositionalDescription* soap_new_req_ns5__SupplementaryPositionalDescription(soap*, ...) allocate, set required members
/// - ns5__SupplementaryPositionalDescription* soap_new_set_ns5__SupplementaryPositionalDescription(soap*, ...) allocate, set all public members
/// - ns5__SupplementaryPositionalDescription::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SupplementaryPositionalDescription(soap*, ns5__SupplementaryPositionalDescription*) deserialize from a stream
/// - int soap_write_ns5__SupplementaryPositionalDescription(soap*, ns5__SupplementaryPositionalDescription*) serialize to a stream
/// - ns5__SupplementaryPositionalDescription* ns5__SupplementaryPositionalDescription::soap_dup(soap*) returns deep copy of ns5__SupplementaryPositionalDescription, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SupplementaryPositionalDescription::soap_del() deep deletes ns5__SupplementaryPositionalDescription data members, use only after ns5__SupplementaryPositionalDescription::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SupplementaryPositionalDescription : public xsd__anyType
{ public:
/// Vector of enum ns5__CarriagewayEnum of length 0..unbounded.
    std::vector<enum ns5__CarriagewayEnum> carriageway                    0;
/// Element "footpath" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        footpath                       0;	///< Optional element.
/// Vector of enum ns5__LaneEnum of length 0..unbounded.
    std::vector<enum ns5__LaneEnum     > lane                           0;
/// Element "lengthAffected" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  lengthAffected                 0;	///< Optional element.
/// Vector of enum ns5__LocationDescriptorEnum of length 0..unbounded.
    std::vector<enum ns5__LocationDescriptorEnum> locationDescriptor             0;
/// Element "locationPrecision" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsNonNegativeInteger.
    ns5__MetresAsNonNegativeInteger*     locationPrecision              0;	///< Optional element.
/// Element "sequentialRampNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             sequentialRampNumber           0;	///< Optional element.
/// Element "supplementaryPositionalDescriptionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  supplementaryPositionalDescriptionExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Target is a complexType.
///
/// class ns5__Target operations:
/// - ns5__Target* soap_new_ns5__Target(soap*) allocate and default initialize
/// - ns5__Target* soap_new_ns5__Target(soap*, int num) allocate array and default initialize values
/// - ns5__Target* soap_new_req_ns5__Target(soap*, ...) allocate, set required members
/// - ns5__Target* soap_new_set_ns5__Target(soap*, ...) allocate, set all public members
/// - ns5__Target::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Target(soap*, ns5__Target*) deserialize from a stream
/// - int soap_write_ns5__Target(soap*, ns5__Target*) serialize to a stream
/// - ns5__Target* ns5__Target::soap_dup(soap*) returns deep copy of ns5__Target, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Target::soap_del() deep deletes ns5__Target data members, use only after ns5__Target::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Target : public xsd__anyType
{ public:
/// Element "address" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          address                        1;	///< Required element.
/// Element "protocol" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          protocol                       1;	///< Required element.
/// Element "targetExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  targetExtension                0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Temperature is a complexType.
///
/// class ns5__Temperature operations:
/// - ns5__Temperature* soap_new_ns5__Temperature(soap*) allocate and default initialize
/// - ns5__Temperature* soap_new_ns5__Temperature(soap*, int num) allocate array and default initialize values
/// - ns5__Temperature* soap_new_req_ns5__Temperature(soap*, ...) allocate, set required members
/// - ns5__Temperature* soap_new_set_ns5__Temperature(soap*, ...) allocate, set all public members
/// - ns5__Temperature::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Temperature(soap*, ns5__Temperature*) deserialize from a stream
/// - int soap_write_ns5__Temperature(soap*, ns5__Temperature*) serialize to a stream
/// - ns5__Temperature* ns5__Temperature::soap_dup(soap*) returns deep copy of ns5__Temperature, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Temperature::soap_del() deep deletes ns5__Temperature data members, use only after ns5__Temperature::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Temperature : public xsd__anyType
{ public:
/// Element "airTemperature" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TemperatureCelsius.
    ns5__TemperatureCelsius*             airTemperature                 0;	///< Optional element.
/// Element "dewPointTemperature" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TemperatureCelsius.
    ns5__TemperatureCelsius*             dewPointTemperature            0;	///< Optional element.
/// Element "maximumTemperature" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TemperatureCelsius.
    ns5__TemperatureCelsius*             maximumTemperature             0;	///< Optional element.
/// Element "minimumTemperature" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TemperatureCelsius.
    ns5__TemperatureCelsius*             minimumTemperature             0;	///< Optional element.
/// Element "temperatureExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  temperatureExtension           0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TimePeriodOfDay is an abstract complexType.
///
/// class ns5__TimePeriodOfDay operations:
/// - ns5__TimePeriodOfDay* soap_new_ns5__TimePeriodOfDay(soap*) allocate and default initialize
/// - ns5__TimePeriodOfDay* soap_new_ns5__TimePeriodOfDay(soap*, int num) allocate array and default initialize values
/// - ns5__TimePeriodOfDay* soap_new_req_ns5__TimePeriodOfDay(soap*, ...) allocate, set required members
/// - ns5__TimePeriodOfDay* soap_new_set_ns5__TimePeriodOfDay(soap*, ...) allocate, set all public members
/// - ns5__TimePeriodOfDay::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TimePeriodOfDay(soap*, ns5__TimePeriodOfDay*) deserialize from a stream
/// - int soap_write_ns5__TimePeriodOfDay(soap*, ns5__TimePeriodOfDay*) serialize to a stream
/// - ns5__TimePeriodOfDay* ns5__TimePeriodOfDay::soap_dup(soap*) returns deep copy of ns5__TimePeriodOfDay, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TimePeriodOfDay::soap_del() deep deletes ns5__TimePeriodOfDay data members, use only after ns5__TimePeriodOfDay::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TimePeriodOfDay : public xsd__anyType
{ public:
/// Element "timePeriodOfDayExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  timePeriodOfDayExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegAreaLocation is an abstract complexType.
///
/// class ns5__TpegAreaLocation operations:
/// - ns5__TpegAreaLocation* soap_new_ns5__TpegAreaLocation(soap*) allocate and default initialize
/// - ns5__TpegAreaLocation* soap_new_ns5__TpegAreaLocation(soap*, int num) allocate array and default initialize values
/// - ns5__TpegAreaLocation* soap_new_req_ns5__TpegAreaLocation(soap*, ...) allocate, set required members
/// - ns5__TpegAreaLocation* soap_new_set_ns5__TpegAreaLocation(soap*, ...) allocate, set all public members
/// - ns5__TpegAreaLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegAreaLocation(soap*, ns5__TpegAreaLocation*) deserialize from a stream
/// - int soap_write_ns5__TpegAreaLocation(soap*, ns5__TpegAreaLocation*) serialize to a stream
/// - ns5__TpegAreaLocation* ns5__TpegAreaLocation::soap_dup(soap*) returns deep copy of ns5__TpegAreaLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegAreaLocation::soap_del() deep deletes ns5__TpegAreaLocation data members, use only after ns5__TpegAreaLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegAreaLocation : public xsd__anyType
{ public:
/// Element "tpegAreaLocationType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01AreaLocationSubtypeEnum.
    enum ns5__TpegLoc01AreaLocationSubtypeEnum  tpegAreaLocationType           1;	///< Required element.
/// Element "tpegHeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegHeight.
    ns5__TpegHeight*                     tpegHeight                     0;	///< Optional element.
/// Element "tpegAreaLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegAreaLocationExtension      0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegDescriptor is an abstract complexType.
///
/// class ns5__TpegDescriptor operations:
/// - ns5__TpegDescriptor* soap_new_ns5__TpegDescriptor(soap*) allocate and default initialize
/// - ns5__TpegDescriptor* soap_new_ns5__TpegDescriptor(soap*, int num) allocate array and default initialize values
/// - ns5__TpegDescriptor* soap_new_req_ns5__TpegDescriptor(soap*, ...) allocate, set required members
/// - ns5__TpegDescriptor* soap_new_set_ns5__TpegDescriptor(soap*, ...) allocate, set all public members
/// - ns5__TpegDescriptor::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegDescriptor(soap*, ns5__TpegDescriptor*) deserialize from a stream
/// - int soap_write_ns5__TpegDescriptor(soap*, ns5__TpegDescriptor*) serialize to a stream
/// - ns5__TpegDescriptor* ns5__TpegDescriptor::soap_dup(soap*) returns deep copy of ns5__TpegDescriptor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegDescriptor::soap_del() deep deletes ns5__TpegDescriptor data members, use only after ns5__TpegDescriptor::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegDescriptor : public xsd__anyType
{ public:
/// Element "descriptor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             descriptor                     1;	///< Required element.
/// Element "tpegDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegDescriptorExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegHeight is a complexType.
///
/// class ns5__TpegHeight operations:
/// - ns5__TpegHeight* soap_new_ns5__TpegHeight(soap*) allocate and default initialize
/// - ns5__TpegHeight* soap_new_ns5__TpegHeight(soap*, int num) allocate array and default initialize values
/// - ns5__TpegHeight* soap_new_req_ns5__TpegHeight(soap*, ...) allocate, set required members
/// - ns5__TpegHeight* soap_new_set_ns5__TpegHeight(soap*, ...) allocate, set all public members
/// - ns5__TpegHeight::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegHeight(soap*, ns5__TpegHeight*) deserialize from a stream
/// - int soap_write_ns5__TpegHeight(soap*, ns5__TpegHeight*) serialize to a stream
/// - ns5__TpegHeight* ns5__TpegHeight::soap_dup(soap*) returns deep copy of ns5__TpegHeight, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegHeight::soap_del() deep deletes ns5__TpegHeight data members, use only after ns5__TpegHeight::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegHeight : public xsd__anyType
{ public:
/// Element "height" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  height                         0;	///< Optional element.
/// Element "heightType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc04HeightTypeEnum.
    enum ns5__TpegLoc04HeightTypeEnum    heightType                     1;	///< Required element.
/// Element "tpegHeightExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegHeightExtension            0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegLinearLocation is a complexType.
///
/// class ns5__TpegLinearLocation operations:
/// - ns5__TpegLinearLocation* soap_new_ns5__TpegLinearLocation(soap*) allocate and default initialize
/// - ns5__TpegLinearLocation* soap_new_ns5__TpegLinearLocation(soap*, int num) allocate array and default initialize values
/// - ns5__TpegLinearLocation* soap_new_req_ns5__TpegLinearLocation(soap*, ...) allocate, set required members
/// - ns5__TpegLinearLocation* soap_new_set_ns5__TpegLinearLocation(soap*, ...) allocate, set all public members
/// - ns5__TpegLinearLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegLinearLocation(soap*, ns5__TpegLinearLocation*) deserialize from a stream
/// - int soap_write_ns5__TpegLinearLocation(soap*, ns5__TpegLinearLocation*) serialize to a stream
/// - ns5__TpegLinearLocation* ns5__TpegLinearLocation::soap_dup(soap*) returns deep copy of ns5__TpegLinearLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegLinearLocation::soap_del() deep deletes ns5__TpegLinearLocation data members, use only after ns5__TpegLinearLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegLinearLocation : public xsd__anyType
{ public:
/// Element "tpegDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc02DirectionTypeEnum.
    enum ns5__TpegLoc02DirectionTypeEnum  tpegDirection                  1;	///< Required element.
/// Element "tpegLinearLocationType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01LinearLocationSubtypeEnum.
    enum ns5__TpegLoc01LinearLocationSubtypeEnum  tpegLinearLocationType         1;	///< Required element.
/// Element "to" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPoint.
    ns5__TpegPoint*                      to                             1;	///< Required element.
/// Element "from" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPoint.
    ns5__TpegPoint*                      from                           1;	///< Required element.
/// Element "tpegLinearLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegLinearLocationExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegPoint is an abstract complexType.
///
/// class ns5__TpegPoint operations:
/// - ns5__TpegPoint* soap_new_ns5__TpegPoint(soap*) allocate and default initialize
/// - ns5__TpegPoint* soap_new_ns5__TpegPoint(soap*, int num) allocate array and default initialize values
/// - ns5__TpegPoint* soap_new_req_ns5__TpegPoint(soap*, ...) allocate, set required members
/// - ns5__TpegPoint* soap_new_set_ns5__TpegPoint(soap*, ...) allocate, set all public members
/// - ns5__TpegPoint::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegPoint(soap*, ns5__TpegPoint*) deserialize from a stream
/// - int soap_write_ns5__TpegPoint(soap*, ns5__TpegPoint*) serialize to a stream
/// - ns5__TpegPoint* ns5__TpegPoint::soap_dup(soap*) returns deep copy of ns5__TpegPoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegPoint::soap_del() deep deletes ns5__TpegPoint data members, use only after ns5__TpegPoint::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegPoint : public xsd__anyType
{ public:
/// Element "tpegPointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointExtension             0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegPointLocation is an abstract complexType.
///
/// class ns5__TpegPointLocation operations:
/// - ns5__TpegPointLocation* soap_new_ns5__TpegPointLocation(soap*) allocate and default initialize
/// - ns5__TpegPointLocation* soap_new_ns5__TpegPointLocation(soap*, int num) allocate array and default initialize values
/// - ns5__TpegPointLocation* soap_new_req_ns5__TpegPointLocation(soap*, ...) allocate, set required members
/// - ns5__TpegPointLocation* soap_new_set_ns5__TpegPointLocation(soap*, ...) allocate, set all public members
/// - ns5__TpegPointLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegPointLocation(soap*, ns5__TpegPointLocation*) deserialize from a stream
/// - int soap_write_ns5__TpegPointLocation(soap*, ns5__TpegPointLocation*) serialize to a stream
/// - ns5__TpegPointLocation* ns5__TpegPointLocation::soap_dup(soap*) returns deep copy of ns5__TpegPointLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegPointLocation::soap_del() deep deletes ns5__TpegPointLocation data members, use only after ns5__TpegPointLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegPointLocation : public xsd__anyType
{ public:
/// Element "tpegDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc02DirectionTypeEnum.
    enum ns5__TpegLoc02DirectionTypeEnum  tpegDirection                  1;	///< Required element.
/// Element "tpegPointLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointLocationExtension     0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficView is a complexType.
///
/// class ns5__TrafficView operations:
/// - ns5__TrafficView* soap_new_ns5__TrafficView(soap*) allocate and default initialize
/// - ns5__TrafficView* soap_new_ns5__TrafficView(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficView* soap_new_req_ns5__TrafficView(soap*, ...) allocate, set required members
/// - ns5__TrafficView* soap_new_set_ns5__TrafficView(soap*, ...) allocate, set all public members
/// - ns5__TrafficView::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficView(soap*, ns5__TrafficView*) deserialize from a stream
/// - int soap_write_ns5__TrafficView(soap*, ns5__TrafficView*) serialize to a stream
/// - ns5__TrafficView* ns5__TrafficView::soap_dup(soap*) returns deep copy of ns5__TrafficView, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficView::soap_del() deep deletes ns5__TrafficView data members, use only after ns5__TrafficView::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficView : public xsd__anyType
{ public:
/// Element "trafficViewTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        trafficViewTime                1;	///< Required element.
/// Element "predefinedLocationSetReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference                       predefinedLocationSetReference 1;	///< Required element.
/// Vector of ns5__LinearTrafficView* of length 1..unbounded.
    std::vector<ns5__LinearTrafficView*> linearTrafficView              1;
/// Element "trafficViewExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficViewExtension           0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficViewRecord is a complexType.
///
/// class ns5__TrafficViewRecord operations:
/// - ns5__TrafficViewRecord* soap_new_ns5__TrafficViewRecord(soap*) allocate and default initialize
/// - ns5__TrafficViewRecord* soap_new_ns5__TrafficViewRecord(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficViewRecord* soap_new_req_ns5__TrafficViewRecord(soap*, ...) allocate, set required members
/// - ns5__TrafficViewRecord* soap_new_set_ns5__TrafficViewRecord(soap*, ...) allocate, set all public members
/// - ns5__TrafficViewRecord::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficViewRecord(soap*, ns5__TrafficViewRecord*) deserialize from a stream
/// - int soap_write_ns5__TrafficViewRecord(soap*, ns5__TrafficViewRecord*) serialize to a stream
/// - ns5__TrafficViewRecord* ns5__TrafficViewRecord::soap_dup(soap*) returns deep copy of ns5__TrafficViewRecord, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficViewRecord::soap_del() deep deletes ns5__TrafficViewRecord data members, use only after ns5__TrafficViewRecord::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficViewRecord : public xsd__anyType
{ public:
/// Element "recordSequenceNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              recordSequenceNumber           1;	///< Required element.
/// Element "trafficElement" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficElement.
    ns5__TrafficElement*                 trafficElement                 0;	///< Optional element.
/// Element "operatorAction" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorAction.
    ns5__OperatorAction*                 operatorAction                 0;	///< Optional element.
/// Element "elaboratedData" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ElaboratedData.
    ns5__ElaboratedData*                 elaboratedData                 0;	///< Optional element.
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "trafficViewRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficViewRecordExtension     0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":UrlLink is a complexType.
///
/// class ns5__UrlLink operations:
/// - ns5__UrlLink* soap_new_ns5__UrlLink(soap*) allocate and default initialize
/// - ns5__UrlLink* soap_new_ns5__UrlLink(soap*, int num) allocate array and default initialize values
/// - ns5__UrlLink* soap_new_req_ns5__UrlLink(soap*, ...) allocate, set required members
/// - ns5__UrlLink* soap_new_set_ns5__UrlLink(soap*, ...) allocate, set all public members
/// - ns5__UrlLink::soap_default(soap*) default initialize members
/// - int soap_read_ns5__UrlLink(soap*, ns5__UrlLink*) deserialize from a stream
/// - int soap_write_ns5__UrlLink(soap*, ns5__UrlLink*) serialize to a stream
/// - ns5__UrlLink* ns5__UrlLink::soap_dup(soap*) returns deep copy of ns5__UrlLink, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__UrlLink::soap_del() deep deletes ns5__UrlLink data members, use only after ns5__UrlLink::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__UrlLink : public xsd__anyType
{ public:
/// Element "urlLinkAddress" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Url.
    ns5__Url                             urlLinkAddress                 1;	///< Required element.
/// Element "urlLinkDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             urlLinkDescription             0;	///< Optional element.
/// Element "urlLinkType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":UrlLinkTypeEnum.
    enum ns5__UrlLinkTypeEnum*           urlLinkType                    0;	///< Optional element.
/// Element "urlLinkExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  urlLinkExtension               0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Validity is a complexType.
///
/// class ns5__Validity operations:
/// - ns5__Validity* soap_new_ns5__Validity(soap*) allocate and default initialize
/// - ns5__Validity* soap_new_ns5__Validity(soap*, int num) allocate array and default initialize values
/// - ns5__Validity* soap_new_req_ns5__Validity(soap*, ...) allocate, set required members
/// - ns5__Validity* soap_new_set_ns5__Validity(soap*, ...) allocate, set all public members
/// - ns5__Validity::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Validity(soap*, ns5__Validity*) deserialize from a stream
/// - int soap_write_ns5__Validity(soap*, ns5__Validity*) serialize to a stream
/// - ns5__Validity* ns5__Validity::soap_dup(soap*) returns deep copy of ns5__Validity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Validity::soap_del() deep deletes ns5__Validity data members, use only after ns5__Validity::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Validity : public xsd__anyType
{ public:
/// Element "validityStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ValidityStatusEnum.
    enum ns5__ValidityStatusEnum         validityStatus                 1;	///< Required element.
/// Element "overrunning" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        overrunning                    0;	///< Optional element.
/// Element "validityTimeSpecification" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OverallPeriod.
    ns5__OverallPeriod*                  validityTimeSpecification      1;	///< Required element.
/// Element "validityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  validityExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Vehicle is a complexType.
///
/// class ns5__Vehicle operations:
/// - ns5__Vehicle* soap_new_ns5__Vehicle(soap*) allocate and default initialize
/// - ns5__Vehicle* soap_new_ns5__Vehicle(soap*, int num) allocate array and default initialize values
/// - ns5__Vehicle* soap_new_req_ns5__Vehicle(soap*, ...) allocate, set required members
/// - ns5__Vehicle* soap_new_set_ns5__Vehicle(soap*, ...) allocate, set all public members
/// - ns5__Vehicle::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Vehicle(soap*, ns5__Vehicle*) deserialize from a stream
/// - int soap_write_ns5__Vehicle(soap*, ns5__Vehicle*) serialize to a stream
/// - ns5__Vehicle* ns5__Vehicle::soap_dup(soap*) returns deep copy of ns5__Vehicle, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Vehicle::soap_del() deep deletes ns5__Vehicle data members, use only after ns5__Vehicle::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Vehicle : public xsd__anyType
{ public:
/// Element "vehicleColour" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             vehicleColour                  0;	///< Optional element.
/// Element "vehicleCountryOfOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             vehicleCountryOfOrigin         0;	///< Optional element.
/// Element "vehicleIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         vehicleIdentifier              0;	///< Optional element.
/// Element "vehicleManufacturer" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         vehicleManufacturer            0;	///< Optional element.
/// Element "vehicleModel" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         vehicleModel                   0;	///< Optional element.
/// Element "vehicleRegistrationPlateIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         vehicleRegistrationPlateIdentifier 0;	///< Optional element.
/// Element "vehicleStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleStatusEnum.
    enum ns5__VehicleStatusEnum*         vehicleStatus                  0;	///< Optional element.
/// Element "vehicleCharacteristics" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         vehicleCharacteristics         0;	///< Optional element.
/// Vector of ns5__AxleSpacing* of length 0..unbounded.
    std::vector<ns5__AxleSpacing*      > axleSpacingOnVehicle           0;
/// Vector of ns5__AxleWeight* of length 0..unbounded.
    std::vector<ns5__AxleWeight*       > specificAxleWeight             0;
/// Element "hazardousGoodsAssociatedWithVehicle" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":HazardousMaterials.
    ns5__HazardousMaterials*             hazardousGoodsAssociatedWithVehicle 0;	///< Optional element.
/// Element "vehicleExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  vehicleExtension               0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics is a complexType.
///
/// class ns5__VehicleCharacteristics operations:
/// - ns5__VehicleCharacteristics* soap_new_ns5__VehicleCharacteristics(soap*) allocate and default initialize
/// - ns5__VehicleCharacteristics* soap_new_ns5__VehicleCharacteristics(soap*, int num) allocate array and default initialize values
/// - ns5__VehicleCharacteristics* soap_new_req_ns5__VehicleCharacteristics(soap*, ...) allocate, set required members
/// - ns5__VehicleCharacteristics* soap_new_set_ns5__VehicleCharacteristics(soap*, ...) allocate, set all public members
/// - ns5__VehicleCharacteristics::soap_default(soap*) default initialize members
/// - int soap_read_ns5__VehicleCharacteristics(soap*, ns5__VehicleCharacteristics*) deserialize from a stream
/// - int soap_write_ns5__VehicleCharacteristics(soap*, ns5__VehicleCharacteristics*) serialize to a stream
/// - ns5__VehicleCharacteristics* ns5__VehicleCharacteristics::soap_dup(soap*) returns deep copy of ns5__VehicleCharacteristics, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__VehicleCharacteristics::soap_del() deep deletes ns5__VehicleCharacteristics data members, use only after ns5__VehicleCharacteristics::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__VehicleCharacteristics : public xsd__anyType
{ public:
/// Element "fuelType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":FuelTypeEnum.
    enum ns5__FuelTypeEnum*              fuelType                       0;	///< Optional element.
/// Element "loadType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":LoadTypeEnum.
    enum ns5__LoadTypeEnum*              loadType                       0;	///< Optional element.
/// Element "vehicleEquipment" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleEquipmentEnum.
    enum ns5__VehicleEquipmentEnum*      vehicleEquipment               0;	///< Optional element.
/// Vector of enum ns5__VehicleTypeEnum of length 0..unbounded.
    std::vector<enum ns5__VehicleTypeEnum> vehicleType                    0;
/// Element "vehicleUsage" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleUsageEnum.
    enum ns5__VehicleUsageEnum*          vehicleUsage                   0;	///< Optional element.
/// Vector of ns5__GrossWeightCharacteristic* of length 0..2.
    std::vector<ns5__GrossWeightCharacteristic*> grossWeightCharacteristic      0:2;
/// Vector of ns5__HeightCharacteristic* of length 0..2.
    std::vector<ns5__HeightCharacteristic*> heightCharacteristic           0:2;
/// Vector of ns5__LengthCharacteristic* of length 0..2.
    std::vector<ns5__LengthCharacteristic*> lengthCharacteristic           0:2;
/// Vector of ns5__WidthCharacteristic* of length 0..2.
    std::vector<ns5__WidthCharacteristic*> widthCharacteristic            0:2;
/// Vector of ns5__HeaviestAxleWeightCharacteristic* of length 0..2.
    std::vector<ns5__HeaviestAxleWeightCharacteristic*> heaviestAxleWeightCharacteristic 0:2;
/// Vector of ns5__NumberOfAxlesCharacteristic* of length 0..2.
    std::vector<ns5__NumberOfAxlesCharacteristic*> numberOfAxlesCharacteristic    0:2;
/// Element "vehicleCharacteristicsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  vehicleCharacteristicsExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleDetectionTime is a complexType.
///
/// class ns5__VehicleDetectionTime operations:
/// - ns5__VehicleDetectionTime* soap_new_ns5__VehicleDetectionTime(soap*) allocate and default initialize
/// - ns5__VehicleDetectionTime* soap_new_ns5__VehicleDetectionTime(soap*, int num) allocate array and default initialize values
/// - ns5__VehicleDetectionTime* soap_new_req_ns5__VehicleDetectionTime(soap*, ...) allocate, set required members
/// - ns5__VehicleDetectionTime* soap_new_set_ns5__VehicleDetectionTime(soap*, ...) allocate, set all public members
/// - ns5__VehicleDetectionTime::soap_default(soap*) default initialize members
/// - int soap_read_ns5__VehicleDetectionTime(soap*, ns5__VehicleDetectionTime*) deserialize from a stream
/// - int soap_write_ns5__VehicleDetectionTime(soap*, ns5__VehicleDetectionTime*) serialize to a stream
/// - ns5__VehicleDetectionTime* ns5__VehicleDetectionTime::soap_dup(soap*) returns deep copy of ns5__VehicleDetectionTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__VehicleDetectionTime::soap_del() deep deletes ns5__VehicleDetectionTime data members, use only after ns5__VehicleDetectionTime::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__VehicleDetectionTime : public xsd__anyType
{ public:
/// Element "arrivalTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       arrivalTime                    0;	///< Optional element.
/// Element "exitTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       exitTime                       0;	///< Optional element.
/// Element "passageTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       passageTime                    0;	///< Optional element.
/// Element "presenceTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       presenceTime                   0;	///< Optional element.
/// Element "timeGap" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        timeGap                        0;	///< Optional element.
/// Element "timeHeadway" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        timeHeadway                    0;	///< Optional element.
/// Element "vehicleDetectionTimeExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  vehicleDetectionTimeExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleHeadway is a complexType.
///
/// class ns5__VehicleHeadway operations:
/// - ns5__VehicleHeadway* soap_new_ns5__VehicleHeadway(soap*) allocate and default initialize
/// - ns5__VehicleHeadway* soap_new_ns5__VehicleHeadway(soap*, int num) allocate array and default initialize values
/// - ns5__VehicleHeadway* soap_new_req_ns5__VehicleHeadway(soap*, ...) allocate, set required members
/// - ns5__VehicleHeadway* soap_new_set_ns5__VehicleHeadway(soap*, ...) allocate, set all public members
/// - ns5__VehicleHeadway::soap_default(soap*) default initialize members
/// - int soap_read_ns5__VehicleHeadway(soap*, ns5__VehicleHeadway*) deserialize from a stream
/// - int soap_write_ns5__VehicleHeadway(soap*, ns5__VehicleHeadway*) serialize to a stream
/// - ns5__VehicleHeadway* ns5__VehicleHeadway::soap_dup(soap*) returns deep copy of ns5__VehicleHeadway, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__VehicleHeadway::soap_del() deep deletes ns5__VehicleHeadway data members, use only after ns5__VehicleHeadway::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__VehicleHeadway : public xsd__anyType
{ public:
/// Element "distanceGap" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  distanceGap                    0;	///< Optional element.
/// Element "distanceHeadway" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  distanceHeadway                0;	///< Optional element.
/// Element "vehicleHeadwayExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  vehicleHeadwayExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleSpeed is a complexType.
///
/// class ns5__VehicleSpeed operations:
/// - ns5__VehicleSpeed* soap_new_ns5__VehicleSpeed(soap*) allocate and default initialize
/// - ns5__VehicleSpeed* soap_new_ns5__VehicleSpeed(soap*, int num) allocate array and default initialize values
/// - ns5__VehicleSpeed* soap_new_req_ns5__VehicleSpeed(soap*, ...) allocate, set required members
/// - ns5__VehicleSpeed* soap_new_set_ns5__VehicleSpeed(soap*, ...) allocate, set all public members
/// - ns5__VehicleSpeed::soap_default(soap*) default initialize members
/// - int soap_read_ns5__VehicleSpeed(soap*, ns5__VehicleSpeed*) deserialize from a stream
/// - int soap_write_ns5__VehicleSpeed(soap*, ns5__VehicleSpeed*) serialize to a stream
/// - ns5__VehicleSpeed* ns5__VehicleSpeed::soap_dup(soap*) returns deep copy of ns5__VehicleSpeed, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__VehicleSpeed::soap_del() deep deletes ns5__VehicleSpeed data members, use only after ns5__VehicleSpeed::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__VehicleSpeed : public xsd__anyType
{ public:
/// Element "individualVehicleSpeed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":KilometresPerHour.
    ns5__KilometresPerHour               individualVehicleSpeed         1;	///< Required element.
/// Element "vehicleSpeedExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  vehicleSpeedExtension          0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Visibility is a complexType.
///
/// class ns5__Visibility operations:
/// - ns5__Visibility* soap_new_ns5__Visibility(soap*) allocate and default initialize
/// - ns5__Visibility* soap_new_ns5__Visibility(soap*, int num) allocate array and default initialize values
/// - ns5__Visibility* soap_new_req_ns5__Visibility(soap*, ...) allocate, set required members
/// - ns5__Visibility* soap_new_set_ns5__Visibility(soap*, ...) allocate, set all public members
/// - ns5__Visibility::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Visibility(soap*, ns5__Visibility*) deserialize from a stream
/// - int soap_write_ns5__Visibility(soap*, ns5__Visibility*) serialize to a stream
/// - ns5__Visibility* ns5__Visibility::soap_dup(soap*) returns deep copy of ns5__Visibility, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Visibility::soap_del() deep deletes ns5__Visibility data members, use only after ns5__Visibility::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Visibility : public xsd__anyType
{ public:
/// Element "minimumVisibilityDistance" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsNonNegativeInteger.
    ns5__MetresAsNonNegativeInteger      minimumVisibilityDistance      1;	///< Required element.
/// Element "visibilityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  visibilityExtension            0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":WidthCharacteristic is a complexType.
///
/// class ns5__WidthCharacteristic operations:
/// - ns5__WidthCharacteristic* soap_new_ns5__WidthCharacteristic(soap*) allocate and default initialize
/// - ns5__WidthCharacteristic* soap_new_ns5__WidthCharacteristic(soap*, int num) allocate array and default initialize values
/// - ns5__WidthCharacteristic* soap_new_req_ns5__WidthCharacteristic(soap*, ...) allocate, set required members
/// - ns5__WidthCharacteristic* soap_new_set_ns5__WidthCharacteristic(soap*, ...) allocate, set all public members
/// - ns5__WidthCharacteristic::soap_default(soap*) default initialize members
/// - int soap_read_ns5__WidthCharacteristic(soap*, ns5__WidthCharacteristic*) deserialize from a stream
/// - int soap_write_ns5__WidthCharacteristic(soap*, ns5__WidthCharacteristic*) serialize to a stream
/// - ns5__WidthCharacteristic* ns5__WidthCharacteristic::soap_dup(soap*) returns deep copy of ns5__WidthCharacteristic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__WidthCharacteristic::soap_del() deep deletes ns5__WidthCharacteristic data members, use only after ns5__WidthCharacteristic::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__WidthCharacteristic : public xsd__anyType
{ public:
/// Element "comparisonOperator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComparisonOperatorEnum.
    enum ns5__ComparisonOperatorEnum     comparisonOperator             1;	///< Required element.
/// Element "vehicleWidth" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat                   vehicleWidth                   1;	///< Required element.
/// Element "widthCharacteristicExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  widthCharacteristicExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Wind is a complexType.
///
/// class ns5__Wind operations:
/// - ns5__Wind* soap_new_ns5__Wind(soap*) allocate and default initialize
/// - ns5__Wind* soap_new_ns5__Wind(soap*, int num) allocate array and default initialize values
/// - ns5__Wind* soap_new_req_ns5__Wind(soap*, ...) allocate, set required members
/// - ns5__Wind* soap_new_set_ns5__Wind(soap*, ...) allocate, set all public members
/// - ns5__Wind::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Wind(soap*, ns5__Wind*) deserialize from a stream
/// - int soap_write_ns5__Wind(soap*, ns5__Wind*) serialize to a stream
/// - ns5__Wind* ns5__Wind::soap_dup(soap*) returns deep copy of ns5__Wind, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Wind::soap_del() deep deletes ns5__Wind data members, use only after ns5__Wind::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Wind : public xsd__anyType
{ public:
/// Element "maximumWindSpeed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":KilometresPerHour.
    ns5__KilometresPerHour*              maximumWindSpeed               0;	///< Optional element.
/// Element "windDirectionBearing" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AngleInDegrees.
    ns5__AngleInDegrees*                 windDirectionBearing           0;	///< Optional element.
/// Element "windDirectionCompass" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DirectionCompassEnum.
    enum ns5__DirectionCompassEnum*      windDirectionCompass           0;	///< Optional element.
/// Element "windMeasurementHeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsNonNegativeInteger.
    ns5__MetresAsNonNegativeInteger*     windMeasurementHeight          0;	///< Optional element.
/// Element "windSpeed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":KilometresPerHour.
    ns5__KilometresPerHour*              windSpeed                      0;	///< Optional element.
/// Element "windExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  windExtension                  0;	///< Optional element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsServiceRequestInfoStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ContextualisedRequestStructure.
///
/// class ns1__WsServiceRequestInfoStructure operations:
/// - ns1__WsServiceRequestInfoStructure* soap_new_ns1__WsServiceRequestInfoStructure(soap*) allocate and default initialize
/// - ns1__WsServiceRequestInfoStructure* soap_new_ns1__WsServiceRequestInfoStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsServiceRequestInfoStructure* soap_new_req_ns1__WsServiceRequestInfoStructure(soap*, ...) allocate, set required members
/// - ns1__WsServiceRequestInfoStructure* soap_new_set_ns1__WsServiceRequestInfoStructure(soap*, ...) allocate, set all public members
/// - ns1__WsServiceRequestInfoStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsServiceRequestInfoStructure(soap*, ns1__WsServiceRequestInfoStructure*) deserialize from a stream
/// - int soap_write_ns1__WsServiceRequestInfoStructure(soap*, ns1__WsServiceRequestInfoStructure*) serialize to a stream
/// - ns1__WsServiceRequestInfoStructure* ns1__WsServiceRequestInfoStructure::soap_dup(soap*) returns deep copy of ns1__WsServiceRequestInfoStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsServiceRequestInfoStructure::soap_del() deep deletes ns1__WsServiceRequestInfoStructure data members, use only after ns1__WsServiceRequestInfoStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsServiceRequestInfoStructure : public ns2__ContextualisedRequestStructure
{ public:
/*  INHERITED FROM ns2__ContextualisedRequestStructure:
/// <PRE><BLOCKQUOTE>
///   General request properties - typically configured rather than repeated on request.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceRequestContext" of XSD type "http://www.siri.org.uk/siri":ServiceRequestContextStructure.
    ns2__ServiceRequestContextStructure*  ServiceRequestContext          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ContextualisedRequestStructure */
};

/// @brief "http://www.siri.org.uk/siri":ServiceRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ContextualisedRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   SIRI Service Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceRequestStructure operations:
/// - ns2__ServiceRequestStructure* soap_new_ns2__ServiceRequestStructure(soap*) allocate and default initialize
/// - ns2__ServiceRequestStructure* soap_new_ns2__ServiceRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceRequestStructure* soap_new_req_ns2__ServiceRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceRequestStructure* soap_new_set_ns2__ServiceRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceRequestStructure(soap*, ns2__ServiceRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceRequestStructure(soap*, ns2__ServiceRequestStructure*) serialize to a stream
/// - ns2__ServiceRequestStructure* ns2__ServiceRequestStructure::soap_dup(soap*) returns deep copy of ns2__ServiceRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceRequestStructure::soap_del() deep deletes ns2__ServiceRequestStructure data members, use only after ns2__ServiceRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceRequestStructure : public ns2__ContextualisedRequestStructure
{ public:
/*  INHERITED FROM ns2__ContextualisedRequestStructure:
/// <PRE><BLOCKQUOTE>
///   General request properties - typically configured rather than repeated on request.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceRequestContext" of XSD type "http://www.siri.org.uk/siri":ServiceRequestContextStructure.
    ns2__ServiceRequestContextStructure*  ServiceRequestContext          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ContextualisedRequestStructure */
//  BEGIN GROUP <xs:group name="SiriServiceRequestGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Concrete Requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceRequestStructure;	///< Union _ns2__union_ServiceRequestStructure selector: set to SOAP_UNION__ns2__union_ServiceRequestStructure_<fieldname>
    union _ns2__union_ServiceRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Request for daily production timetables.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ProductionTimetableRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ProductionTimetableRequestStructure*> *ProductionTimetableRequest     1;
/// <PRE><BLOCKQUOTE>
///   Request for information about the estimated timetable.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableRequestStructure*> *EstimatedTimetableRequest      1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrival and departure at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableRequestStructure*> *StopTimetableRequest           1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrivals and departures at multiple stops stop. SIRI 1.3
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringMultipleRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringMultipleRequestStructure*> *StopMonitoringMultipleRequest  1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrivals and departures at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringRequestStructure*> *StopMonitoringRequest          1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Vehicle Movements.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringRequestStructure*> *VehicleMonitoringRequest       1;
/// <PRE><BLOCKQUOTE>
///   Request for information about timetabled connections at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableRequestStructure*> *ConnectionTimetableRequest     1;
/// <PRE><BLOCKQUOTE>
///   Request for information about changes to connections at a stop for Connection Monitoring service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringRequestStructure*> *ConnectionMonitoringRequest    1;
/// <PRE><BLOCKQUOTE>
///   Request for information about general information messages affecting stops, vehicles or services.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageRequestStructure*> *GeneralMessageRequest          1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Facilities status.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringRequestStructure*> *FacilityMonitoringRequest      1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Facilities status.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeRequestStructure*> *SituationExchangeRequest       1;
    }                                    union_ServiceRequestStructure ;
//  END OF CHOICE
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":StatusResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Response Status.
/// </BLOCKQUOTE></PRE>
/// class ns2__StatusResponseStructure operations:
/// - ns2__StatusResponseStructure* soap_new_ns2__StatusResponseStructure(soap*) allocate and default initialize
/// - ns2__StatusResponseStructure* soap_new_ns2__StatusResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StatusResponseStructure* soap_new_req_ns2__StatusResponseStructure(soap*, ...) allocate, set required members
/// - ns2__StatusResponseStructure* soap_new_set_ns2__StatusResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__StatusResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StatusResponseStructure(soap*, ns2__StatusResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__StatusResponseStructure(soap*, ns2__StatusResponseStructure*) serialize to a stream
/// - ns2__StatusResponseStructure* ns2__StatusResponseStructure::soap_dup(soap*) returns deep copy of ns2__StatusResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StatusResponseStructure::soap_del() deep deletes ns2__StatusResponseStructure data members, use only after ns2__StatusResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StatusResponseStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__StatusResponseStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                1;	///< Required element.
    }                                   *__StatusResponseStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":CheckStatusResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Service Status Check Response.
/// </BLOCKQUOTE></PRE>
/// class ns2__CheckStatusResponseStructure operations:
/// - ns2__CheckStatusResponseStructure* soap_new_ns2__CheckStatusResponseStructure(soap*) allocate and default initialize
/// - ns2__CheckStatusResponseStructure* soap_new_ns2__CheckStatusResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CheckStatusResponseStructure* soap_new_req_ns2__CheckStatusResponseStructure(soap*, ...) allocate, set required members
/// - ns2__CheckStatusResponseStructure* soap_new_set_ns2__CheckStatusResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__CheckStatusResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CheckStatusResponseStructure(soap*, ns2__CheckStatusResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__CheckStatusResponseStructure(soap*, ns2__CheckStatusResponseStructure*) serialize to a stream
/// - ns2__CheckStatusResponseStructure* ns2__CheckStatusResponseStructure::soap_dup(soap*) returns deep copy of ns2__CheckStatusResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CheckStatusResponseStructure::soap_del() deep deletes ns2__CheckStatusResponseStructure data members, use only after ns2__CheckStatusResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CheckStatusResponseStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN GROUP <xs:group name="ProducerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to reponse from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoint Address to which acknowledgements to confirm delivery are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An arbitrary unique reference associated with the response which may be used to reference it.
/// </BLOCKQUOTE></PRE>
/// Element "ResponseMessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      ResponseMessageIdentifier      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique identifier associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CheckStatusPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Data received AcknowledgementService Status Check Request content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether data delivery is ready to be fetched SIRI v 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DataReady" of XSD type xs:boolean.
    bool*                                DataReady                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition that applies to the status check.
/// </BLOCKQUOTE></PRE>
/// class _ns2__CheckStatusResponseStructure_ErrorCondition operations:
/// - _ns2__CheckStatusResponseStructure_ErrorCondition* soap_new__ns2__CheckStatusResponseStructure_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__CheckStatusResponseStructure_ErrorCondition* soap_new__ns2__CheckStatusResponseStructure_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__CheckStatusResponseStructure_ErrorCondition* soap_new_req__ns2__CheckStatusResponseStructure_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__CheckStatusResponseStructure_ErrorCondition* soap_new_set__ns2__CheckStatusResponseStructure_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__CheckStatusResponseStructure_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CheckStatusResponseStructure_ErrorCondition(soap*, _ns2__CheckStatusResponseStructure_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__CheckStatusResponseStructure_ErrorCondition(soap*, _ns2__CheckStatusResponseStructure_ErrorCondition*) serialize to a stream
/// - _ns2__CheckStatusResponseStructure_ErrorCondition* _ns2__CheckStatusResponseStructure_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__CheckStatusResponseStructure_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CheckStatusResponseStructure_ErrorCondition::soap_del() deep deletes _ns2__CheckStatusResponseStructure_ErrorCondition data members, use only after _ns2__CheckStatusResponseStructure_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__CheckStatusResponseStructure_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_CheckStatusResponseStructure_ErrorCondition;	///< Union _ns2__union_CheckStatusResponseStructure_ErrorCondition selector: set to SOAP_UNION__ns2__union_CheckStatusResponseStructure_ErrorCondition_<fieldname>
    union _ns2__union_CheckStatusResponseStructure_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Functional service is not available to use (but it is still capable of giving this response).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceNotAvailableError.
    ns2__ServiceNotAvailableErrorStructure*  ServiceNotAvailableError       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_CheckStatusResponseStructure_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Time at which current instantiation of service started.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceStartedTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ServiceStartedTime             0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AuthenticatedRequestStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Authticated SIRI Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__AuthenticatedRequestStructure operations:
/// - ns2__AuthenticatedRequestStructure* soap_new_ns2__AuthenticatedRequestStructure(soap*) allocate and default initialize
/// - ns2__AuthenticatedRequestStructure* soap_new_ns2__AuthenticatedRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AuthenticatedRequestStructure* soap_new_req_ns2__AuthenticatedRequestStructure(soap*, ...) allocate, set required members
/// - ns2__AuthenticatedRequestStructure* soap_new_set_ns2__AuthenticatedRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__AuthenticatedRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AuthenticatedRequestStructure(soap*, ns2__AuthenticatedRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__AuthenticatedRequestStructure(soap*, ns2__AuthenticatedRequestStructure*) serialize to a stream
/// - ns2__AuthenticatedRequestStructure* ns2__AuthenticatedRequestStructure::soap_dup(soap*) returns deep copy of ns2__AuthenticatedRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AuthenticatedRequestStructure::soap_del() deep deletes ns2__AuthenticatedRequestStructure data members, use only after ns2__AuthenticatedRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AuthenticatedRequestStructure : public ns2__AbstractRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":AbstractServiceRequestStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Abstract Service Request for SIRI Service request.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractServiceRequestStructure operations:
/// - ns2__AbstractServiceRequestStructure* soap_new_ns2__AbstractServiceRequestStructure(soap*) allocate and default initialize
/// - ns2__AbstractServiceRequestStructure* soap_new_ns2__AbstractServiceRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractServiceRequestStructure* soap_new_req_ns2__AbstractServiceRequestStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractServiceRequestStructure* soap_new_set_ns2__AbstractServiceRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractServiceRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractServiceRequestStructure(soap*, ns2__AbstractServiceRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractServiceRequestStructure(soap*, ns2__AbstractServiceRequestStructure*) serialize to a stream
/// - ns2__AbstractServiceRequestStructure* ns2__AbstractServiceRequestStructure::soap_dup(soap*) returns deep copy of ns2__AbstractServiceRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractServiceRequestStructure::soap_del() deep deletes ns2__AbstractServiceRequestStructure data members, use only after ns2__AbstractServiceRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractServiceRequestStructure : public ns2__AbstractRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ProducerResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for General SIRI Producer Response.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProducerResponseStructure operations:
/// - ns2__ProducerResponseStructure* soap_new_ns2__ProducerResponseStructure(soap*) allocate and default initialize
/// - ns2__ProducerResponseStructure* soap_new_ns2__ProducerResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProducerResponseStructure* soap_new_req_ns2__ProducerResponseStructure(soap*, ...) allocate, set required members
/// - ns2__ProducerResponseStructure* soap_new_set_ns2__ProducerResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__ProducerResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProducerResponseStructure(soap*, ns2__ProducerResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__ProducerResponseStructure(soap*, ns2__ProducerResponseStructure*) serialize to a stream
/// - ns2__ProducerResponseStructure* ns2__ProducerResponseStructure::soap_dup(soap*) returns deep copy of ns2__ProducerResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProducerResponseStructure::soap_del() deep deletes ns2__ProducerResponseStructure data members, use only after ns2__ProducerResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProducerResponseStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN GROUP <xs:group name="ProducerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to reponse from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoint Address to which acknowledgements to confirm delivery are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An arbitrary unique reference associated with the response which may be used to reference it.
/// </BLOCKQUOTE></PRE>
/// Element "ResponseMessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      ResponseMessageIdentifier      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique identifier associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Common elementd for a SIRI service delivery of the Form xxxDelivery.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractServiceDeliveryStructure operations:
/// - ns2__AbstractServiceDeliveryStructure* soap_new_ns2__AbstractServiceDeliveryStructure(soap*) allocate and default initialize
/// - ns2__AbstractServiceDeliveryStructure* soap_new_ns2__AbstractServiceDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractServiceDeliveryStructure* soap_new_req_ns2__AbstractServiceDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractServiceDeliveryStructure* soap_new_set_ns2__AbstractServiceDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractServiceDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractServiceDeliveryStructure(soap*, ns2__AbstractServiceDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractServiceDeliveryStructure(soap*, ns2__AbstractServiceDeliveryStructure*) serialize to a stream
/// - ns2__AbstractServiceDeliveryStructure* ns2__AbstractServiceDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__AbstractServiceDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractServiceDeliveryStructure::soap_del() deep deletes ns2__AbstractServiceDeliveryStructure data members, use only after ns2__AbstractServiceDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractServiceDeliveryStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ConsumerResponseEndpointStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Unique reference to this response created by Consumer. May be used to reference the request in subsequent interactions. Used by WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConsumerResponseEndpointStructure operations:
/// - ns2__ConsumerResponseEndpointStructure* soap_new_ns2__ConsumerResponseEndpointStructure(soap*) allocate and default initialize
/// - ns2__ConsumerResponseEndpointStructure* soap_new_ns2__ConsumerResponseEndpointStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConsumerResponseEndpointStructure* soap_new_req_ns2__ConsumerResponseEndpointStructure(soap*, ...) allocate, set required members
/// - ns2__ConsumerResponseEndpointStructure* soap_new_set_ns2__ConsumerResponseEndpointStructure(soap*, ...) allocate, set all public members
/// - ns2__ConsumerResponseEndpointStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConsumerResponseEndpointStructure(soap*, ns2__ConsumerResponseEndpointStructure*) deserialize from a stream
/// - int soap_write_ns2__ConsumerResponseEndpointStructure(soap*, ns2__ConsumerResponseEndpointStructure*) serialize to a stream
/// - ns2__ConsumerResponseEndpointStructure* ns2__ConsumerResponseEndpointStructure::soap_dup(soap*) returns deep copy of ns2__ConsumerResponseEndpointStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConsumerResponseEndpointStructure::soap_del() deep deletes ns2__ConsumerResponseEndpointStructure data members, use only after ns2__ConsumerResponseEndpointStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConsumerResponseEndpointStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN GROUP <xs:group name="ConsumerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to this response message from Consumer. May be used to reference the response in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Consumer - a Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ConsumerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique idenitifer associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ResponseEndpointStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Unique reference to reponse. May be used to reference request in subsequent interactions. Used for WSDL
/// </BLOCKQUOTE></PRE>
/// class ns2__ResponseEndpointStructure operations:
/// - ns2__ResponseEndpointStructure* soap_new_ns2__ResponseEndpointStructure(soap*) allocate and default initialize
/// - ns2__ResponseEndpointStructure* soap_new_ns2__ResponseEndpointStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ResponseEndpointStructure* soap_new_req_ns2__ResponseEndpointStructure(soap*, ...) allocate, set required members
/// - ns2__ResponseEndpointStructure* soap_new_set_ns2__ResponseEndpointStructure(soap*, ...) allocate, set all public members
/// - ns2__ResponseEndpointStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ResponseEndpointStructure(soap*, ns2__ResponseEndpointStructure*) deserialize from a stream
/// - int soap_write_ns2__ResponseEndpointStructure(soap*, ns2__ResponseEndpointStructure*) serialize to a stream
/// - ns2__ResponseEndpointStructure* ns2__ResponseEndpointStructure::soap_dup(soap*) returns deep copy of ns2__ResponseEndpointStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ResponseEndpointStructure::soap_del() deep deletes ns2__ResponseEndpointStructure data members, use only after ns2__ResponseEndpointStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ResponseEndpointStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN GROUP <xs:group name="ResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to response May be used to reference response in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address for further interaction.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant reference that identifies responder.
/// </BLOCKQUOTE></PRE>
/// Element "ResponderRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ResponderRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique reference associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ProducerResponseEndpointStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Unique reference to reponse from producer. May be used to reference request in subsequent interactions. Used for WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProducerResponseEndpointStructure operations:
/// - ns2__ProducerResponseEndpointStructure* soap_new_ns2__ProducerResponseEndpointStructure(soap*) allocate and default initialize
/// - ns2__ProducerResponseEndpointStructure* soap_new_ns2__ProducerResponseEndpointStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProducerResponseEndpointStructure* soap_new_req_ns2__ProducerResponseEndpointStructure(soap*, ...) allocate, set required members
/// - ns2__ProducerResponseEndpointStructure* soap_new_set_ns2__ProducerResponseEndpointStructure(soap*, ...) allocate, set all public members
/// - ns2__ProducerResponseEndpointStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProducerResponseEndpointStructure(soap*, ns2__ProducerResponseEndpointStructure*) deserialize from a stream
/// - int soap_write_ns2__ProducerResponseEndpointStructure(soap*, ns2__ProducerResponseEndpointStructure*) serialize to a stream
/// - ns2__ProducerResponseEndpointStructure* ns2__ProducerResponseEndpointStructure::soap_dup(soap*) returns deep copy of ns2__ProducerResponseEndpointStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProducerResponseEndpointStructure::soap_del() deep deletes ns2__ProducerResponseEndpointStructure data members, use only after ns2__ProducerResponseEndpointStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProducerResponseEndpointStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN GROUP <xs:group name="ProducerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to reponse from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoint Address to which acknowledgements to confirm delivery are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An arbitrary unique reference associated with the response which may be used to reference it.
/// </BLOCKQUOTE></PRE>
/// Element "ResponseMessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      ResponseMessageIdentifier      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique identifier associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":AbstractIdentifiedItemStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for an Activity that can be referenced.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractIdentifiedItemStructure operations:
/// - ns2__AbstractIdentifiedItemStructure* soap_new_ns2__AbstractIdentifiedItemStructure(soap*) allocate and default initialize
/// - ns2__AbstractIdentifiedItemStructure* soap_new_ns2__AbstractIdentifiedItemStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractIdentifiedItemStructure* soap_new_req_ns2__AbstractIdentifiedItemStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractIdentifiedItemStructure* soap_new_set_ns2__AbstractIdentifiedItemStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractIdentifiedItemStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractIdentifiedItemStructure(soap*, ns2__AbstractIdentifiedItemStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractIdentifiedItemStructure(soap*, ns2__AbstractIdentifiedItemStructure*) serialize to a stream
/// - ns2__AbstractIdentifiedItemStructure* ns2__AbstractIdentifiedItemStructure::soap_dup(soap*) returns deep copy of ns2__AbstractIdentifiedItemStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractIdentifiedItemStructure::soap_del() deep deletes ns2__AbstractIdentifiedItemStructure data members, use only after ns2__AbstractIdentifiedItemStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractIdentifiedItemStructure : public ns2__AbstractItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractRequiredIdentifiedItemStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for an Activity that can be referenced.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractRequiredIdentifiedItemStructure operations:
/// - ns2__AbstractRequiredIdentifiedItemStructure* soap_new_ns2__AbstractRequiredIdentifiedItemStructure(soap*) allocate and default initialize
/// - ns2__AbstractRequiredIdentifiedItemStructure* soap_new_ns2__AbstractRequiredIdentifiedItemStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractRequiredIdentifiedItemStructure* soap_new_req_ns2__AbstractRequiredIdentifiedItemStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractRequiredIdentifiedItemStructure* soap_new_set_ns2__AbstractRequiredIdentifiedItemStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractRequiredIdentifiedItemStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractRequiredIdentifiedItemStructure(soap*, ns2__AbstractRequiredIdentifiedItemStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractRequiredIdentifiedItemStructure(soap*, ns2__AbstractRequiredIdentifiedItemStructure*) serialize to a stream
/// - ns2__AbstractRequiredIdentifiedItemStructure* ns2__AbstractRequiredIdentifiedItemStructure::soap_dup(soap*) returns deep copy of ns2__AbstractRequiredIdentifiedItemStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractRequiredIdentifiedItemStructure::soap_del() deep deletes ns2__AbstractRequiredIdentifiedItemStructure data members, use only after ns2__AbstractRequiredIdentifiedItemStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractRequiredIdentifiedItemStructure : public ns2__AbstractItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType              ItemIdentifier                 1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractReferencingItemStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for an Activity that references a previous Activity.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractReferencingItemStructure operations:
/// - ns2__AbstractReferencingItemStructure* soap_new_ns2__AbstractReferencingItemStructure(soap*) allocate and default initialize
/// - ns2__AbstractReferencingItemStructure* soap_new_ns2__AbstractReferencingItemStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractReferencingItemStructure* soap_new_req_ns2__AbstractReferencingItemStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractReferencingItemStructure* soap_new_set_ns2__AbstractReferencingItemStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractReferencingItemStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractReferencingItemStructure(soap*, ns2__AbstractReferencingItemStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractReferencingItemStructure(soap*, ns2__AbstractReferencingItemStructure*) serialize to a stream
/// - ns2__AbstractReferencingItemStructure* ns2__AbstractReferencingItemStructure::soap_dup(soap*) returns deep copy of ns2__AbstractReferencingItemStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractReferencingItemStructure::soap_del() deep deletes ns2__AbstractReferencingItemStructure data members, use only after ns2__AbstractReferencingItemStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractReferencingItemStructure : public ns2__AbstractItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractRequiredReferencingItemStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for an Activity that references a previous Activity.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractRequiredReferencingItemStructure operations:
/// - ns2__AbstractRequiredReferencingItemStructure* soap_new_ns2__AbstractRequiredReferencingItemStructure(soap*) allocate and default initialize
/// - ns2__AbstractRequiredReferencingItemStructure* soap_new_ns2__AbstractRequiredReferencingItemStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractRequiredReferencingItemStructure* soap_new_req_ns2__AbstractRequiredReferencingItemStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractRequiredReferencingItemStructure* soap_new_set_ns2__AbstractRequiredReferencingItemStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractRequiredReferencingItemStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractRequiredReferencingItemStructure(soap*, ns2__AbstractRequiredReferencingItemStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractRequiredReferencingItemStructure(soap*, ns2__AbstractRequiredReferencingItemStructure*) serialize to a stream
/// - ns2__AbstractRequiredReferencingItemStructure* ns2__AbstractRequiredReferencingItemStructure::soap_dup(soap*) returns deep copy of ns2__AbstractRequiredReferencingItemStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractRequiredReferencingItemStructure::soap_del() deep deletes ns2__AbstractRequiredReferencingItemStructure data members, use only after ns2__AbstractRequiredReferencingItemStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractRequiredReferencingItemStructure : public ns2__AbstractItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for capabilities response.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractServiceCapabilitiesResponseStructure operations:
/// - ns2__AbstractServiceCapabilitiesResponseStructure* soap_new_ns2__AbstractServiceCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__AbstractServiceCapabilitiesResponseStructure* soap_new_ns2__AbstractServiceCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractServiceCapabilitiesResponseStructure* soap_new_req_ns2__AbstractServiceCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractServiceCapabilitiesResponseStructure* soap_new_set_ns2__AbstractServiceCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractServiceCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractServiceCapabilitiesResponseStructure(soap*, ns2__AbstractServiceCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractServiceCapabilitiesResponseStructure(soap*, ns2__AbstractServiceCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__AbstractServiceCapabilitiesResponseStructure* ns2__AbstractServiceCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__AbstractServiceCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractServiceCapabilitiesResponseStructure::soap_del() deep deletes ns2__AbstractServiceCapabilitiesResponseStructure data members, use only after ns2__AbstractServiceCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractServiceCapabilitiesResponseStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Abstract supertype fro discovery responses.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractDiscoveryDeliveryStructure operations:
/// - ns2__AbstractDiscoveryDeliveryStructure* soap_new_ns2__AbstractDiscoveryDeliveryStructure(soap*) allocate and default initialize
/// - ns2__AbstractDiscoveryDeliveryStructure* soap_new_ns2__AbstractDiscoveryDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractDiscoveryDeliveryStructure* soap_new_req_ns2__AbstractDiscoveryDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractDiscoveryDeliveryStructure* soap_new_set_ns2__AbstractDiscoveryDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractDiscoveryDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractDiscoveryDeliveryStructure(soap*, ns2__AbstractDiscoveryDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractDiscoveryDeliveryStructure(soap*, ns2__AbstractDiscoveryDeliveryStructure*) serialize to a stream
/// - ns2__AbstractDiscoveryDeliveryStructure* ns2__AbstractDiscoveryDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__AbstractDiscoveryDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractDiscoveryDeliveryStructure::soap_del() deep deletes ns2__AbstractDiscoveryDeliveryStructure data members, use only after ns2__AbstractDiscoveryDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractDiscoveryDeliveryStructure : public ns2__ResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":CoordinatesStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for GM Coordinates.
/// </BLOCKQUOTE></PRE>
/// class ns2__CoordinatesStructure operations:
/// - ns2__CoordinatesStructure* soap_new_ns2__CoordinatesStructure(soap*) allocate and default initialize
/// - ns2__CoordinatesStructure* soap_new_ns2__CoordinatesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CoordinatesStructure* soap_new_req_ns2__CoordinatesStructure(soap*, ...) allocate, set required members
/// - ns2__CoordinatesStructure* soap_new_set_ns2__CoordinatesStructure(soap*, ...) allocate, set all public members
/// - ns2__CoordinatesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CoordinatesStructure(soap*, ns2__CoordinatesStructure*) deserialize from a stream
/// - int soap_write_ns2__CoordinatesStructure(soap*, ns2__CoordinatesStructure*) serialize to a stream
/// - ns2__CoordinatesStructure* ns2__CoordinatesStructure::soap_dup(soap*) returns deep copy of ns2__CoordinatesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CoordinatesStructure::soap_del() deep deletes ns2__CoordinatesStructure data members, use only after ns2__CoordinatesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CoordinatesStructure : public xsd__anyType
{ public:
/// __item wraps "xs:NMTOKENS" simpleContent.
    xsd__NMTOKENS                        __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":ErrorDescriptionStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for Description of an error.
/// </BLOCKQUOTE></PRE>
/// class ns2__ErrorDescriptionStructure operations:
/// - ns2__ErrorDescriptionStructure* soap_new_ns2__ErrorDescriptionStructure(soap*) allocate and default initialize
/// - ns2__ErrorDescriptionStructure* soap_new_ns2__ErrorDescriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ErrorDescriptionStructure* soap_new_req_ns2__ErrorDescriptionStructure(soap*, ...) allocate, set required members
/// - ns2__ErrorDescriptionStructure* soap_new_set_ns2__ErrorDescriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__ErrorDescriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ErrorDescriptionStructure(soap*, ns2__ErrorDescriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__ErrorDescriptionStructure(soap*, ns2__ErrorDescriptionStructure*) serialize to a stream
/// - ns2__ErrorDescriptionStructure* ns2__ErrorDescriptionStructure::soap_dup(soap*) returns deep copy of ns2__ErrorDescriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ErrorDescriptionStructure::soap_del() deep deletes ns2__ErrorDescriptionStructure data members, use only after ns2__ErrorDescriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ErrorDescriptionStructure : public xsd__anyType
{ public:
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":UnapprovedKeyAccessStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: UnapprovedKey +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__UnapprovedKeyAccessStructure operations:
/// - ns2__UnapprovedKeyAccessStructure* soap_new_ns2__UnapprovedKeyAccessStructure(soap*) allocate and default initialize
/// - ns2__UnapprovedKeyAccessStructure* soap_new_ns2__UnapprovedKeyAccessStructure(soap*, int num) allocate array and default initialize values
/// - ns2__UnapprovedKeyAccessStructure* soap_new_req_ns2__UnapprovedKeyAccessStructure(soap*, ...) allocate, set required members
/// - ns2__UnapprovedKeyAccessStructure* soap_new_set_ns2__UnapprovedKeyAccessStructure(soap*, ...) allocate, set all public members
/// - ns2__UnapprovedKeyAccessStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnapprovedKeyAccessStructure(soap*, ns2__UnapprovedKeyAccessStructure*) deserialize from a stream
/// - int soap_write_ns2__UnapprovedKeyAccessStructure(soap*, ns2__UnapprovedKeyAccessStructure*) serialize to a stream
/// - ns2__UnapprovedKeyAccessStructure* ns2__UnapprovedKeyAccessStructure::soap_dup(soap*) returns deep copy of ns2__UnapprovedKeyAccessStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnapprovedKeyAccessStructure::soap_del() deep deletes ns2__UnapprovedKeyAccessStructure data members, use only after ns2__UnapprovedKeyAccessStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnapprovedKeyAccessStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   User key.
/// </BLOCKQUOTE></PRE>
/// Element "Key" of XSD type xs:normalizedString.
    xsd__normalizedString*               Key                            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":UnknownParticipantErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: Unknown Participant. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__UnknownParticipantErrorStructure operations:
/// - ns2__UnknownParticipantErrorStructure* soap_new_ns2__UnknownParticipantErrorStructure(soap*) allocate and default initialize
/// - ns2__UnknownParticipantErrorStructure* soap_new_ns2__UnknownParticipantErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__UnknownParticipantErrorStructure* soap_new_req_ns2__UnknownParticipantErrorStructure(soap*, ...) allocate, set required members
/// - ns2__UnknownParticipantErrorStructure* soap_new_set_ns2__UnknownParticipantErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__UnknownParticipantErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnknownParticipantErrorStructure(soap*, ns2__UnknownParticipantErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__UnknownParticipantErrorStructure(soap*, ns2__UnknownParticipantErrorStructure*) serialize to a stream
/// - ns2__UnknownParticipantErrorStructure* ns2__UnknownParticipantErrorStructure::soap_dup(soap*) returns deep copy of ns2__UnknownParticipantErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnknownParticipantErrorStructure::soap_del() deep deletes ns2__UnknownParticipantErrorStructure data members, use only after ns2__UnknownParticipantErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnknownParticipantErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to Participant who is unknown. + SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":UnknownEndpointErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: Unknown Endpoint +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__UnknownEndpointErrorStructure operations:
/// - ns2__UnknownEndpointErrorStructure* soap_new_ns2__UnknownEndpointErrorStructure(soap*) allocate and default initialize
/// - ns2__UnknownEndpointErrorStructure* soap_new_ns2__UnknownEndpointErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__UnknownEndpointErrorStructure* soap_new_req_ns2__UnknownEndpointErrorStructure(soap*, ...) allocate, set required members
/// - ns2__UnknownEndpointErrorStructure* soap_new_set_ns2__UnknownEndpointErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__UnknownEndpointErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnknownEndpointErrorStructure(soap*, ns2__UnknownEndpointErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__UnknownEndpointErrorStructure(soap*, ns2__UnknownEndpointErrorStructure*) serialize to a stream
/// - ns2__UnknownEndpointErrorStructure* ns2__UnknownEndpointErrorStructure::soap_dup(soap*) returns deep copy of ns2__UnknownEndpointErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnknownEndpointErrorStructure::soap_del() deep deletes ns2__UnknownEndpointErrorStructure data members, use only after ns2__UnknownEndpointErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnknownEndpointErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   Endpoint that is noit known. + SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Endpoint" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Endpoint                       0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":EndpointDeniedAccessStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: EndpointDeniedAccess +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__EndpointDeniedAccessStructure operations:
/// - ns2__EndpointDeniedAccessStructure* soap_new_ns2__EndpointDeniedAccessStructure(soap*) allocate and default initialize
/// - ns2__EndpointDeniedAccessStructure* soap_new_ns2__EndpointDeniedAccessStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EndpointDeniedAccessStructure* soap_new_req_ns2__EndpointDeniedAccessStructure(soap*, ...) allocate, set required members
/// - ns2__EndpointDeniedAccessStructure* soap_new_set_ns2__EndpointDeniedAccessStructure(soap*, ...) allocate, set all public members
/// - ns2__EndpointDeniedAccessStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EndpointDeniedAccessStructure(soap*, ns2__EndpointDeniedAccessStructure*) deserialize from a stream
/// - int soap_write_ns2__EndpointDeniedAccessStructure(soap*, ns2__EndpointDeniedAccessStructure*) serialize to a stream
/// - ns2__EndpointDeniedAccessStructure* ns2__EndpointDeniedAccessStructure::soap_dup(soap*) returns deep copy of ns2__EndpointDeniedAccessStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EndpointDeniedAccessStructure::soap_del() deep deletes ns2__EndpointDeniedAccessStructure data members, use only after ns2__EndpointDeniedAccessStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EndpointDeniedAccessStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   Endpoint that was denied access + SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Endpoint" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Endpoint                       0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":EndpointNotAvailableAccessStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: EndpointNotAvailable +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__EndpointNotAvailableAccessStructure operations:
/// - ns2__EndpointNotAvailableAccessStructure* soap_new_ns2__EndpointNotAvailableAccessStructure(soap*) allocate and default initialize
/// - ns2__EndpointNotAvailableAccessStructure* soap_new_ns2__EndpointNotAvailableAccessStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EndpointNotAvailableAccessStructure* soap_new_req_ns2__EndpointNotAvailableAccessStructure(soap*, ...) allocate, set required members
/// - ns2__EndpointNotAvailableAccessStructure* soap_new_set_ns2__EndpointNotAvailableAccessStructure(soap*, ...) allocate, set all public members
/// - ns2__EndpointNotAvailableAccessStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EndpointNotAvailableAccessStructure(soap*, ns2__EndpointNotAvailableAccessStructure*) deserialize from a stream
/// - int soap_write_ns2__EndpointNotAvailableAccessStructure(soap*, ns2__EndpointNotAvailableAccessStructure*) serialize to a stream
/// - ns2__EndpointNotAvailableAccessStructure* ns2__EndpointNotAvailableAccessStructure::soap_dup(soap*) returns deep copy of ns2__EndpointNotAvailableAccessStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EndpointNotAvailableAccessStructure::soap_del() deep deletes ns2__EndpointNotAvailableAccessStructure data members, use only after ns2__EndpointNotAvailableAccessStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EndpointNotAvailableAccessStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   Endpoint that is noit available. + SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Endpoint" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Endpoint                       0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ServiceNotAvailableErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Service Not Available error
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceNotAvailableErrorStructure operations:
/// - ns2__ServiceNotAvailableErrorStructure* soap_new_ns2__ServiceNotAvailableErrorStructure(soap*) allocate and default initialize
/// - ns2__ServiceNotAvailableErrorStructure* soap_new_ns2__ServiceNotAvailableErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceNotAvailableErrorStructure* soap_new_req_ns2__ServiceNotAvailableErrorStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceNotAvailableErrorStructure* soap_new_set_ns2__ServiceNotAvailableErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceNotAvailableErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceNotAvailableErrorStructure(soap*, ns2__ServiceNotAvailableErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceNotAvailableErrorStructure(soap*, ns2__ServiceNotAvailableErrorStructure*) serialize to a stream
/// - ns2__ServiceNotAvailableErrorStructure* ns2__ServiceNotAvailableErrorStructure::soap_dup(soap*) returns deep copy of ns2__ServiceNotAvailableErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceNotAvailableErrorStructure::soap_del() deep deletes ns2__ServiceNotAvailableErrorStructure data members, use only after ns2__ServiceNotAvailableErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceNotAvailableErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   Expected time fro reavailability of servcie. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedRestartTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ExpectedRestartTime            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":CapabilityNotSupportedErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: Service does not support requested capability.
/// </BLOCKQUOTE></PRE>
/// class ns2__CapabilityNotSupportedErrorStructure operations:
/// - ns2__CapabilityNotSupportedErrorStructure* soap_new_ns2__CapabilityNotSupportedErrorStructure(soap*) allocate and default initialize
/// - ns2__CapabilityNotSupportedErrorStructure* soap_new_ns2__CapabilityNotSupportedErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CapabilityNotSupportedErrorStructure* soap_new_req_ns2__CapabilityNotSupportedErrorStructure(soap*, ...) allocate, set required members
/// - ns2__CapabilityNotSupportedErrorStructure* soap_new_set_ns2__CapabilityNotSupportedErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__CapabilityNotSupportedErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CapabilityNotSupportedErrorStructure(soap*, ns2__CapabilityNotSupportedErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__CapabilityNotSupportedErrorStructure(soap*, ns2__CapabilityNotSupportedErrorStructure*) serialize to a stream
/// - ns2__CapabilityNotSupportedErrorStructure* ns2__CapabilityNotSupportedErrorStructure::soap_dup(soap*) returns deep copy of ns2__CapabilityNotSupportedErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CapabilityNotSupportedErrorStructure::soap_del() deep deletes ns2__CapabilityNotSupportedErrorStructure data members, use only after ns2__CapabilityNotSupportedErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CapabilityNotSupportedErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   Id of capabiliuty that is noit supported.
/// </BLOCKQUOTE></PRE>
/// Element "CapabilityRef" of XSD type "http://www.siri.org.uk/siri":CapabilityCodeType.
    ns2__CapabilityCodeType*             CapabilityRef                  0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":BeyondDataHorizonErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for error.
/// </BLOCKQUOTE></PRE>
/// class ns2__BeyondDataHorizonErrorStructure operations:
/// - ns2__BeyondDataHorizonErrorStructure* soap_new_ns2__BeyondDataHorizonErrorStructure(soap*) allocate and default initialize
/// - ns2__BeyondDataHorizonErrorStructure* soap_new_ns2__BeyondDataHorizonErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__BeyondDataHorizonErrorStructure* soap_new_req_ns2__BeyondDataHorizonErrorStructure(soap*, ...) allocate, set required members
/// - ns2__BeyondDataHorizonErrorStructure* soap_new_set_ns2__BeyondDataHorizonErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__BeyondDataHorizonErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__BeyondDataHorizonErrorStructure(soap*, ns2__BeyondDataHorizonErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__BeyondDataHorizonErrorStructure(soap*, ns2__BeyondDataHorizonErrorStructure*) serialize to a stream
/// - ns2__BeyondDataHorizonErrorStructure* ns2__BeyondDataHorizonErrorStructure::soap_dup(soap*) returns deep copy of ns2__BeyondDataHorizonErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BeyondDataHorizonErrorStructure::soap_del() deep deletes ns2__BeyondDataHorizonErrorStructure data members, use only after ns2__BeyondDataHorizonErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BeyondDataHorizonErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
};

/// @brief "http://www.siri.org.uk/siri":AccessNotAllowedErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type forError:Access Not Allowed
/// </BLOCKQUOTE></PRE>
/// class ns2__AccessNotAllowedErrorStructure operations:
/// - ns2__AccessNotAllowedErrorStructure* soap_new_ns2__AccessNotAllowedErrorStructure(soap*) allocate and default initialize
/// - ns2__AccessNotAllowedErrorStructure* soap_new_ns2__AccessNotAllowedErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AccessNotAllowedErrorStructure* soap_new_req_ns2__AccessNotAllowedErrorStructure(soap*, ...) allocate, set required members
/// - ns2__AccessNotAllowedErrorStructure* soap_new_set_ns2__AccessNotAllowedErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__AccessNotAllowedErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AccessNotAllowedErrorStructure(soap*, ns2__AccessNotAllowedErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__AccessNotAllowedErrorStructure(soap*, ns2__AccessNotAllowedErrorStructure*) serialize to a stream
/// - ns2__AccessNotAllowedErrorStructure* ns2__AccessNotAllowedErrorStructure::soap_dup(soap*) returns deep copy of ns2__AccessNotAllowedErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AccessNotAllowedErrorStructure::soap_del() deep deletes ns2__AccessNotAllowedErrorStructure data members, use only after ns2__AccessNotAllowedErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AccessNotAllowedErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
};

/// @brief "http://www.siri.org.uk/siri":NoInfoForTopicErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: No Info for Topic
/// </BLOCKQUOTE></PRE>
/// class ns2__NoInfoForTopicErrorStructure operations:
/// - ns2__NoInfoForTopicErrorStructure* soap_new_ns2__NoInfoForTopicErrorStructure(soap*) allocate and default initialize
/// - ns2__NoInfoForTopicErrorStructure* soap_new_ns2__NoInfoForTopicErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NoInfoForTopicErrorStructure* soap_new_req_ns2__NoInfoForTopicErrorStructure(soap*, ...) allocate, set required members
/// - ns2__NoInfoForTopicErrorStructure* soap_new_set_ns2__NoInfoForTopicErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__NoInfoForTopicErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NoInfoForTopicErrorStructure(soap*, ns2__NoInfoForTopicErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__NoInfoForTopicErrorStructure(soap*, ns2__NoInfoForTopicErrorStructure*) serialize to a stream
/// - ns2__NoInfoForTopicErrorStructure* ns2__NoInfoForTopicErrorStructure::soap_dup(soap*) returns deep copy of ns2__NoInfoForTopicErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NoInfoForTopicErrorStructure::soap_del() deep deletes ns2__NoInfoForTopicErrorStructure data members, use only after ns2__NoInfoForTopicErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NoInfoForTopicErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
};

/// @brief "http://www.siri.org.uk/siri":InvalidDataReferencesErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for InvalidDataReferencesError:. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// class ns2__InvalidDataReferencesErrorStructure operations:
/// - ns2__InvalidDataReferencesErrorStructure* soap_new_ns2__InvalidDataReferencesErrorStructure(soap*) allocate and default initialize
/// - ns2__InvalidDataReferencesErrorStructure* soap_new_ns2__InvalidDataReferencesErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InvalidDataReferencesErrorStructure* soap_new_req_ns2__InvalidDataReferencesErrorStructure(soap*, ...) allocate, set required members
/// - ns2__InvalidDataReferencesErrorStructure* soap_new_set_ns2__InvalidDataReferencesErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__InvalidDataReferencesErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InvalidDataReferencesErrorStructure(soap*, ns2__InvalidDataReferencesErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__InvalidDataReferencesErrorStructure(soap*, ns2__InvalidDataReferencesErrorStructure*) serialize to a stream
/// - ns2__InvalidDataReferencesErrorStructure* ns2__InvalidDataReferencesErrorStructure::soap_dup(soap*) returns deep copy of ns2__InvalidDataReferencesErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InvalidDataReferencesErrorStructure::soap_del() deep deletes ns2__InvalidDataReferencesErrorStructure data members, use only after ns2__InvalidDataReferencesErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InvalidDataReferencesErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
};

/// @brief "http://www.siri.org.uk/siri":ParametersIgnoredErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Parameters Ignored Error:. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// class ns2__ParametersIgnoredErrorStructure operations:
/// - ns2__ParametersIgnoredErrorStructure* soap_new_ns2__ParametersIgnoredErrorStructure(soap*) allocate and default initialize
/// - ns2__ParametersIgnoredErrorStructure* soap_new_ns2__ParametersIgnoredErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ParametersIgnoredErrorStructure* soap_new_req_ns2__ParametersIgnoredErrorStructure(soap*, ...) allocate, set required members
/// - ns2__ParametersIgnoredErrorStructure* soap_new_set_ns2__ParametersIgnoredErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__ParametersIgnoredErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ParametersIgnoredErrorStructure(soap*, ns2__ParametersIgnoredErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__ParametersIgnoredErrorStructure(soap*, ns2__ParametersIgnoredErrorStructure*) serialize to a stream
/// - ns2__ParametersIgnoredErrorStructure* ns2__ParametersIgnoredErrorStructure::soap_dup(soap*) returns deep copy of ns2__ParametersIgnoredErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ParametersIgnoredErrorStructure::soap_del() deep deletes ns2__ParametersIgnoredErrorStructure data members, use only after ns2__ParametersIgnoredErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ParametersIgnoredErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
};

/// @brief "http://www.siri.org.uk/siri":UnknownExtensionsErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Unknown Extensions Error:. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// class ns2__UnknownExtensionsErrorStructure operations:
/// - ns2__UnknownExtensionsErrorStructure* soap_new_ns2__UnknownExtensionsErrorStructure(soap*) allocate and default initialize
/// - ns2__UnknownExtensionsErrorStructure* soap_new_ns2__UnknownExtensionsErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__UnknownExtensionsErrorStructure* soap_new_req_ns2__UnknownExtensionsErrorStructure(soap*, ...) allocate, set required members
/// - ns2__UnknownExtensionsErrorStructure* soap_new_set_ns2__UnknownExtensionsErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__UnknownExtensionsErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnknownExtensionsErrorStructure(soap*, ns2__UnknownExtensionsErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__UnknownExtensionsErrorStructure(soap*, ns2__UnknownExtensionsErrorStructure*) serialize to a stream
/// - ns2__UnknownExtensionsErrorStructure* ns2__UnknownExtensionsErrorStructure::soap_dup(soap*) returns deep copy of ns2__UnknownExtensionsErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnknownExtensionsErrorStructure::soap_del() deep deletes ns2__UnknownExtensionsErrorStructure data members, use only after ns2__UnknownExtensionsErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnknownExtensionsErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
};

/// @brief "http://www.siri.org.uk/siri":AllowedResourceUsageExceededErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for error. AllowedResourceUsageExceeded
/// </BLOCKQUOTE></PRE>
/// class ns2__AllowedResourceUsageExceededErrorStructure operations:
/// - ns2__AllowedResourceUsageExceededErrorStructure* soap_new_ns2__AllowedResourceUsageExceededErrorStructure(soap*) allocate and default initialize
/// - ns2__AllowedResourceUsageExceededErrorStructure* soap_new_ns2__AllowedResourceUsageExceededErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AllowedResourceUsageExceededErrorStructure* soap_new_req_ns2__AllowedResourceUsageExceededErrorStructure(soap*, ...) allocate, set required members
/// - ns2__AllowedResourceUsageExceededErrorStructure* soap_new_set_ns2__AllowedResourceUsageExceededErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__AllowedResourceUsageExceededErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AllowedResourceUsageExceededErrorStructure(soap*, ns2__AllowedResourceUsageExceededErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__AllowedResourceUsageExceededErrorStructure(soap*, ns2__AllowedResourceUsageExceededErrorStructure*) serialize to a stream
/// - ns2__AllowedResourceUsageExceededErrorStructure* ns2__AllowedResourceUsageExceededErrorStructure::soap_dup(soap*) returns deep copy of ns2__AllowedResourceUsageExceededErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AllowedResourceUsageExceededErrorStructure::soap_del() deep deletes ns2__AllowedResourceUsageExceededErrorStructure data members, use only after ns2__AllowedResourceUsageExceededErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AllowedResourceUsageExceededErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
};

/// @brief "http://www.siri.org.uk/siri":UnknownSubscriberErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: Subscriber not found.
/// </BLOCKQUOTE></PRE>
/// class ns2__UnknownSubscriberErrorStructure operations:
/// - ns2__UnknownSubscriberErrorStructure* soap_new_ns2__UnknownSubscriberErrorStructure(soap*) allocate and default initialize
/// - ns2__UnknownSubscriberErrorStructure* soap_new_ns2__UnknownSubscriberErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__UnknownSubscriberErrorStructure* soap_new_req_ns2__UnknownSubscriberErrorStructure(soap*, ...) allocate, set required members
/// - ns2__UnknownSubscriberErrorStructure* soap_new_set_ns2__UnknownSubscriberErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__UnknownSubscriberErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnknownSubscriberErrorStructure(soap*, ns2__UnknownSubscriberErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__UnknownSubscriberErrorStructure(soap*, ns2__UnknownSubscriberErrorStructure*) serialize to a stream
/// - ns2__UnknownSubscriberErrorStructure* ns2__UnknownSubscriberErrorStructure::soap_dup(soap*) returns deep copy of ns2__UnknownSubscriberErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnknownSubscriberErrorStructure::soap_del() deep deletes ns2__UnknownSubscriberErrorStructure data members, use only after ns2__UnknownSubscriberErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnknownSubscriberErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   Id of capabiliuty that is noit supported. + SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":UnknownSubscriptionErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Error: Subscription not found.
/// </BLOCKQUOTE></PRE>
/// class ns2__UnknownSubscriptionErrorStructure operations:
/// - ns2__UnknownSubscriptionErrorStructure* soap_new_ns2__UnknownSubscriptionErrorStructure(soap*) allocate and default initialize
/// - ns2__UnknownSubscriptionErrorStructure* soap_new_ns2__UnknownSubscriptionErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__UnknownSubscriptionErrorStructure* soap_new_req_ns2__UnknownSubscriptionErrorStructure(soap*, ...) allocate, set required members
/// - ns2__UnknownSubscriptionErrorStructure* soap_new_set_ns2__UnknownSubscriptionErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__UnknownSubscriptionErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnknownSubscriptionErrorStructure(soap*, ns2__UnknownSubscriptionErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__UnknownSubscriptionErrorStructure(soap*, ns2__UnknownSubscriptionErrorStructure*) serialize to a stream
/// - ns2__UnknownSubscriptionErrorStructure* ns2__UnknownSubscriptionErrorStructure::soap_dup(soap*) returns deep copy of ns2__UnknownSubscriptionErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnknownSubscriptionErrorStructure::soap_del() deep deletes ns2__UnknownSubscriptionErrorStructure data members, use only after ns2__UnknownSubscriptionErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnknownSubscriptionErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
/// <PRE><BLOCKQUOTE>
///   Ubscription code that could not be found. + SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionCode" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionCode               0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":OtherErrorStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ErrorCodeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for error.
/// </BLOCKQUOTE></PRE>
/// class ns2__OtherErrorStructure operations:
/// - ns2__OtherErrorStructure* soap_new_ns2__OtherErrorStructure(soap*) allocate and default initialize
/// - ns2__OtherErrorStructure* soap_new_ns2__OtherErrorStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OtherErrorStructure* soap_new_req_ns2__OtherErrorStructure(soap*, ...) allocate, set required members
/// - ns2__OtherErrorStructure* soap_new_set_ns2__OtherErrorStructure(soap*, ...) allocate, set all public members
/// - ns2__OtherErrorStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OtherErrorStructure(soap*, ns2__OtherErrorStructure*) deserialize from a stream
/// - int soap_write_ns2__OtherErrorStructure(soap*, ns2__OtherErrorStructure*) serialize to a stream
/// - ns2__OtherErrorStructure* ns2__OtherErrorStructure::soap_dup(soap*) returns deep copy of ns2__OtherErrorStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OtherErrorStructure::soap_del() deep deletes ns2__OtherErrorStructure data members, use only after ns2__OtherErrorStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OtherErrorStructure : public ns2__ErrorCodeStructure
{ public:
/*  INHERITED FROM ns2__ErrorCodeStructure:
/// <PRE><BLOCKQUOTE>
///   Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorText" of XSD type xs:string.
    std::wstring*                        ErrorText                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Error code number assoicated with error.
/// </BLOCKQUOTE></PRE>
/// Attribute "number" of XSD type xs:integer.
   @xsd__integer*                        number                         0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ErrorCodeStructure */
};

/// @brief "http://www.siri.org.uk/siri":MessageQualifierStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a message within SIRI functional service type and participant.
/// </BLOCKQUOTE></PRE>
/// class ns2__MessageQualifierStructure operations:
/// - ns2__MessageQualifierStructure* soap_new_ns2__MessageQualifierStructure(soap*) allocate and default initialize
/// - ns2__MessageQualifierStructure* soap_new_ns2__MessageQualifierStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MessageQualifierStructure* soap_new_req_ns2__MessageQualifierStructure(soap*, ...) allocate, set required members
/// - ns2__MessageQualifierStructure* soap_new_set_ns2__MessageQualifierStructure(soap*, ...) allocate, set all public members
/// - ns2__MessageQualifierStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MessageQualifierStructure(soap*, ns2__MessageQualifierStructure*) deserialize from a stream
/// - int soap_write_ns2__MessageQualifierStructure(soap*, ns2__MessageQualifierStructure*) serialize to a stream
/// - ns2__MessageQualifierStructure* ns2__MessageQualifierStructure::soap_dup(soap*) returns deep copy of ns2__MessageQualifierStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MessageQualifierStructure::soap_del() deep deletes ns2__MessageQualifierStructure data members, use only after ns2__MessageQualifierStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MessageQualifierStructure : public xsd__anyType
{ public:
/// __item wraps "xs:normalizedString" simpleContent.
    xsd__normalizedString                __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":SubscriptionQualifierStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type Unique identifier of Subscription within Participant.
/// </BLOCKQUOTE></PRE>
/// class ns2__SubscriptionQualifierStructure operations:
/// - ns2__SubscriptionQualifierStructure* soap_new_ns2__SubscriptionQualifierStructure(soap*) allocate and default initialize
/// - ns2__SubscriptionQualifierStructure* soap_new_ns2__SubscriptionQualifierStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SubscriptionQualifierStructure* soap_new_req_ns2__SubscriptionQualifierStructure(soap*, ...) allocate, set required members
/// - ns2__SubscriptionQualifierStructure* soap_new_set_ns2__SubscriptionQualifierStructure(soap*, ...) allocate, set all public members
/// - ns2__SubscriptionQualifierStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SubscriptionQualifierStructure(soap*, ns2__SubscriptionQualifierStructure*) deserialize from a stream
/// - int soap_write_ns2__SubscriptionQualifierStructure(soap*, ns2__SubscriptionQualifierStructure*) serialize to a stream
/// - ns2__SubscriptionQualifierStructure* ns2__SubscriptionQualifierStructure::soap_dup(soap*) returns deep copy of ns2__SubscriptionQualifierStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SubscriptionQualifierStructure::soap_del() deep deletes ns2__SubscriptionQualifierStructure data members, use only after ns2__SubscriptionQualifierStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SubscriptionQualifierStructure : public xsd__anyType
{ public:
/// __item wraps "xs:NMTOKEN" simpleContent.
    xsd__NMTOKEN                         __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":SubscriptionFilterStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type Unique identifier of Subscription Filter within Participant.
/// </BLOCKQUOTE></PRE>
/// class ns2__SubscriptionFilterStructure operations:
/// - ns2__SubscriptionFilterStructure* soap_new_ns2__SubscriptionFilterStructure(soap*) allocate and default initialize
/// - ns2__SubscriptionFilterStructure* soap_new_ns2__SubscriptionFilterStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SubscriptionFilterStructure* soap_new_req_ns2__SubscriptionFilterStructure(soap*, ...) allocate, set required members
/// - ns2__SubscriptionFilterStructure* soap_new_set_ns2__SubscriptionFilterStructure(soap*, ...) allocate, set all public members
/// - ns2__SubscriptionFilterStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SubscriptionFilterStructure(soap*, ns2__SubscriptionFilterStructure*) deserialize from a stream
/// - int soap_write_ns2__SubscriptionFilterStructure(soap*, ns2__SubscriptionFilterStructure*) serialize to a stream
/// - ns2__SubscriptionFilterStructure* ns2__SubscriptionFilterStructure::soap_dup(soap*) returns deep copy of ns2__SubscriptionFilterStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SubscriptionFilterStructure::soap_del() deep deletes ns2__SubscriptionFilterStructure data members, use only after ns2__SubscriptionFilterStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SubscriptionFilterStructure : public xsd__anyType
{ public:
/// __item wraps "xs:NMTOKEN" simpleContent.
    xsd__NMTOKEN                         __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type Unique identifier of Subscription Filter within Participant.
/// </BLOCKQUOTE></PRE>
/// class ns2__SubscriptionFilterRefStructure operations:
/// - ns2__SubscriptionFilterRefStructure* soap_new_ns2__SubscriptionFilterRefStructure(soap*) allocate and default initialize
/// - ns2__SubscriptionFilterRefStructure* soap_new_ns2__SubscriptionFilterRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SubscriptionFilterRefStructure* soap_new_req_ns2__SubscriptionFilterRefStructure(soap*, ...) allocate, set required members
/// - ns2__SubscriptionFilterRefStructure* soap_new_set_ns2__SubscriptionFilterRefStructure(soap*, ...) allocate, set all public members
/// - ns2__SubscriptionFilterRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SubscriptionFilterRefStructure(soap*, ns2__SubscriptionFilterRefStructure*) deserialize from a stream
/// - int soap_write_ns2__SubscriptionFilterRefStructure(soap*, ns2__SubscriptionFilterRefStructure*) serialize to a stream
/// - ns2__SubscriptionFilterRefStructure* ns2__SubscriptionFilterRefStructure::soap_dup(soap*) returns deep copy of ns2__SubscriptionFilterRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SubscriptionFilterRefStructure::soap_del() deep deletes ns2__SubscriptionFilterRefStructure data members, use only after ns2__SubscriptionFilterRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SubscriptionFilterRefStructure : public xsd__anyType
{ public:
/// __item wraps "xs:NMTOKEN" simpleContent.
    xsd__NMTOKEN                         __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":JourneyPlaceRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a PLACE visited by a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__JourneyPlaceRefStructure operations:
/// - ns2__JourneyPlaceRefStructure* soap_new_ns2__JourneyPlaceRefStructure(soap*) allocate and default initialize
/// - ns2__JourneyPlaceRefStructure* soap_new_ns2__JourneyPlaceRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__JourneyPlaceRefStructure* soap_new_req_ns2__JourneyPlaceRefStructure(soap*, ...) allocate, set required members
/// - ns2__JourneyPlaceRefStructure* soap_new_set_ns2__JourneyPlaceRefStructure(soap*, ...) allocate, set all public members
/// - ns2__JourneyPlaceRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__JourneyPlaceRefStructure(soap*, ns2__JourneyPlaceRefStructure*) deserialize from a stream
/// - int soap_write_ns2__JourneyPlaceRefStructure(soap*, ns2__JourneyPlaceRefStructure*) serialize to a stream
/// - ns2__JourneyPlaceRefStructure* ns2__JourneyPlaceRefStructure::soap_dup(soap*) returns deep copy of ns2__JourneyPlaceRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__JourneyPlaceRefStructure::soap_del() deep deletes ns2__JourneyPlaceRefStructure data members, use only after ns2__JourneyPlaceRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__JourneyPlaceRefStructure : public xsd__anyType
{ public:
/// __item wraps "xs:NMTOKEN" simpleContent.
    xsd__NMTOKEN                         __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":EntryQualifierStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a referenceUnique identifier of a SITUATION within participant.
/// </BLOCKQUOTE></PRE>
/// class ns2__EntryQualifierStructure operations:
/// - ns2__EntryQualifierStructure* soap_new_ns2__EntryQualifierStructure(soap*) allocate and default initialize
/// - ns2__EntryQualifierStructure* soap_new_ns2__EntryQualifierStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EntryQualifierStructure* soap_new_req_ns2__EntryQualifierStructure(soap*, ...) allocate, set required members
/// - ns2__EntryQualifierStructure* soap_new_set_ns2__EntryQualifierStructure(soap*, ...) allocate, set all public members
/// - ns2__EntryQualifierStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EntryQualifierStructure(soap*, ns2__EntryQualifierStructure*) deserialize from a stream
/// - int soap_write_ns2__EntryQualifierStructure(soap*, ns2__EntryQualifierStructure*) serialize to a stream
/// - ns2__EntryQualifierStructure* ns2__EntryQualifierStructure::soap_dup(soap*) returns deep copy of ns2__EntryQualifierStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EntryQualifierStructure::soap_del() deep deletes ns2__EntryQualifierStructure data members, use only after ns2__EntryQualifierStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EntryQualifierStructure : public xsd__anyType
{ public:
/// __item wraps "xs:anyURI" simpleContent.
    xsd__anyURI                          __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":SituationVersion is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for SITUATION version number if entry is update to a previous version. Unique within IncidentNumber. Monotonically increasing within IncidentNumber. Any values for classification, description, affects, effects that are present in an update replace any values on previous incidents and updates with the same identifier. Values that are not updated remain in effect.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationVersion operations:
/// - ns2__SituationVersion* soap_new_ns2__SituationVersion(soap*) allocate and default initialize
/// - ns2__SituationVersion* soap_new_ns2__SituationVersion(soap*, int num) allocate array and default initialize values
/// - ns2__SituationVersion* soap_new_req_ns2__SituationVersion(soap*, ...) allocate, set required members
/// - ns2__SituationVersion* soap_new_set_ns2__SituationVersion(soap*, ...) allocate, set all public members
/// - ns2__SituationVersion::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationVersion(soap*, ns2__SituationVersion*) deserialize from a stream
/// - int soap_write_ns2__SituationVersion(soap*, ns2__SituationVersion*) serialize to a stream
/// - ns2__SituationVersion* ns2__SituationVersion::soap_dup(soap*) returns deep copy of ns2__SituationVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationVersion::soap_del() deep deletes ns2__SituationVersion data members, use only after ns2__SituationVersion::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationVersion : public xsd__anyType
{ public:
/// __item wraps "xs:integer" simpleContent.
    xsd__integer                         __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":ViaNameStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PlaceNameStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for VIA NAMes structure.
/// </BLOCKQUOTE></PRE>
/// class ns2__ViaNameStructure operations:
/// - ns2__ViaNameStructure* soap_new_ns2__ViaNameStructure(soap*) allocate and default initialize
/// - ns2__ViaNameStructure* soap_new_ns2__ViaNameStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ViaNameStructure* soap_new_req_ns2__ViaNameStructure(soap*, ...) allocate, set required members
/// - ns2__ViaNameStructure* soap_new_set_ns2__ViaNameStructure(soap*, ...) allocate, set all public members
/// - ns2__ViaNameStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ViaNameStructure(soap*, ns2__ViaNameStructure*) deserialize from a stream
/// - int soap_write_ns2__ViaNameStructure(soap*, ns2__ViaNameStructure*) serialize to a stream
/// - ns2__ViaNameStructure* ns2__ViaNameStructure::soap_dup(soap*) returns deep copy of ns2__ViaNameStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ViaNameStructure::soap_del() deep deletes ns2__ViaNameStructure data members, use only after ns2__ViaNameStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ViaNameStructure : public ns2__PlaceNameStructure
{ public:
/*  INHERITED FROM ns2__PlaceNameStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to a TOPOGRAPHIC PLACE.
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type "http://www.siri.org.uk/siri":JourneyPlaceRefStructure.
    ns2__JourneyPlaceRefStructure*       PlaceRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Names of place used to help identify the LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> PlaceName                      0;
/// <PRE><BLOCKQUOTE>
///   Short name of TOPOGRAPHIC PLACE. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> PlaceShortName                 0;
    END OF INHERITED FROM ns2__PlaceNameStructure */
/// <PRE><BLOCKQUOTE>
///   Relative priority to give to VIA name in displays. 1=high. Default is 2. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ViaPriority" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              ViaPriority                    0 = "2";	///< Default element value="2".
};

/// @brief "http://www.siri.org.uk/siri":OnwardCallStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractMonitoredCallStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type Onwards CALLs at stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__OnwardCallStructure operations:
/// - ns2__OnwardCallStructure* soap_new_ns2__OnwardCallStructure(soap*) allocate and default initialize
/// - ns2__OnwardCallStructure* soap_new_ns2__OnwardCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OnwardCallStructure* soap_new_req_ns2__OnwardCallStructure(soap*, ...) allocate, set required members
/// - ns2__OnwardCallStructure* soap_new_set_ns2__OnwardCallStructure(soap*, ...) allocate, set all public members
/// - ns2__OnwardCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OnwardCallStructure(soap*, ns2__OnwardCallStructure*) deserialize from a stream
/// - int soap_write_ns2__OnwardCallStructure(soap*, ns2__OnwardCallStructure*) serialize to a stream
/// - ns2__OnwardCallStructure* ns2__OnwardCallStructure::soap_dup(soap*) returns deep copy of ns2__OnwardCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OnwardCallStructure::soap_del() deep deletes ns2__OnwardCallStructure data members, use only after ns2__OnwardCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OnwardCallStructure : public ns2__AbstractMonitoredCallStructure
{ public:
/*  INHERITED FROM ns2__AbstractMonitoredCallStructure:
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractMonitoredCallStructure */
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE is currently at stop. Default is false (xml default added from SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleAtStop.
    bool                                 VehicleAtStop                  0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the stop is a TIMING POINT. Times for stops that are not timing points are sometimes interpolated crudely from the timing points, and may represent a lower level of accuracy. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TimingPoint.
    bool                                 TimingPoint                    0 = true;	///< Default element value="true".
//  BEGIN GROUP <xs:group name="OnwardsCallGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the CALL. Values for these elements can be specified on an production VEHICLE JOURNEY CALL. Each real-time journey CALL takes its values from the corresponding dated VEHICLE JOURNEY CALL. The absence of a value on an real-time CALL l indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="OnwardVehicleArrivalTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for Arrival in onward CALl.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE at stop .
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedArrivalTime.
    xsd__dateTime*                       ExpectedArrivalTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Prediction quality, either as approximate level, or more quantitayive percentile range of predictions will fall within a given range of times. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedArrivalPredictionQuality" of XSD type "http://www.siri.org.uk/siri":PredictionQualityStructure.
    ns2__PredictionQualityStructure*     ExpectedArrivalPredictionQuality 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="MonitoredStopArrivalStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the arrival status of a VEHICLE at a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the visit according to a fixed list of values. If not specified, same as DepartureStatus.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalStatus.
    enum ns2__CallStatusEnumeration*     ArrivalStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary text string to show to indicate the status of the departure of the VEHICLE for example, Enroute, 5 Km, Approaching. May depend on the policy of the OPERATOR, for example show Approaching if less than 200metres away from stop. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalProximityText.
    ns2__NaturalLanguageStringStructure*  ArrivalProximityText           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bay or platform (QUAY) name to show passenger i.e. expected platform for vehicel to arrive at.Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is(i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element;(iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalPlatformName.
    ns2__NaturalLanguageStringStructure*  ArrivalPlatformName            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Type of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalBoardingActivity.
    enum ns2__ArrivalBoardingActivityEnumeration  ArrivalBoardingActivity        0 = ns2__ArrivalBoardingActivityEnumeration__alighting;	///< Default element value="alighting".
/// <PRE><BLOCKQUOTE>
///   Assignment of arrival of Scheduled STOP POINT to a phsyical QUAY (platform). If not given, assume same as for departure +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "ArrivalStopAssignment" of XSD type "http://www.siri.org.uk/siri":StopAssignmentStructure.
    ns2__StopAssignmentStructure*        ArrivalStopAssignment          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of servcie up until arrival.. May change for departure. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> ArrivalOperatorRefs            0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="OnwardVehicleDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for departure in ONWARD CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedDepartureTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE, most likely taking into account all control actions such as waiting.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedDepartureTime.
    xsd__dateTime*                       ExpectedDepartureTime          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Expected departure time of VEHICLE without waiting time due to operational actions. For people at stop this would normally be shown if different from Expected departure time. So if servcie decides not to wait may leave earler than expected departure time +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "ProvisionalExpectedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ProvisionalExpectedDepartureTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Earliest time at which VEHICLE may leave the stop. Used to secure connections. Used for passenger announcements. Passengers must be at boarding point by this time to be sure of catching VEHICLE. i.e. "Vehicle will not leave before this time" - may be revised from original aimed time. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "EarliestExpectedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       EarliestExpectedDepartureTime  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Prediction quality, either as approximate level, or more quantitayive percentile range of predictions will fall within a given range of times. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedDeparturePredictionQuality" of XSD type "http://www.siri.org.uk/siri":PredictionQualityStructure.
    ns2__PredictionQualityStructure*     ExpectedDeparturePredictionQuality 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="PassengerDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Passenget arrivel times at STOP PLACE in order to meet VEHICLEdeparture times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target Latest time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times as itmay include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Latest target time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedLatestPassengerAccessTime.
    xsd__dateTime*                       AimedLatestPassengerAccessTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Expected Latest time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times as it may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Latest expected time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedLatestPassengerAccessTime.
    xsd__dateTime*                       ExpectedLatestPassengerAccessTime 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="MonitoredStopDepartureStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the departure status of a VEHICLE from a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the departure part of the CALL, according to a fixed list of values. This may reflect a presentation policy, for example CALLs less than one minute behind target time are still classified as on-time. Applications may use this to guide their own presentation of times.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureStatus.
    enum ns2__CallStatusEnumeration*     DepartureStatus                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary text string to show to indicate the status of the departure of the vehicle, for example, Boarding, GatesClosed. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureProximityText.
    ns2__NaturalLanguageStringStructure*  DepartureProximityText         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Defaulted taken from from planned timetable..
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Inheritable property.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DeparturePlatformName.
    ns2__NaturalLanguageStringStructure*  DeparturePlatformName          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding allowed at stop. Default is 'Boarding'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureBoardingActivity.
    enum ns2__DepartureBoardingActivityEnumeration  DepartureBoardingActivity      0 = ns2__DepartureBoardingActivityEnumeration__boarding;	///< Default element value="boarding".
/// <PRE><BLOCKQUOTE>
///   Assignments of departure platfiorm for Scheduled STOP POINT to a physical QUAY. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "DepartureStopAssignment" of XSD type "http://www.siri.org.uk/siri":StopAssignmentStructure.
    ns2__StopAssignmentStructure*        DepartureStopAssignment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of service for departure and onwards.. May change from that for arrival. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> DepartureOperatorRefs          0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="HeadwayIntervalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the HEADWAY INTERVALs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For frequency based services, target interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedHeadwayInterval.
    ns2__PositiveDurationType*           AimedHeadwayInterval           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For frequency based services, expected interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedHeadwayInterval.
    ns2__PositiveDurationType*           ExpectedHeadwayInterval        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopProximityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the distance from the stop of a VEHICLE. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Distance of VEHICLE from stop of CALL as measured along ROUTE track. Only shown if detail level is 'calls' or higher. Positive value denotes distance before stop. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "DistanceFromStop" of XSD type "http://www.siri.org.uk/siri":DistanceType.
    ns2__DistanceType*                   DistanceFromStop               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Count of stops along SERVICE PATTERN between current position of VEHICLE and stop of CALL as measured along ROUTE track. Only shown if detail level is 'calls' or higher. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "NumberOfStopsAway" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             NumberOfStopsAway              0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":PreviousCallStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractMonitoredCallStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for CALL at previous stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__PreviousCallStructure operations:
/// - ns2__PreviousCallStructure* soap_new_ns2__PreviousCallStructure(soap*) allocate and default initialize
/// - ns2__PreviousCallStructure* soap_new_ns2__PreviousCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PreviousCallStructure* soap_new_req_ns2__PreviousCallStructure(soap*, ...) allocate, set required members
/// - ns2__PreviousCallStructure* soap_new_set_ns2__PreviousCallStructure(soap*, ...) allocate, set all public members
/// - ns2__PreviousCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PreviousCallStructure(soap*, ns2__PreviousCallStructure*) deserialize from a stream
/// - int soap_write_ns2__PreviousCallStructure(soap*, ns2__PreviousCallStructure*) serialize to a stream
/// - ns2__PreviousCallStructure* ns2__PreviousCallStructure::soap_dup(soap*) returns deep copy of ns2__PreviousCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PreviousCallStructure::soap_del() deep deletes ns2__PreviousCallStructure data members, use only after ns2__PreviousCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PreviousCallStructure : public ns2__AbstractMonitoredCallStructure
{ public:
/*  INHERITED FROM ns2__AbstractMonitoredCallStructure:
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractMonitoredCallStructure */
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE is currently at stop. Default is false (xml default added from SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleAtStop.
    bool                                 VehicleAtStop                  0 = false;	///< Default element value="false".
//  BEGIN GROUP <xs:group name="VehicleArrivalTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Arrival times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_PreviousCallStructure ;	///< Union _ns2__union_PreviousCallStructure selector: set to SOAP_UNION__ns2__union_PreviousCallStructure_<fieldname>
    union _ns2__union_PreviousCallStructure
    {
/// <PRE><BLOCKQUOTE>
///   Observed time of arrival of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Observed time of arrival of VEHICLE at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ActualArrivalTime.
    xsd__dateTime*                       ActualArrivalTime              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE at stop .
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedArrivalTime.
    xsd__dateTime*                       ExpectedArrivalTime            0;	///< Optional element.
    }                                    union_PreviousCallStructure   ;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="VehicleDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Departure times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedDepartureTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_PreviousCallStructure_;	///< Union _ns2__union_PreviousCallStructure_ selector: set to SOAP_UNION__ns2__union_PreviousCallStructure__<fieldname>
    union _ns2__union_PreviousCallStructure_
    {
/// <PRE><BLOCKQUOTE>
///   Observed time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Observed time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ActualDepartureTime.
    xsd__dateTime*                       ActualDepartureTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop. May include waiting time. For people on a VEHICLE this is the time that would normally be shown.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedDepartureTime.
    xsd__dateTime*                       ExpectedDepartureTime          0;	///< Optional element.
    }                                    union_PreviousCallStructure_  ;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":MonitoredCallStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractMonitoredCallStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Current CALL at stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoredCallStructure operations:
/// - ns2__MonitoredCallStructure* soap_new_ns2__MonitoredCallStructure(soap*) allocate and default initialize
/// - ns2__MonitoredCallStructure* soap_new_ns2__MonitoredCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoredCallStructure* soap_new_req_ns2__MonitoredCallStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoredCallStructure* soap_new_set_ns2__MonitoredCallStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoredCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoredCallStructure(soap*, ns2__MonitoredCallStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoredCallStructure(soap*, ns2__MonitoredCallStructure*) serialize to a stream
/// - ns2__MonitoredCallStructure* ns2__MonitoredCallStructure::soap_dup(soap*) returns deep copy of ns2__MonitoredCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoredCallStructure::soap_del() deep deletes ns2__MonitoredCallStructure data members, use only after ns2__MonitoredCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoredCallStructure : public ns2__AbstractMonitoredCallStructure
{ public:
/*  INHERITED FROM ns2__AbstractMonitoredCallStructure:
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractMonitoredCallStructure */
//  BEGIN GROUP <xs:group name="MonitoredCallGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for a monitored CALL.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="CallRealtimeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the Real-time CALL properties.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE is currently at stop. Default is false (xml default added from SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleAtStop.
    bool                                 VehicleAtStop                  0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Exact location that VEHICLE will take up / or has taken at STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleLocationAtStop" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              VehicleLocationAtStop          0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CallRailGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing theProperties specific to a rail CALLs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE will reverse at stop. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "ReversesAtStop" of XSD type xs:boolean.
    bool                                 ReversesAtStop                 0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   For Rail, whether this is a platform traversal at speed, typically triggering an announcement to stand back from platform. If so Boarding Activity of arrival and deparure should be passthrough.
/// </BLOCKQUOTE></PRE>
/// Element "PlatformTraversal" of XSD type xs:boolean.
    bool                                 PlatformTraversal              0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Status of signal clearance for TRAIN. This may affect the prioritiisition and emphasis given to arrival or departure on displays - e.g. cleared trains appear first, flashing in green.
/// </BLOCKQUOTE></PRE>
/// Element "SignalStatus" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        SignalStatus                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CallPropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the CALL Properties Values for these elements can be specified on an production VEHICLE JOURNEY CALL. Each real-time journey CALL takes its values from the corresponding dated VEHICLE JOURNEY CALL. The absence of a value on an real-time CALL l indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the stop is a TIMING POINT. Times for stops that are not timing points are sometimes interpolated crudely from the timing points, and may represent a lower level of accuracy. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TimingPoint.
    bool                                 TimingPoint                    0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether this is a Hail and Ride Stop. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "BoardingStretch" of XSD type xs:boolean.
    bool                                 BoardingStretch                0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether Vehicle stops only if requested explicitly by passenger. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestStop" of XSD type xs:boolean.
    bool                                 RequestStop                    0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Destination to show for the VEHICLE at the specific stop (vehicle signage), if different to the Destination Name for the full journey.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationDisplay             0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CallNoteGroup">
/// <PRE><BLOCKQUOTE>
///   Annotations of the CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Text annotation that applies to this CALL.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> CallNote                       0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DisruptionGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing nature of disruption.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Information about a change of Equipment availabilti at stop or on vehicle that may affect access or use.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Description of any change concerning a MONITORED FACILITY New structure defined in SIRI XSD 1.1 for Facilities Management.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityConditionStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityConditionStructure*> FacilityConditionElement       0;
/// <PRE><BLOCKQUOTE>
///   This sequence is here only for compatibility reasons between Siri 1.0 and Siri 1.1
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A change to the availaibility of EQUIPMENT. Basic structure defined in the first 1.0 SIRI XSd.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityChangeElement.
    ns2__FacilityChangeStructure*        FacilityChangeElement          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__SituationRefStructure*> SituationRef                   0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopArrivalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the arrival of a VEHICLE at a stop.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="MonitoredCallArrivalTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Arrival times for CALL.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="VehicleArrivalTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Arrival times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_MonitoredCallStructure;	///< Union _ns2__union_MonitoredCallStructure selector: set to SOAP_UNION__ns2__union_MonitoredCallStructure_<fieldname>
    union _ns2__union_MonitoredCallStructure
    {
/// <PRE><BLOCKQUOTE>
///   Observed time of arrival of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Observed time of arrival of VEHICLE at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ActualArrivalTime.
    xsd__dateTime*                       ActualArrivalTime              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE at stop .
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedArrivalTime.
    xsd__dateTime*                       ExpectedArrivalTime            0;	///< Optional element.
    }                                    union_MonitoredCallStructure  ;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Latest time at which a VEHICLE will arrive at stop. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "LatestExpectedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       LatestExpectedArrivalTime      0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="MonitoredStopArrivalStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the arrival status of a VEHICLE at a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the visit according to a fixed list of values. If not specified, same as DepartureStatus.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalStatus.
    enum ns2__CallStatusEnumeration*     ArrivalStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary text string to show to indicate the status of the departure of the VEHICLE for example, Enroute, 5 Km, Approaching. May depend on the policy of the OPERATOR, for example show Approaching if less than 200metres away from stop. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalProximityText.
    ns2__NaturalLanguageStringStructure*  ArrivalProximityText           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bay or platform (QUAY) name to show passenger i.e. expected platform for vehicel to arrive at.Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is(i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element;(iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalPlatformName.
    ns2__NaturalLanguageStringStructure*  ArrivalPlatformName            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Type of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalBoardingActivity.
    enum ns2__ArrivalBoardingActivityEnumeration  ArrivalBoardingActivity        0 = ns2__ArrivalBoardingActivityEnumeration__alighting;	///< Default element value="alighting".
/// <PRE><BLOCKQUOTE>
///   Assignment of arrival of Scheduled STOP POINT to a phsyical QUAY (platform). If not given, assume same as for departure +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "ArrivalStopAssignment" of XSD type "http://www.siri.org.uk/siri":StopAssignmentStructure.
    ns2__StopAssignmentStructure*        ArrivalStopAssignment          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of servcie up until arrival.. May change for departure. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> ArrivalOperatorRefs            0;
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopDepartureGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the departure of a VEHICLE from a stop.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="MonitoredCallDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Departure times for CALL.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="VehicleDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Departure times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedDepartureTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_MonitoredCallStructure_;	///< Union _ns2__union_MonitoredCallStructure_ selector: set to SOAP_UNION__ns2__union_MonitoredCallStructure__<fieldname>
    union _ns2__union_MonitoredCallStructure_
    {
/// <PRE><BLOCKQUOTE>
///   Observed time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Observed time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ActualDepartureTime.
    xsd__dateTime*                       ActualDepartureTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop. May include waiting time. For people on a VEHICLE this is the time that would normally be shown.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedDepartureTime.
    xsd__dateTime*                       ExpectedDepartureTime          0;	///< Optional element.
    }                                    union_MonitoredCallStructure_ ;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Expected departure time of VEHICLE without waiting time due to operational actions. For people at stop this would normally be shown if different from Expected Departure time. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "ProvisionalExpectedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ProvisionalExpectedDepartureTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Earliest time at which VEHICLE may leave the stop. Used to secure connections. Passengers must be at boarding point by this time to be sure of catching VEHICLE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "EarliestExpectedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       EarliestExpectedDepartureTime  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Prediction quality, either as approcimate level, or more quantitatyive percentile range of predictions will fall within a given range of times. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedDeparturePredictionQuality" of XSD type "http://www.siri.org.uk/siri":PredictionQualityStructure.
    ns2__PredictionQualityStructure*     ExpectedDeparturePredictionQuality 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="PassengerDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Passenget arrivel times at STOP PLACE in order to meet VEHICLEdeparture times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target Latest time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times as itmay include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Latest target time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedLatestPassengerAccessTime.
    xsd__dateTime*                       AimedLatestPassengerAccessTime 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Expected Latest time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times as it may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Latest expected time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedLatestPassengerAccessTime.
    xsd__dateTime*                       ExpectedLatestPassengerAccessTime 0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="MonitoredStopDepartureStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the departure status of a VEHICLE from a stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the departure part of the CALL, according to a fixed list of values. This may reflect a presentation policy, for example CALLs less than one minute behind target time are still classified as on-time. Applications may use this to guide their own presentation of times.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureStatus.
    enum ns2__CallStatusEnumeration*     DepartureStatus                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary text string to show to indicate the status of the departure of the vehicle, for example, Boarding, GatesClosed. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureProximityText.
    ns2__NaturalLanguageStringStructure*  DepartureProximityText         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Defaulted taken from from planned timetable..
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Inheritable property.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DeparturePlatformName.
    ns2__NaturalLanguageStringStructure*  DeparturePlatformName          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding allowed at stop. Default is 'Boarding'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureBoardingActivity.
    enum ns2__DepartureBoardingActivityEnumeration  DepartureBoardingActivity      0 = ns2__DepartureBoardingActivityEnumeration__boarding;	///< Default element value="boarding".
/// <PRE><BLOCKQUOTE>
///   Assignments of departure platfiorm for Scheduled STOP POINT to a physical QUAY. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "DepartureStopAssignment" of XSD type "http://www.siri.org.uk/siri":StopAssignmentStructure.
    ns2__StopAssignmentStructure*        DepartureStopAssignment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATORs of of service for departure and onwards.. May change from that for arrival. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> DepartureOperatorRefs          0;
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="HeadwayIntervalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the HEADWAY INTERVALs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For frequency based services, target interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedHeadwayInterval.
    ns2__PositiveDurationType*           AimedHeadwayInterval           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For frequency based services, expected interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedHeadwayInterval.
    ns2__PositiveDurationType*           ExpectedHeadwayInterval        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopProximityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the distance from the stop of a VEHICLE. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Distance of VEHICLE from stop of CALL as measured along ROUTE track. Only shown if detail level is 'calls' or higher. Positive value denotes distance before stop. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "DistanceFromStop" of XSD type "http://www.siri.org.uk/siri":DistanceType.
    ns2__DistanceType*                   DistanceFromStop               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Count of stops along SERVICE PATTERN between current position of VEHICLE and stop of CALL as measured along ROUTE track. Only shown if detail level is 'calls' or higher. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "NumberOfStopsAway" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             NumberOfStopsAway              0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ParameterisedActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":SimpleActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for parameterised, i.e. user definable, actions.
/// </BLOCKQUOTE></PRE>
/// class ns2__ParameterisedActionStructure operations:
/// - ns2__ParameterisedActionStructure* soap_new_ns2__ParameterisedActionStructure(soap*) allocate and default initialize
/// - ns2__ParameterisedActionStructure* soap_new_ns2__ParameterisedActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ParameterisedActionStructure* soap_new_req_ns2__ParameterisedActionStructure(soap*, ...) allocate, set required members
/// - ns2__ParameterisedActionStructure* soap_new_set_ns2__ParameterisedActionStructure(soap*, ...) allocate, set all public members
/// - ns2__ParameterisedActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ParameterisedActionStructure(soap*, ns2__ParameterisedActionStructure*) deserialize from a stream
/// - int soap_write_ns2__ParameterisedActionStructure(soap*, ns2__ParameterisedActionStructure*) serialize to a stream
/// - ns2__ParameterisedActionStructure* ns2__ParameterisedActionStructure::soap_dup(soap*) returns deep copy of ns2__ParameterisedActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ParameterisedActionStructure::soap_del() deep deletes ns2__ParameterisedActionStructure data members, use only after ns2__ParameterisedActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ParameterisedActionStructure : public ns2__SimpleActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
};

/// @brief "http://www.siri.org.uk/siri":AffectedCallStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AffectedStopPointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about a CALL affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedCallStructure operations:
/// - ns2__AffectedCallStructure* soap_new_ns2__AffectedCallStructure(soap*) allocate and default initialize
/// - ns2__AffectedCallStructure* soap_new_ns2__AffectedCallStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedCallStructure* soap_new_req_ns2__AffectedCallStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedCallStructure* soap_new_set_ns2__AffectedCallStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedCallStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedCallStructure(soap*, ns2__AffectedCallStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedCallStructure(soap*, ns2__AffectedCallStructure*) serialize to a stream
/// - ns2__AffectedCallStructure* ns2__AffectedCallStructure::soap_dup(soap*) returns deep copy of ns2__AffectedCallStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedCallStructure::soap_del() deep deletes ns2__AffectedCallStructure data members, use only after ns2__AffectedCallStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedCallStructure : public ns2__AffectedStopPointStructure
{ public:
/*  INHERITED FROM ns2__AffectedStopPointStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Alternative private code of stop.
/// </BLOCKQUOTE></PRE>
/// Element "PrivateRef" of XSD type xs:string.
    std::wstring*                        PrivateRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POIHT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
/// <PRE><BLOCKQUOTE>
///   Type of stop type. Normally implicit in VEHICLE mode. TPEG table pti 17_4
/// </BLOCKQUOTE></PRE>
/// Element "StopPointType" of XSD type "http://www.siri.org.uk/siri":StopPointTypeEnumeration.
    enum ns2__StopPointTypeEnumeration*  StopPointType                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Spatial coordinates of STOP POINT. Derivable from StopRef.
/// </BLOCKQUOTE></PRE>
/// Element "Location" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Location                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Modes within station/stop affected by the SITUATION. If not specified, assume all modes of that station.
/// </BLOCKQUOTE></PRE>
/// Element "AffectedModes" of XSD type "http://www.siri.org.uk/siri":AffectedModesStructure.
    ns2__AffectedModesStructure*         AffectedModes                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refernce to a SITE or TOPOGRAPHIC PLACE affected by the Locality of stop (In UK NPtg Locality Code). Derivable from StopRef.
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type "http://www.siri.org.uk/siri":ZoneRefStructure.
    ns2__ZoneRefStructure*               PlaceRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of locality in which stop is found. Derivable from LocalityRef. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PlaceName                      0;
/// <PRE><BLOCKQUOTE>
///   Assesmentof current ACCESSIBIKITY of the STOP POINT as affected by the SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   CONNECTION links from stop.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedCallStructure_ConnectionLinks operations:
/// - _ns2__AffectedCallStructure_ConnectionLinks* soap_new__ns2__AffectedCallStructure_ConnectionLinks(soap*) allocate and default initialize
/// - _ns2__AffectedCallStructure_ConnectionLinks* soap_new__ns2__AffectedCallStructure_ConnectionLinks(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedCallStructure_ConnectionLinks* soap_new_req__ns2__AffectedCallStructure_ConnectionLinks(soap*, ...) allocate, set required members
/// - _ns2__AffectedCallStructure_ConnectionLinks* soap_new_set__ns2__AffectedCallStructure_ConnectionLinks(soap*, ...) allocate, set all public members
/// - _ns2__AffectedCallStructure_ConnectionLinks::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedCallStructure_ConnectionLinks(soap*, _ns2__AffectedCallStructure_ConnectionLinks*) deserialize from a stream
/// - int soap_write__ns2__AffectedCallStructure_ConnectionLinks(soap*, _ns2__AffectedCallStructure_ConnectionLinks*) serialize to a stream
/// - _ns2__AffectedCallStructure_ConnectionLinks* _ns2__AffectedCallStructure_ConnectionLinks::soap_dup(soap*) returns deep copy of _ns2__AffectedCallStructure_ConnectionLinks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedCallStructure_ConnectionLinks::soap_del() deep deletes _ns2__AffectedCallStructure_ConnectionLinks data members, use only after _ns2__AffectedCallStructure_ConnectionLinks::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedCallStructure_ConnectionLinks
    {
/// <PRE><BLOCKQUOTE>
///   CONNECTION LINKs from stop that are affected by the SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedConnectionLinkStructure* of length 1..unbounded.
    std::vector<ns2__AffectedConnectionLinkStructure*> AffectedConnectionLink         1;
    }                                   *ConnectionLinks                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
    END OF INHERITED FROM ns2__AffectedStopPointStructure */
/// <PRE><BLOCKQUOTE>
///   Order of visit to stop within JORUNYE PATTERN of journey.
/// </BLOCKQUOTE></PRE>
/// Element "Order" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Status of CALL TPEG 13_6
/// </BLOCKQUOTE></PRE>
/// Element "CallCondition" of XSD type "http://www.siri.org.uk/siri":RoutePointTypeEnumeration.
    enum ns2__RoutePointTypeEnumeration*  CallCondition                  0;	///< Optional element.
//  BEGIN GROUP <xs:group name="CallRealtimeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the Real-time CALL properties.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE is currently at stop. Default is false (xml default added from SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleAtStop.
    bool                                 VehicleAtStop                  0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Exact location that VEHICLE will take up / or has taken at STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleLocationAtStop" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              VehicleLocationAtStop          0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="AffectedStopArrivalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the arrival of a VEHICLE at a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="VehicleArrivalTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Arrival times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_AffectedCallStructure ;	///< Union _ns2__union_AffectedCallStructure selector: set to SOAP_UNION__ns2__union_AffectedCallStructure_<fieldname>
    union _ns2__union_AffectedCallStructure
    {
/// <PRE><BLOCKQUOTE>
///   Observed time of arrival of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Observed time of arrival of VEHICLE at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ActualArrivalTime.
    xsd__dateTime*                       ActualArrivalTime              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE at stop .
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedArrivalTime.
    xsd__dateTime*                       ExpectedArrivalTime            0;	///< Optional element.
    }                                    union_AffectedCallStructure   ;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the visit according to a fixed list of values. If not specified, same as DepartureStatus.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalStatus.
    enum ns2__CallStatusEnumeration*     ArrivalStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalPlatformName.
    ns2__NaturalLanguageStringStructure*  ArrivalPlatformName            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalBoardingActivity.
    enum ns2__ArrivalBoardingActivityEnumeration  ArrivalBoardingActivity        0 = ns2__ArrivalBoardingActivityEnumeration__alighting;	///< Default element value="alighting".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="AffectedStopDepartureGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the the departure of a VEHICLE from a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="VehicleDepartureTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Departure times for CALL.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedDepartureTime.
    xsd__dateTime*                       AimedDepartureTime             0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_AffectedCallStructure_;	///< Union _ns2__union_AffectedCallStructure_ selector: set to SOAP_UNION__ns2__union_AffectedCallStructure__<fieldname>
    union _ns2__union_AffectedCallStructure_
    {
/// <PRE><BLOCKQUOTE>
///   Observed time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Observed time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ActualDepartureTime.
    xsd__dateTime*                       ActualDepartureTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop. May include waiting time. For people on a VEHICLE this is the time that would normally be shown.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedDepartureTime.
    xsd__dateTime*                       ExpectedDepartureTime          0;	///< Optional element.
    }                                    union_AffectedCallStructure_  ;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the departure part of the CALL, according to a fixed list of values. This may reflect a presentation policy, for example CALLs less than one minute behind target time are still classified as on-time. Applications may use this to guide their own presentation of times.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureStatus.
    enum ns2__CallStatusEnumeration*     DepartureStatus                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Inheritable property.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DeparturePlatformName.
    ns2__NaturalLanguageStringStructure*  DeparturePlatformName          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding allowed at stop. Default is 'Boarding'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DepartureBoardingActivity.
    enum ns2__DepartureBoardingActivityEnumeration  DepartureBoardingActivity      0 = ns2__DepartureBoardingActivityEnumeration__boarding;	///< Default element value="boarding".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="HeadwayIntervalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the HEADWAY INTERVALs.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For frequency based services, target interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedHeadwayInterval.
    ns2__PositiveDurationType*           AimedHeadwayInterval           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For frequency based services, expected interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ExpectedHeadwayInterval.
    ns2__PositiveDurationType*           ExpectedHeadwayInterval        0;	///< Optional element.
//  END OF GROUP
/// Vector of ns2__AffectedInterchangeStructure* of length 0..unbounded.
    std::vector<ns2__AffectedInterchangeStructure*> AffectedInterchange            0;
};

/// @brief "http://www.siri.org.uk/siri":AffectedStopPlaceStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AffectedStopPlaceElementStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about the Stop Places affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedStopPlaceStructure operations:
/// - ns2__AffectedStopPlaceStructure* soap_new_ns2__AffectedStopPlaceStructure(soap*) allocate and default initialize
/// - ns2__AffectedStopPlaceStructure* soap_new_ns2__AffectedStopPlaceStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedStopPlaceStructure* soap_new_req_ns2__AffectedStopPlaceStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedStopPlaceStructure* soap_new_set_ns2__AffectedStopPlaceStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedStopPlaceStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedStopPlaceStructure(soap*, ns2__AffectedStopPlaceStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedStopPlaceStructure(soap*, ns2__AffectedStopPlaceStructure*) serialize to a stream
/// - ns2__AffectedStopPlaceStructure* ns2__AffectedStopPlaceStructure::soap_dup(soap*) returns deep copy of ns2__AffectedStopPlaceStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedStopPlaceStructure::soap_del() deep deletes ns2__AffectedStopPlaceStructure data members, use only after ns2__AffectedStopPlaceStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedStopPlaceStructure : public ns2__AffectedStopPlaceElementStructure
{ public:
/*  INHERITED FROM ns2__AffectedStopPlaceElementStructure:
/// <PRE><BLOCKQUOTE>
///   Disruption of accessibility.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
    END OF INHERITED FROM ns2__AffectedStopPlaceElementStructure */
/// <PRE><BLOCKQUOTE>
///   Stop Place affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "StopPlaceRef" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceRefStructure.
    ns4__StopPlaceRefStructure*          StopPlaceRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of stop place. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PlaceName                      0;
/// <PRE><BLOCKQUOTE>
///   Type of Stop Place.
/// </BLOCKQUOTE></PRE>
/// Element "StopPlaceType" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceTypeEnumeration.
    enum ns4__StopPlaceTypeEnumeration*  StopPlaceType                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Quays affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedStopPlaceStructure_AffectedComponents operations:
/// - _ns2__AffectedStopPlaceStructure_AffectedComponents* soap_new__ns2__AffectedStopPlaceStructure_AffectedComponents(soap*) allocate and default initialize
/// - _ns2__AffectedStopPlaceStructure_AffectedComponents* soap_new__ns2__AffectedStopPlaceStructure_AffectedComponents(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedStopPlaceStructure_AffectedComponents* soap_new_req__ns2__AffectedStopPlaceStructure_AffectedComponents(soap*, ...) allocate, set required members
/// - _ns2__AffectedStopPlaceStructure_AffectedComponents* soap_new_set__ns2__AffectedStopPlaceStructure_AffectedComponents(soap*, ...) allocate, set all public members
/// - _ns2__AffectedStopPlaceStructure_AffectedComponents::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedStopPlaceStructure_AffectedComponents(soap*, _ns2__AffectedStopPlaceStructure_AffectedComponents*) deserialize from a stream
/// - int soap_write__ns2__AffectedStopPlaceStructure_AffectedComponents(soap*, _ns2__AffectedStopPlaceStructure_AffectedComponents*) serialize to a stream
/// - _ns2__AffectedStopPlaceStructure_AffectedComponents* _ns2__AffectedStopPlaceStructure_AffectedComponents::soap_dup(soap*) returns deep copy of _ns2__AffectedStopPlaceStructure_AffectedComponents, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedStopPlaceStructure_AffectedComponents::soap_del() deep deletes _ns2__AffectedStopPlaceStructure_AffectedComponents data members, use only after _ns2__AffectedStopPlaceStructure_AffectedComponents::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedStopPlaceStructure_AffectedComponents
    {
/// <PRE><BLOCKQUOTE>
///   Quay affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AffectedStopPlaceComponentStructure* of length 0..unbounded.
    std::vector<ns2__AffectedStopPlaceComponentStructure*> AffectedComponent              0;
    }                                   *AffectedComponents             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   PathLinks affected by SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths operations:
/// - _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths* soap_new__ns2__AffectedStopPlaceStructure_AffectedNavigationPaths(soap*) allocate and default initialize
/// - _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths* soap_new__ns2__AffectedStopPlaceStructure_AffectedNavigationPaths(soap*, int num) allocate array and default initialize values
/// - _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths* soap_new_req__ns2__AffectedStopPlaceStructure_AffectedNavigationPaths(soap*, ...) allocate, set required members
/// - _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths* soap_new_set__ns2__AffectedStopPlaceStructure_AffectedNavigationPaths(soap*, ...) allocate, set all public members
/// - _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths::soap_default(soap*) default initialize members
/// - int soap_read__ns2__AffectedStopPlaceStructure_AffectedNavigationPaths(soap*, _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths*) deserialize from a stream
/// - int soap_write__ns2__AffectedStopPlaceStructure_AffectedNavigationPaths(soap*, _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths*) serialize to a stream
/// - _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths* _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths::soap_dup(soap*) returns deep copy of _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths::soap_del() deep deletes _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths data members, use only after _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__AffectedStopPlaceStructure_AffectedNavigationPaths
    {
/// Vector of ns4__NavigationPathRefStructure* of length 1..unbounded.
    std::vector<ns4__NavigationPathRefStructure*> NavigationPathRef              1;
    }                                   *AffectedNavigationPaths        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AffectedStopPlaceComponentStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AffectedStopPlaceElementStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for information about the quays affected by an SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__AffectedStopPlaceComponentStructure operations:
/// - ns2__AffectedStopPlaceComponentStructure* soap_new_ns2__AffectedStopPlaceComponentStructure(soap*) allocate and default initialize
/// - ns2__AffectedStopPlaceComponentStructure* soap_new_ns2__AffectedStopPlaceComponentStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AffectedStopPlaceComponentStructure* soap_new_req_ns2__AffectedStopPlaceComponentStructure(soap*, ...) allocate, set required members
/// - ns2__AffectedStopPlaceComponentStructure* soap_new_set_ns2__AffectedStopPlaceComponentStructure(soap*, ...) allocate, set all public members
/// - ns2__AffectedStopPlaceComponentStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AffectedStopPlaceComponentStructure(soap*, ns2__AffectedStopPlaceComponentStructure*) deserialize from a stream
/// - int soap_write_ns2__AffectedStopPlaceComponentStructure(soap*, ns2__AffectedStopPlaceComponentStructure*) serialize to a stream
/// - ns2__AffectedStopPlaceComponentStructure* ns2__AffectedStopPlaceComponentStructure::soap_dup(soap*) returns deep copy of ns2__AffectedStopPlaceComponentStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AffectedStopPlaceComponentStructure::soap_del() deep deletes ns2__AffectedStopPlaceComponentStructure data members, use only after ns2__AffectedStopPlaceComponentStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AffectedStopPlaceComponentStructure : public ns2__AffectedStopPlaceElementStructure
{ public:
/*  INHERITED FROM ns2__AffectedStopPlaceElementStructure:
/// <PRE><BLOCKQUOTE>
///   Disruption of accessibility.
/// </BLOCKQUOTE></PRE>
/// Element "AccessibilityAssessment" of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityAssessmentStructure.
    ns3__AccessibilityAssessmentStructure*  AccessibilityAssessment        0;	///< Optional element.
    END OF INHERITED FROM ns2__AffectedStopPlaceElementStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a Stop Place.
/// </BLOCKQUOTE></PRE>
/// Element "ComponentRef" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceComponentRefStructure.
    ns4__StopPlaceComponentRefStructure*  ComponentRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of component. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ComponentName                  0;
/// <PRE><BLOCKQUOTE>
///   Type of Component.
/// </BLOCKQUOTE></PRE>
/// Element "ComponentType" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceComponentTypeEnumeration.
    enum ns4__StopPlaceComponentTypeEnumeration*  ComponentType                  0;	///< Optional element.
//  BEGIN GROUP <xs:group name="PlaceProjectionGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Defines geospatial data elements for a zone such that it can be projected.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__AffectedStopPlaceComponentStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Points may be defined in tagged format or using GM coordinates element.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/ifopt:""http://www.ifopt.org.uk/ifopt":PointProjection.
    ns4__PointProjectionStructure*       ns4__PointProjection           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Projection as a geospatial polyline.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/ifopt:""http://www.ifopt.org.uk/ifopt":LinkProjection.
    ns4__LinkProjectionStructure*        ns4__LinkProjection            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   PROJECTION onto a geospatial zone.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/ifopt:""http://www.ifopt.org.uk/ifopt":ZoneProjection.
    ns4__ZoneProjectionStructure*        ns4__ZoneProjection            0;	///< Optional element.
    }                                   *__AffectedStopPlaceComponentStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Further qualifcation of affected part of Link projection,
/// </BLOCKQUOTE></PRE>
/// Element "Offset" of XSD type "http://www.siri.org.uk/siri":OffsetStructure.
    ns2__OffsetStructure*                Offset                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SituationElementStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSituationElementStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for loggable Entry.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationElementStructure operations:
/// - ns2__SituationElementStructure* soap_new_ns2__SituationElementStructure(soap*) allocate and default initialize
/// - ns2__SituationElementStructure* soap_new_ns2__SituationElementStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationElementStructure* soap_new_req_ns2__SituationElementStructure(soap*, ...) allocate, set required members
/// - ns2__SituationElementStructure* soap_new_set_ns2__SituationElementStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationElementStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationElementStructure(soap*, ns2__SituationElementStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationElementStructure(soap*, ns2__SituationElementStructure*) serialize to a stream
/// - ns2__SituationElementStructure* ns2__SituationElementStructure::soap_dup(soap*) returns deep copy of ns2__SituationElementStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationElementStructure::soap_del() deep deletes ns2__SituationElementStructure data members, use only after ns2__SituationElementStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationElementStructure : public ns2__AbstractSituationElementStructure
{ public:
/*  INHERITED FROM ns2__AbstractSituationElementStructure:
/// <PRE><BLOCKQUOTE>
///   Time of creation of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "CreationTime" of XSD type xs:dateTime.
    xsd__dateTime                        CreationTime                   1;	///< Required element.
//  BEGIN GROUP <xs:group name="SituationSharedIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements Reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="SituationBaseIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created SITUATION. Provides namespace for Participant If absent proided from context.
/// </BLOCKQUOTE></PRE>
/// Element "CountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            CountryRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of SITUATION within a Participant. Excludes any version number.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of SITUATION within a Participant. Excldue versionr.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationNumber.
    ns2__EntryQualifierStructure*        SituationNumber                1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationUpdateIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created Update SITUATION element. Provides namespace for VersionParticipant If absent same as.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateCountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            UpdateCountryRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        UpdateParticipantRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of update version within a SITUATION Number Omit if reference to the base SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type "http://www.siri.org.uk/siri":SituationVersion.
    ns2__SituationVersion*               Version                        0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractSituationElementStructure */
//  BEGIN GROUP <xs:group name="SituationInfoGroup">
/// <PRE><BLOCKQUOTE>
///   situation Informatiion.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Associations with other SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// Element "References" of XSD type "http://www.siri.org.uk/siri":ReferencesStructure.
    ns2__ReferencesStructure*            References                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about source of information, that is, where the agent using the capture client obtained an item of information, or in the case of an automated feed, an identifier of the specific feed. Can be used to obtain updates, verify details or otherwise assess relevance.
/// </BLOCKQUOTE></PRE>
/// Element "Source" of XSD type "http://www.siri.org.uk/siri":SituationSourceStructure.
    ns2__SituationSourceStructure*       Source                         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Time at which SITUATION element was versioned. Once versioned, no furtr changes can be made.
/// </BLOCKQUOTE></PRE>
/// Element "VersionedAtTime" of XSD type xs:dateTime.
    xsd__dateTime*                       VersionedAtTime                0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ProductionTimetableSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Subscription Request for Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductionTimetableSubscriptionStructure operations:
/// - ns2__ProductionTimetableSubscriptionStructure* soap_new_ns2__ProductionTimetableSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__ProductionTimetableSubscriptionStructure* soap_new_ns2__ProductionTimetableSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductionTimetableSubscriptionStructure* soap_new_req_ns2__ProductionTimetableSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__ProductionTimetableSubscriptionStructure* soap_new_set_ns2__ProductionTimetableSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductionTimetableSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductionTimetableSubscriptionStructure(soap*, ns2__ProductionTimetableSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductionTimetableSubscriptionStructure(soap*, ns2__ProductionTimetableSubscriptionStructure*) serialize to a stream
/// - ns2__ProductionTimetableSubscriptionStructure* ns2__ProductionTimetableSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__ProductionTimetableSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductionTimetableSubscriptionStructure::soap_del() deep deletes ns2__ProductionTimetableSubscriptionStructure data members, use only after ns2__ProductionTimetableSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductionTimetableSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for daily production timetables.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductionTimetableRequest.
    ns2__ProductionTimetableRequestStructure*  ProductionTimetableRequest     1;	///< Required element.
//  BEGIN GROUP <xs:group name="ProductionTimetableSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the producer should return the complete set of current data, or only provide updates to the last data returned, i.e. additions, modifications and deletions.
///   If false each subscription response will contain the full information as specified in this request.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = false;	///< Default element value="false".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":DatedTimetableVersionFrameStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Production Timetable of a LINE.
/// </BLOCKQUOTE></PRE>
/// class ns2__DatedTimetableVersionFrameStructure operations:
/// - ns2__DatedTimetableVersionFrameStructure* soap_new_ns2__DatedTimetableVersionFrameStructure(soap*) allocate and default initialize
/// - ns2__DatedTimetableVersionFrameStructure* soap_new_ns2__DatedTimetableVersionFrameStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DatedTimetableVersionFrameStructure* soap_new_req_ns2__DatedTimetableVersionFrameStructure(soap*, ...) allocate, set required members
/// - ns2__DatedTimetableVersionFrameStructure* soap_new_set_ns2__DatedTimetableVersionFrameStructure(soap*, ...) allocate, set all public members
/// - ns2__DatedTimetableVersionFrameStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DatedTimetableVersionFrameStructure(soap*, ns2__DatedTimetableVersionFrameStructure*) deserialize from a stream
/// - int soap_write_ns2__DatedTimetableVersionFrameStructure(soap*, ns2__DatedTimetableVersionFrameStructure*) serialize to a stream
/// - ns2__DatedTimetableVersionFrameStructure* ns2__DatedTimetableVersionFrameStructure::soap_dup(soap*) returns deep copy of ns2__DatedTimetableVersionFrameStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DatedTimetableVersionFrameStructure::soap_del() deep deletes ns2__DatedTimetableVersionFrameStructure data members, use only after ns2__DatedTimetableVersionFrameStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DatedTimetableVersionFrameStructure : public ns2__AbstractItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/// <PRE><BLOCKQUOTE>
///   Timetable Version.
/// </BLOCKQUOTE></PRE>
/// Element "VersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            VersionRef                     0;	///< Optional element.
//  BEGIN GROUP <xs:group name="LineIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for identifying a LINE and DIRECTION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE DIRECTION DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ServiceInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__DatedTimetableVersionFrameStructure_sequence
    {
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
    }                                   *__DatedTimetableVersionFrameStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DatedServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   General info elements that apply to all journeys of timetable version unless overriden.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Description of the destination stop (vehicle signage) to show on vehicle, Can be overwritten for a journey, and then also section by section by the entry in an Individual Call. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationDisplay             0;
/// <PRE><BLOCKQUOTE>
///   Additional Text associated with LINE. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> LineNote                       0;
/// <PRE><BLOCKQUOTE>
///   Whether journey is first or last jouurney of day. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FirstOrLastJourney" of XSD type "http://www.siri.org.uk/siri":FirstOrLastJourneyEnumeration.
    enum ns2__FirstOrLastJourneyEnumeration  FirstOrLastJourney             0 = ns2__FirstOrLastJourneyEnumeration__unspecified;	///< Default element value="unspecified".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="TimetableRealtimeInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional descriptive properties of service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether this is a Headway Service, that is, one shown as operating at a prescribed interval rather than to a fixed timetable.
/// </BLOCKQUOTE></PRE>
/// Element "HeadwayService" of XSD type xs:boolean.
    bool*                                HeadwayService                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE JOURNEYs of LINE are normally monitored. Provides a default value for the Monitored element on individual journeys of the timetable.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool                                 Monitored                      0 = true;	///< Default element value="true".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Complete list of all planned VEHICLE JOURNEYs for this LINE and DIRECTION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DatedVehicleJourneyStructure* of length 0..unbounded.
    std::vector<ns2__DatedVehicleJourneyStructure*> DatedVehicleJourney            0;
/// <PRE><BLOCKQUOTE>
///   Connection paramters for a SERVICE JOURNEY INTERCHANGE between a feeder and distributor journey. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceJourneyInterchangeStructure* of length 0..unbounded.
    std::vector<ns2__ServiceJourneyInterchangeStructure*> ServiceJourneyInterchange      0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ProductionTimetableCapabilityRequestPolicyStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Estimated ProductionCapability Request Policy.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductionTimetableCapabilityRequestPolicyStructure operations:
/// - ns2__ProductionTimetableCapabilityRequestPolicyStructure* soap_new_ns2__ProductionTimetableCapabilityRequestPolicyStructure(soap*) allocate and default initialize
/// - ns2__ProductionTimetableCapabilityRequestPolicyStructure* soap_new_ns2__ProductionTimetableCapabilityRequestPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductionTimetableCapabilityRequestPolicyStructure* soap_new_req_ns2__ProductionTimetableCapabilityRequestPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__ProductionTimetableCapabilityRequestPolicyStructure* soap_new_set_ns2__ProductionTimetableCapabilityRequestPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductionTimetableCapabilityRequestPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductionTimetableCapabilityRequestPolicyStructure(soap*, ns2__ProductionTimetableCapabilityRequestPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductionTimetableCapabilityRequestPolicyStructure(soap*, ns2__ProductionTimetableCapabilityRequestPolicyStructure*) serialize to a stream
/// - ns2__ProductionTimetableCapabilityRequestPolicyStructure* ns2__ProductionTimetableCapabilityRequestPolicyStructure::soap_dup(soap*) returns deep copy of ns2__ProductionTimetableCapabilityRequestPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductionTimetableCapabilityRequestPolicyStructure::soap_del() deep deletes ns2__ProductionTimetableCapabilityRequestPolicyStructure data members, use only after ns2__ProductionTimetableCapabilityRequestPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductionTimetableCapabilityRequestPolicyStructure : public ns2__CapabilityRequestPolicyStructure
{ public:
/*  INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_ProductionTimetableCapabilityRequestPolicyStructure;	///< Union _ns2__union_ProductionTimetableCapabilityRequestPolicyStructure selector: set to SOAP_UNION__ns2__union_ProductionTimetableCapabilityRequestPolicyStructure_<fieldname>
    union _ns2__union_ProductionTimetableCapabilityRequestPolicyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_ProductionTimetableCapabilityRequestPolicyStructure;
//  END OF CHOICE
    END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure */
/// <PRE><BLOCKQUOTE>
///   Whether results returns foreign journeys only.
/// </BLOCKQUOTE></PRE>
/// Element "ForeignJourneysOnly" of XSD type xs:boolean.
    bool*                                ForeignJourneysOnly            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ProductionTimetableServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for ProductionTimetable Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductionTimetableServiceCapabilitiesStructure operations:
/// - ns2__ProductionTimetableServiceCapabilitiesStructure* soap_new_ns2__ProductionTimetableServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__ProductionTimetableServiceCapabilitiesStructure* soap_new_ns2__ProductionTimetableServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductionTimetableServiceCapabilitiesStructure* soap_new_req_ns2__ProductionTimetableServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__ProductionTimetableServiceCapabilitiesStructure* soap_new_set_ns2__ProductionTimetableServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductionTimetableServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductionTimetableServiceCapabilitiesStructure(soap*, ns2__ProductionTimetableServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductionTimetableServiceCapabilitiesStructure(soap*, ns2__ProductionTimetableServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__ProductionTimetableServiceCapabilitiesStructure* ns2__ProductionTimetableServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__ProductionTimetableServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductionTimetableServiceCapabilitiesStructure::soap_del() deep deletes ns2__ProductionTimetableServiceCapabilitiesStructure data members, use only after ns2__ProductionTimetableServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductionTimetableServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering* _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ProductionTimetableServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VALIDITY PERIOD. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByValidityPeriod.
    bool                                 FilterByValidityPeriod         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by OPERATOR. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByOperatorRef.
    bool                                 FilterByOperatorRef            0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByLineRef.
    bool                                 FilterByLineRef                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by TIMETABLE VERSION Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByVersionRef" of XSD type xs:boolean.
    bool                                 FilterByVersionRef             0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request Policiy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy operations:
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*) allocate and default initialize
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new_req__ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set required members
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new_set__ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set all public members
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy*) deserialize from a stream
/// - int soap_write__ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy*) serialize to a stream
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy* _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy::soap_dup(soap*) returns deep copy of _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy::soap_del() deep deletes _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy data members, use only after _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ProductionTimetableServiceCapabilitiesStructure_RequestPolicy
    {
/// INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_ProductionTimetableServiceCapabilitiesStructure_RequestPolicy;	///< Union _ns2__union_ProductionTimetableServiceCapabilitiesStructure_RequestPolicy selector: set to SOAP_UNION__ns2__union_ProductionTimetableServiceCapabilitiesStructure_RequestPolicy_<fieldname>
    union _ns2__union_ProductionTimetableServiceCapabilitiesStructure_RequestPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_ProductionTimetableServiceCapabilitiesStructure_RequestPolicy;
//  END OF CHOICE
//  END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure
    }                                   *RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscription Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy operations:
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy* soap_new__ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy(soap*) allocate and default initialize
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy* soap_new__ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy* soap_new_req__ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy(soap*, ...) allocate, set required members
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy* soap_new_set__ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy(soap*, ...) allocate, set all public members
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy(soap*, _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy*) deserialize from a stream
/// - int soap_write__ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy(soap*, _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy*) serialize to a stream
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy* _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy::soap_dup(soap*) returns deep copy of _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy::soap_del() deep deletes _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy data members, use only after _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ProductionTimetableServiceCapabilitiesStructure_SubscriptionPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Whether incremental updates can be specified for updates Default is ' true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasIncrementalUpdates" of XSD type xs:boolean.
    bool                                 HasIncrementalUpdates          0 = true;	///< Default element value="true".
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "AccessControl" of XSD type "http://www.siri.org.uk/siri":ConnectionCapabilityAccessControlStructure.
    ns2__ConnectionCapabilityAccessControlStructure*  AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":FromServiceJourneyInterchangeStructure is a complexType with complexContent restriction of XSD type "http://www.siri.org.uk/siri":AbstractServiceJourneyInterchangeStructure.
///
/// <PRE><BLOCKQUOTE>
///   A planned SERVICE JOURNEY INTERCHANGE from a journey. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__FromServiceJourneyInterchangeStructure operations:
/// - ns2__FromServiceJourneyInterchangeStructure* soap_new_ns2__FromServiceJourneyInterchangeStructure(soap*) allocate and default initialize
/// - ns2__FromServiceJourneyInterchangeStructure* soap_new_ns2__FromServiceJourneyInterchangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FromServiceJourneyInterchangeStructure* soap_new_req_ns2__FromServiceJourneyInterchangeStructure(soap*, ...) allocate, set required members
/// - ns2__FromServiceJourneyInterchangeStructure* soap_new_set_ns2__FromServiceJourneyInterchangeStructure(soap*, ...) allocate, set all public members
/// - ns2__FromServiceJourneyInterchangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FromServiceJourneyInterchangeStructure(soap*, ns2__FromServiceJourneyInterchangeStructure*) deserialize from a stream
/// - int soap_write_ns2__FromServiceJourneyInterchangeStructure(soap*, ns2__FromServiceJourneyInterchangeStructure*) serialize to a stream
/// - ns2__FromServiceJourneyInterchangeStructure* ns2__FromServiceJourneyInterchangeStructure::soap_dup(soap*) returns deep copy of ns2__FromServiceJourneyInterchangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FromServiceJourneyInterchangeStructure::soap_del() deep deletes ns2__FromServiceJourneyInterchangeStructure data members, use only after ns2__FromServiceJourneyInterchangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FromServiceJourneyInterchangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of SERVICE JOURNEY INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeCode" of XSD type "http://www.siri.org.uk/siri":InterchangeCodeType.
    ns2__InterchangeCodeType*            InterchangeCode                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a physical CONNECTION LINK over which the SERVICE JOURNEY INTERCHANGE takes place. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FeederRef" of XSD type "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure.
    ns2__ConnectingJourneyRefStructure*  FeederRef                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT at which feeder journey arrives. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FeederArrivalStopRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          FeederArrivalStopRef           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Feeder stop within Feeder JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Element "FeederVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                FeederVisitNumber              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectingJourneyRefStructure* of length 0..0.
    std::vector<ns2__ConnectingJourneyRefStructure*> DistributorRef                 0:0;
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT at which distributor journet departs. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopPointRefStructure* of length 0..0.
    std::vector<ns2__StopPointRefStructure*> DistributorDepartureStopRef    0:0;
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Distributor stop within Distributor JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VisitNumberType of length 0..0.
    std::vector<ns2__VisitNumberType   > DistributorVisitNumber         0:0;
//  BEGIN GROUP <xs:group name="InterchangePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Properties of SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the passenger can remain in VEHICLE (i.e. BLOCKlinking). Default is 'false': the passenger must change vehicles for this connection.
/// </BLOCKQUOTE></PRE>
/// Element "StaySeated" of XSD type xs:boolean.
    bool                                 StaySeated                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is guaranteed. Default is 'false'; SERVICE JOURNEY INTERCHANGE is not guaranteed.
/// </BLOCKQUOTE></PRE>
/// Element "Guaranteed" of XSD type xs:boolean.
    bool                                 Guaranteed                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is advertised as a connection. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "Advertised" of XSD type xs:boolean.
    bool                                 Advertised                     0 = false;	///< Default element value="false".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Time Elements for SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="InterchangeWaitTimeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE WAIT TIME.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard wait time for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardWaitTime" of XSD type xs:duration.
    xsd__duration*                       StandardWaitTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum time that Distributor will wait for Feeder for INTERCHANGE. SIRI v1.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumWaitTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum automatic wait time that Distributor will wait for Feeder for INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumAutomaticWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumAutomaticWaitTime       0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTransferDurationGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE TRANSFER duration.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardTransferTime" of XSD type xs:duration.
    xsd__duration*                       StandardTransferTime           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MinimumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MinimumTransferTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MaximumTransferTime            0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/*  RESTRICTED FROM ns2__AbstractServiceJourneyInterchangeStructure:
    END OF RESTRICTED FROM ns2__AbstractServiceJourneyInterchangeStructure */
};

/// @brief "http://www.siri.org.uk/siri":ToServiceJourneyInterchangeStructure is a complexType with complexContent restriction of XSD type "http://www.siri.org.uk/siri":AbstractServiceJourneyInterchangeStructure.
///
/// <PRE><BLOCKQUOTE>
///   A planned SERVICE JOURNEY INTERCHANGE to a journey. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__ToServiceJourneyInterchangeStructure operations:
/// - ns2__ToServiceJourneyInterchangeStructure* soap_new_ns2__ToServiceJourneyInterchangeStructure(soap*) allocate and default initialize
/// - ns2__ToServiceJourneyInterchangeStructure* soap_new_ns2__ToServiceJourneyInterchangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ToServiceJourneyInterchangeStructure* soap_new_req_ns2__ToServiceJourneyInterchangeStructure(soap*, ...) allocate, set required members
/// - ns2__ToServiceJourneyInterchangeStructure* soap_new_set_ns2__ToServiceJourneyInterchangeStructure(soap*, ...) allocate, set all public members
/// - ns2__ToServiceJourneyInterchangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ToServiceJourneyInterchangeStructure(soap*, ns2__ToServiceJourneyInterchangeStructure*) deserialize from a stream
/// - int soap_write_ns2__ToServiceJourneyInterchangeStructure(soap*, ns2__ToServiceJourneyInterchangeStructure*) serialize to a stream
/// - ns2__ToServiceJourneyInterchangeStructure* ns2__ToServiceJourneyInterchangeStructure::soap_dup(soap*) returns deep copy of ns2__ToServiceJourneyInterchangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ToServiceJourneyInterchangeStructure::soap_del() deep deletes ns2__ToServiceJourneyInterchangeStructure data members, use only after ns2__ToServiceJourneyInterchangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ToServiceJourneyInterchangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of SERVICE JOURNEY INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeCode" of XSD type "http://www.siri.org.uk/siri":InterchangeCodeType.
    ns2__InterchangeCodeType*            InterchangeCode                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a physical CONNECTION LINK over which the SERVICE JOURNEY INTERCHANGE takes place. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectingJourneyRefStructure* of length 0..0.
    std::vector<ns2__ConnectingJourneyRefStructure*> FeederRef                      0:0;
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT at which feeder journey arrives. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopPointRefStructure* of length 0..0.
    std::vector<ns2__StopPointRefStructure*> FeederArrivalStopRef           0:0;
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Feeder stop within Feeder JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VisitNumberType of length 0..0.
    std::vector<ns2__VisitNumberType   > FeederVisitNumber              0:0;
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DistributorRef" of XSD type "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure.
    ns2__ConnectingJourneyRefStructure*  DistributorRef                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT at which distributor journet departs. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DistributorDepartureStopRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          DistributorDepartureStopRef    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Distributor stop within Distributor JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                DistributorVisitNumber         0;	///< Optional element.
//  BEGIN GROUP <xs:group name="InterchangePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Properties of SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the passenger can remain in VEHICLE (i.e. BLOCKlinking). Default is 'false': the passenger must change vehicles for this connection.
/// </BLOCKQUOTE></PRE>
/// Element "StaySeated" of XSD type xs:boolean.
    bool                                 StaySeated                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is guaranteed. Default is 'false'; SERVICE JOURNEY INTERCHANGE is not guaranteed.
/// </BLOCKQUOTE></PRE>
/// Element "Guaranteed" of XSD type xs:boolean.
    bool                                 Guaranteed                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is advertised as a connection. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "Advertised" of XSD type xs:boolean.
    bool                                 Advertised                     0 = false;	///< Default element value="false".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Time Elements for SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="InterchangeWaitTimeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE WAIT TIME.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard wait time for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardWaitTime" of XSD type xs:duration.
    xsd__duration*                       StandardWaitTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum time that Distributor will wait for Feeder for INTERCHANGE. SIRI v1.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumWaitTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum automatic wait time that Distributor will wait for Feeder for INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumAutomaticWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumAutomaticWaitTime       0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTransferDurationGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE TRANSFER duration.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardTransferTime" of XSD type xs:duration.
    xsd__duration*                       StandardTransferTime           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MinimumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MinimumTransferTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MaximumTransferTime            0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/*  RESTRICTED FROM ns2__AbstractServiceJourneyInterchangeStructure:
    END OF RESTRICTED FROM ns2__AbstractServiceJourneyInterchangeStructure */
};

/// @brief "http://www.siri.org.uk/siri":ServiceJourneyInterchangeStructure is a complexType with complexContent restriction of XSD type "http://www.siri.org.uk/siri":AbstractServiceJourneyInterchangeStructure.
///
/// <PRE><BLOCKQUOTE>
///   A planned SERVICE JOURNEY INTERCHANGE between two journeys. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceJourneyInterchangeStructure operations:
/// - ns2__ServiceJourneyInterchangeStructure* soap_new_ns2__ServiceJourneyInterchangeStructure(soap*) allocate and default initialize
/// - ns2__ServiceJourneyInterchangeStructure* soap_new_ns2__ServiceJourneyInterchangeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceJourneyInterchangeStructure* soap_new_req_ns2__ServiceJourneyInterchangeStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceJourneyInterchangeStructure* soap_new_set_ns2__ServiceJourneyInterchangeStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceJourneyInterchangeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceJourneyInterchangeStructure(soap*, ns2__ServiceJourneyInterchangeStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceJourneyInterchangeStructure(soap*, ns2__ServiceJourneyInterchangeStructure*) serialize to a stream
/// - ns2__ServiceJourneyInterchangeStructure* ns2__ServiceJourneyInterchangeStructure::soap_dup(soap*) returns deep copy of ns2__ServiceJourneyInterchangeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceJourneyInterchangeStructure::soap_del() deep deletes ns2__ServiceJourneyInterchangeStructure data members, use only after ns2__ServiceJourneyInterchangeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceJourneyInterchangeStructure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier of SERVICE JOURNEY INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeCode" of XSD type "http://www.siri.org.uk/siri":InterchangeCodeType.
    ns2__InterchangeCodeType*            InterchangeCode                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a physical CONNECTION LINK over which the SERVICE JOURNEY INTERCHANGE takes place. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FeederRef" of XSD type "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure.
    ns2__ConnectingJourneyRefStructure*  FeederRef                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT at which feeder journey arrives. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FeederArrivalStopRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          FeederArrivalStopRef           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Feeder stop within Feeder JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Element "FeederVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                FeederVisitNumber              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DistributorRef" of XSD type "http://www.siri.org.uk/siri":ConnectingJourneyRefStructure.
    ns2__ConnectingJourneyRefStructure*  DistributorRef                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT at which distributor journet departs. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DistributorDepartureStopRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          DistributorDepartureStopRef    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to Distributor stop within Distributor JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                DistributorVisitNumber         0;	///< Optional element.
//  BEGIN GROUP <xs:group name="InterchangePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Properties of SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the passenger can remain in VEHICLE (i.e. BLOCKlinking). Default is 'false': the passenger must change vehicles for this connection.
/// </BLOCKQUOTE></PRE>
/// Element "StaySeated" of XSD type xs:boolean.
    bool                                 StaySeated                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is guaranteed. Default is 'false'; SERVICE JOURNEY INTERCHANGE is not guaranteed.
/// </BLOCKQUOTE></PRE>
/// Element "Guaranteed" of XSD type xs:boolean.
    bool                                 Guaranteed                     0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the SERVICE JOURNEY INTERCHANGE is advertised as a connection. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "Advertised" of XSD type xs:boolean.
    bool                                 Advertised                     0 = false;	///< Default element value="false".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTimesGroup">
/// <PRE><BLOCKQUOTE>
///   Time Elements for SERVICE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="InterchangeWaitTimeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE WAIT TIME.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard wait time for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardWaitTime" of XSD type xs:duration.
    xsd__duration*                       StandardWaitTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum time that Distributor will wait for Feeder for INTERCHANGE. SIRI v1.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumWaitTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum automatic wait time that Distributor will wait for Feeder for INTERCHANGE. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumAutomaticWaitTime" of XSD type xs:duration.
    xsd__duration*                       MaximumAutomaticWaitTime       0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="InterchangeTransferDurationGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for INTERCHANGE TRANSFER duration.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Standard transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "StandardTransferTime" of XSD type xs:duration.
    xsd__duration*                       StandardTransferTime           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MinimumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MinimumTransferTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum transfer duration for INTERCHANGE. SIRI v2,0
/// </BLOCKQUOTE></PRE>
/// Element "MaximumTransferTime" of XSD type xs:duration.
    xsd__duration*                       MaximumTransferTime            0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/*  RESTRICTED FROM ns2__AbstractServiceJourneyInterchangeStructure:
    END OF RESTRICTED FROM ns2__AbstractServiceJourneyInterchangeStructure */
};

/// @brief "http://www.siri.org.uk/siri":LinePermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractTopicPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Line Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__LinePermissionStructure operations:
/// - ns2__LinePermissionStructure* soap_new_ns2__LinePermissionStructure(soap*) allocate and default initialize
/// - ns2__LinePermissionStructure* soap_new_ns2__LinePermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__LinePermissionStructure* soap_new_req_ns2__LinePermissionStructure(soap*, ...) allocate, set required members
/// - ns2__LinePermissionStructure* soap_new_set_ns2__LinePermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__LinePermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__LinePermissionStructure(soap*, ns2__LinePermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__LinePermissionStructure(soap*, ns2__LinePermissionStructure*) serialize to a stream
/// - ns2__LinePermissionStructure* ns2__LinePermissionStructure::soap_dup(soap*) returns deep copy of ns2__LinePermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__LinePermissionStructure::soap_del() deep deletes ns2__LinePermissionStructure data members, use only after ns2__LinePermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__LinePermissionStructure : public ns2__AbstractTopicPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractTopicPermissionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether the participant may access this topic. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Allow" of XSD type xs:boolean.
    bool                                 Allow                          0 = true;	///< Default element value="true".
    END OF INHERITED FROM ns2__AbstractTopicPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE. whose data participant is allowed to access.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a DIRECTION of LINE. that participant is allowed to access.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DirectionRefStructure* of length 0..unbounded.
    std::vector<ns2__DirectionRefStructure*> DirectionRef                   0;
};

/// @brief "http://www.siri.org.uk/siri":OperatorPermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractTopicPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for OPERATOR Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__OperatorPermissionStructure operations:
/// - ns2__OperatorPermissionStructure* soap_new_ns2__OperatorPermissionStructure(soap*) allocate and default initialize
/// - ns2__OperatorPermissionStructure* soap_new_ns2__OperatorPermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OperatorPermissionStructure* soap_new_req_ns2__OperatorPermissionStructure(soap*, ...) allocate, set required members
/// - ns2__OperatorPermissionStructure* soap_new_set_ns2__OperatorPermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__OperatorPermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OperatorPermissionStructure(soap*, ns2__OperatorPermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__OperatorPermissionStructure(soap*, ns2__OperatorPermissionStructure*) serialize to a stream
/// - ns2__OperatorPermissionStructure* ns2__OperatorPermissionStructure::soap_dup(soap*) returns deep copy of ns2__OperatorPermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OperatorPermissionStructure::soap_del() deep deletes ns2__OperatorPermissionStructure data members, use only after ns2__OperatorPermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OperatorPermissionStructure : public ns2__AbstractTopicPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractTopicPermissionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether the participant may access this topic. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Allow" of XSD type xs:boolean.
    bool                                 Allow                          0 = true;	///< Default element value="true".
    END OF INHERITED FROM ns2__AbstractTopicPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to an OPERATOR whose data participant is allowed to access.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionLinkPermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractTopicPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for CONNECTION link Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionLinkPermissionStructure operations:
/// - ns2__ConnectionLinkPermissionStructure* soap_new_ns2__ConnectionLinkPermissionStructure(soap*) allocate and default initialize
/// - ns2__ConnectionLinkPermissionStructure* soap_new_ns2__ConnectionLinkPermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionLinkPermissionStructure* soap_new_req_ns2__ConnectionLinkPermissionStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionLinkPermissionStructure* soap_new_set_ns2__ConnectionLinkPermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionLinkPermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionLinkPermissionStructure(soap*, ns2__ConnectionLinkPermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionLinkPermissionStructure(soap*, ns2__ConnectionLinkPermissionStructure*) serialize to a stream
/// - ns2__ConnectionLinkPermissionStructure* ns2__ConnectionLinkPermissionStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionLinkPermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionLinkPermissionStructure::soap_del() deep deletes ns2__ConnectionLinkPermissionStructure data members, use only after ns2__ConnectionLinkPermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionLinkPermissionStructure : public ns2__AbstractTopicPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractTopicPermissionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether the participant may access this topic. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Allow" of XSD type xs:boolean.
    bool                                 Allow                          0 = true;	///< Default element value="true".
    END OF INHERITED FROM ns2__AbstractTopicPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a CONNECTION link for which permission is made.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":StopMonitorPermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractTopicPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitoring Point (LOGICAL DISPLAY) Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitorPermissionStructure operations:
/// - ns2__StopMonitorPermissionStructure* soap_new_ns2__StopMonitorPermissionStructure(soap*) allocate and default initialize
/// - ns2__StopMonitorPermissionStructure* soap_new_ns2__StopMonitorPermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitorPermissionStructure* soap_new_req_ns2__StopMonitorPermissionStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitorPermissionStructure* soap_new_set_ns2__StopMonitorPermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitorPermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitorPermissionStructure(soap*, ns2__StopMonitorPermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitorPermissionStructure(soap*, ns2__StopMonitorPermissionStructure*) serialize to a stream
/// - ns2__StopMonitorPermissionStructure* ns2__StopMonitorPermissionStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitorPermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitorPermissionStructure::soap_del() deep deletes ns2__StopMonitorPermissionStructure data members, use only after ns2__StopMonitorPermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitorPermissionStructure : public ns2__AbstractTopicPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractTopicPermissionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether the participant may access this topic. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Allow" of XSD type xs:boolean.
    bool                                 Allow                          0 = true;	///< Default element value="true".
    END OF INHERITED FROM ns2__AbstractTopicPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a Stop Monitoring point (LOGICAL DISPLAY) to which permission applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":MonitoringCapabilityAccessControlStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityAccessControlStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitoring Service Capability access control.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoringCapabilityAccessControlStructure operations:
/// - ns2__MonitoringCapabilityAccessControlStructure* soap_new_ns2__MonitoringCapabilityAccessControlStructure(soap*) allocate and default initialize
/// - ns2__MonitoringCapabilityAccessControlStructure* soap_new_ns2__MonitoringCapabilityAccessControlStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoringCapabilityAccessControlStructure* soap_new_req_ns2__MonitoringCapabilityAccessControlStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoringCapabilityAccessControlStructure* soap_new_set_ns2__MonitoringCapabilityAccessControlStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoringCapabilityAccessControlStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoringCapabilityAccessControlStructure(soap*, ns2__MonitoringCapabilityAccessControlStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoringCapabilityAccessControlStructure(soap*, ns2__MonitoringCapabilityAccessControlStructure*) serialize to a stream
/// - ns2__MonitoringCapabilityAccessControlStructure* ns2__MonitoringCapabilityAccessControlStructure::soap_dup(soap*) returns deep copy of ns2__MonitoringCapabilityAccessControlStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoringCapabilityAccessControlStructure::soap_del() deep deletes ns2__MonitoringCapabilityAccessControlStructure data members, use only after ns2__MonitoringCapabilityAccessControlStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoringCapabilityAccessControlStructure : public ns2__CapabilityAccessControlStructure
{ public:
/*  INHERITED FROM ns2__CapabilityAccessControlStructure:
/// <PRE><BLOCKQUOTE>
///   Whether access control of requests is supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestChecking" of XSD type xs:boolean.
    bool                                 RequestChecking                0 = false;	///< Default element value="false".
    END OF INHERITED FROM ns2__CapabilityAccessControlStructure */
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by OPERATOR is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckOperatorRef.
    bool                                 CheckOperatorRef               0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by LINE is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckLineRef.
    bool                                 CheckLineRef                   0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by monitoring point (LOGICAL DISPLAY) is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckMonitoringRef.
    bool                                 CheckMonitoringRef             0 = true;	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":ConnectionServicePermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitoring Service Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionServicePermissionStructure operations:
/// - ns2__ConnectionServicePermissionStructure* soap_new_ns2__ConnectionServicePermissionStructure(soap*) allocate and default initialize
/// - ns2__ConnectionServicePermissionStructure* soap_new_ns2__ConnectionServicePermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionServicePermissionStructure* soap_new_req_ns2__ConnectionServicePermissionStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionServicePermissionStructure* soap_new_set_ns2__ConnectionServicePermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionServicePermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionServicePermissionStructure(soap*, ns2__ConnectionServicePermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionServicePermissionStructure(soap*, ns2__ConnectionServicePermissionStructure*) serialize to a stream
/// - ns2__ConnectionServicePermissionStructure* ns2__ConnectionServicePermissionStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionServicePermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionServicePermissionStructure::soap_del() deep deletes ns2__ConnectionServicePermissionStructure data members, use only after ns2__ConnectionServicePermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionServicePermissionStructure : public ns2__AbstractPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractPermissionStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ConnectionServicePermissionStructure;	///< Union _ns2__union_ConnectionServicePermissionStructure selector: set to SOAP_UNION__ns2__union_ConnectionServicePermissionStructure_<fieldname>
    union _ns2__union_ConnectionServicePermissionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Parmissions apply by default to All particpants. May be overidden by other separate permissions for individual.
/// </BLOCKQUOTE></PRE>
/// Element "AllParticipants" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllParticipants                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Permission applies to specified participant.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ConnectionServicePermissionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Permissions for general capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ConnectionServicePermissionStructure_GeneralCapabilities operations:
/// - _ns2__ConnectionServicePermissionStructure_GeneralCapabilities* soap_new__ns2__ConnectionServicePermissionStructure_GeneralCapabilities(soap*) allocate and default initialize
/// - _ns2__ConnectionServicePermissionStructure_GeneralCapabilities* soap_new__ns2__ConnectionServicePermissionStructure_GeneralCapabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__ConnectionServicePermissionStructure_GeneralCapabilities* soap_new_req__ns2__ConnectionServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set required members
/// - _ns2__ConnectionServicePermissionStructure_GeneralCapabilities* soap_new_set__ns2__ConnectionServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set all public members
/// - _ns2__ConnectionServicePermissionStructure_GeneralCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ConnectionServicePermissionStructure_GeneralCapabilities(soap*, _ns2__ConnectionServicePermissionStructure_GeneralCapabilities*) deserialize from a stream
/// - int soap_write__ns2__ConnectionServicePermissionStructure_GeneralCapabilities(soap*, _ns2__ConnectionServicePermissionStructure_GeneralCapabilities*) serialize to a stream
/// - _ns2__ConnectionServicePermissionStructure_GeneralCapabilities* _ns2__ConnectionServicePermissionStructure_GeneralCapabilities::soap_dup(soap*) returns deep copy of _ns2__ConnectionServicePermissionStructure_GeneralCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ConnectionServicePermissionStructure_GeneralCapabilities::soap_del() deep deletes _ns2__ConnectionServicePermissionStructure_GeneralCapabilities data members, use only after _ns2__ConnectionServicePermissionStructure_GeneralCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ConnectionServicePermissionStructure_GeneralCapabilities
    {
/// <PRE><BLOCKQUOTE>
///   Participant may make direct requests for data. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Participant may create subscriptions. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                   *GeneralCapabilities            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   The OPERATOR data that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OperatorPermissions.
    _ns2__OperatorPermissions*           OperatorPermissions            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The LINEs that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinePermissions.
    _ns2__LinePermissions*               LinePermissions                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The CONNECTION links that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionLinkPermissions.
    _ns2__ConnectionLinkPermissions*     ConnectionLinkPermissions      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionCapabilityAccessControlStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityAccessControlStructure.
///
/// <PRE><BLOCKQUOTE>
///   Abstract type for capability access control.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionCapabilityAccessControlStructure operations:
/// - ns2__ConnectionCapabilityAccessControlStructure* soap_new_ns2__ConnectionCapabilityAccessControlStructure(soap*) allocate and default initialize
/// - ns2__ConnectionCapabilityAccessControlStructure* soap_new_ns2__ConnectionCapabilityAccessControlStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionCapabilityAccessControlStructure* soap_new_req_ns2__ConnectionCapabilityAccessControlStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionCapabilityAccessControlStructure* soap_new_set_ns2__ConnectionCapabilityAccessControlStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionCapabilityAccessControlStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionCapabilityAccessControlStructure(soap*, ns2__ConnectionCapabilityAccessControlStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionCapabilityAccessControlStructure(soap*, ns2__ConnectionCapabilityAccessControlStructure*) serialize to a stream
/// - ns2__ConnectionCapabilityAccessControlStructure* ns2__ConnectionCapabilityAccessControlStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionCapabilityAccessControlStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionCapabilityAccessControlStructure::soap_del() deep deletes ns2__ConnectionCapabilityAccessControlStructure data members, use only after ns2__ConnectionCapabilityAccessControlStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionCapabilityAccessControlStructure : public ns2__CapabilityAccessControlStructure
{ public:
/*  INHERITED FROM ns2__CapabilityAccessControlStructure:
/// <PRE><BLOCKQUOTE>
///   Whether access control of requests is supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestChecking" of XSD type xs:boolean.
    bool                                 RequestChecking                0 = false;	///< Default element value="false".
    END OF INHERITED FROM ns2__CapabilityAccessControlStructure */
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by OPERATOR is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckOperatorRef.
    bool                                 CheckOperatorRef               0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by LINE is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckLineRef.
    bool                                 CheckLineRef                   0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by CONNECTION LINK is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by CONNECTION link is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckConnectionLinkRef.
    bool                                 CheckConnectionLinkRef         0 = true;	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":EstimatedTimetableSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Subscription Request for the Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedTimetableSubscriptionStructure operations:
/// - ns2__EstimatedTimetableSubscriptionStructure* soap_new_ns2__EstimatedTimetableSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__EstimatedTimetableSubscriptionStructure* soap_new_ns2__EstimatedTimetableSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedTimetableSubscriptionStructure* soap_new_req_ns2__EstimatedTimetableSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedTimetableSubscriptionStructure* soap_new_set_ns2__EstimatedTimetableSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedTimetableSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedTimetableSubscriptionStructure(soap*, ns2__EstimatedTimetableSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedTimetableSubscriptionStructure(soap*, ns2__EstimatedTimetableSubscriptionStructure*) serialize to a stream
/// - ns2__EstimatedTimetableSubscriptionStructure* ns2__EstimatedTimetableSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedTimetableSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedTimetableSubscriptionStructure::soap_del() deep deletes ns2__EstimatedTimetableSubscriptionStructure data members, use only after ns2__EstimatedTimetableSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedTimetableSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about the estimated timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EstimatedTimetableRequest.
    ns2__EstimatedTimetableRequestStructure*  EstimatedTimetableRequest      1;	///< Required element.
//  BEGIN GROUP <xs:group name="EstimatedTimetableSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription publishing and notification processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the producer should return the complete set of data, or only provide updates to the previously returned data i.e. changes to the expected deviation (delay or early time). Default is 'true'. If true only changes at the first stop will be returned and the client must interpolate the If false each subscription response will contain the full information as specified in this request.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   The amount of change to the arrival or departure time that can happen before an update is sent (i.e. if ChangeBeforeUpdate is set to 2 minutes, the subscriber will not be told that a timetable is changed by 30 seconds - an update will only be sent when the timetable is changed by at least least 2 minutes.
/// </BLOCKQUOTE></PRE>
/// Element "ChangeBeforeUpdates" of XSD type "http://www.siri.org.uk/siri":DurationType.
    ns2__DurationType                    ChangeBeforeUpdates            1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":EstimatedVersionFrameStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for version frame structure.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedVersionFrameStructure operations:
/// - ns2__EstimatedVersionFrameStructure* soap_new_ns2__EstimatedVersionFrameStructure(soap*) allocate and default initialize
/// - ns2__EstimatedVersionFrameStructure* soap_new_ns2__EstimatedVersionFrameStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedVersionFrameStructure* soap_new_req_ns2__EstimatedVersionFrameStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedVersionFrameStructure* soap_new_set_ns2__EstimatedVersionFrameStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedVersionFrameStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedVersionFrameStructure(soap*, ns2__EstimatedVersionFrameStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedVersionFrameStructure(soap*, ns2__EstimatedVersionFrameStructure*) serialize to a stream
/// - ns2__EstimatedVersionFrameStructure* ns2__EstimatedVersionFrameStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedVersionFrameStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedVersionFrameStructure::soap_del() deep deletes ns2__EstimatedVersionFrameStructure data members, use only after ns2__EstimatedVersionFrameStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedVersionFrameStructure : public ns2__AbstractItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/// <PRE><BLOCKQUOTE>
///   Version Identifier.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VersionRef.
    ns2__VersionCodeType*                VersionRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A VEHICLE JOURNEY taking place on a particular date that will be managed by an AVMs.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedVehicleJourneyStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedVehicleJourneyStructure*> EstimatedVehicleJourney        1;
/// <PRE><BLOCKQUOTE>
///   Connection parameters for a monitored SERVICE JOURNEY INTERCHANGE between a feeder and distributor journey. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A VEHICLE JOURNEY taking place on a particular date that will be managed by an AVMs.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedServiceJourneyInterchangeStructure* element refs of length 0..unbounded.
    std::vector<ns2__EstimatedServiceJourneyInterchangeStructure*> EstimatedServiceJourneyInterchange 0;
};

/// @brief "http://www.siri.org.uk/siri":EstimatedTimetableCapabilityRequestPolicyStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Estimated Timetable Capability Request Policy.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedTimetableCapabilityRequestPolicyStructure operations:
/// - ns2__EstimatedTimetableCapabilityRequestPolicyStructure* soap_new_ns2__EstimatedTimetableCapabilityRequestPolicyStructure(soap*) allocate and default initialize
/// - ns2__EstimatedTimetableCapabilityRequestPolicyStructure* soap_new_ns2__EstimatedTimetableCapabilityRequestPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedTimetableCapabilityRequestPolicyStructure* soap_new_req_ns2__EstimatedTimetableCapabilityRequestPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedTimetableCapabilityRequestPolicyStructure* soap_new_set_ns2__EstimatedTimetableCapabilityRequestPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedTimetableCapabilityRequestPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedTimetableCapabilityRequestPolicyStructure(soap*, ns2__EstimatedTimetableCapabilityRequestPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedTimetableCapabilityRequestPolicyStructure(soap*, ns2__EstimatedTimetableCapabilityRequestPolicyStructure*) serialize to a stream
/// - ns2__EstimatedTimetableCapabilityRequestPolicyStructure* ns2__EstimatedTimetableCapabilityRequestPolicyStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedTimetableCapabilityRequestPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedTimetableCapabilityRequestPolicyStructure::soap_del() deep deletes ns2__EstimatedTimetableCapabilityRequestPolicyStructure data members, use only after ns2__EstimatedTimetableCapabilityRequestPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedTimetableCapabilityRequestPolicyStructure : public ns2__CapabilityRequestPolicyStructure
{ public:
/*  INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_EstimatedTimetableCapabilityRequestPolicyStructure;	///< Union _ns2__union_EstimatedTimetableCapabilityRequestPolicyStructure selector: set to SOAP_UNION__ns2__union_EstimatedTimetableCapabilityRequestPolicyStructure_<fieldname>
    union _ns2__union_EstimatedTimetableCapabilityRequestPolicyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_EstimatedTimetableCapabilityRequestPolicyStructure;
//  END OF CHOICE
    END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure */
/// <PRE><BLOCKQUOTE>
///   Whether results returns foreign journeys only.
/// </BLOCKQUOTE></PRE>
/// Element "ForeignJourneysOnly" of XSD type xs:boolean.
    bool*                                ForeignJourneysOnly            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":EstimatedTimetableServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Estimated Timetable Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedTimetableServiceCapabilitiesStructure operations:
/// - ns2__EstimatedTimetableServiceCapabilitiesStructure* soap_new_ns2__EstimatedTimetableServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__EstimatedTimetableServiceCapabilitiesStructure* soap_new_ns2__EstimatedTimetableServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedTimetableServiceCapabilitiesStructure* soap_new_req_ns2__EstimatedTimetableServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedTimetableServiceCapabilitiesStructure* soap_new_set_ns2__EstimatedTimetableServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedTimetableServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedTimetableServiceCapabilitiesStructure(soap*, ns2__EstimatedTimetableServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedTimetableServiceCapabilitiesStructure(soap*, ns2__EstimatedTimetableServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__EstimatedTimetableServiceCapabilitiesStructure* ns2__EstimatedTimetableServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedTimetableServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedTimetableServiceCapabilitiesStructure::soap_del() deep deletes ns2__EstimatedTimetableServiceCapabilitiesStructure data members, use only after ns2__EstimatedTimetableServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedTimetableServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering* _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__EstimatedTimetableServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Preview interval available for estimations.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           DefaultPreviewInterval         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by OPERATOR. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByOperatorRef.
    bool                                 FilterByOperatorRef            0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByLineRef.
    bool                                 FilterByLineRef                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by TIMETABLE VERSION Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByVersionRef" of XSD type xs:boolean.
    bool                                 FilterByVersionRef             0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy operations:
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy(soap*) allocate and default initialize
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new_req__ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set required members
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new_set__ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set all public members
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy*) deserialize from a stream
/// - int soap_write__ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy*) serialize to a stream
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy* _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy::soap_dup(soap*) returns deep copy of _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy::soap_del() deep deletes _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy data members, use only after _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy
    {
/// INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy;	///< Union _ns2__union_EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy selector: set to SOAP_UNION__ns2__union_EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy_<fieldname>
    union _ns2__union_EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_EstimatedTimetableServiceCapabilitiesStructure_RequestPolicy;
//  END OF CHOICE
//  END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure
    }                                   *RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscription Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionPolicy" of XSD type "http://www.siri.org.uk/siri":CapabilitySubscriptionPolicyStructure.
    ns2__CapabilitySubscriptionPolicyStructure*  SubscriptionPolicy             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "AccessControl" of XSD type "http://www.siri.org.uk/siri":ConnectionCapabilityAccessControlStructure.
    ns2__ConnectionCapabilityAccessControlStructure*  AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopTimetableSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Subscription Request for Stop Timetables.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopTimetableSubscriptionStructure operations:
/// - ns2__StopTimetableSubscriptionStructure* soap_new_ns2__StopTimetableSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__StopTimetableSubscriptionStructure* soap_new_ns2__StopTimetableSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopTimetableSubscriptionStructure* soap_new_req_ns2__StopTimetableSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__StopTimetableSubscriptionStructure* soap_new_set_ns2__StopTimetableSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__StopTimetableSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopTimetableSubscriptionStructure(soap*, ns2__StopTimetableSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__StopTimetableSubscriptionStructure(soap*, ns2__StopTimetableSubscriptionStructure*) serialize to a stream
/// - ns2__StopTimetableSubscriptionStructure* ns2__StopTimetableSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__StopTimetableSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopTimetableSubscriptionStructure::soap_del() deep deletes ns2__StopTimetableSubscriptionStructure data members, use only after ns2__StopTimetableSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopTimetableSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrival and departure at a stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopTimetableRequest.
    ns2__StopTimetableRequestStructure*  StopTimetableRequest           1;	///< Required element.
//  BEGIN GROUP <xs:group name="StopTimetableSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription publishing and notification processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the producer should return the complete set of current data, or only provide updates to the last data returned, i.e. additions, modifications and deletions.
///   If false each subscription response will contain the full information as specified in this request.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   The amount of change to the arrival or departure time that can happen before an update is sent (i.e. if ChangeBeforeUpdate is set to 2 minutes, the subscriber will not be told that a bus is 30 seconds delayed - an update will only be sent when the bus is at least 2 minutes delayed). Default is zero - all changes will be sent regardless.
/// </BLOCKQUOTE></PRE>
/// Element "ChangeBeforeUpdates" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ChangeBeforeUpdates            0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopTimetableServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Capabilities of Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopTimetableServiceCapabilitiesStructure operations:
/// - ns2__StopTimetableServiceCapabilitiesStructure* soap_new_ns2__StopTimetableServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__StopTimetableServiceCapabilitiesStructure* soap_new_ns2__StopTimetableServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopTimetableServiceCapabilitiesStructure* soap_new_req_ns2__StopTimetableServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__StopTimetableServiceCapabilitiesStructure* soap_new_set_ns2__StopTimetableServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__StopTimetableServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopTimetableServiceCapabilitiesStructure(soap*, ns2__StopTimetableServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__StopTimetableServiceCapabilitiesStructure(soap*, ns2__StopTimetableServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__StopTimetableServiceCapabilitiesStructure* ns2__StopTimetableServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__StopTimetableServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopTimetableServiceCapabilitiesStructure::soap_del() deep deletes ns2__StopTimetableServiceCapabilitiesStructure data members, use only after ns2__StopTimetableServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopTimetableServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Available Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering* _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopTimetableServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Monitoring point (LOGICAL DISPLAY). Fixed as 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByMonitoringRef.
    bool*                                FilterByMonitoringRef          nullptr 0;	///< Fixed element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByLineRef.
    bool                                 FilterByLineRef                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by DIRECTION Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByDirectionRef.
    bool                                 FilterByDirectionRef           0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Available request policy options.
/// </BLOCKQUOTE></PRE>
/// Element "RequestPolicy" of XSD type "http://www.siri.org.uk/siri":StopTimetableCapabilityRequestPolicyStructure.
    ns2__StopTimetableCapabilityRequestPolicyStructure*  RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Access control that can be used.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl operations:
/// - _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl* soap_new__ns2__StopTimetableServiceCapabilitiesStructure_AccessControl(soap*) allocate and default initialize
/// - _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl* soap_new__ns2__StopTimetableServiceCapabilitiesStructure_AccessControl(soap*, int num) allocate array and default initialize values
/// - _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl* soap_new_req__ns2__StopTimetableServiceCapabilitiesStructure_AccessControl(soap*, ...) allocate, set required members
/// - _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl* soap_new_set__ns2__StopTimetableServiceCapabilitiesStructure_AccessControl(soap*, ...) allocate, set all public members
/// - _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopTimetableServiceCapabilitiesStructure_AccessControl(soap*, _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl*) deserialize from a stream
/// - int soap_write__ns2__StopTimetableServiceCapabilitiesStructure_AccessControl(soap*, _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl*) serialize to a stream
/// - _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl* _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl::soap_dup(soap*) returns deep copy of _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl::soap_del() deep deletes _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl data members, use only after _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopTimetableServiceCapabilitiesStructure_AccessControl
    {
/// INHERITED FROM ns2__CapabilityAccessControlStructure:
/// <PRE><BLOCKQUOTE>
///   Whether access control of requests is supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestChecking" of XSD type xs:boolean.
    bool                                 RequestChecking                0 = false;	///< Default element value="false".
//  END OF INHERITED FROM ns2__CapabilityAccessControlStructure
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by OPERATOR is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckOperatorRef.
    bool                                 CheckOperatorRef               0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by LINE is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckLineRef.
    bool                                 CheckLineRef                   0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by monitoring point (LOGICAL DISPLAY) is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckMonitoringRef.
    bool                                 CheckMonitoringRef             0 = true;	///< Default element value="true".
    }                                   *AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopTimetableCapabilityRequestPolicyStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitoring Service Capability Request Policy.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopTimetableCapabilityRequestPolicyStructure operations:
/// - ns2__StopTimetableCapabilityRequestPolicyStructure* soap_new_ns2__StopTimetableCapabilityRequestPolicyStructure(soap*) allocate and default initialize
/// - ns2__StopTimetableCapabilityRequestPolicyStructure* soap_new_ns2__StopTimetableCapabilityRequestPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopTimetableCapabilityRequestPolicyStructure* soap_new_req_ns2__StopTimetableCapabilityRequestPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__StopTimetableCapabilityRequestPolicyStructure* soap_new_set_ns2__StopTimetableCapabilityRequestPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__StopTimetableCapabilityRequestPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopTimetableCapabilityRequestPolicyStructure(soap*, ns2__StopTimetableCapabilityRequestPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__StopTimetableCapabilityRequestPolicyStructure(soap*, ns2__StopTimetableCapabilityRequestPolicyStructure*) serialize to a stream
/// - ns2__StopTimetableCapabilityRequestPolicyStructure* ns2__StopTimetableCapabilityRequestPolicyStructure::soap_dup(soap*) returns deep copy of ns2__StopTimetableCapabilityRequestPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopTimetableCapabilityRequestPolicyStructure::soap_del() deep deletes ns2__StopTimetableCapabilityRequestPolicyStructure data members, use only after ns2__StopTimetableCapabilityRequestPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopTimetableCapabilityRequestPolicyStructure : public ns2__CapabilityRequestPolicyStructure
{ public:
/*  INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_StopTimetableCapabilityRequestPolicyStructure;	///< Union _ns2__union_StopTimetableCapabilityRequestPolicyStructure selector: set to SOAP_UNION__ns2__union_StopTimetableCapabilityRequestPolicyStructure_<fieldname>
    union _ns2__union_StopTimetableCapabilityRequestPolicyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_StopTimetableCapabilityRequestPolicyStructure;
//  END OF CHOICE
    END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure */
/// <PRE><BLOCKQUOTE>
///   Whether results can return references for stops. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "UseReferences" of XSD type xs:boolean.
    bool                                 UseReferences                  0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can return names for stop.
/// </BLOCKQUOTE></PRE>
/// Element "UseNames" of XSD type xs:boolean.
    bool                                 UseNames                       0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":StopTimetableServicePermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitoring Service Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopTimetableServicePermissionStructure operations:
/// - ns2__StopTimetableServicePermissionStructure* soap_new_ns2__StopTimetableServicePermissionStructure(soap*) allocate and default initialize
/// - ns2__StopTimetableServicePermissionStructure* soap_new_ns2__StopTimetableServicePermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopTimetableServicePermissionStructure* soap_new_req_ns2__StopTimetableServicePermissionStructure(soap*, ...) allocate, set required members
/// - ns2__StopTimetableServicePermissionStructure* soap_new_set_ns2__StopTimetableServicePermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__StopTimetableServicePermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopTimetableServicePermissionStructure(soap*, ns2__StopTimetableServicePermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__StopTimetableServicePermissionStructure(soap*, ns2__StopTimetableServicePermissionStructure*) serialize to a stream
/// - ns2__StopTimetableServicePermissionStructure* ns2__StopTimetableServicePermissionStructure::soap_dup(soap*) returns deep copy of ns2__StopTimetableServicePermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopTimetableServicePermissionStructure::soap_del() deep deletes ns2__StopTimetableServicePermissionStructure data members, use only after ns2__StopTimetableServicePermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopTimetableServicePermissionStructure : public ns2__AbstractPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractPermissionStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_StopTimetableServicePermissionStructure;	///< Union _ns2__union_StopTimetableServicePermissionStructure selector: set to SOAP_UNION__ns2__union_StopTimetableServicePermissionStructure_<fieldname>
    union _ns2__union_StopTimetableServicePermissionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Parmissions apply by default to All particpants. May be overidden by other separate permissions for individual.
/// </BLOCKQUOTE></PRE>
/// Element "AllParticipants" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllParticipants                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Permission applies to specified participant.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_StopTimetableServicePermissionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Permissions for general capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities operations:
/// - _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities* soap_new__ns2__StopTimetableServicePermissionStructure_GeneralCapabilities(soap*) allocate and default initialize
/// - _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities* soap_new__ns2__StopTimetableServicePermissionStructure_GeneralCapabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities* soap_new_req__ns2__StopTimetableServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set required members
/// - _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities* soap_new_set__ns2__StopTimetableServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set all public members
/// - _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopTimetableServicePermissionStructure_GeneralCapabilities(soap*, _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities*) deserialize from a stream
/// - int soap_write__ns2__StopTimetableServicePermissionStructure_GeneralCapabilities(soap*, _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities*) serialize to a stream
/// - _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities* _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities::soap_dup(soap*) returns deep copy of _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities::soap_del() deep deletes _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities data members, use only after _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopTimetableServicePermissionStructure_GeneralCapabilities
    {
/// <PRE><BLOCKQUOTE>
///   Participant may make direct requests for data. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Participant may create subscriptions. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                   *GeneralCapabilities            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   The OPERATOR data that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OperatorPermissions.
    _ns2__OperatorPermissions*           OperatorPermissions            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The LINEs that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinePermissions.
    _ns2__LinePermissions*               LinePermissions                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The monitoring points that the participant may access.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions operations:
/// - _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions* soap_new__ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions(soap*) allocate and default initialize
/// - _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions* soap_new__ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions* soap_new_req__ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions(soap*, ...) allocate, set required members
/// - _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions* soap_new_set__ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions(soap*, ...) allocate, set all public members
/// - _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions(soap*, _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions*) deserialize from a stream
/// - int soap_write__ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions(soap*, _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions*) serialize to a stream
/// - _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions* _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions::soap_dup(soap*) returns deep copy of _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions::soap_del() deep deletes _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions data members, use only after _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopTimetableServicePermissionStructure_StopMonitorPermissions
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_StopTimetableServicePermissionStructure_StopMonitorPermissions;	///< Union _ns2__union_StopTimetableServicePermissionStructure_StopMonitorPermissions selector: set to SOAP_UNION__ns2__union_StopTimetableServicePermissionStructure_StopMonitorPermissions_<fieldname>
/// Union for choice in ns2__StopMonitorPermissions.
    union _ns2__union_StopTimetableServicePermissionStructure_StopMonitorPermissions
    {
/// <PRE><BLOCKQUOTE>
///   Allow access to all topics known to the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowAll.
    bool                                 AllowAll                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Participant's permission for this Monitoring Point (LOGICAL DISPLAY)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitorPermissionStructure* of length 1..unbounded.
    std::vector<ns2__StopMonitorPermissionStructure*> *StopMonitorPermission          1;
    }                                    union_StopTimetableServicePermissionStructure_StopMonitorPermissions;
//  END OF CHOICE
    }                                    StopMonitorPermissions         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Subscription Request for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringSubscriptionStructure operations:
/// - ns2__StopMonitoringSubscriptionStructure* soap_new_ns2__StopMonitoringSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringSubscriptionStructure* soap_new_ns2__StopMonitoringSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringSubscriptionStructure* soap_new_req_ns2__StopMonitoringSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringSubscriptionStructure* soap_new_set_ns2__StopMonitoringSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringSubscriptionStructure(soap*, ns2__StopMonitoringSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringSubscriptionStructure(soap*, ns2__StopMonitoringSubscriptionStructure*) serialize to a stream
/// - ns2__StopMonitoringSubscriptionStructure* ns2__StopMonitoringSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringSubscriptionStructure::soap_del() deep deletes ns2__StopMonitoringSubscriptionStructure data members, use only after ns2__StopMonitoringSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrivals and departures at a stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopMonitoringRequest.
    ns2__StopMonitoringRequestStructure*  StopMonitoringRequest          1;	///< Required element.
//  BEGIN GROUP <xs:group name="StopMonitoringSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription publishing and notification processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the producer should return the complete set of current data, or only provide updates to the last data returned, i.e. additions, modifications and deletions.
///   If false each subscription response will contain the full information as specified in this request.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   The amount of change to the arrival or departure time that can happen before an update is sent (i.e. if ChangeBeforeUpdate is set to 2 minutes, the subscriber will not be told that a bus is 30 seconds delayed - an update will only be sent when the bus is at least 2 minutes delayed). Default is zero - all changes will be sent regardless.
/// </BLOCKQUOTE></PRE>
/// Element "ChangeBeforeUpdates" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ChangeBeforeUpdates            0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ServiceExceptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for whether service is unavailable for all or some services SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceExceptionStructure operations:
/// - ns2__ServiceExceptionStructure* soap_new_ns2__ServiceExceptionStructure(soap*) allocate and default initialize
/// - ns2__ServiceExceptionStructure* soap_new_ns2__ServiceExceptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceExceptionStructure* soap_new_req_ns2__ServiceExceptionStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceExceptionStructure* soap_new_set_ns2__ServiceExceptionStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceExceptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceExceptionStructure(soap*, ns2__ServiceExceptionStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceExceptionStructure(soap*, ns2__ServiceExceptionStructure*) serialize to a stream
/// - ns2__ServiceExceptionStructure* ns2__ServiceExceptionStructure::soap_dup(soap*) returns deep copy of ns2__ServiceExceptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceExceptionStructure::soap_del() deep deletes ns2__ServiceExceptionStructure data members, use only after ns2__ServiceExceptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceExceptionStructure : public ns2__AbstractItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LineRef.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE DIRECTION to which exception applies.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Status of service, Service not yet started, Service ended for day, no service today, etc.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceStatus" of XSD type "http://www.siri.org.uk/siri":ServiceExceptionEnumeration.
    enum ns2__ServiceExceptionEnumeration*  ServiceStatus                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text explanation of service exception.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Notice                         0;
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION providing further information about exception
/// </BLOCKQUOTE></PRE>
/// Element "SituationRef" of XSD type "http://www.siri.org.uk/siri":SituationSimpleRefStructure.
    ns2__SituationSimpleRefStructure*    SituationRef                   0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Stop Monitoring Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringServiceCapabilitiesStructure operations:
/// - ns2__StopMonitoringServiceCapabilitiesStructure* soap_new_ns2__StopMonitoringServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringServiceCapabilitiesStructure* soap_new_ns2__StopMonitoringServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringServiceCapabilitiesStructure* soap_new_req_ns2__StopMonitoringServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringServiceCapabilitiesStructure* soap_new_set_ns2__StopMonitoringServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringServiceCapabilitiesStructure(soap*, ns2__StopMonitoringServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringServiceCapabilitiesStructure(soap*, ns2__StopMonitoringServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__StopMonitoringServiceCapabilitiesStructure* ns2__StopMonitoringServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringServiceCapabilitiesStructure::soap_del() deep deletes ns2__StopMonitoringServiceCapabilitiesStructure data members, use only after ns2__StopMonitoringServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Available Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering* _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopMonitoringServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Default preview interval. Default is 60 minutes.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType            DefaultPreviewInterval         0;	///< Default element value="PT60M".
/// <PRE><BLOCKQUOTE>
///   Whether a start time other than now can be specified for preview interval. Default is 'truet.
/// </BLOCKQUOTE></PRE>
/// Element "ByStartTime" of XSD type xs:boolean.
    bool                                 ByStartTime                    0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Monitoring point (LOGICAL DISPLAY). Fixed as 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByMonitoringRef.
    bool*                                FilterByMonitoringRef          nullptr 0;	///< Fixed element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByLineRef.
    bool                                 FilterByLineRef                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by DIRECTION Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByDirectionRef.
    bool                                 FilterByDirectionRef           0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by DESTINATION. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByDestination.
    bool                                 FilterByDestination            0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VistitType, e.g. arrivals, departures. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByVisitType" of XSD type xs:boolean.
    bool                                 FilterByVisitType              0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Available Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy operations:
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*) allocate and default initialize
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new_req__ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set required members
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new_set__ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set all public members
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy*) deserialize from a stream
/// - int soap_write__ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy*) serialize to a stream
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy* _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_dup(soap*) returns deep copy of _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_del() deep deletes _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy data members, use only after _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopMonitoringServiceCapabilitiesStructure_RequestPolicy
    {
/// INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_StopMonitoringServiceCapabilitiesStructure_RequestPolicy;	///< Union _ns2__union_StopMonitoringServiceCapabilitiesStructure_RequestPolicy selector: set to SOAP_UNION__ns2__union_StopMonitoringServiceCapabilitiesStructure_RequestPolicy_<fieldname>
    union _ns2__union_StopMonitoringServiceCapabilitiesStructure_RequestPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_StopMonitoringServiceCapabilitiesStructure_RequestPolicy;
//  END OF CHOICE
//  END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure
/// INHERITED FROM ns2__StopMonitoringCapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   Whether results can return references for stops. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "UseReferences" of XSD type xs:boolean.
    bool                                 UseReferences                  0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can return names for stop.
/// </BLOCKQUOTE></PRE>
/// Element "UseNames" of XSD type xs:boolean.
    bool                                 UseNames                       0 = false;	///< Default element value="false".
//  END OF INHERITED FROM ns2__StopMonitoringCapabilityRequestPolicyStructure
//  BEGIN GROUP <xs:group name="StopMonitoringVolumeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for volume control.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether Detail level filtering is supported. Default is ' false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasDetailLevel" of XSD type xs:boolean.
    bool                                 HasDetailLevel                 0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Default Detail level if non specified on request. Default Normal.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultDetailLevel" of XSD type "http://www.siri.org.uk/siri":StopMonitoringDetailEnumeration.
    enum ns2__StopMonitoringDetailEnumeration  DefaultDetailLevel             0 = ns2__StopMonitoringDetailEnumeration__normal;	///< Default element value="normal".
/// <PRE><BLOCKQUOTE>
///   Whether results can be limited to a maximum number. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasMaximumVisits" of XSD type xs:boolean.
    bool                                 HasMaximumVisits               0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be limited to include a minimum number per LINE. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasMinimumVisitsPerLine" of XSD type xs:boolean.
    bool                                 HasMinimumVisitsPerLine        0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be limited to include a minimum numVIA (i.e. per JOURNEY PATTERN). +SIRI v2.0.
///   default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasMinimumVisitsPerVia" of XSD type xs:boolean.
    bool                                 HasMinimumVisitsPerVia         0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   If system can return detailed calling pattern, whether a number of onwards calls to include can be specified. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasNumberOfOnwardsCalls" of XSD type xs:boolean.
    bool                                 HasNumberOfOnwardsCalls        0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   If system can return detailed calling pattern, whether a number of previouscalls to include can be specified. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasNumberOfPreviousCalls" of XSD type xs:boolean.
    bool                                 HasNumberOfPreviousCalls       0 = false;	///< Default element value="false".
//  END OF GROUP
    }                                   *RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Available Subscription Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionPolicy" of XSD type "http://www.siri.org.uk/siri":CapabilitySubscriptionPolicyStructure.
    ns2__CapabilitySubscriptionPolicyStructure*  SubscriptionPolicy             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Available Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "AccessControl" of XSD type "http://www.siri.org.uk/siri":MonitoringCapabilityAccessControlStructure.
    ns2__MonitoringCapabilityAccessControlStructure*  AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Available Optional Response capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures operations:
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new__ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*) allocate and default initialize
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new__ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, int num) allocate array and default initialize values
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new_req__ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, ...) allocate, set required members
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new_set__ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, ...) allocate, set all public members
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures*) deserialize from a stream
/// - int soap_write__ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures*) serialize to a stream
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures* _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_dup(soap*) returns deep copy of _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_del() deep deletes _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures data members, use only after _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopMonitoringServiceCapabilitiesStructure_ResponseFeatures
    {
/// <PRE><BLOCKQUOTE>
///   Whether result supports LINE events. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasLineNotices" of XSD type xs:boolean.
    bool                                 HasLineNotices                 0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether result supports SITUATION REFERENCESs. Default is 'false'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "HasSituations" of XSD type xs:boolean.
    bool                                 HasSituations                  0 = false;	///< Default element value="false".
    }                                   *ResponseFeatures               0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringCapabilityRequestPolicyStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitoring Service Capability Request Policy.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringCapabilityRequestPolicyStructure operations:
/// - ns2__StopMonitoringCapabilityRequestPolicyStructure* soap_new_ns2__StopMonitoringCapabilityRequestPolicyStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringCapabilityRequestPolicyStructure* soap_new_ns2__StopMonitoringCapabilityRequestPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringCapabilityRequestPolicyStructure* soap_new_req_ns2__StopMonitoringCapabilityRequestPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringCapabilityRequestPolicyStructure* soap_new_set_ns2__StopMonitoringCapabilityRequestPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringCapabilityRequestPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringCapabilityRequestPolicyStructure(soap*, ns2__StopMonitoringCapabilityRequestPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringCapabilityRequestPolicyStructure(soap*, ns2__StopMonitoringCapabilityRequestPolicyStructure*) serialize to a stream
/// - ns2__StopMonitoringCapabilityRequestPolicyStructure* ns2__StopMonitoringCapabilityRequestPolicyStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringCapabilityRequestPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringCapabilityRequestPolicyStructure::soap_del() deep deletes ns2__StopMonitoringCapabilityRequestPolicyStructure data members, use only after ns2__StopMonitoringCapabilityRequestPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringCapabilityRequestPolicyStructure : public ns2__CapabilityRequestPolicyStructure
{ public:
/*  INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_StopMonitoringCapabilityRequestPolicyStructure;	///< Union _ns2__union_StopMonitoringCapabilityRequestPolicyStructure selector: set to SOAP_UNION__ns2__union_StopMonitoringCapabilityRequestPolicyStructure_<fieldname>
    union _ns2__union_StopMonitoringCapabilityRequestPolicyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_StopMonitoringCapabilityRequestPolicyStructure;
//  END OF CHOICE
    END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure */
/// <PRE><BLOCKQUOTE>
///   Whether results can return references for stops. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "UseReferences" of XSD type xs:boolean.
    bool                                 UseReferences                  0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can return names for stop.
/// </BLOCKQUOTE></PRE>
/// Element "UseNames" of XSD type xs:boolean.
    bool                                 UseNames                       0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringServicePermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitoring Service Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringServicePermissionStructure operations:
/// - ns2__StopMonitoringServicePermissionStructure* soap_new_ns2__StopMonitoringServicePermissionStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringServicePermissionStructure* soap_new_ns2__StopMonitoringServicePermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringServicePermissionStructure* soap_new_req_ns2__StopMonitoringServicePermissionStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringServicePermissionStructure* soap_new_set_ns2__StopMonitoringServicePermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringServicePermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringServicePermissionStructure(soap*, ns2__StopMonitoringServicePermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringServicePermissionStructure(soap*, ns2__StopMonitoringServicePermissionStructure*) serialize to a stream
/// - ns2__StopMonitoringServicePermissionStructure* ns2__StopMonitoringServicePermissionStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringServicePermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringServicePermissionStructure::soap_del() deep deletes ns2__StopMonitoringServicePermissionStructure data members, use only after ns2__StopMonitoringServicePermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringServicePermissionStructure : public ns2__AbstractPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractPermissionStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_StopMonitoringServicePermissionStructure;	///< Union _ns2__union_StopMonitoringServicePermissionStructure selector: set to SOAP_UNION__ns2__union_StopMonitoringServicePermissionStructure_<fieldname>
    union _ns2__union_StopMonitoringServicePermissionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Parmissions apply by default to All particpants. May be overidden by other separate permissions for individual.
/// </BLOCKQUOTE></PRE>
/// Element "AllParticipants" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllParticipants                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Permission applies to specified participant.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_StopMonitoringServicePermissionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Permissions for general capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities operations:
/// - _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities* soap_new__ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities(soap*) allocate and default initialize
/// - _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities* soap_new__ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities* soap_new_req__ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set required members
/// - _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities* soap_new_set__ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set all public members
/// - _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities(soap*, _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities*) deserialize from a stream
/// - int soap_write__ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities(soap*, _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities*) serialize to a stream
/// - _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities* _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities::soap_dup(soap*) returns deep copy of _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities::soap_del() deep deletes _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities data members, use only after _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopMonitoringServicePermissionStructure_GeneralCapabilities
    {
/// <PRE><BLOCKQUOTE>
///   Participant may make direct requests for data. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Participant may create subscriptions. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                   *GeneralCapabilities            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   The OPERATOR data that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OperatorPermissions.
    _ns2__OperatorPermissions*           OperatorPermissions            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The LINEs that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinePermissions.
    _ns2__LinePermissions*               LinePermissions                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The monitoring points that the participant may access.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions operations:
/// - _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions* soap_new__ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions(soap*) allocate and default initialize
/// - _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions* soap_new__ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions* soap_new_req__ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions(soap*, ...) allocate, set required members
/// - _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions* soap_new_set__ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions(soap*, ...) allocate, set all public members
/// - _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions(soap*, _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions*) deserialize from a stream
/// - int soap_write__ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions(soap*, _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions*) serialize to a stream
/// - _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions* _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions::soap_dup(soap*) returns deep copy of _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions::soap_del() deep deletes _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions data members, use only after _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopMonitoringServicePermissionStructure_StopMonitorPermissions
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_StopMonitoringServicePermissionStructure_StopMonitorPermissions;	///< Union _ns2__union_StopMonitoringServicePermissionStructure_StopMonitorPermissions selector: set to SOAP_UNION__ns2__union_StopMonitoringServicePermissionStructure_StopMonitorPermissions_<fieldname>
/// Union for choice in ns2__StopMonitorPermissions.
    union _ns2__union_StopMonitoringServicePermissionStructure_StopMonitorPermissions
    {
/// <PRE><BLOCKQUOTE>
///   Allow access to all topics known to the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowAll.
    bool                                 AllowAll                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Participant's permission for this Monitoring Point (LOGICAL DISPLAY)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitorPermissionStructure* of length 1..unbounded.
    std::vector<ns2__StopMonitorPermissionStructure*> *StopMonitorPermission          1;
    }                                    union_StopMonitoringServicePermissionStructure_StopMonitorPermissions;
//  END OF CHOICE
    }                                    StopMonitorPermissions         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Subscription Request for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringSubscriptionStructure operations:
/// - ns2__VehicleMonitoringSubscriptionStructure* soap_new_ns2__VehicleMonitoringSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringSubscriptionStructure* soap_new_ns2__VehicleMonitoringSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringSubscriptionStructure* soap_new_req_ns2__VehicleMonitoringSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringSubscriptionStructure* soap_new_set_ns2__VehicleMonitoringSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringSubscriptionStructure(soap*, ns2__VehicleMonitoringSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringSubscriptionStructure(soap*, ns2__VehicleMonitoringSubscriptionStructure*) serialize to a stream
/// - ns2__VehicleMonitoringSubscriptionStructure* ns2__VehicleMonitoringSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringSubscriptionStructure::soap_del() deep deletes ns2__VehicleMonitoringSubscriptionStructure data members, use only after ns2__VehicleMonitoringSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about Vehicle Movements.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMonitoringRequest.
    ns2__VehicleMonitoringRequestStructure*  VehicleMonitoringRequest       1;	///< Required element.
//  BEGIN GROUP <xs:group name="VehicleMonitoringSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription publishing and notification processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the producer will return the complete set of current data, or only provide updates to this data, i.e. additions, modifications and deletions.
///   If false or omitted, each subscription response will contain the full information as specified in this request.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = false;	///< Default element value="false".
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_VehicleMonitoringSubscriptionStructure;	///< Union _ns2__union_VehicleMonitoringSubscriptionStructure selector: set to SOAP_UNION__ns2__union_VehicleMonitoringSubscriptionStructure_<fieldname>
    union _ns2__union_VehicleMonitoringSubscriptionStructure
    {
/// <PRE><BLOCKQUOTE>
///   The amount of change to the VEHICLE expected arrival time at next stop that can happen before an update is sent (i.e. if ChangeBeforeUpdate is set to 2 minutes, the subscriber will not be told that a bus is 30 seconds delayed - an update will only be sent when the bus is at least 2 minutes delayed).
/// </BLOCKQUOTE></PRE>
/// Element "ChangeBeforeUpdates" of XSD type "http://www.siri.org.uk/siri":DurationType.
    ns2__DurationType*                   ChangeBeforeUpdates            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time interval in seconds in which new data is to be transmitted. If unspecified, default to system configuration.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           UpdateInterval                 0;	///< Optional element.
    }                                    union_VehicleMonitoringSubscriptionStructure;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringCapabilityRequestPolicyStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for capability request policy.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringCapabilityRequestPolicyStructure operations:
/// - ns2__VehicleMonitoringCapabilityRequestPolicyStructure* soap_new_ns2__VehicleMonitoringCapabilityRequestPolicyStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringCapabilityRequestPolicyStructure* soap_new_ns2__VehicleMonitoringCapabilityRequestPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringCapabilityRequestPolicyStructure* soap_new_req_ns2__VehicleMonitoringCapabilityRequestPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringCapabilityRequestPolicyStructure* soap_new_set_ns2__VehicleMonitoringCapabilityRequestPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringCapabilityRequestPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringCapabilityRequestPolicyStructure(soap*, ns2__VehicleMonitoringCapabilityRequestPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringCapabilityRequestPolicyStructure(soap*, ns2__VehicleMonitoringCapabilityRequestPolicyStructure*) serialize to a stream
/// - ns2__VehicleMonitoringCapabilityRequestPolicyStructure* ns2__VehicleMonitoringCapabilityRequestPolicyStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringCapabilityRequestPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringCapabilityRequestPolicyStructure::soap_del() deep deletes ns2__VehicleMonitoringCapabilityRequestPolicyStructure data members, use only after ns2__VehicleMonitoringCapabilityRequestPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringCapabilityRequestPolicyStructure : public ns2__CapabilityRequestPolicyStructure
{ public:
/*  INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_VehicleMonitoringCapabilityRequestPolicyStructure;	///< Union _ns2__union_VehicleMonitoringCapabilityRequestPolicyStructure selector: set to SOAP_UNION__ns2__union_VehicleMonitoringCapabilityRequestPolicyStructure_<fieldname>
    union _ns2__union_VehicleMonitoringCapabilityRequestPolicyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_VehicleMonitoringCapabilityRequestPolicyStructure;
//  END OF CHOICE
    END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure */
/// <PRE><BLOCKQUOTE>
///   Whether results should return references.
/// </BLOCKQUOTE></PRE>
/// Element "HasReferences" of XSD type xs:boolean.
    bool*                                HasReferences                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether results should return references.
/// </BLOCKQUOTE></PRE>
/// Element "HasNames" of XSD type xs:boolean.
    bool                                 HasNames                       0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Vehicle Monitoring Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringServiceCapabilitiesStructure operations:
/// - ns2__VehicleMonitoringServiceCapabilitiesStructure* soap_new_ns2__VehicleMonitoringServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringServiceCapabilitiesStructure* soap_new_ns2__VehicleMonitoringServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringServiceCapabilitiesStructure* soap_new_req_ns2__VehicleMonitoringServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringServiceCapabilitiesStructure* soap_new_set_ns2__VehicleMonitoringServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringServiceCapabilitiesStructure(soap*, ns2__VehicleMonitoringServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringServiceCapabilitiesStructure(soap*, ns2__VehicleMonitoringServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__VehicleMonitoringServiceCapabilitiesStructure* ns2__VehicleMonitoringServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringServiceCapabilitiesStructure::soap_del() deep deletes ns2__VehicleMonitoringServiceCapabilitiesStructure data members, use only after ns2__VehicleMonitoringServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Topic Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering* _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleMonitoringServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Default preview interval. Default is 60 minutes.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType            DefaultPreviewInterval         0;	///< Default element value="PT60M".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Vehicle Monitoring Fixed as 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByVehicleMonitoringRef" of XSD type xs:boolean.
    bool*                                FilterByVehicleMonitoringRef   nullptr 0;	///< Fixed element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VEHICLE. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByVehicleRef.
    bool                                 FilterByVehicleRef             0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByLineRef.
    bool                                 FilterByLineRef                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by DIRECTION Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByDirectionRef.
    bool                                 FilterByDirectionRef           0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy operations:
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*) allocate and default initialize
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new_req__ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set required members
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new_set__ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set all public members
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy*) deserialize from a stream
/// - int soap_write__ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy*) serialize to a stream
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy* _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_dup(soap*) returns deep copy of _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_del() deep deletes _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy data members, use only after _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy
    {
/// INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy;	///< Union _ns2__union_VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy selector: set to SOAP_UNION__ns2__union_VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy_<fieldname>
    union _ns2__union_VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_VehicleMonitoringServiceCapabilitiesStructure_RequestPolicy;
//  END OF CHOICE
//  END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure
//  BEGIN GROUP <xs:group name="VehicleMonitoringVolumeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for volume control.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether Detail level filtering is supported. Default is ' false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasDetailLevel" of XSD type xs:boolean.
    bool                                 HasDetailLevel                 0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Detail level. Default Normal.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultDetailLevel" of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringDetailEnumeration.
    enum ns2__VehicleMonitoringDetailEnumeration  DefaultDetailLevel             0 = ns2__VehicleMonitoringDetailEnumeration__normal;	///< Default element value="normal".
/// <PRE><BLOCKQUOTE>
///   Whether results can be limited to a maximum number. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasMaximumVehicles" of XSD type xs:boolean.
    bool                                 HasMaximumVehicles             0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If system can return detailed calling pattern, whether a number of calls to include can be specified. Default is 'false'. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "HasMaximumNumberOfCalls" of XSD type xs:boolean.
    bool                                 HasMaximumNumberOfCalls        0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   If system can return detailed calling pattern, whether a number of onwards calls to include can be specified. Default is 'false'. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "HasNumberOfOnwardsCalls" of XSD type xs:boolean.
    bool                                 HasNumberOfOnwardsCalls        0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   If system can return detailed calling pattern, whether a number of previous calls to include can be specified. Default is 'false'. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "HasNumberOfPreviousCalls" of XSD type xs:boolean.
    bool                                 HasNumberOfPreviousCalls       0 = false;	///< Default element value="false".
//  END OF GROUP
    }                                   *RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscription Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionPolicy" of XSD type "http://www.siri.org.uk/siri":CapabilitySubscriptionPolicyStructure.
    ns2__CapabilitySubscriptionPolicyStructure*  SubscriptionPolicy             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl operations:
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl* soap_new__ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl(soap*) allocate and default initialize
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl* soap_new__ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl* soap_new_req__ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl(soap*, ...) allocate, set required members
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl* soap_new_set__ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl(soap*, ...) allocate, set all public members
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl(soap*, _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl*) deserialize from a stream
/// - int soap_write__ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl(soap*, _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl*) serialize to a stream
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl* _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl::soap_dup(soap*) returns deep copy of _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl::soap_del() deep deletes _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl data members, use only after _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleMonitoringServiceCapabilitiesStructure_AccessControl
    {
/// INHERITED FROM ns2__CapabilityAccessControlStructure:
/// <PRE><BLOCKQUOTE>
///   Whether access control of requests is supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestChecking" of XSD type xs:boolean.
    bool                                 RequestChecking                0 = false;	///< Default element value="false".
//  END OF INHERITED FROM ns2__CapabilityAccessControlStructure
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by OPERATOR is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckOperatorRef.
    bool                                 CheckOperatorRef               0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by LINE is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckLineRef.
    bool                                 CheckLineRef                   0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by monitoring point is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "CheckVehicleMonitoringRef" of XSD type xs:boolean.
    bool                                 CheckVehicleMonitoringRef      0 = true;	///< Default element value="true".
    }                                   *AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Response capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures operations:
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new__ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*) allocate and default initialize
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new__ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new_req__ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, ...) allocate, set required members
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new_set__ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, ...) allocate, set all public members
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures*) deserialize from a stream
/// - int soap_write__ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures*) serialize to a stream
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures* _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_dup(soap*) returns deep copy of _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_del() deep deletes _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures data members, use only after _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleMonitoringServiceCapabilitiesStructure_ResponseFeatures
    {
/// <PRE><BLOCKQUOTE>
///   Whether result has location. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasLocation" of XSD type xs:boolean.
    bool                                 HasLocation                    0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether result supports SITUATION REFERENCESs. Default is 'false'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "HasSituations" of XSD type xs:boolean.
    bool                                 HasSituations                  0 = false;	///< Default element value="false".
    }                                   *ResponseFeatures               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringServicePermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Monitoring Service Permissions.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringServicePermissionStructure operations:
/// - ns2__VehicleMonitoringServicePermissionStructure* soap_new_ns2__VehicleMonitoringServicePermissionStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringServicePermissionStructure* soap_new_ns2__VehicleMonitoringServicePermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringServicePermissionStructure* soap_new_req_ns2__VehicleMonitoringServicePermissionStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringServicePermissionStructure* soap_new_set_ns2__VehicleMonitoringServicePermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringServicePermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringServicePermissionStructure(soap*, ns2__VehicleMonitoringServicePermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringServicePermissionStructure(soap*, ns2__VehicleMonitoringServicePermissionStructure*) serialize to a stream
/// - ns2__VehicleMonitoringServicePermissionStructure* ns2__VehicleMonitoringServicePermissionStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringServicePermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringServicePermissionStructure::soap_del() deep deletes ns2__VehicleMonitoringServicePermissionStructure data members, use only after ns2__VehicleMonitoringServicePermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringServicePermissionStructure : public ns2__AbstractPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractPermissionStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_VehicleMonitoringServicePermissionStructure;	///< Union _ns2__union_VehicleMonitoringServicePermissionStructure selector: set to SOAP_UNION__ns2__union_VehicleMonitoringServicePermissionStructure_<fieldname>
    union _ns2__union_VehicleMonitoringServicePermissionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Parmissions apply by default to All particpants. May be overidden by other separate permissions for individual.
/// </BLOCKQUOTE></PRE>
/// Element "AllParticipants" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllParticipants                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Permission applies to specified participant.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_VehicleMonitoringServicePermissionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Permissions for general capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities operations:
/// - _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities* soap_new__ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities(soap*) allocate and default initialize
/// - _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities* soap_new__ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities* soap_new_req__ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set required members
/// - _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities* soap_new_set__ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set all public members
/// - _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities(soap*, _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities*) deserialize from a stream
/// - int soap_write__ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities(soap*, _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities*) serialize to a stream
/// - _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities* _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities::soap_dup(soap*) returns deep copy of _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities::soap_del() deep deletes _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities data members, use only after _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleMonitoringServicePermissionStructure_GeneralCapabilities
    {
/// <PRE><BLOCKQUOTE>
///   Participant may make direct requests for data. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Participant may create subscriptions. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                   *GeneralCapabilities            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   The OPERATOR data that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OperatorPermissions.
    _ns2__OperatorPermissions*           OperatorPermissions            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The LINEs that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinePermissions.
    _ns2__LinePermissions*               LinePermissions                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Vehicle Monitors (DIUSPLAY ASSIGNMENTs) that the participant may access.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions operations:
/// - _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions* soap_new__ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions(soap*) allocate and default initialize
/// - _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions* soap_new__ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions* soap_new_req__ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions(soap*, ...) allocate, set required members
/// - _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions* soap_new_set__ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions(soap*, ...) allocate, set all public members
/// - _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions(soap*, _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions*) deserialize from a stream
/// - int soap_write__ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions(soap*, _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions*) serialize to a stream
/// - _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions* _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions::soap_dup(soap*) returns deep copy of _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions::soap_del() deep deletes _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions data members, use only after _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions;	///< Union _ns2__union_VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions selector: set to SOAP_UNION__ns2__union_VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions_<fieldname>
/// Union for choice in ns2__VehicleMonitoringPermissions.
    union _ns2__union_VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions
    {
/// <PRE><BLOCKQUOTE>
///   Allow access to all topics known to the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowAll.
    bool                                 AllowAll                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Participant's permission for this Vehicle Monitor (DISPLAY SSIGNMENT).
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitorPermissionStructure* of length 1..unbounded.
    std::vector<ns2__VehicleMonitorPermissionStructure*> *VehicleMonitorPermission       1;
    }                                    union_VehicleMonitoringServicePermissionStructure_VehicleMonitoringPermissions;
//  END OF CHOICE
    }                                    VehicleMonitoringPermissions   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitorPermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractTopicPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for MonitoringPoint Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitorPermissionStructure operations:
/// - ns2__VehicleMonitorPermissionStructure* soap_new_ns2__VehicleMonitorPermissionStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitorPermissionStructure* soap_new_ns2__VehicleMonitorPermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitorPermissionStructure* soap_new_req_ns2__VehicleMonitorPermissionStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitorPermissionStructure* soap_new_set_ns2__VehicleMonitorPermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitorPermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitorPermissionStructure(soap*, ns2__VehicleMonitorPermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitorPermissionStructure(soap*, ns2__VehicleMonitorPermissionStructure*) serialize to a stream
/// - ns2__VehicleMonitorPermissionStructure* ns2__VehicleMonitorPermissionStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitorPermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitorPermissionStructure::soap_del() deep deletes ns2__VehicleMonitorPermissionStructure data members, use only after ns2__VehicleMonitorPermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitorPermissionStructure : public ns2__AbstractTopicPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractTopicPermissionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether the participant may access this topic. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Allow" of XSD type xs:boolean.
    bool                                 Allow                          0 = true;	///< Default element value="true".
    END OF INHERITED FROM ns2__AbstractTopicPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   Vehicle Monitoring reference for which permission is made.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleMonitoringRef" of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringRefStructure.
    ns2__VehicleMonitoringRefStructure*  VehicleMonitoringRef           1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionTimetableSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Subscription Request for Connection Protection.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionTimetableSubscriptionStructure operations:
/// - ns2__ConnectionTimetableSubscriptionStructure* soap_new_ns2__ConnectionTimetableSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__ConnectionTimetableSubscriptionStructure* soap_new_ns2__ConnectionTimetableSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionTimetableSubscriptionStructure* soap_new_req_ns2__ConnectionTimetableSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionTimetableSubscriptionStructure* soap_new_set_ns2__ConnectionTimetableSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionTimetableSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionTimetableSubscriptionStructure(soap*, ns2__ConnectionTimetableSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionTimetableSubscriptionStructure(soap*, ns2__ConnectionTimetableSubscriptionStructure*) serialize to a stream
/// - ns2__ConnectionTimetableSubscriptionStructure* ns2__ConnectionTimetableSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionTimetableSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionTimetableSubscriptionStructure::soap_del() deep deletes ns2__ConnectionTimetableSubscriptionStructure data members, use only after ns2__ConnectionTimetableSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionTimetableSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about timetabled connections at a stop.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionTimetableRequest.
    ns2__ConnectionTimetableRequestStructure*  ConnectionTimetableRequest     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionTimetableCapabilityRequestPolicyStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for capability request.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionTimetableCapabilityRequestPolicyStructure operations:
/// - ns2__ConnectionTimetableCapabilityRequestPolicyStructure* soap_new_ns2__ConnectionTimetableCapabilityRequestPolicyStructure(soap*) allocate and default initialize
/// - ns2__ConnectionTimetableCapabilityRequestPolicyStructure* soap_new_ns2__ConnectionTimetableCapabilityRequestPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionTimetableCapabilityRequestPolicyStructure* soap_new_req_ns2__ConnectionTimetableCapabilityRequestPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionTimetableCapabilityRequestPolicyStructure* soap_new_set_ns2__ConnectionTimetableCapabilityRequestPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionTimetableCapabilityRequestPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionTimetableCapabilityRequestPolicyStructure(soap*, ns2__ConnectionTimetableCapabilityRequestPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionTimetableCapabilityRequestPolicyStructure(soap*, ns2__ConnectionTimetableCapabilityRequestPolicyStructure*) serialize to a stream
/// - ns2__ConnectionTimetableCapabilityRequestPolicyStructure* ns2__ConnectionTimetableCapabilityRequestPolicyStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionTimetableCapabilityRequestPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionTimetableCapabilityRequestPolicyStructure::soap_del() deep deletes ns2__ConnectionTimetableCapabilityRequestPolicyStructure data members, use only after ns2__ConnectionTimetableCapabilityRequestPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionTimetableCapabilityRequestPolicyStructure : public ns2__CapabilityRequestPolicyStructure
{ public:
/*  INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_ConnectionTimetableCapabilityRequestPolicyStructure;	///< Union _ns2__union_ConnectionTimetableCapabilityRequestPolicyStructure selector: set to SOAP_UNION__ns2__union_ConnectionTimetableCapabilityRequestPolicyStructure_<fieldname>
    union _ns2__union_ConnectionTimetableCapabilityRequestPolicyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_ConnectionTimetableCapabilityRequestPolicyStructure;
//  END OF CHOICE
    END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure */
/// <PRE><BLOCKQUOTE>
///   Whether results returns foreign journeys only.
/// </BLOCKQUOTE></PRE>
/// Element "ForeignJourneysOnly" of XSD type xs:boolean.
    bool*                                ForeignJourneysOnly            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionTimetableServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Connection Timetable Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionTimetableServiceCapabilitiesStructure operations:
/// - ns2__ConnectionTimetableServiceCapabilitiesStructure* soap_new_ns2__ConnectionTimetableServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__ConnectionTimetableServiceCapabilitiesStructure* soap_new_ns2__ConnectionTimetableServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionTimetableServiceCapabilitiesStructure* soap_new_req_ns2__ConnectionTimetableServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionTimetableServiceCapabilitiesStructure* soap_new_set_ns2__ConnectionTimetableServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionTimetableServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionTimetableServiceCapabilitiesStructure(soap*, ns2__ConnectionTimetableServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionTimetableServiceCapabilitiesStructure(soap*, ns2__ConnectionTimetableServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__ConnectionTimetableServiceCapabilitiesStructure* ns2__ConnectionTimetableServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionTimetableServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionTimetableServiceCapabilitiesStructure::soap_del() deep deletes ns2__ConnectionTimetableServiceCapabilitiesStructure data members, use only after ns2__ConnectionTimetableServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionTimetableServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering* _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ConnectionTimetableServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByLineRef.
    bool                                 FilterByLineRef                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Connection link. Default is ' true'.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by CONNECTION LINK. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByConnectionLinkRef.
    bool                                 FilterByConnectionLinkRef      0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy operations:
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*) allocate and default initialize
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new_req__ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set required members
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy* soap_new_set__ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set all public members
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy*) deserialize from a stream
/// - int soap_write__ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy*) serialize to a stream
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy* _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy::soap_dup(soap*) returns deep copy of _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy::soap_del() deep deletes _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy data members, use only after _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy
    {
/// INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy;	///< Union _ns2__union_ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy selector: set to SOAP_UNION__ns2__union_ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy_<fieldname>
    union _ns2__union_ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_ConnectionTimetableServiceCapabilitiesStructure_RequestPolicy;
//  END OF CHOICE
//  END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure
/// <PRE><BLOCKQUOTE>
///   Whether service returns only foreign journeys. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "ForeignJourneysOnly" of XSD type xs:boolean.
    bool                                 ForeignJourneysOnly            0 = false;	///< Default element value="false".
    }                                   *RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscription Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionPolicy" of XSD type "http://www.siri.org.uk/siri":CapabilitySubscriptionPolicyStructure.
    ns2__CapabilitySubscriptionPolicyStructure*  SubscriptionPolicy             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "AccessControl" of XSD type "http://www.siri.org.uk/siri":ConnectionCapabilityAccessControlStructure.
    ns2__ConnectionCapabilityAccessControlStructure*  AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringSubscriptionRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Subscription Request for Connection Monitoring.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionMonitoringSubscriptionRequestStructure operations:
/// - ns2__ConnectionMonitoringSubscriptionRequestStructure* soap_new_ns2__ConnectionMonitoringSubscriptionRequestStructure(soap*) allocate and default initialize
/// - ns2__ConnectionMonitoringSubscriptionRequestStructure* soap_new_ns2__ConnectionMonitoringSubscriptionRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionMonitoringSubscriptionRequestStructure* soap_new_req_ns2__ConnectionMonitoringSubscriptionRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionMonitoringSubscriptionRequestStructure* soap_new_set_ns2__ConnectionMonitoringSubscriptionRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionMonitoringSubscriptionRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionMonitoringSubscriptionRequestStructure(soap*, ns2__ConnectionMonitoringSubscriptionRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionMonitoringSubscriptionRequestStructure(soap*, ns2__ConnectionMonitoringSubscriptionRequestStructure*) serialize to a stream
/// - ns2__ConnectionMonitoringSubscriptionRequestStructure* ns2__ConnectionMonitoringSubscriptionRequestStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionMonitoringSubscriptionRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionMonitoringSubscriptionRequestStructure::soap_del() deep deletes ns2__ConnectionMonitoringSubscriptionRequestStructure data members, use only after ns2__ConnectionMonitoringSubscriptionRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionMonitoringSubscriptionRequestStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about changes to connections at a stop for Connection Monitoring service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionMonitoringRequest.
    ns2__ConnectionMonitoringRequestStructure*  ConnectionMonitoringRequest    1;	///< Required element.
//  BEGIN GROUP <xs:group name="ConnectionMonitoringSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   The amount of change to the arrival time that can happen before an update is sent (i.e. if ChangeBeforeUpdate is set to 2 minutes, the subscriber will not be told that a bus is 30 seconds delayed - an update will only be sent when the bus is at least 2 minutes delayed). Default is zero - all changes will be sent regardless.
/// </BLOCKQUOTE></PRE>
/// Element "ChangeBeforeUpdates" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ChangeBeforeUpdates            0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractDistributorItemStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for an SERVICE JOURNEY INTERCHANGE Activity.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractDistributorItemStructure operations:
/// - ns2__AbstractDistributorItemStructure* soap_new_ns2__AbstractDistributorItemStructure(soap*) allocate and default initialize
/// - ns2__AbstractDistributorItemStructure* soap_new_ns2__AbstractDistributorItemStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractDistributorItemStructure* soap_new_req_ns2__AbstractDistributorItemStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractDistributorItemStructure* soap_new_set_ns2__AbstractDistributorItemStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractDistributorItemStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractDistributorItemStructure(soap*, ns2__AbstractDistributorItemStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractDistributorItemStructure(soap*, ns2__AbstractDistributorItemStructure*) serialize to a stream
/// - ns2__AbstractDistributorItemStructure* ns2__AbstractDistributorItemStructure::soap_dup(soap*) returns deep copy of ns2__AbstractDistributorItemStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractDistributorItemStructure::soap_del() deep deletes ns2__AbstractDistributorItemStructure data members, use only after ns2__AbstractDistributorItemStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractDistributorItemStructure : public ns2__AbstractItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
//  BEGIN GROUP <xs:group name="InterchangeDistributorIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Identifiers of Interchange Distributor Stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned and at which SERVICE JOURNEY INTERCHANGE takes place. A reference associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT within CONNECTION link from which distributor leaves.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "StopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Order of visit to a stop within JOURNEY PATTERN of distributor VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                DistributorVisitNumber         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then Order can be used to associate the Order as well if useful for translation.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorOrder" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                DistributorOrder               0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Information about the connecting Distributor (fetcher) VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorJourney" of XSD type "http://www.siri.org.uk/siri":InterchangeJourneyStructure.
    ns2__InterchangeJourneyStructure*    DistributorJourney             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY or journeys for which the Distributor (fetcher) will wait .
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FramedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__FramedVehicleJourneyRefStructure*> FeederVehicleJourneyRef        0;
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringCapabilityRequestPolicyStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Connection Monitoring Capability Request Policy.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionMonitoringCapabilityRequestPolicyStructure operations:
/// - ns2__ConnectionMonitoringCapabilityRequestPolicyStructure* soap_new_ns2__ConnectionMonitoringCapabilityRequestPolicyStructure(soap*) allocate and default initialize
/// - ns2__ConnectionMonitoringCapabilityRequestPolicyStructure* soap_new_ns2__ConnectionMonitoringCapabilityRequestPolicyStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionMonitoringCapabilityRequestPolicyStructure* soap_new_req_ns2__ConnectionMonitoringCapabilityRequestPolicyStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionMonitoringCapabilityRequestPolicyStructure* soap_new_set_ns2__ConnectionMonitoringCapabilityRequestPolicyStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionMonitoringCapabilityRequestPolicyStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionMonitoringCapabilityRequestPolicyStructure(soap*, ns2__ConnectionMonitoringCapabilityRequestPolicyStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionMonitoringCapabilityRequestPolicyStructure(soap*, ns2__ConnectionMonitoringCapabilityRequestPolicyStructure*) serialize to a stream
/// - ns2__ConnectionMonitoringCapabilityRequestPolicyStructure* ns2__ConnectionMonitoringCapabilityRequestPolicyStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionMonitoringCapabilityRequestPolicyStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionMonitoringCapabilityRequestPolicyStructure::soap_del() deep deletes ns2__ConnectionMonitoringCapabilityRequestPolicyStructure data members, use only after ns2__ConnectionMonitoringCapabilityRequestPolicyStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionMonitoringCapabilityRequestPolicyStructure : public ns2__CapabilityRequestPolicyStructure
{ public:
/*  INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_ConnectionMonitoringCapabilityRequestPolicyStructure;	///< Union _ns2__union_ConnectionMonitoringCapabilityRequestPolicyStructure selector: set to SOAP_UNION__ns2__union_ConnectionMonitoringCapabilityRequestPolicyStructure_<fieldname>
    union _ns2__union_ConnectionMonitoringCapabilityRequestPolicyStructure
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_ConnectionMonitoringCapabilityRequestPolicyStructure;
//  END OF CHOICE
    END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure */
/// <PRE><BLOCKQUOTE>
///   Whether results returns foreign journeys only.
/// </BLOCKQUOTE></PRE>
/// Element "ForeignJourneysOnly" of XSD type xs:boolean.
    bool*                                ForeignJourneysOnly            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Connection Monitoring Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionMonitoringServiceCapabilitiesStructure operations:
/// - ns2__ConnectionMonitoringServiceCapabilitiesStructure* soap_new_ns2__ConnectionMonitoringServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__ConnectionMonitoringServiceCapabilitiesStructure* soap_new_ns2__ConnectionMonitoringServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionMonitoringServiceCapabilitiesStructure* soap_new_req_ns2__ConnectionMonitoringServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionMonitoringServiceCapabilitiesStructure* soap_new_set_ns2__ConnectionMonitoringServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionMonitoringServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionMonitoringServiceCapabilitiesStructure(soap*, ns2__ConnectionMonitoringServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionMonitoringServiceCapabilitiesStructure(soap*, ns2__ConnectionMonitoringServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__ConnectionMonitoringServiceCapabilitiesStructure* ns2__ConnectionMonitoringServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionMonitoringServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionMonitoringServiceCapabilitiesStructure::soap_del() deep deletes ns2__ConnectionMonitoringServiceCapabilitiesStructure data members, use only after ns2__ConnectionMonitoringServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionMonitoringServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering* _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ConnectionMonitoringServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Default preview horizon used.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           DefaultPreviewInterval         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by CONNECTION LINK. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByConnectionLinkRef.
    bool                                 FilterByConnectionLinkRef      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by journey.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByJourney" of XSD type xs:boolean.
    bool*                                FilterByJourney                0;	///< Fixed element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by time Filter of Connection. Default is ' true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByTime" of XSD type xs:boolean.
    bool                                 FilterByTime                   0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy operations:
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*) allocate and default initialize
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new_req__ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set required members
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new_set__ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set all public members
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy*) deserialize from a stream
/// - int soap_write__ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy*) serialize to a stream
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy* _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_dup(soap*) returns deep copy of _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_del() deep deletes _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy data members, use only after _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy
    {
/// INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy;	///< Union _ns2__union_ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy selector: set to SOAP_UNION__ns2__union_ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy_<fieldname>
    union _ns2__union_ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_ConnectionMonitoringServiceCapabilitiesStructure_RequestPolicy;
//  END OF CHOICE
//  END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure
/// <PRE><BLOCKQUOTE>
///   Whether only foreign journeys are included.
/// </BLOCKQUOTE></PRE>
/// Element "ForeignJourneysOnly" of XSD type xs:boolean.
    bool                                 ForeignJourneysOnly            0 = false;	///< Default element value="false".
    }                                   *RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscription Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionPolicy" of XSD type "http://www.siri.org.uk/siri":CapabilitySubscriptionPolicyStructure.
    ns2__CapabilitySubscriptionPolicyStructure*  SubscriptionPolicy             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "AccessControl" of XSD type "http://www.siri.org.uk/siri":ConnectionCapabilityAccessControlStructure.
    ns2__ConnectionCapabilityAccessControlStructure*  AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":GeneralMessageSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Subscription for General Message Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__GeneralMessageSubscriptionStructure operations:
/// - ns2__GeneralMessageSubscriptionStructure* soap_new_ns2__GeneralMessageSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__GeneralMessageSubscriptionStructure* soap_new_ns2__GeneralMessageSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GeneralMessageSubscriptionStructure* soap_new_req_ns2__GeneralMessageSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__GeneralMessageSubscriptionStructure* soap_new_set_ns2__GeneralMessageSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__GeneralMessageSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GeneralMessageSubscriptionStructure(soap*, ns2__GeneralMessageSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__GeneralMessageSubscriptionStructure(soap*, ns2__GeneralMessageSubscriptionStructure*) serialize to a stream
/// - ns2__GeneralMessageSubscriptionStructure* ns2__GeneralMessageSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__GeneralMessageSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GeneralMessageSubscriptionStructure::soap_del() deep deletes ns2__GeneralMessageSubscriptionStructure data members, use only after ns2__GeneralMessageSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GeneralMessageSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about general information messages affecting stops, vehicles or services.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":GeneralMessageRequest.
    ns2__GeneralMessageRequestStructure*  GeneralMessageRequest          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":GeneralMessageServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for General Message Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__GeneralMessageServiceCapabilitiesStructure operations:
/// - ns2__GeneralMessageServiceCapabilitiesStructure* soap_new_ns2__GeneralMessageServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__GeneralMessageServiceCapabilitiesStructure* soap_new_ns2__GeneralMessageServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GeneralMessageServiceCapabilitiesStructure* soap_new_req_ns2__GeneralMessageServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__GeneralMessageServiceCapabilitiesStructure* soap_new_set_ns2__GeneralMessageServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__GeneralMessageServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GeneralMessageServiceCapabilitiesStructure(soap*, ns2__GeneralMessageServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__GeneralMessageServiceCapabilitiesStructure(soap*, ns2__GeneralMessageServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__GeneralMessageServiceCapabilitiesStructure* ns2__GeneralMessageServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__GeneralMessageServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GeneralMessageServiceCapabilitiesStructure::soap_del() deep deletes ns2__GeneralMessageServiceCapabilitiesStructure data members, use only after ns2__GeneralMessageServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GeneralMessageServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering* _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__GeneralMessageServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Default preview interval. Default is 60 minutes.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType            DefaultPreviewInterval         0;	///< Default element value="PT60M".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by InfoChannel, departures. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByInfoChannel" of XSD type xs:boolean.
    bool                                 FilterByInfoChannel            0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request Policiy capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "RequestPolicy" of XSD type "http://www.siri.org.uk/siri":CapabilityRequestPolicyStructure.
    ns2__CapabilityRequestPolicyStructure*  RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "AccessControl" of XSD type "http://www.siri.org.uk/siri":GeneralMessageCapabilityAccessControlStructure.
    ns2__GeneralMessageCapabilityAccessControlStructure*  AccessControl                  0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":GeneralMessageServicePermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for General MessageService Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__GeneralMessageServicePermissionStructure operations:
/// - ns2__GeneralMessageServicePermissionStructure* soap_new_ns2__GeneralMessageServicePermissionStructure(soap*) allocate and default initialize
/// - ns2__GeneralMessageServicePermissionStructure* soap_new_ns2__GeneralMessageServicePermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GeneralMessageServicePermissionStructure* soap_new_req_ns2__GeneralMessageServicePermissionStructure(soap*, ...) allocate, set required members
/// - ns2__GeneralMessageServicePermissionStructure* soap_new_set_ns2__GeneralMessageServicePermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__GeneralMessageServicePermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GeneralMessageServicePermissionStructure(soap*, ns2__GeneralMessageServicePermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__GeneralMessageServicePermissionStructure(soap*, ns2__GeneralMessageServicePermissionStructure*) serialize to a stream
/// - ns2__GeneralMessageServicePermissionStructure* ns2__GeneralMessageServicePermissionStructure::soap_dup(soap*) returns deep copy of ns2__GeneralMessageServicePermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GeneralMessageServicePermissionStructure::soap_del() deep deletes ns2__GeneralMessageServicePermissionStructure data members, use only after ns2__GeneralMessageServicePermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GeneralMessageServicePermissionStructure : public ns2__AbstractPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractPermissionStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_GeneralMessageServicePermissionStructure;	///< Union _ns2__union_GeneralMessageServicePermissionStructure selector: set to SOAP_UNION__ns2__union_GeneralMessageServicePermissionStructure_<fieldname>
    union _ns2__union_GeneralMessageServicePermissionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Parmissions apply by default to All particpants. May be overidden by other separate permissions for individual.
/// </BLOCKQUOTE></PRE>
/// Element "AllParticipants" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllParticipants                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Permission applies to specified participant.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_GeneralMessageServicePermissionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Permissions for general capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities operations:
/// - _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities* soap_new__ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities(soap*) allocate and default initialize
/// - _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities* soap_new__ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities* soap_new_req__ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set required members
/// - _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities* soap_new_set__ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set all public members
/// - _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities(soap*, _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities*) deserialize from a stream
/// - int soap_write__ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities(soap*, _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities*) serialize to a stream
/// - _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities* _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities::soap_dup(soap*) returns deep copy of _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities::soap_del() deep deletes _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities data members, use only after _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__GeneralMessageServicePermissionStructure_GeneralCapabilities
    {
/// <PRE><BLOCKQUOTE>
///   Participant may make direct requests for data. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Participant may create subscriptions. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                   *GeneralCapabilities            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   The monitoring points that the participant may access.
/// </BLOCKQUOTE></PRE>
/// class _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions operations:
/// - _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions* soap_new__ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions(soap*) allocate and default initialize
/// - _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions* soap_new__ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions* soap_new_req__ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions(soap*, ...) allocate, set required members
/// - _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions* soap_new_set__ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions(soap*, ...) allocate, set all public members
/// - _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions(soap*, _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions*) deserialize from a stream
/// - int soap_write__ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions(soap*, _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions*) serialize to a stream
/// - _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions* _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions::soap_dup(soap*) returns deep copy of _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions::soap_del() deep deletes _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions data members, use only after _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__GeneralMessageServicePermissionStructure_InfoChannelPermissions
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_GeneralMessageServicePermissionStructure_InfoChannelPermissions;	///< Union _ns2__union_GeneralMessageServicePermissionStructure_InfoChannelPermissions selector: set to SOAP_UNION__ns2__union_GeneralMessageServicePermissionStructure_InfoChannelPermissions_<fieldname>
/// Union for choice in ns2__InfoChannelPermissions.
    union _ns2__union_GeneralMessageServicePermissionStructure_InfoChannelPermissions
    {
/// <PRE><BLOCKQUOTE>
///   Allow access to all topics known to the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AllowAll.
    bool                                 AllowAll                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Participant's permission for this InfoChannel.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__InfoChannelPermissionStructure* of length 1..unbounded.
    std::vector<ns2__InfoChannelPermissionStructure*> *InfoChannelPermission          1;
    }                                    union_GeneralMessageServicePermissionStructure_InfoChannelPermissions;
//  END OF CHOICE
    }                                    InfoChannelPermissions         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":GeneralMessageCapabilityAccessControlStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":CapabilityAccessControlStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for access control.
/// </BLOCKQUOTE></PRE>
/// class ns2__GeneralMessageCapabilityAccessControlStructure operations:
/// - ns2__GeneralMessageCapabilityAccessControlStructure* soap_new_ns2__GeneralMessageCapabilityAccessControlStructure(soap*) allocate and default initialize
/// - ns2__GeneralMessageCapabilityAccessControlStructure* soap_new_ns2__GeneralMessageCapabilityAccessControlStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GeneralMessageCapabilityAccessControlStructure* soap_new_req_ns2__GeneralMessageCapabilityAccessControlStructure(soap*, ...) allocate, set required members
/// - ns2__GeneralMessageCapabilityAccessControlStructure* soap_new_set_ns2__GeneralMessageCapabilityAccessControlStructure(soap*, ...) allocate, set all public members
/// - ns2__GeneralMessageCapabilityAccessControlStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GeneralMessageCapabilityAccessControlStructure(soap*, ns2__GeneralMessageCapabilityAccessControlStructure*) deserialize from a stream
/// - int soap_write_ns2__GeneralMessageCapabilityAccessControlStructure(soap*, ns2__GeneralMessageCapabilityAccessControlStructure*) serialize to a stream
/// - ns2__GeneralMessageCapabilityAccessControlStructure* ns2__GeneralMessageCapabilityAccessControlStructure::soap_dup(soap*) returns deep copy of ns2__GeneralMessageCapabilityAccessControlStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GeneralMessageCapabilityAccessControlStructure::soap_del() deep deletes ns2__GeneralMessageCapabilityAccessControlStructure data members, use only after ns2__GeneralMessageCapabilityAccessControlStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GeneralMessageCapabilityAccessControlStructure : public ns2__CapabilityAccessControlStructure
{ public:
/*  INHERITED FROM ns2__CapabilityAccessControlStructure:
/// <PRE><BLOCKQUOTE>
///   Whether access control of requests is supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestChecking" of XSD type xs:boolean.
    bool                                 RequestChecking                0 = false;	///< Default element value="false".
    END OF INHERITED FROM ns2__CapabilityAccessControlStructure */
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by LINE is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "CheckInfoChannelRef" of XSD type xs:boolean.
    bool                                 CheckInfoChannelRef            0 = true;	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":InfoChannelPermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractTopicPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Info Channel Permission.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoChannelPermissionStructure operations:
/// - ns2__InfoChannelPermissionStructure* soap_new_ns2__InfoChannelPermissionStructure(soap*) allocate and default initialize
/// - ns2__InfoChannelPermissionStructure* soap_new_ns2__InfoChannelPermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoChannelPermissionStructure* soap_new_req_ns2__InfoChannelPermissionStructure(soap*, ...) allocate, set required members
/// - ns2__InfoChannelPermissionStructure* soap_new_set_ns2__InfoChannelPermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoChannelPermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoChannelPermissionStructure(soap*, ns2__InfoChannelPermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoChannelPermissionStructure(soap*, ns2__InfoChannelPermissionStructure*) serialize to a stream
/// - ns2__InfoChannelPermissionStructure* ns2__InfoChannelPermissionStructure::soap_dup(soap*) returns deep copy of ns2__InfoChannelPermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoChannelPermissionStructure::soap_del() deep deletes ns2__InfoChannelPermissionStructure data members, use only after ns2__InfoChannelPermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoChannelPermissionStructure : public ns2__AbstractTopicPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractTopicPermissionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether the participant may access this topic. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Allow" of XSD type xs:boolean.
    bool                                 Allow                          0 = true;	///< Default element value="true".
    END OF INHERITED FROM ns2__AbstractTopicPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to an Info Channel to which permission applies.
/// </BLOCKQUOTE></PRE>
/// Element "InfoChannelRef" of XSD type "http://www.siri.org.uk/siri":InfoChannelRefStructure.
    ns2__InfoChannelRefStructure*        InfoChannelRef                 1;	///< Required element.
};

/// @brief "http://www.siri.org.uk/siri":FacilityMonitoringSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Subscription Request for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityMonitoringSubscriptionStructure operations:
/// - ns2__FacilityMonitoringSubscriptionStructure* soap_new_ns2__FacilityMonitoringSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__FacilityMonitoringSubscriptionStructure* soap_new_ns2__FacilityMonitoringSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityMonitoringSubscriptionStructure* soap_new_req_ns2__FacilityMonitoringSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityMonitoringSubscriptionStructure* soap_new_set_ns2__FacilityMonitoringSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityMonitoringSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityMonitoringSubscriptionStructure(soap*, ns2__FacilityMonitoringSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityMonitoringSubscriptionStructure(soap*, ns2__FacilityMonitoringSubscriptionStructure*) serialize to a stream
/// - ns2__FacilityMonitoringSubscriptionStructure* ns2__FacilityMonitoringSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__FacilityMonitoringSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityMonitoringSubscriptionStructure::soap_del() deep deletes ns2__FacilityMonitoringSubscriptionStructure data members, use only after ns2__FacilityMonitoringSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityMonitoringSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about Facilities status.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityMonitoringRequest.
    ns2__FacilityMonitoringRequestStructure*  FacilityMonitoringRequest      1;	///< Required element.
//  BEGIN GROUP <xs:group name="FacilityMonitoringSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription publishing and notification processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the producer will return the complete set of current data, or only provide updates to this data, i.e. additions, modifications and deletions.
///   If false or omitted, each subscription response will contain the full information as specified in this request.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = false;	///< Default element value="false".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":FacilityMonitoringServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Vehicle Monitoring Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityMonitoringServiceCapabilitiesStructure operations:
/// - ns2__FacilityMonitoringServiceCapabilitiesStructure* soap_new_ns2__FacilityMonitoringServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__FacilityMonitoringServiceCapabilitiesStructure* soap_new_ns2__FacilityMonitoringServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityMonitoringServiceCapabilitiesStructure* soap_new_req_ns2__FacilityMonitoringServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityMonitoringServiceCapabilitiesStructure* soap_new_set_ns2__FacilityMonitoringServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityMonitoringServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityMonitoringServiceCapabilitiesStructure(soap*, ns2__FacilityMonitoringServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityMonitoringServiceCapabilitiesStructure(soap*, ns2__FacilityMonitoringServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__FacilityMonitoringServiceCapabilitiesStructure* ns2__FacilityMonitoringServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__FacilityMonitoringServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityMonitoringServiceCapabilitiesStructure::soap_del() deep deletes ns2__FacilityMonitoringServiceCapabilitiesStructure data members, use only after ns2__FacilityMonitoringServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityMonitoringServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering* _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__FacilityMonitoringServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Default preview interval. Default is 60 minutes.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType            DefaultPreviewInterval         0;	///< Default element value="PT60M".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Facility (EQUIPMENT). Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByFacilityRef.
    bool                                 FilterByFacilityRef            0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by location. Fixed as 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByLocationRef" of XSD type xs:boolean.
    bool*                                FilterByLocationRef            nullptr 0;	///< Fixed element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VEHICLE. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByVehicleRef.
    bool                                 FilterByVehicleRef             0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByLineRef.
    bool                                 FilterByLineRef                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by SCHEDULED STOP POINT. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByStopPointRef.
    bool                                 FilterByStopPointRef           0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VEHICLE JOURNEY. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByVehicleJourneyRef.
    bool                                 FilterByVehicleJourneyRef      0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by CONNECTION LINK. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByConnectionLinkRef.
    bool                                 FilterByConnectionLinkRef      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by SERVICE JOURNEY INTERCHANGE. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByInterchangeRef.
    bool                                 FilterByInterchangeRef         0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Specific Needs. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterBySpecificNeed" of XSD type xs:boolean.
    bool                                 FilterBySpecificNeed           0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy operations:
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*) allocate and default initialize
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new_req__ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set required members
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy* soap_new_set__ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set all public members
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy*) deserialize from a stream
/// - int soap_write__ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy*) serialize to a stream
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy* _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_dup(soap*) returns deep copy of _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_del() deep deletes _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy data members, use only after _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy
    {
/// INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy;	///< Union _ns2__union_FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy selector: set to SOAP_UNION__ns2__union_FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy_<fieldname>
    union _ns2__union_FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_FacilityMonitoringServiceCapabilitiesStructure_RequestPolicy;
//  END OF CHOICE
//  END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure
//  BEGIN GROUP <xs:group name="FacilityMonitoringVolumeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for volume control.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a maximum number of Facility Status to include can be specified. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasMaximumFacilityStatus" of XSD type xs:boolean.
    bool                                 HasMaximumFacilityStatus       0 = false;	///< Default element value="false".
//  END OF GROUP
    }                                   *RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscription Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionPolicy" of XSD type "http://www.siri.org.uk/siri":CapabilitySubscriptionPolicyStructure.
    ns2__CapabilitySubscriptionPolicyStructure*  SubscriptionPolicy             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl operations:
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl* soap_new__ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl(soap*) allocate and default initialize
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl* soap_new__ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl* soap_new_req__ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl(soap*, ...) allocate, set required members
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl* soap_new_set__ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl(soap*, ...) allocate, set all public members
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl(soap*, _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl*) deserialize from a stream
/// - int soap_write__ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl(soap*, _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl*) serialize to a stream
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl* _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl::soap_dup(soap*) returns deep copy of _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl::soap_del() deep deletes _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl data members, use only after _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__FacilityMonitoringServiceCapabilitiesStructure_AccessControl
    {
/// INHERITED FROM ns2__CapabilityAccessControlStructure:
/// <PRE><BLOCKQUOTE>
///   Whether access control of requests is supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestChecking" of XSD type xs:boolean.
    bool                                 RequestChecking                0 = false;	///< Default element value="false".
//  END OF INHERITED FROM ns2__CapabilityAccessControlStructure
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by OPERATOR is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckOperatorRef.
    bool                                 CheckOperatorRef               0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by LINE is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckLineRef.
    bool                                 CheckLineRef                   0 = true;	///< Default element value="true".
    }                                   *AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Response capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures operations:
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new__ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*) allocate and default initialize
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new__ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new_req__ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, ...) allocate, set required members
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures* soap_new_set__ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, ...) allocate, set all public members
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures*) deserialize from a stream
/// - int soap_write__ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures(soap*, _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures*) serialize to a stream
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures* _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_dup(soap*) returns deep copy of _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_del() deep deletes _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures data members, use only after _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__FacilityMonitoringServiceCapabilitiesStructure_ResponseFeatures
    {
/// <PRE><BLOCKQUOTE>
///   Whether result supports remedy information. Default is 'false'
/// </BLOCKQUOTE></PRE>
/// Element "HasRemedy" of XSD type xs:boolean.
    bool                                 HasRemedy                      0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether result supports facility location information. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasFacilityLocation" of XSD type xs:boolean.
    bool                                 HasFacilityLocation            0 = true;	///< Default element value="true".
    }                                   *ResponseFeatures               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":FacilityMonitoringServicePermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Facility Monitoring Service Permissions.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityMonitoringServicePermissionStructure operations:
/// - ns2__FacilityMonitoringServicePermissionStructure* soap_new_ns2__FacilityMonitoringServicePermissionStructure(soap*) allocate and default initialize
/// - ns2__FacilityMonitoringServicePermissionStructure* soap_new_ns2__FacilityMonitoringServicePermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityMonitoringServicePermissionStructure* soap_new_req_ns2__FacilityMonitoringServicePermissionStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityMonitoringServicePermissionStructure* soap_new_set_ns2__FacilityMonitoringServicePermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityMonitoringServicePermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityMonitoringServicePermissionStructure(soap*, ns2__FacilityMonitoringServicePermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityMonitoringServicePermissionStructure(soap*, ns2__FacilityMonitoringServicePermissionStructure*) serialize to a stream
/// - ns2__FacilityMonitoringServicePermissionStructure* ns2__FacilityMonitoringServicePermissionStructure::soap_dup(soap*) returns deep copy of ns2__FacilityMonitoringServicePermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityMonitoringServicePermissionStructure::soap_del() deep deletes ns2__FacilityMonitoringServicePermissionStructure data members, use only after ns2__FacilityMonitoringServicePermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityMonitoringServicePermissionStructure : public ns2__AbstractPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractPermissionStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_FacilityMonitoringServicePermissionStructure;	///< Union _ns2__union_FacilityMonitoringServicePermissionStructure selector: set to SOAP_UNION__ns2__union_FacilityMonitoringServicePermissionStructure_<fieldname>
    union _ns2__union_FacilityMonitoringServicePermissionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Parmissions apply by default to All particpants. May be overidden by other separate permissions for individual.
/// </BLOCKQUOTE></PRE>
/// Element "AllParticipants" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllParticipants                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Permission applies to specified participant.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_FacilityMonitoringServicePermissionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Permissions for general capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities operations:
/// - _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities* soap_new__ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities(soap*) allocate and default initialize
/// - _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities* soap_new__ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities* soap_new_req__ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set required members
/// - _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities* soap_new_set__ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set all public members
/// - _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities(soap*, _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities*) deserialize from a stream
/// - int soap_write__ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities(soap*, _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities*) serialize to a stream
/// - _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities* _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities::soap_dup(soap*) returns deep copy of _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities::soap_del() deep deletes _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities data members, use only after _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__FacilityMonitoringServicePermissionStructure_GeneralCapabilities
    {
/// <PRE><BLOCKQUOTE>
///   Participant may make direct requests for data. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Participant may create subscriptions. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                   *GeneralCapabilities            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   The OPERATOR data that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OperatorPermissions.
    _ns2__OperatorPermissions*           OperatorPermissions            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The LINEs that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinePermissions.
    _ns2__LinePermissions*               LinePermissions                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SituationExchangeSubscriptionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Subscription Request for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationExchangeSubscriptionStructure operations:
/// - ns2__SituationExchangeSubscriptionStructure* soap_new_ns2__SituationExchangeSubscriptionStructure(soap*) allocate and default initialize
/// - ns2__SituationExchangeSubscriptionStructure* soap_new_ns2__SituationExchangeSubscriptionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationExchangeSubscriptionStructure* soap_new_req_ns2__SituationExchangeSubscriptionStructure(soap*, ...) allocate, set required members
/// - ns2__SituationExchangeSubscriptionStructure* soap_new_set_ns2__SituationExchangeSubscriptionStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationExchangeSubscriptionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationExchangeSubscriptionStructure(soap*, ns2__SituationExchangeSubscriptionStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationExchangeSubscriptionStructure(soap*, ns2__SituationExchangeSubscriptionStructure*) serialize to a stream
/// - ns2__SituationExchangeSubscriptionStructure* ns2__SituationExchangeSubscriptionStructure::soap_dup(soap*) returns deep copy of ns2__SituationExchangeSubscriptionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationExchangeSubscriptionStructure::soap_del() deep deletes ns2__SituationExchangeSubscriptionStructure data members, use only after ns2__SituationExchangeSubscriptionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationExchangeSubscriptionStructure : public ns2__AbstractSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/// <PRE><BLOCKQUOTE>
///   Request for information about Facilities status.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationExchangeRequest.
    ns2__SituationExchangeRequestStructure*  SituationExchangeRequest       1;	///< Required element.
//  BEGIN GROUP <xs:group name="SituationExchangeSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription publishing and notification processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the producer will return the complete set of current data, or only provide updates to this data, i.e. additions, modifications and deletions.
///   If false or omitted, each subscription response will contain the full information as specified in this request.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = false;	///< Default element value="false".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SituationExchangeServiceCapabilitiesStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractCapabilitiesStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for SItuation Exchange Service Capabilities.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationExchangeServiceCapabilitiesStructure operations:
/// - ns2__SituationExchangeServiceCapabilitiesStructure* soap_new_ns2__SituationExchangeServiceCapabilitiesStructure(soap*) allocate and default initialize
/// - ns2__SituationExchangeServiceCapabilitiesStructure* soap_new_ns2__SituationExchangeServiceCapabilitiesStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationExchangeServiceCapabilitiesStructure* soap_new_req_ns2__SituationExchangeServiceCapabilitiesStructure(soap*, ...) allocate, set required members
/// - ns2__SituationExchangeServiceCapabilitiesStructure* soap_new_set_ns2__SituationExchangeServiceCapabilitiesStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationExchangeServiceCapabilitiesStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationExchangeServiceCapabilitiesStructure(soap*, ns2__SituationExchangeServiceCapabilitiesStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationExchangeServiceCapabilitiesStructure(soap*, ns2__SituationExchangeServiceCapabilitiesStructure*) serialize to a stream
/// - ns2__SituationExchangeServiceCapabilitiesStructure* ns2__SituationExchangeServiceCapabilitiesStructure::soap_dup(soap*) returns deep copy of ns2__SituationExchangeServiceCapabilitiesStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationExchangeServiceCapabilitiesStructure::soap_del() deep deletes ns2__SituationExchangeServiceCapabilitiesStructure data members, use only after ns2__SituationExchangeServiceCapabilitiesStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationExchangeServiceCapabilitiesStructure : public ns2__AbstractCapabilitiesStructure
{ public:
/*  INHERITED FROM ns2__AbstractCapabilitiesStructure:
/// <PRE><BLOCKQUOTE>
///   General capabilities common to all SIRI service request types.
/// </BLOCKQUOTE></PRE>
/// Element "GeneralInteraction" of XSD type "http://www.siri.org.uk/siri":CapabilityGeneralInteractionStructure.
    ns2__CapabilityGeneralInteractionStructure*  GeneralInteraction             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Implementation properties common to all request types.
/// </BLOCKQUOTE></PRE>
/// Element "TransportDescription" of XSD type "http://www.siri.org.uk/siri":TransportDescriptionStructure.
    ns2__TransportDescriptionStructure*  TransportDescription           0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractCapabilitiesStructure */
/// <PRE><BLOCKQUOTE>
///   Filtering Capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering operations:
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering(soap*) allocate and default initialize
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering* soap_new__ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering(soap*, int num) allocate array and default initialize values
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering* soap_new_req__ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set required members
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering* soap_new_set__ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering(soap*, ...) allocate, set all public members
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering*) deserialize from a stream
/// - int soap_write__ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering(soap*, _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering*) serialize to a stream
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering* _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering::soap_dup(soap*) returns deep copy of _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering::soap_del() deep deletes _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering data members, use only after _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__SituationExchangeServiceCapabilitiesStructure_TopicFiltering
    {
/// <PRE><BLOCKQUOTE>
///   Default preview interval. Default is 60 minutes.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType            DefaultPreviewInterval         0;	///< Default element value="PT60M".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Facility (EQUIPMENT). Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByFacilityRef.
    bool                                 FilterByFacilityRef            0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by location. Fixed as 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterByLocationRef" of XSD type xs:boolean.
    bool*                                FilterByLocationRef            nullptr 0;	///< Fixed element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VEHICLE. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByVehicleRef.
    bool                                 FilterByVehicleRef             0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByLineRef.
    bool                                 FilterByLineRef                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by SCHEDULED STOP POINT. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByStopPointRef.
    bool                                 FilterByStopPointRef           0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VEHICLE JOURNEY. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByVehicleJourneyRef.
    bool                                 FilterByVehicleJourneyRef      0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by CONNECTION LINK. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByConnectionLinkRef.
    bool                                 FilterByConnectionLinkRef      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by SERVICE JOURNEY INTERCHANGE. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FilterByInterchangeRef.
    bool                                 FilterByInterchangeRef         0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Specific Needs. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "FilterBySpecificNeed" of XSD type xs:boolean.
    bool                                 FilterBySpecificNeed           0 = true;	///< Default element value="true".
    }                                   *TopicFiltering                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy operations:
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy(soap*) allocate and default initialize
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy* soap_new__ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy(soap*, int num) allocate array and default initialize values
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy* soap_new_req__ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set required members
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy* soap_new_set__ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy(soap*, ...) allocate, set all public members
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy*) deserialize from a stream
/// - int soap_write__ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy(soap*, _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy*) serialize to a stream
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy* _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy::soap_dup(soap*) returns deep copy of _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy::soap_del() deep deletes _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy data members, use only after _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__SituationExchangeServiceCapabilitiesStructure_RequestPolicy
    {
/// INHERITED FROM ns2__CapabilityRequestPolicyStructure:
/// <PRE><BLOCKQUOTE>
///   National languages supported by service.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__language of length 1..unbounded.
    std::vector<xsd__language          > NationalLanguage               1;
/// <PRE><BLOCKQUOTE>
///   Whether producer can provide multiple translations of NL text elements +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Translations" of XSD type xs:boolean.
    bool*                                Translations                   0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Default geospatial Coordinates used by service.
/// </BLOCKQUOTE></PRE>
   $int                                  __union_SituationExchangeServiceCapabilitiesStructure_RequestPolicy;	///< Union _ns2__union_SituationExchangeServiceCapabilitiesStructure_RequestPolicy selector: set to SOAP_UNION__ns2__union_SituationExchangeServiceCapabilitiesStructure_RequestPolicy_<fieldname>
    union _ns2__union_SituationExchangeServiceCapabilitiesStructure_RequestPolicy
    {
/// <PRE><BLOCKQUOTE>
///   Name of GML Coordinate format used for Geospatial points in responses.
/// </BLOCKQUOTE></PRE>
/// Element "GmlCoordinateFormat" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
    ns2__SrsNameType*                    GmlCoordinateFormat            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
/// </BLOCKQUOTE></PRE>
/// Element "WgsDecimalDegrees" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  WgsDecimalDegrees              1;	///< Required element.
    }                                    union_SituationExchangeServiceCapabilitiesStructure_RequestPolicy;
//  END OF CHOICE
//  END OF INHERITED FROM ns2__CapabilityRequestPolicyStructure
//  BEGIN GROUP <xs:group name="SituationExchangeVolumeGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for volume control.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether a maximum number of Facility Status to include can be specified. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasMaximumFacilityStatus" of XSD type xs:boolean.
    bool                                 HasMaximumFacilityStatus       0 = false;	///< Default element value="false".
//  END OF GROUP
    }                                   *RequestPolicy                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Subscription Policy capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionPolicy" of XSD type "http://www.siri.org.uk/siri":CapabilitySubscriptionPolicyStructure.
    ns2__CapabilitySubscriptionPolicyStructure*  SubscriptionPolicy             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Access control capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl operations:
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl* soap_new__ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl(soap*) allocate and default initialize
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl* soap_new__ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl(soap*, int num) allocate array and default initialize values
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl* soap_new_req__ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl(soap*, ...) allocate, set required members
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl* soap_new_set__ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl(soap*, ...) allocate, set all public members
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl(soap*, _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl*) deserialize from a stream
/// - int soap_write__ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl(soap*, _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl*) serialize to a stream
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl* _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl::soap_dup(soap*) returns deep copy of _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl::soap_del() deep deletes _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl data members, use only after _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__SituationExchangeServiceCapabilitiesStructure_AccessControl
    {
/// INHERITED FROM ns2__CapabilityAccessControlStructure:
/// <PRE><BLOCKQUOTE>
///   Whether access control of requests is supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestChecking" of XSD type xs:boolean.
    bool                                 RequestChecking                0 = false;	///< Default element value="false".
//  END OF INHERITED FROM ns2__CapabilityAccessControlStructure
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by OPERATOR is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckOperatorRef.
    bool                                 CheckOperatorRef               0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by LINE is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CheckLineRef.
    bool                                 CheckLineRef                   0 = true;	///< Default element value="true".
    }                                   *AccessControl                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional Response capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures operations:
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures* soap_new__ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures(soap*) allocate and default initialize
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures* soap_new__ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures(soap*, int num) allocate array and default initialize values
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures* soap_new_req__ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures(soap*, ...) allocate, set required members
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures* soap_new_set__ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures(soap*, ...) allocate, set all public members
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures(soap*, _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures*) deserialize from a stream
/// - int soap_write__ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures(soap*, _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures*) serialize to a stream
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures* _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures::soap_dup(soap*) returns deep copy of _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures::soap_del() deep deletes _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures data members, use only after _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__SituationExchangeServiceCapabilitiesStructure_ResponseFeatures
    {
/// <PRE><BLOCKQUOTE>
///   Whether result supports remedy information. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HasRemedy" of XSD type xs:boolean.
    bool                                 HasRemedy                      0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether result supports facility location information. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "HasFacilityLocation" of XSD type xs:boolean.
    bool                                 HasFacilityLocation            0 = true;	///< Default element value="true".
    }                                   *ResponseFeatures               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":SituationExchangeServicePermissionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractPermissionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Situation Exchange Service Permissions.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationExchangeServicePermissionStructure operations:
/// - ns2__SituationExchangeServicePermissionStructure* soap_new_ns2__SituationExchangeServicePermissionStructure(soap*) allocate and default initialize
/// - ns2__SituationExchangeServicePermissionStructure* soap_new_ns2__SituationExchangeServicePermissionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationExchangeServicePermissionStructure* soap_new_req_ns2__SituationExchangeServicePermissionStructure(soap*, ...) allocate, set required members
/// - ns2__SituationExchangeServicePermissionStructure* soap_new_set_ns2__SituationExchangeServicePermissionStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationExchangeServicePermissionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationExchangeServicePermissionStructure(soap*, ns2__SituationExchangeServicePermissionStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationExchangeServicePermissionStructure(soap*, ns2__SituationExchangeServicePermissionStructure*) serialize to a stream
/// - ns2__SituationExchangeServicePermissionStructure* ns2__SituationExchangeServicePermissionStructure::soap_dup(soap*) returns deep copy of ns2__SituationExchangeServicePermissionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationExchangeServicePermissionStructure::soap_del() deep deletes ns2__SituationExchangeServicePermissionStructure data members, use only after ns2__SituationExchangeServicePermissionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationExchangeServicePermissionStructure : public ns2__AbstractPermissionStructure
{ public:
/*  INHERITED FROM ns2__AbstractPermissionStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SituationExchangeServicePermissionStructure;	///< Union _ns2__union_SituationExchangeServicePermissionStructure selector: set to SOAP_UNION__ns2__union_SituationExchangeServicePermissionStructure_<fieldname>
    union _ns2__union_SituationExchangeServicePermissionStructure
    {
/// <PRE><BLOCKQUOTE>
///   Parmissions apply by default to All particpants. May be overidden by other separate permissions for individual.
/// </BLOCKQUOTE></PRE>
/// Element "AllParticipants" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  AllParticipants                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Permission applies to specified participant.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SituationExchangeServicePermissionStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Permissions for general capabilities.
/// </BLOCKQUOTE></PRE>
/// class _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities operations:
/// - _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities* soap_new__ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities(soap*) allocate and default initialize
/// - _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities* soap_new__ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities(soap*, int num) allocate array and default initialize values
/// - _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities* soap_new_req__ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set required members
/// - _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities* soap_new_set__ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities(soap*, ...) allocate, set all public members
/// - _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities(soap*, _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities*) deserialize from a stream
/// - int soap_write__ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities(soap*, _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities*) serialize to a stream
/// - _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities* _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities::soap_dup(soap*) returns deep copy of _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities::soap_del() deep deletes _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities data members, use only after _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__SituationExchangeServicePermissionStructure_GeneralCapabilities
    {
/// <PRE><BLOCKQUOTE>
///   Participant may make direct requests for data. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "RequestResponse" of XSD type xs:boolean.
    bool                                 RequestResponse                0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Participant may create subscriptions. Default True.
/// </BLOCKQUOTE></PRE>
/// Element "PublishSubscribe" of XSD type xs:boolean.
    bool                                 PublishSubscribe               0 = true;	///< Default element value="true".
    }                                   *GeneralCapabilities            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractPermissionStructure */
/// <PRE><BLOCKQUOTE>
///   The OPERATOR data that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OperatorPermissions.
    _ns2__OperatorPermissions*           OperatorPermissions            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The LINEs that the participant may access.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LinePermissions.
    _ns2__LinePermissions*               LinePermissions                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":RouteDirectionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":DirectionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Summary information about a Direction of a Line
/// </BLOCKQUOTE></PRE>
/// class ns2__RouteDirectionStructure operations:
/// - ns2__RouteDirectionStructure* soap_new_ns2__RouteDirectionStructure(soap*) allocate and default initialize
/// - ns2__RouteDirectionStructure* soap_new_ns2__RouteDirectionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RouteDirectionStructure* soap_new_req_ns2__RouteDirectionStructure(soap*, ...) allocate, set required members
/// - ns2__RouteDirectionStructure* soap_new_set_ns2__RouteDirectionStructure(soap*, ...) allocate, set all public members
/// - ns2__RouteDirectionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RouteDirectionStructure(soap*, ns2__RouteDirectionStructure*) deserialize from a stream
/// - int soap_write_ns2__RouteDirectionStructure(soap*, ns2__RouteDirectionStructure*) serialize to a stream
/// - ns2__RouteDirectionStructure* ns2__RouteDirectionStructure::soap_dup(soap*) returns deep copy of ns2__RouteDirectionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RouteDirectionStructure::soap_del() deep deletes ns2__RouteDirectionStructure data members, use only after ns2__RouteDirectionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RouteDirectionStructure : public ns2__DirectionStructure
{ public:
/*  INHERITED FROM ns2__DirectionStructure:
/// <PRE><BLOCKQUOTE>
///   Identifer of DIRECTION,
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Description of DIRECTION. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
    END OF INHERITED FROM ns2__DirectionStructure */
/// <PRE><BLOCKQUOTE>
///   Ordered collection of STOP POINTs the LINE and direction . Detail level is 'stops'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class _ns2__RouteDirectionStructure_Stops operations:
/// - _ns2__RouteDirectionStructure_Stops* soap_new__ns2__RouteDirectionStructure_Stops(soap*) allocate and default initialize
/// - _ns2__RouteDirectionStructure_Stops* soap_new__ns2__RouteDirectionStructure_Stops(soap*, int num) allocate array and default initialize values
/// - _ns2__RouteDirectionStructure_Stops* soap_new_req__ns2__RouteDirectionStructure_Stops(soap*, ...) allocate, set required members
/// - _ns2__RouteDirectionStructure_Stops* soap_new_set__ns2__RouteDirectionStructure_Stops(soap*, ...) allocate, set all public members
/// - _ns2__RouteDirectionStructure_Stops::soap_default(soap*) default initialize members
/// - int soap_read__ns2__RouteDirectionStructure_Stops(soap*, _ns2__RouteDirectionStructure_Stops*) deserialize from a stream
/// - int soap_write__ns2__RouteDirectionStructure_Stops(soap*, _ns2__RouteDirectionStructure_Stops*) serialize to a stream
/// - _ns2__RouteDirectionStructure_Stops* _ns2__RouteDirectionStructure_Stops::soap_dup(soap*) returns deep copy of _ns2__RouteDirectionStructure_Stops, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__RouteDirectionStructure_Stops::soap_del() deep deletes _ns2__RouteDirectionStructure_Stops data members, use only after _ns2__RouteDirectionStructure_Stops::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__RouteDirectionStructure_Stops
    {
/// <PRE><BLOCKQUOTE>
///   Stop within Route of LINE. Detail level is 'stop' +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopPointInPatternStructure* of length 2..unbounded.
    std::vector<ns2__StopPointInPatternStructure*> StopPointInPattern             2;
    }                                   *Stops                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopPointInPatternStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AnnotatedStopPointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Summary information about a stop within line
/// </BLOCKQUOTE></PRE>
/// class ns2__StopPointInPatternStructure operations:
/// - ns2__StopPointInPatternStructure* soap_new_ns2__StopPointInPatternStructure(soap*) allocate and default initialize
/// - ns2__StopPointInPatternStructure* soap_new_ns2__StopPointInPatternStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopPointInPatternStructure* soap_new_req_ns2__StopPointInPatternStructure(soap*, ...) allocate, set required members
/// - ns2__StopPointInPatternStructure* soap_new_set_ns2__StopPointInPatternStructure(soap*, ...) allocate, set all public members
/// - ns2__StopPointInPatternStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopPointInPatternStructure(soap*, ns2__StopPointInPatternStructure*) deserialize from a stream
/// - int soap_write_ns2__StopPointInPatternStructure(soap*, ns2__StopPointInPatternStructure*) serialize to a stream
/// - ns2__StopPointInPatternStructure* ns2__StopPointInPatternStructure::soap_dup(soap*) returns deep copy of ns2__StopPointInPatternStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopPointInPatternStructure::soap_del() deep deletes ns2__StopPointInPatternStructure data members, use only after ns2__StopPointInPatternStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopPointInPatternStructure : public ns2__AnnotatedStopPointStructure
{ public:
/*  INHERITED FROM ns2__AnnotatedStopPointStructure:
/// <PRE><BLOCKQUOTE>
///   Identifer of the stop.
/// </BLOCKQUOTE></PRE>
/// Element "StopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          StopPointRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Whether the stop is a TIMING POINT. Times for stops that are not timing points are sometimes interpolated crudely from the timing points, and may represent a lower level of accuracy. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TimingPoint.
    bool                                 TimingPoint                    0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether real-time data is available for the stop. Default is 'true'. Detail level is 'normal'.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool                                 Monitored                      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. Detail level is 'normal'. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopName                       0;
/// <PRE><BLOCKQUOTE>
///   Identifer of the sSTOP AREA to which SCHEDULED STOP POINT belongs. +SIRI.v2.0
/// </BLOCKQUOTE></PRE>
/// Element "StopAreaRef" of XSD type "http://www.siri.org.uk/siri":StopAreaRefStructure.
    ns2__StopAreaRefStructure*           StopAreaRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Service features of stop. Detail level is 'full'
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopPointInPatternStructure_Features operations:
/// - _ns2__StopPointInPatternStructure_Features* soap_new__ns2__StopPointInPatternStructure_Features(soap*) allocate and default initialize
/// - _ns2__StopPointInPatternStructure_Features* soap_new__ns2__StopPointInPatternStructure_Features(soap*, int num) allocate array and default initialize values
/// - _ns2__StopPointInPatternStructure_Features* soap_new_req__ns2__StopPointInPatternStructure_Features(soap*, ...) allocate, set required members
/// - _ns2__StopPointInPatternStructure_Features* soap_new_set__ns2__StopPointInPatternStructure_Features(soap*, ...) allocate, set all public members
/// - _ns2__StopPointInPatternStructure_Features::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopPointInPatternStructure_Features(soap*, _ns2__StopPointInPatternStructure_Features*) deserialize from a stream
/// - int soap_write__ns2__StopPointInPatternStructure_Features(soap*, _ns2__StopPointInPatternStructure_Features*) serialize to a stream
/// - _ns2__StopPointInPatternStructure_Features* _ns2__StopPointInPatternStructure_Features::soap_dup(soap*) returns deep copy of _ns2__StopPointInPatternStructure_Features, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopPointInPatternStructure_Features::soap_del() deep deletes _ns2__StopPointInPatternStructure_Features data members, use only after _ns2__StopPointInPatternStructure_Features::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopPointInPatternStructure_Features
    {
//  BEGIN CHOICE <xs:choice maxOccurs="unbounded">
   $int                                  __size_StopPointInPatternStructure_Features 0;
    class __ns2__union_StopPointInPatternStructure_Features
    {
   $int                                  __union_StopPointInPatternStructure_Features;	///< Union _ns2__union_StopPointInPatternStructure_Features selector: set to SOAP_UNION__ns2__union_StopPointInPatternStructure_Features_<fieldname>
/// Union for choice in ns2__Features.
    union _ns2__union_StopPointInPatternStructure_Features
    {
/// <PRE><BLOCKQUOTE>
///   Description of Service features of stop.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceFeature" of XSD type "http://www.siri.org.uk/siri":ServiceFeatureStructure.
    ns2__ServiceFeatureStructure*        ServiceFeature                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceFeatureRef.
    ns2__ServiceFeatureRefStructure*     ServiceFeatureRef              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_StopPointInPatternStructure_Features;
    }                                   *__union_StopPointInPatternStructure_Features;
//  END OF CHOICE
    }                                   *Features                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   LINEs that use stop. Detail level is 'full'
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopPointInPatternStructure_Lines operations:
/// - _ns2__StopPointInPatternStructure_Lines* soap_new__ns2__StopPointInPatternStructure_Lines(soap*) allocate and default initialize
/// - _ns2__StopPointInPatternStructure_Lines* soap_new__ns2__StopPointInPatternStructure_Lines(soap*, int num) allocate array and default initialize values
/// - _ns2__StopPointInPatternStructure_Lines* soap_new_req__ns2__StopPointInPatternStructure_Lines(soap*, ...) allocate, set required members
/// - _ns2__StopPointInPatternStructure_Lines* soap_new_set__ns2__StopPointInPatternStructure_Lines(soap*, ...) allocate, set all public members
/// - _ns2__StopPointInPatternStructure_Lines::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopPointInPatternStructure_Lines(soap*, _ns2__StopPointInPatternStructure_Lines*) deserialize from a stream
/// - int soap_write__ns2__StopPointInPatternStructure_Lines(soap*, _ns2__StopPointInPatternStructure_Lines*) serialize to a stream
/// - _ns2__StopPointInPatternStructure_Lines* _ns2__StopPointInPatternStructure_Lines::soap_dup(soap*) returns deep copy of _ns2__StopPointInPatternStructure_Lines, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopPointInPatternStructure_Lines::soap_del() deep deletes _ns2__StopPointInPatternStructure_Lines data members, use only after _ns2__StopPointInPatternStructure_Lines::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopPointInPatternStructure_Lines
    {
//  BEGIN CHOICE <xs:choice maxOccurs="unbounded">
   $int                                  __size_StopPointInPatternStructure_Lines 0;
    class __ns2__union_StopPointInPatternStructure_Lines
    {
   $int                                  __union_StopPointInPatternStructure_Lines;	///< Union _ns2__union_StopPointInPatternStructure_Lines selector: set to SOAP_UNION__ns2__union_StopPointInPatternStructure_Lines_<fieldname>
/// Union for choice in ns2__Lines.
    union _ns2__union_StopPointInPatternStructure_Lines
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE that calls at stop.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE that calls at stop. and its direction +SIRI V2.0
/// </BLOCKQUOTE></PRE>
/// Element "LineDirection" of XSD type "http://www.siri.org.uk/siri":LineDirectionStructure.
    ns2__LineDirectionStructure*         LineDirection                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_StopPointInPatternStructure_Lines;
    }                                   *__union_StopPointInPatternStructure_Lines;
//  END OF CHOICE
    }                                   *Lines                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Coordinates to use to show stop as a poitn on map. Detail level is 'normal'.+SIRI.v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Location" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Location                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Web page associated with Stop. Detail level is 'full'+SIRI.v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Url" of XSD type xs:anyURI.
    xsd__anyURI*                         Url                            0;	///< Optional element.
    END OF INHERITED FROM ns2__AnnotatedStopPointStructure */
/// <PRE><BLOCKQUOTE>
///   Order of STOP POINT in route +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Order" of XSD type xs:positiveInteger.
    xsd__positiveInteger                 Order                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Plot of points from this stop to next Stop. Detail level is 'full'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "OnwardLinkShape" of XSD type "http://www.siri.org.uk/siri":LineShapeStructure.
    ns2__LineShapeStructure*             OnwardLinkShape                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductionTimetablePermissions
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ProductionTimetablePermissions is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PermissionsStructure.
///
/// class _ns2__ProductionTimetablePermissions operations:
/// - _ns2__ProductionTimetablePermissions* soap_new__ns2__ProductionTimetablePermissions(soap*) allocate and default initialize
/// - _ns2__ProductionTimetablePermissions* soap_new__ns2__ProductionTimetablePermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__ProductionTimetablePermissions* soap_new_req__ns2__ProductionTimetablePermissions(soap*, ...) allocate, set required members
/// - _ns2__ProductionTimetablePermissions* soap_new_set__ns2__ProductionTimetablePermissions(soap*, ...) allocate, set all public members
/// - _ns2__ProductionTimetablePermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ProductionTimetablePermissions(soap*, _ns2__ProductionTimetablePermissions*) deserialize from a stream
/// - int soap_write__ns2__ProductionTimetablePermissions(soap*, _ns2__ProductionTimetablePermissions*) serialize to a stream
/// - _ns2__ProductionTimetablePermissions* _ns2__ProductionTimetablePermissions::soap_dup(soap*) returns deep copy of _ns2__ProductionTimetablePermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ProductionTimetablePermissions::soap_del() deep deletes _ns2__ProductionTimetablePermissions data members, use only after _ns2__ProductionTimetablePermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ProductionTimetablePermissions : public ns2__PermissionsStructure
{ public:
/*  INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
    END OF INHERITED FROM ns2__PermissionsStructure */
/// <PRE><BLOCKQUOTE>
///   Permission for a single participant or all participants to use an aspect of the service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionServicePermissionStructure* element refs of length 0..unbounded.
    std::vector<ns2__ConnectionServicePermissionStructure*> ProductionTimetablePermission  0;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedTimetablePermissions
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":EstimatedTimetablePermissions is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PermissionsStructure.
///
/// class _ns2__EstimatedTimetablePermissions operations:
/// - _ns2__EstimatedTimetablePermissions* soap_new__ns2__EstimatedTimetablePermissions(soap*) allocate and default initialize
/// - _ns2__EstimatedTimetablePermissions* soap_new__ns2__EstimatedTimetablePermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__EstimatedTimetablePermissions* soap_new_req__ns2__EstimatedTimetablePermissions(soap*, ...) allocate, set required members
/// - _ns2__EstimatedTimetablePermissions* soap_new_set__ns2__EstimatedTimetablePermissions(soap*, ...) allocate, set all public members
/// - _ns2__EstimatedTimetablePermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__EstimatedTimetablePermissions(soap*, _ns2__EstimatedTimetablePermissions*) deserialize from a stream
/// - int soap_write__ns2__EstimatedTimetablePermissions(soap*, _ns2__EstimatedTimetablePermissions*) serialize to a stream
/// - _ns2__EstimatedTimetablePermissions* _ns2__EstimatedTimetablePermissions::soap_dup(soap*) returns deep copy of _ns2__EstimatedTimetablePermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__EstimatedTimetablePermissions::soap_del() deep deletes _ns2__EstimatedTimetablePermissions data members, use only after _ns2__EstimatedTimetablePermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__EstimatedTimetablePermissions : public ns2__PermissionsStructure
{ public:
/*  INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
    END OF INHERITED FROM ns2__PermissionsStructure */
/// <PRE><BLOCKQUOTE>
///   Permission for a single participant or all participants to use an aspect of the service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__ConnectionServicePermissionStructure*> EstimatedTimetablePermission   0;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopTimetablePermissions
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":StopTimetablePermissions is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PermissionsStructure.
///
/// class _ns2__StopTimetablePermissions operations:
/// - _ns2__StopTimetablePermissions* soap_new__ns2__StopTimetablePermissions(soap*) allocate and default initialize
/// - _ns2__StopTimetablePermissions* soap_new__ns2__StopTimetablePermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__StopTimetablePermissions* soap_new_req__ns2__StopTimetablePermissions(soap*, ...) allocate, set required members
/// - _ns2__StopTimetablePermissions* soap_new_set__ns2__StopTimetablePermissions(soap*, ...) allocate, set all public members
/// - _ns2__StopTimetablePermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopTimetablePermissions(soap*, _ns2__StopTimetablePermissions*) deserialize from a stream
/// - int soap_write__ns2__StopTimetablePermissions(soap*, _ns2__StopTimetablePermissions*) serialize to a stream
/// - _ns2__StopTimetablePermissions* _ns2__StopTimetablePermissions::soap_dup(soap*) returns deep copy of _ns2__StopTimetablePermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopTimetablePermissions::soap_del() deep deletes _ns2__StopTimetablePermissions data members, use only after _ns2__StopTimetablePermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__StopTimetablePermissions : public ns2__PermissionsStructure
{ public:
/*  INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
    END OF INHERITED FROM ns2__PermissionsStructure */
/// <PRE><BLOCKQUOTE>
///   Permission for a single participant or all participants to use an aspect of the service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__StopTimetableServicePermissionStructure*> StopTimetablePermission        0;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopMonitoringPermissions
/// <PRE><BLOCKQUOTE>
///   Participants permissions to use the service, Only returned if requested.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":StopMonitoringPermissions is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PermissionsStructure.
///
/// class _ns2__StopMonitoringPermissions operations:
/// - _ns2__StopMonitoringPermissions* soap_new__ns2__StopMonitoringPermissions(soap*) allocate and default initialize
/// - _ns2__StopMonitoringPermissions* soap_new__ns2__StopMonitoringPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__StopMonitoringPermissions* soap_new_req__ns2__StopMonitoringPermissions(soap*, ...) allocate, set required members
/// - _ns2__StopMonitoringPermissions* soap_new_set__ns2__StopMonitoringPermissions(soap*, ...) allocate, set all public members
/// - _ns2__StopMonitoringPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopMonitoringPermissions(soap*, _ns2__StopMonitoringPermissions*) deserialize from a stream
/// - int soap_write__ns2__StopMonitoringPermissions(soap*, _ns2__StopMonitoringPermissions*) serialize to a stream
/// - _ns2__StopMonitoringPermissions* _ns2__StopMonitoringPermissions::soap_dup(soap*) returns deep copy of _ns2__StopMonitoringPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopMonitoringPermissions::soap_del() deep deletes _ns2__StopMonitoringPermissions data members, use only after _ns2__StopMonitoringPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__StopMonitoringPermissions : public ns2__PermissionsStructure
{ public:
/*  INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
    END OF INHERITED FROM ns2__PermissionsStructure */
/// <PRE><BLOCKQUOTE>
///   Permission for a single participant or all participants to use an aspect of the service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__StopMonitoringServicePermissionStructure*> StopMonitoringPermission       0;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleMonitoringPermissions
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringPermissions is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PermissionsStructure.
///
/// class _ns2__VehicleMonitoringPermissions operations:
/// - _ns2__VehicleMonitoringPermissions* soap_new__ns2__VehicleMonitoringPermissions(soap*) allocate and default initialize
/// - _ns2__VehicleMonitoringPermissions* soap_new__ns2__VehicleMonitoringPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleMonitoringPermissions* soap_new_req__ns2__VehicleMonitoringPermissions(soap*, ...) allocate, set required members
/// - _ns2__VehicleMonitoringPermissions* soap_new_set__ns2__VehicleMonitoringPermissions(soap*, ...) allocate, set all public members
/// - _ns2__VehicleMonitoringPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleMonitoringPermissions(soap*, _ns2__VehicleMonitoringPermissions*) deserialize from a stream
/// - int soap_write__ns2__VehicleMonitoringPermissions(soap*, _ns2__VehicleMonitoringPermissions*) serialize to a stream
/// - _ns2__VehicleMonitoringPermissions* _ns2__VehicleMonitoringPermissions::soap_dup(soap*) returns deep copy of _ns2__VehicleMonitoringPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleMonitoringPermissions::soap_del() deep deletes _ns2__VehicleMonitoringPermissions data members, use only after _ns2__VehicleMonitoringPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__VehicleMonitoringPermissions : public ns2__PermissionsStructure
{ public:
/*  INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
    END OF INHERITED FROM ns2__PermissionsStructure */
/// <PRE><BLOCKQUOTE>
///   Permissions for use of VEHICLE MONITORING. Can be used to specify which Consumers can see which vehicles
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__VehicleMonitoringServicePermissionStructure*> VehicleMonitoringPermission    0;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessagePermissions
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":GeneralMessagePermissions is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PermissionsStructure.
///
/// class _ns2__GeneralMessagePermissions operations:
/// - _ns2__GeneralMessagePermissions* soap_new__ns2__GeneralMessagePermissions(soap*) allocate and default initialize
/// - _ns2__GeneralMessagePermissions* soap_new__ns2__GeneralMessagePermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__GeneralMessagePermissions* soap_new_req__ns2__GeneralMessagePermissions(soap*, ...) allocate, set required members
/// - _ns2__GeneralMessagePermissions* soap_new_set__ns2__GeneralMessagePermissions(soap*, ...) allocate, set all public members
/// - _ns2__GeneralMessagePermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GeneralMessagePermissions(soap*, _ns2__GeneralMessagePermissions*) deserialize from a stream
/// - int soap_write__ns2__GeneralMessagePermissions(soap*, _ns2__GeneralMessagePermissions*) serialize to a stream
/// - _ns2__GeneralMessagePermissions* _ns2__GeneralMessagePermissions::soap_dup(soap*) returns deep copy of _ns2__GeneralMessagePermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GeneralMessagePermissions::soap_del() deep deletes _ns2__GeneralMessagePermissions data members, use only after _ns2__GeneralMessagePermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__GeneralMessagePermissions : public ns2__PermissionsStructure
{ public:
/*  INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
    END OF INHERITED FROM ns2__PermissionsStructure */
/// <PRE><BLOCKQUOTE>
///   Permission or a single particpant or all participants.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__GeneralMessageServicePermissionStructure*> GeneralMessagePermission       0;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityMonitoringPermissions
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":FacilityMonitoringPermissions is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PermissionsStructure.
///
/// class _ns2__FacilityMonitoringPermissions operations:
/// - _ns2__FacilityMonitoringPermissions* soap_new__ns2__FacilityMonitoringPermissions(soap*) allocate and default initialize
/// - _ns2__FacilityMonitoringPermissions* soap_new__ns2__FacilityMonitoringPermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__FacilityMonitoringPermissions* soap_new_req__ns2__FacilityMonitoringPermissions(soap*, ...) allocate, set required members
/// - _ns2__FacilityMonitoringPermissions* soap_new_set__ns2__FacilityMonitoringPermissions(soap*, ...) allocate, set all public members
/// - _ns2__FacilityMonitoringPermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__FacilityMonitoringPermissions(soap*, _ns2__FacilityMonitoringPermissions*) deserialize from a stream
/// - int soap_write__ns2__FacilityMonitoringPermissions(soap*, _ns2__FacilityMonitoringPermissions*) serialize to a stream
/// - _ns2__FacilityMonitoringPermissions* _ns2__FacilityMonitoringPermissions::soap_dup(soap*) returns deep copy of _ns2__FacilityMonitoringPermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__FacilityMonitoringPermissions::soap_del() deep deletes _ns2__FacilityMonitoringPermissions data members, use only after _ns2__FacilityMonitoringPermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__FacilityMonitoringPermissions : public ns2__PermissionsStructure
{ public:
/*  INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
    END OF INHERITED FROM ns2__PermissionsStructure */
/// Vector of ns2__FacilityMonitoringServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__FacilityMonitoringServicePermissionStructure*> FacilityMonitoringPermission   0;
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationExchangePermissions
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":SituationExchangePermissions is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PermissionsStructure.
///
/// class _ns2__SituationExchangePermissions operations:
/// - _ns2__SituationExchangePermissions* soap_new__ns2__SituationExchangePermissions(soap*) allocate and default initialize
/// - _ns2__SituationExchangePermissions* soap_new__ns2__SituationExchangePermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__SituationExchangePermissions* soap_new_req__ns2__SituationExchangePermissions(soap*, ...) allocate, set required members
/// - _ns2__SituationExchangePermissions* soap_new_set__ns2__SituationExchangePermissions(soap*, ...) allocate, set all public members
/// - _ns2__SituationExchangePermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SituationExchangePermissions(soap*, _ns2__SituationExchangePermissions*) deserialize from a stream
/// - int soap_write__ns2__SituationExchangePermissions(soap*, _ns2__SituationExchangePermissions*) serialize to a stream
/// - _ns2__SituationExchangePermissions* _ns2__SituationExchangePermissions::soap_dup(soap*) returns deep copy of _ns2__SituationExchangePermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SituationExchangePermissions::soap_del() deep deletes _ns2__SituationExchangePermissions data members, use only after _ns2__SituationExchangePermissions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__SituationExchangePermissions : public ns2__PermissionsStructure
{ public:
/*  INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
    END OF INHERITED FROM ns2__PermissionsStructure */
/// Vector of ns2__SituationExchangeServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__SituationExchangeServicePermissionStructure*> SituationExchangePermission    0;
};

/// @brief "http://www.ifopt.org.uk/ifopt":TimebandStructure is a complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":HalfOpenTimeRangeStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for a timeband.
/// </BLOCKQUOTE></PRE>
/// class ns4__TimebandStructure operations:
/// - ns4__TimebandStructure* soap_new_ns4__TimebandStructure(soap*) allocate and default initialize
/// - ns4__TimebandStructure* soap_new_ns4__TimebandStructure(soap*, int num) allocate array and default initialize values
/// - ns4__TimebandStructure* soap_new_req_ns4__TimebandStructure(soap*, ...) allocate, set required members
/// - ns4__TimebandStructure* soap_new_set_ns4__TimebandStructure(soap*, ...) allocate, set all public members
/// - ns4__TimebandStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__TimebandStructure(soap*, ns4__TimebandStructure*) deserialize from a stream
/// - int soap_write_ns4__TimebandStructure(soap*, ns4__TimebandStructure*) serialize to a stream
/// - ns4__TimebandStructure* ns4__TimebandStructure::soap_dup(soap*) returns deep copy of ns4__TimebandStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__TimebandStructure::soap_del() deep deletes ns4__TimebandStructure data members, use only after ns4__TimebandStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__TimebandStructure : public ns4__HalfOpenTimeRangeStructure
{ public:
/*  INHERITED FROM ns4__HalfOpenTimeRangeStructure:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start time.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:time.
    xsd__time                            StartTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end time. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:time.
    xsd__time*                           EndTime                        0;	///< Optional element.
    END OF INHERITED FROM ns4__HalfOpenTimeRangeStructure */
};

/// @brief "http://www.ifopt.org.uk/ifopt":InfoLinkStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for Info Link.
/// </BLOCKQUOTE></PRE>
/// class ns4__InfoLinkStructure operations:
/// - ns4__InfoLinkStructure* soap_new_ns4__InfoLinkStructure(soap*) allocate and default initialize
/// - ns4__InfoLinkStructure* soap_new_ns4__InfoLinkStructure(soap*, int num) allocate array and default initialize values
/// - ns4__InfoLinkStructure* soap_new_req_ns4__InfoLinkStructure(soap*, ...) allocate, set required members
/// - ns4__InfoLinkStructure* soap_new_set_ns4__InfoLinkStructure(soap*, ...) allocate, set all public members
/// - ns4__InfoLinkStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__InfoLinkStructure(soap*, ns4__InfoLinkStructure*) deserialize from a stream
/// - int soap_write_ns4__InfoLinkStructure(soap*, ns4__InfoLinkStructure*) serialize to a stream
/// - ns4__InfoLinkStructure* ns4__InfoLinkStructure::soap_dup(soap*) returns deep copy of ns4__InfoLinkStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__InfoLinkStructure::soap_del() deep deletes ns4__InfoLinkStructure data members, use only after ns4__InfoLinkStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__InfoLinkStructure : public xsd__anyType
{ public:
/// __item wraps "xs:anyURI" simpleContent.
    xsd__anyURI                          __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":DataManagedObjectStructure is an abstract complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":VersionedObjectStructure.
///
/// <PRE><BLOCKQUOTE>
///   Abstract Type for DATA MANAGED OBJECT, that is an object that may be assigned a RESPONSIBILITY SET dictating a responsbile ORGANISATION and/or ADMINISTRATIVE ZONE.
/// </BLOCKQUOTE></PRE>
/// class ns4__DataManagedObjectStructure operations:
/// - ns4__DataManagedObjectStructure* soap_new_ns4__DataManagedObjectStructure(soap*) allocate and default initialize
/// - ns4__DataManagedObjectStructure* soap_new_ns4__DataManagedObjectStructure(soap*, int num) allocate array and default initialize values
/// - ns4__DataManagedObjectStructure* soap_new_req_ns4__DataManagedObjectStructure(soap*, ...) allocate, set required members
/// - ns4__DataManagedObjectStructure* soap_new_set_ns4__DataManagedObjectStructure(soap*, ...) allocate, set all public members
/// - ns4__DataManagedObjectStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__DataManagedObjectStructure(soap*, ns4__DataManagedObjectStructure*) deserialize from a stream
/// - int soap_write_ns4__DataManagedObjectStructure(soap*, ns4__DataManagedObjectStructure*) serialize to a stream
/// - ns4__DataManagedObjectStructure* ns4__DataManagedObjectStructure::soap_dup(soap*) returns deep copy of ns4__DataManagedObjectStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__DataManagedObjectStructure::soap_del() deep deletes ns4__DataManagedObjectStructure data members, use only after ns4__DataManagedObjectStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__DataManagedObjectStructure : public ns4__VersionedObjectStructure
{ public:
/*  INHERITED FROM ns4__VersionedObjectStructure:
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup ref=""http://www.ifopt.org.uk/ifopt":RequiredModificationDetailsGroup">.
/// Attribute "created" of XSD type xs:dateTime.
   @xsd__dateTime                        created                        1;	///< Required attribute.
/// Attribute "lastUpdated" of XSD type xs:dateTime.
   @xsd__dateTime                        lastUpdated                    1;	///< Required attribute.
/// Attribute "modification" of XSD type "http://www.ifopt.org.uk/ifopt":ModificationEnumeration.
   @enum ns4__ModificationEnumeration    modification                   0 = ns4__ModificationEnumeration__new_;	///< Default attribute value="new".
/// Attribute "version" of XSD type "http://www.ifopt.org.uk/ifopt":RevisionNumberType.
   @ns4__RevisionNumberType*             version                        0;	///< Optional attribute.
/// Attribute "status" of XSD type "http://www.ifopt.org.uk/ifopt":StatusEnumeration.
   @enum ns4__StatusEnumeration          status                         0 = ns4__StatusEnumeration__active;	///< Default attribute value="active".
//  END OF ATTRIBUTEGROUP
    END OF INHERITED FROM ns4__VersionedObjectStructure */
//  BEGIN GROUP <xs:group name="DataManagedObjectGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for a DATA MANAGED OBJECT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   ADMINISTRATIVE ZONEthat manages object. If absent then manager same as for containing parent of object.
/// </BLOCKQUOTE></PRE>
/// Element "ManagedByAreaRef" of XSD type "http://www.ifopt.org.uk/ifopt":AdministrativeAreaRefStructure.
    ns4__AdministrativeAreaRefStructure*  ManagedByAreaRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Collection of URL's associated with object.
/// </BLOCKQUOTE></PRE>
/// Element "InfoLinks" of XSD type "http://www.ifopt.org.uk/ifopt":InfoLinksStructure.
    ns4__InfoLinksStructure*             InfoLinks                      0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.ifopt.org.uk/ifopt":PointProjectionStructure is a complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":AbstractProjection.
///
/// <PRE><BLOCKQUOTE>
///   Type for geospatial Position of a point. May be expressed in concrete WGS 84 Coordinates or any GML compatible point coordinates format.
/// </BLOCKQUOTE></PRE>
/// class ns4__PointProjectionStructure operations:
/// - ns4__PointProjectionStructure* soap_new_ns4__PointProjectionStructure(soap*) allocate and default initialize
/// - ns4__PointProjectionStructure* soap_new_ns4__PointProjectionStructure(soap*, int num) allocate array and default initialize values
/// - ns4__PointProjectionStructure* soap_new_req_ns4__PointProjectionStructure(soap*, ...) allocate, set required members
/// - ns4__PointProjectionStructure* soap_new_set_ns4__PointProjectionStructure(soap*, ...) allocate, set all public members
/// - ns4__PointProjectionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__PointProjectionStructure(soap*, ns4__PointProjectionStructure*) deserialize from a stream
/// - int soap_write_ns4__PointProjectionStructure(soap*, ns4__PointProjectionStructure*) serialize to a stream
/// - ns4__PointProjectionStructure* ns4__PointProjectionStructure::soap_dup(soap*) returns deep copy of ns4__PointProjectionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__PointProjectionStructure::soap_del() deep deletes ns4__PointProjectionStructure data members, use only after ns4__PointProjectionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__PointProjectionStructure : public ns4__AbstractProjection
{ public:
/*  INHERITED FROM ns4__AbstractProjection:
/// <PRE><BLOCKQUOTE>
///   GIS Features that this element projects onto.
/// </BLOCKQUOTE></PRE>
/// class _ns4__PointProjectionStructure_Features operations:
/// - _ns4__PointProjectionStructure_Features* soap_new__ns4__PointProjectionStructure_Features(soap*) allocate and default initialize
/// - _ns4__PointProjectionStructure_Features* soap_new__ns4__PointProjectionStructure_Features(soap*, int num) allocate array and default initialize values
/// - _ns4__PointProjectionStructure_Features* soap_new_req__ns4__PointProjectionStructure_Features(soap*, ...) allocate, set required members
/// - _ns4__PointProjectionStructure_Features* soap_new_set__ns4__PointProjectionStructure_Features(soap*, ...) allocate, set all public members
/// - _ns4__PointProjectionStructure_Features::soap_default(soap*) default initialize members
/// - int soap_read__ns4__PointProjectionStructure_Features(soap*, _ns4__PointProjectionStructure_Features*) deserialize from a stream
/// - int soap_write__ns4__PointProjectionStructure_Features(soap*, _ns4__PointProjectionStructure_Features*) serialize to a stream
/// - _ns4__PointProjectionStructure_Features* _ns4__PointProjectionStructure_Features::soap_dup(soap*) returns deep copy of _ns4__PointProjectionStructure_Features, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__PointProjectionStructure_Features::soap_del() deep deletes _ns4__PointProjectionStructure_Features data members, use only after _ns4__PointProjectionStructure_Features::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns4__PointProjectionStructure_Features
    {
/// <PRE><BLOCKQUOTE>
///   Identifier of FEATURE in a GIS data system.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__FeatureRefStructure* of length 1..unbounded.
    std::vector<ns4__FeatureRefStructure*> GisFeatureRef                  1;
    }                                   *Features                       0;	///< Optional element.
    END OF INHERITED FROM ns4__AbstractProjection */
//  BEGIN GROUP <xs:group name="Wgs84Group" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   WGS84 Coordinates.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns4__PointProjectionStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Longitude from Greenwich Meridian. -180 (East) to +180 (West).
/// </BLOCKQUOTE></PRE>
/// Element "Longitude" of XSD type "http://www.siri.org.uk/siri":LongitudeType.
    ns2__LongitudeType                   Longitude                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Latitude from equator. -90 (South) to +90 (North).
/// </BLOCKQUOTE></PRE>
/// Element "Latitude" of XSD type "http://www.siri.org.uk/siri":LatitudeType.
    ns2__LatitudeType                    Latitude                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Altitude.
/// </BLOCKQUOTE></PRE>
/// Element "Altitude" of XSD type "http://www.siri.org.uk/siri":AltitudeType.
    ns2__AltitudeType*                   Altitude                       0;	///< Optional element.
    }                                   *__PointProjectionStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Coordinates of points in a GML compatible format, as indicated by srsName attribute.
/// </BLOCKQUOTE></PRE>
/// Element "Coordinates" of XSD type "http://www.siri.org.uk/siri":CoordinatesStructure.
    ns2__CoordinatesStructure*           Coordinates                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Precision for point measurement. In meters.
/// </BLOCKQUOTE></PRE>
/// Element "Precision" of XSD type "http://www.siri.org.uk/siri":DistanceType.
    ns2__DistanceType*                   Precision                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of POINT.
/// </BLOCKQUOTE></PRE>
/// Attribute "id" of XSD type xs:NMTOKEN.
   @xsd__NMTOKEN*                        id                             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   identifier of data reference system for geocodes, if point is specified as GML compatible Coordinates. A GML value. If not specified taken from system configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "srsName" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
   @ns2__SrsNameType*                    srsName                        0;	///< Optional attribute.
};

/// @brief "http://www.ifopt.org.uk/ifopt":LinkProjectionStructure is a complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":AbstractProjection.
///
/// <PRE><BLOCKQUOTE>
///   Type for PROJECTION as a geospatial polyline.
/// </BLOCKQUOTE></PRE>
/// class ns4__LinkProjectionStructure operations:
/// - ns4__LinkProjectionStructure* soap_new_ns4__LinkProjectionStructure(soap*) allocate and default initialize
/// - ns4__LinkProjectionStructure* soap_new_ns4__LinkProjectionStructure(soap*, int num) allocate array and default initialize values
/// - ns4__LinkProjectionStructure* soap_new_req_ns4__LinkProjectionStructure(soap*, ...) allocate, set required members
/// - ns4__LinkProjectionStructure* soap_new_set_ns4__LinkProjectionStructure(soap*, ...) allocate, set all public members
/// - ns4__LinkProjectionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__LinkProjectionStructure(soap*, ns4__LinkProjectionStructure*) deserialize from a stream
/// - int soap_write_ns4__LinkProjectionStructure(soap*, ns4__LinkProjectionStructure*) serialize to a stream
/// - ns4__LinkProjectionStructure* ns4__LinkProjectionStructure::soap_dup(soap*) returns deep copy of ns4__LinkProjectionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__LinkProjectionStructure::soap_del() deep deletes ns4__LinkProjectionStructure data members, use only after ns4__LinkProjectionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__LinkProjectionStructure : public ns4__AbstractProjection
{ public:
/*  INHERITED FROM ns4__AbstractProjection:
/// <PRE><BLOCKQUOTE>
///   GIS Features that this element projects onto.
/// </BLOCKQUOTE></PRE>
/// class _ns4__LinkProjectionStructure_Features operations:
/// - _ns4__LinkProjectionStructure_Features* soap_new__ns4__LinkProjectionStructure_Features(soap*) allocate and default initialize
/// - _ns4__LinkProjectionStructure_Features* soap_new__ns4__LinkProjectionStructure_Features(soap*, int num) allocate array and default initialize values
/// - _ns4__LinkProjectionStructure_Features* soap_new_req__ns4__LinkProjectionStructure_Features(soap*, ...) allocate, set required members
/// - _ns4__LinkProjectionStructure_Features* soap_new_set__ns4__LinkProjectionStructure_Features(soap*, ...) allocate, set all public members
/// - _ns4__LinkProjectionStructure_Features::soap_default(soap*) default initialize members
/// - int soap_read__ns4__LinkProjectionStructure_Features(soap*, _ns4__LinkProjectionStructure_Features*) deserialize from a stream
/// - int soap_write__ns4__LinkProjectionStructure_Features(soap*, _ns4__LinkProjectionStructure_Features*) serialize to a stream
/// - _ns4__LinkProjectionStructure_Features* _ns4__LinkProjectionStructure_Features::soap_dup(soap*) returns deep copy of _ns4__LinkProjectionStructure_Features, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__LinkProjectionStructure_Features::soap_del() deep deletes _ns4__LinkProjectionStructure_Features data members, use only after _ns4__LinkProjectionStructure_Features::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns4__LinkProjectionStructure_Features
    {
/// <PRE><BLOCKQUOTE>
///   Identifier of FEATURE in a GIS data system.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__FeatureRefStructure* of length 1..unbounded.
    std::vector<ns4__FeatureRefStructure*> GisFeatureRef                  1;
    }                                   *Features                       0;	///< Optional element.
    END OF INHERITED FROM ns4__AbstractProjection */
/// <PRE><BLOCKQUOTE>
///   Ordered sequence of points. There must always be a start and end point.
/// </BLOCKQUOTE></PRE>
/// class _ns4__LinkProjectionStructure_Line operations:
/// - _ns4__LinkProjectionStructure_Line* soap_new__ns4__LinkProjectionStructure_Line(soap*) allocate and default initialize
/// - _ns4__LinkProjectionStructure_Line* soap_new__ns4__LinkProjectionStructure_Line(soap*, int num) allocate array and default initialize values
/// - _ns4__LinkProjectionStructure_Line* soap_new_req__ns4__LinkProjectionStructure_Line(soap*, ...) allocate, set required members
/// - _ns4__LinkProjectionStructure_Line* soap_new_set__ns4__LinkProjectionStructure_Line(soap*, ...) allocate, set all public members
/// - _ns4__LinkProjectionStructure_Line::soap_default(soap*) default initialize members
/// - int soap_read__ns4__LinkProjectionStructure_Line(soap*, _ns4__LinkProjectionStructure_Line*) deserialize from a stream
/// - int soap_write__ns4__LinkProjectionStructure_Line(soap*, _ns4__LinkProjectionStructure_Line*) serialize to a stream
/// - _ns4__LinkProjectionStructure_Line* _ns4__LinkProjectionStructure_Line::soap_dup(soap*) returns deep copy of _ns4__LinkProjectionStructure_Line, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__LinkProjectionStructure_Line::soap_del() deep deletes _ns4__LinkProjectionStructure_Line data members, use only after _ns4__LinkProjectionStructure_Line::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns4__LinkProjectionStructure_Line
    {
/// <PRE><BLOCKQUOTE>
///   Points may be defined in tagged format or using GM coordinates element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__PointProjectionStructure* element refs of length 2..unbounded.
    std::vector<ns4__PointProjectionStructure*> PointProjection                2;
    }                                   *Line                           0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/ifopt":ZoneProjectionStructure is a complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":AbstractProjection.
///
/// <PRE><BLOCKQUOTE>
///   Type for PROJECTION as a geospatial zone.
/// </BLOCKQUOTE></PRE>
/// class ns4__ZoneProjectionStructure operations:
/// - ns4__ZoneProjectionStructure* soap_new_ns4__ZoneProjectionStructure(soap*) allocate and default initialize
/// - ns4__ZoneProjectionStructure* soap_new_ns4__ZoneProjectionStructure(soap*, int num) allocate array and default initialize values
/// - ns4__ZoneProjectionStructure* soap_new_req_ns4__ZoneProjectionStructure(soap*, ...) allocate, set required members
/// - ns4__ZoneProjectionStructure* soap_new_set_ns4__ZoneProjectionStructure(soap*, ...) allocate, set all public members
/// - ns4__ZoneProjectionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__ZoneProjectionStructure(soap*, ns4__ZoneProjectionStructure*) deserialize from a stream
/// - int soap_write_ns4__ZoneProjectionStructure(soap*, ns4__ZoneProjectionStructure*) serialize to a stream
/// - ns4__ZoneProjectionStructure* ns4__ZoneProjectionStructure::soap_dup(soap*) returns deep copy of ns4__ZoneProjectionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__ZoneProjectionStructure::soap_del() deep deletes ns4__ZoneProjectionStructure data members, use only after ns4__ZoneProjectionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__ZoneProjectionStructure : public ns4__AbstractProjection
{ public:
/*  INHERITED FROM ns4__AbstractProjection:
/// <PRE><BLOCKQUOTE>
///   GIS Features that this element projects onto.
/// </BLOCKQUOTE></PRE>
/// class _ns4__ZoneProjectionStructure_Features operations:
/// - _ns4__ZoneProjectionStructure_Features* soap_new__ns4__ZoneProjectionStructure_Features(soap*) allocate and default initialize
/// - _ns4__ZoneProjectionStructure_Features* soap_new__ns4__ZoneProjectionStructure_Features(soap*, int num) allocate array and default initialize values
/// - _ns4__ZoneProjectionStructure_Features* soap_new_req__ns4__ZoneProjectionStructure_Features(soap*, ...) allocate, set required members
/// - _ns4__ZoneProjectionStructure_Features* soap_new_set__ns4__ZoneProjectionStructure_Features(soap*, ...) allocate, set all public members
/// - _ns4__ZoneProjectionStructure_Features::soap_default(soap*) default initialize members
/// - int soap_read__ns4__ZoneProjectionStructure_Features(soap*, _ns4__ZoneProjectionStructure_Features*) deserialize from a stream
/// - int soap_write__ns4__ZoneProjectionStructure_Features(soap*, _ns4__ZoneProjectionStructure_Features*) serialize to a stream
/// - _ns4__ZoneProjectionStructure_Features* _ns4__ZoneProjectionStructure_Features::soap_dup(soap*) returns deep copy of _ns4__ZoneProjectionStructure_Features, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__ZoneProjectionStructure_Features::soap_del() deep deletes _ns4__ZoneProjectionStructure_Features data members, use only after _ns4__ZoneProjectionStructure_Features::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns4__ZoneProjectionStructure_Features
    {
/// <PRE><BLOCKQUOTE>
///   Identifier of FEATURE in a GIS data system.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__FeatureRefStructure* of length 1..unbounded.
    std::vector<ns4__FeatureRefStructure*> GisFeatureRef                  1;
    }                                   *Features                       0;	///< Optional element.
    END OF INHERITED FROM ns4__AbstractProjection */
/// <PRE><BLOCKQUOTE>
///   Boundary line of Zone as an ordered set of points.
/// </BLOCKQUOTE></PRE>
/// Vector of Boundary of length 1..unbounded.
    std::vector<
/// class _ns4__ZoneProjectionStructure_Boundary operations:
/// - _ns4__ZoneProjectionStructure_Boundary* soap_new__ns4__ZoneProjectionStructure_Boundary(soap*) allocate and default initialize
/// - _ns4__ZoneProjectionStructure_Boundary* soap_new__ns4__ZoneProjectionStructure_Boundary(soap*, int num) allocate array and default initialize values
/// - _ns4__ZoneProjectionStructure_Boundary* soap_new_req__ns4__ZoneProjectionStructure_Boundary(soap*, ...) allocate, set required members
/// - _ns4__ZoneProjectionStructure_Boundary* soap_new_set__ns4__ZoneProjectionStructure_Boundary(soap*, ...) allocate, set all public members
/// - _ns4__ZoneProjectionStructure_Boundary::soap_default(soap*) default initialize members
/// - int soap_read__ns4__ZoneProjectionStructure_Boundary(soap*, _ns4__ZoneProjectionStructure_Boundary*) deserialize from a stream
/// - int soap_write__ns4__ZoneProjectionStructure_Boundary(soap*, _ns4__ZoneProjectionStructure_Boundary*) serialize to a stream
/// - _ns4__ZoneProjectionStructure_Boundary* _ns4__ZoneProjectionStructure_Boundary::soap_dup(soap*) returns deep copy of _ns4__ZoneProjectionStructure_Boundary, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__ZoneProjectionStructure_Boundary::soap_del() deep deletes _ns4__ZoneProjectionStructure_Boundary data members, use only after _ns4__ZoneProjectionStructure_Boundary::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns4__ZoneProjectionStructure_Boundary
    {
/// <PRE><BLOCKQUOTE>
///   Points may be defined in tagged format or using GM coordinates element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__PointProjectionStructure* element refs of length 3..unbounded.
    std::vector<ns4__PointProjectionStructure*> PointProjection                3;
    }>                                   Boundary                       1;
};

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":Extensions
/// <PRE><BLOCKQUOTE>
///   Arbitrary extensions.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.ifopt.org.uk/ifopt":Extensions is a complexType with complexContent extension of XSD type xs:anyType.
///
/// class _ns4__Extensions operations:
/// - _ns4__Extensions* soap_new__ns4__Extensions(soap*) allocate and default initialize
/// - _ns4__Extensions* soap_new__ns4__Extensions(soap*, int num) allocate array and default initialize values
/// - _ns4__Extensions* soap_new_req__ns4__Extensions(soap*, ...) allocate, set required members
/// - _ns4__Extensions* soap_new_set__ns4__Extensions(soap*, ...) allocate, set all public members
/// - _ns4__Extensions::soap_default(soap*) default initialize members
/// - int soap_read__ns4__Extensions(soap*, _ns4__Extensions*) deserialize from a stream
/// - int soap_write__ns4__Extensions(soap*, _ns4__Extensions*) serialize to a stream
/// - _ns4__Extensions* _ns4__Extensions::soap_dup(soap*) returns deep copy of _ns4__Extensions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__Extensions::soap_del() deep deletes _ns4__Extensions data members, use only after _ns4__Extensions::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns4__Extensions : public xsd__anyType
{ public:
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCLinearByCode is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLinear.
///
/// class ns5__AlertCLinearByCode operations:
/// - ns5__AlertCLinearByCode* soap_new_ns5__AlertCLinearByCode(soap*) allocate and default initialize
/// - ns5__AlertCLinearByCode* soap_new_ns5__AlertCLinearByCode(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCLinearByCode* soap_new_req_ns5__AlertCLinearByCode(soap*, ...) allocate, set required members
/// - ns5__AlertCLinearByCode* soap_new_set_ns5__AlertCLinearByCode(soap*, ...) allocate, set all public members
/// - ns5__AlertCLinearByCode::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCLinearByCode(soap*, ns5__AlertCLinearByCode*) deserialize from a stream
/// - int soap_write_ns5__AlertCLinearByCode(soap*, ns5__AlertCLinearByCode*) serialize to a stream
/// - ns5__AlertCLinearByCode* ns5__AlertCLinearByCode::soap_dup(soap*) returns deep copy of ns5__AlertCLinearByCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCLinearByCode::soap_del() deep deletes ns5__AlertCLinearByCode data members, use only after ns5__AlertCLinearByCode::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCLinearByCode : public ns5__AlertCLinear
{ public:
/*  INHERITED FROM ns5__AlertCLinear:
/// Element "alertCLocationCountryCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationCountryCode      1;	///< Required element.
/// Element "alertCLocationTableNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableNumber      1;	///< Required element.
/// Element "alertCLocationTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableVersion     1;	///< Required element.
/// Element "alertCLinearExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCLinearExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__AlertCLinear */
/// Element "alertCDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCDirection.
    ns5__AlertCDirection*                alertCDirection                1;	///< Required element.
/// Element "locationCodeForLinearLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLocation.
    ns5__AlertCLocation*                 locationCodeForLinearLocation  1;	///< Required element.
/// Element "alertCLinearByCodeExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCLinearByCodeExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod2Linear is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLinear.
///
/// class ns5__AlertCMethod2Linear operations:
/// - ns5__AlertCMethod2Linear* soap_new_ns5__AlertCMethod2Linear(soap*) allocate and default initialize
/// - ns5__AlertCMethod2Linear* soap_new_ns5__AlertCMethod2Linear(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCMethod2Linear* soap_new_req_ns5__AlertCMethod2Linear(soap*, ...) allocate, set required members
/// - ns5__AlertCMethod2Linear* soap_new_set_ns5__AlertCMethod2Linear(soap*, ...) allocate, set all public members
/// - ns5__AlertCMethod2Linear::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCMethod2Linear(soap*, ns5__AlertCMethod2Linear*) deserialize from a stream
/// - int soap_write_ns5__AlertCMethod2Linear(soap*, ns5__AlertCMethod2Linear*) serialize to a stream
/// - ns5__AlertCMethod2Linear* ns5__AlertCMethod2Linear::soap_dup(soap*) returns deep copy of ns5__AlertCMethod2Linear, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCMethod2Linear::soap_del() deep deletes ns5__AlertCMethod2Linear data members, use only after ns5__AlertCMethod2Linear::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCMethod2Linear : public ns5__AlertCLinear
{ public:
/*  INHERITED FROM ns5__AlertCLinear:
/// Element "alertCLocationCountryCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationCountryCode      1;	///< Required element.
/// Element "alertCLocationTableNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableNumber      1;	///< Required element.
/// Element "alertCLocationTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableVersion     1;	///< Required element.
/// Element "alertCLinearExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCLinearExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__AlertCLinear */
/// Element "alertCDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCDirection.
    ns5__AlertCDirection*                alertCDirection                1;	///< Required element.
/// Element "alertCMethod2PrimaryPointLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod2PrimaryPointLocation.
    ns5__AlertCMethod2PrimaryPointLocation*  alertCMethod2PrimaryPointLocation 1;	///< Required element.
/// Element "alertCMethod2SecondaryPointLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod2SecondaryPointLocation.
    ns5__AlertCMethod2SecondaryPointLocation*  alertCMethod2SecondaryPointLocation 1;	///< Required element.
/// Element "alertCMethod2LinearExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCMethod2LinearExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod2Point is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCPoint.
///
/// class ns5__AlertCMethod2Point operations:
/// - ns5__AlertCMethod2Point* soap_new_ns5__AlertCMethod2Point(soap*) allocate and default initialize
/// - ns5__AlertCMethod2Point* soap_new_ns5__AlertCMethod2Point(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCMethod2Point* soap_new_req_ns5__AlertCMethod2Point(soap*, ...) allocate, set required members
/// - ns5__AlertCMethod2Point* soap_new_set_ns5__AlertCMethod2Point(soap*, ...) allocate, set all public members
/// - ns5__AlertCMethod2Point::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCMethod2Point(soap*, ns5__AlertCMethod2Point*) deserialize from a stream
/// - int soap_write_ns5__AlertCMethod2Point(soap*, ns5__AlertCMethod2Point*) serialize to a stream
/// - ns5__AlertCMethod2Point* ns5__AlertCMethod2Point::soap_dup(soap*) returns deep copy of ns5__AlertCMethod2Point, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCMethod2Point::soap_del() deep deletes ns5__AlertCMethod2Point data members, use only after ns5__AlertCMethod2Point::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCMethod2Point : public ns5__AlertCPoint
{ public:
/*  INHERITED FROM ns5__AlertCPoint:
/// Element "alertCLocationCountryCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationCountryCode      1;	///< Required element.
/// Element "alertCLocationTableNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableNumber      1;	///< Required element.
/// Element "alertCLocationTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableVersion     1;	///< Required element.
/// Element "alertCPointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCPointExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__AlertCPoint */
/// Element "alertCDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCDirection.
    ns5__AlertCDirection*                alertCDirection                1;	///< Required element.
/// Element "alertCMethod2PrimaryPointLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod2PrimaryPointLocation.
    ns5__AlertCMethod2PrimaryPointLocation*  alertCMethod2PrimaryPointLocation 1;	///< Required element.
/// Element "alertCMethod2PointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCMethod2PointExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod4Linear is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLinear.
///
/// class ns5__AlertCMethod4Linear operations:
/// - ns5__AlertCMethod4Linear* soap_new_ns5__AlertCMethod4Linear(soap*) allocate and default initialize
/// - ns5__AlertCMethod4Linear* soap_new_ns5__AlertCMethod4Linear(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCMethod4Linear* soap_new_req_ns5__AlertCMethod4Linear(soap*, ...) allocate, set required members
/// - ns5__AlertCMethod4Linear* soap_new_set_ns5__AlertCMethod4Linear(soap*, ...) allocate, set all public members
/// - ns5__AlertCMethod4Linear::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCMethod4Linear(soap*, ns5__AlertCMethod4Linear*) deserialize from a stream
/// - int soap_write_ns5__AlertCMethod4Linear(soap*, ns5__AlertCMethod4Linear*) serialize to a stream
/// - ns5__AlertCMethod4Linear* ns5__AlertCMethod4Linear::soap_dup(soap*) returns deep copy of ns5__AlertCMethod4Linear, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCMethod4Linear::soap_del() deep deletes ns5__AlertCMethod4Linear data members, use only after ns5__AlertCMethod4Linear::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCMethod4Linear : public ns5__AlertCLinear
{ public:
/*  INHERITED FROM ns5__AlertCLinear:
/// Element "alertCLocationCountryCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationCountryCode      1;	///< Required element.
/// Element "alertCLocationTableNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableNumber      1;	///< Required element.
/// Element "alertCLocationTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableVersion     1;	///< Required element.
/// Element "alertCLinearExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCLinearExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__AlertCLinear */
/// Element "alertCDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCDirection.
    ns5__AlertCDirection*                alertCDirection                1;	///< Required element.
/// Element "alertCMethod4PrimaryPointLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod4PrimaryPointLocation.
    ns5__AlertCMethod4PrimaryPointLocation*  alertCMethod4PrimaryPointLocation 1;	///< Required element.
/// Element "alertCMethod4SecondaryPointLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod4SecondaryPointLocation.
    ns5__AlertCMethod4SecondaryPointLocation*  alertCMethod4SecondaryPointLocation 1;	///< Required element.
/// Element "alertCMethod4LinearExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCMethod4LinearExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod4Point is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCPoint.
///
/// class ns5__AlertCMethod4Point operations:
/// - ns5__AlertCMethod4Point* soap_new_ns5__AlertCMethod4Point(soap*) allocate and default initialize
/// - ns5__AlertCMethod4Point* soap_new_ns5__AlertCMethod4Point(soap*, int num) allocate array and default initialize values
/// - ns5__AlertCMethod4Point* soap_new_req_ns5__AlertCMethod4Point(soap*, ...) allocate, set required members
/// - ns5__AlertCMethod4Point* soap_new_set_ns5__AlertCMethod4Point(soap*, ...) allocate, set all public members
/// - ns5__AlertCMethod4Point::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AlertCMethod4Point(soap*, ns5__AlertCMethod4Point*) deserialize from a stream
/// - int soap_write_ns5__AlertCMethod4Point(soap*, ns5__AlertCMethod4Point*) serialize to a stream
/// - ns5__AlertCMethod4Point* ns5__AlertCMethod4Point::soap_dup(soap*) returns deep copy of ns5__AlertCMethod4Point, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AlertCMethod4Point::soap_del() deep deletes ns5__AlertCMethod4Point data members, use only after ns5__AlertCMethod4Point::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AlertCMethod4Point : public ns5__AlertCPoint
{ public:
/*  INHERITED FROM ns5__AlertCPoint:
/// Element "alertCLocationCountryCode" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationCountryCode      1;	///< Required element.
/// Element "alertCLocationTableNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableNumber      1;	///< Required element.
/// Element "alertCLocationTableVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          alertCLocationTableVersion     1;	///< Required element.
/// Element "alertCPointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCPointExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__AlertCPoint */
/// Element "alertCDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCDirection.
    ns5__AlertCDirection*                alertCDirection                1;	///< Required element.
/// Element "alertCMethod4PrimaryPointLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCMethod4PrimaryPointLocation.
    ns5__AlertCMethod4PrimaryPointLocation*  alertCMethod4PrimaryPointLocation 1;	///< Required element.
/// Element "alertCMethod4PointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  alertCMethod4PointExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Area is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Location.
///
/// class ns5__Area operations:
/// - ns5__Area* soap_new_ns5__Area(soap*) allocate and default initialize
/// - ns5__Area* soap_new_ns5__Area(soap*, int num) allocate array and default initialize values
/// - ns5__Area* soap_new_req_ns5__Area(soap*, ...) allocate, set required members
/// - ns5__Area* soap_new_set_ns5__Area(soap*, ...) allocate, set all public members
/// - ns5__Area::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Area(soap*, ns5__Area*) deserialize from a stream
/// - int soap_write_ns5__Area(soap*, ns5__Area*) serialize to a stream
/// - ns5__Area* ns5__Area::soap_dup(soap*) returns deep copy of ns5__Area, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Area::soap_del() deep deletes ns5__Area data members, use only after ns5__Area::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Area : public ns5__Location
{ public:
/*  INHERITED FROM ns5__Location:
/// Vector of ns5__ExternalReferencing* of length 0..unbounded.
    std::vector<ns5__ExternalReferencing*> externalReferencing            0;
/// Element "locationForDisplay" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               locationForDisplay             0;	///< Optional element.
/// Element "locationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationExtension              0;	///< Optional element.
    END OF INHERITED FROM ns5__Location */
/// Element "alertCArea" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCArea.
    ns5__AlertCArea*                     alertCArea                     0;	///< Optional element.
/// Element "tpegAreaLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegAreaLocation.
    ns5__TpegAreaLocation*               tpegAreaLocation               0;	///< Optional element.
/// Element "areaExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  areaExtension                  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AreaDestination is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Destination.
///
/// class ns5__AreaDestination operations:
/// - ns5__AreaDestination* soap_new_ns5__AreaDestination(soap*) allocate and default initialize
/// - ns5__AreaDestination* soap_new_ns5__AreaDestination(soap*, int num) allocate array and default initialize values
/// - ns5__AreaDestination* soap_new_req_ns5__AreaDestination(soap*, ...) allocate, set required members
/// - ns5__AreaDestination* soap_new_set_ns5__AreaDestination(soap*, ...) allocate, set all public members
/// - ns5__AreaDestination::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AreaDestination(soap*, ns5__AreaDestination*) deserialize from a stream
/// - int soap_write_ns5__AreaDestination(soap*, ns5__AreaDestination*) serialize to a stream
/// - ns5__AreaDestination* ns5__AreaDestination::soap_dup(soap*) returns deep copy of ns5__AreaDestination, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AreaDestination::soap_del() deep deletes ns5__AreaDestination data members, use only after ns5__AreaDestination::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AreaDestination : public ns5__Destination
{ public:
/*  INHERITED FROM ns5__Destination:
/// Element "destinationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  destinationExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__Destination */
/// Element "area" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Area.
    ns5__Area*                           area                           1;	///< Required element.
/// Element "areaDestinationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  areaDestinationExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ElaboratedDataPublication is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication.
///
/// class ns5__ElaboratedDataPublication operations:
/// - ns5__ElaboratedDataPublication* soap_new_ns5__ElaboratedDataPublication(soap*) allocate and default initialize
/// - ns5__ElaboratedDataPublication* soap_new_ns5__ElaboratedDataPublication(soap*, int num) allocate array and default initialize values
/// - ns5__ElaboratedDataPublication* soap_new_req_ns5__ElaboratedDataPublication(soap*, ...) allocate, set required members
/// - ns5__ElaboratedDataPublication* soap_new_set_ns5__ElaboratedDataPublication(soap*, ...) allocate, set all public members
/// - ns5__ElaboratedDataPublication::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ElaboratedDataPublication(soap*, ns5__ElaboratedDataPublication*) deserialize from a stream
/// - int soap_write_ns5__ElaboratedDataPublication(soap*, ns5__ElaboratedDataPublication*) serialize to a stream
/// - ns5__ElaboratedDataPublication* ns5__ElaboratedDataPublication::soap_dup(soap*) returns deep copy of ns5__ElaboratedDataPublication, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ElaboratedDataPublication::soap_del() deep deletes ns5__ElaboratedDataPublication data members, use only after ns5__ElaboratedDataPublication::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ElaboratedDataPublication : public ns5__PayloadPublication
{ public:
/*  INHERITED FROM ns5__PayloadPublication:
/// Element "feedDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             feedDescription                0;	///< Optional element.
/// Element "feedType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         feedType                       0;	///< Optional element.
/// Element "publicationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        publicationTime                1;	///< Required element.
/// Element "publicationCreator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        publicationCreator             1;	///< Required element.
/// Element "payloadPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  payloadPublicationExtension    0;	///< Optional element.
/// Attribute "lang" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Language.
   @ns5__Language                        lang                           1;	///< Required attribute.
    END OF INHERITED FROM ns5__PayloadPublication */
/// Element "forecastDefault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        forecastDefault                0;	///< Optional element.
/// Element "periodDefault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        periodDefault                  0;	///< Optional element.
/// Element "timeDefault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       timeDefault                    0;	///< Optional element.
/// Element "headerInformation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":HeaderInformation.
    ns5__HeaderInformation*              headerInformation              1;	///< Required element.
/// Element "referenceSettings" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ReferenceSettings.
    ns5__ReferenceSettings*              referenceSettings              0;	///< Optional element.
/// Vector of ns5__ElaboratedData* of length 1..unbounded.
    std::vector<ns5__ElaboratedData*   > elaboratedData                 1;
/// Element "elaboratedDataPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  elaboratedDataPublicationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GenericPublication is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication.
///
/// class ns5__GenericPublication operations:
/// - ns5__GenericPublication* soap_new_ns5__GenericPublication(soap*) allocate and default initialize
/// - ns5__GenericPublication* soap_new_ns5__GenericPublication(soap*, int num) allocate array and default initialize values
/// - ns5__GenericPublication* soap_new_req_ns5__GenericPublication(soap*, ...) allocate, set required members
/// - ns5__GenericPublication* soap_new_set_ns5__GenericPublication(soap*, ...) allocate, set all public members
/// - ns5__GenericPublication::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GenericPublication(soap*, ns5__GenericPublication*) deserialize from a stream
/// - int soap_write_ns5__GenericPublication(soap*, ns5__GenericPublication*) serialize to a stream
/// - ns5__GenericPublication* ns5__GenericPublication::soap_dup(soap*) returns deep copy of ns5__GenericPublication, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GenericPublication::soap_del() deep deletes ns5__GenericPublication data members, use only after ns5__GenericPublication::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GenericPublication : public ns5__PayloadPublication
{ public:
/*  INHERITED FROM ns5__PayloadPublication:
/// Element "feedDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             feedDescription                0;	///< Optional element.
/// Element "feedType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         feedType                       0;	///< Optional element.
/// Element "publicationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        publicationTime                1;	///< Required element.
/// Element "publicationCreator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        publicationCreator             1;	///< Required element.
/// Element "payloadPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  payloadPublicationExtension    0;	///< Optional element.
/// Attribute "lang" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Language.
   @ns5__Language                        lang                           1;	///< Required attribute.
    END OF INHERITED FROM ns5__PayloadPublication */
/// Element "genericPublicationName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          genericPublicationName         1;	///< Required element.
/// Element "genericPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  genericPublicationExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GenericSituationRecord is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SituationRecord.
///
/// class ns5__GenericSituationRecord operations:
/// - ns5__GenericSituationRecord* soap_new_ns5__GenericSituationRecord(soap*) allocate and default initialize
/// - ns5__GenericSituationRecord* soap_new_ns5__GenericSituationRecord(soap*, int num) allocate array and default initialize values
/// - ns5__GenericSituationRecord* soap_new_req_ns5__GenericSituationRecord(soap*, ...) allocate, set required members
/// - ns5__GenericSituationRecord* soap_new_set_ns5__GenericSituationRecord(soap*, ...) allocate, set all public members
/// - ns5__GenericSituationRecord::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GenericSituationRecord(soap*, ns5__GenericSituationRecord*) deserialize from a stream
/// - int soap_write_ns5__GenericSituationRecord(soap*, ns5__GenericSituationRecord*) serialize to a stream
/// - ns5__GenericSituationRecord* ns5__GenericSituationRecord::soap_dup(soap*) returns deep copy of ns5__GenericSituationRecord, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GenericSituationRecord::soap_del() deep deletes ns5__GenericSituationRecord data members, use only after ns5__GenericSituationRecord::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GenericSituationRecord : public ns5__SituationRecord
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/// Element "genericSituationRecordName" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          genericSituationRecordName     1;	///< Required element.
/// Element "genericSituationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  genericSituationRecordExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocationsByReference is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
///
/// class ns5__GroupOfLocationsByReference operations:
/// - ns5__GroupOfLocationsByReference* soap_new_ns5__GroupOfLocationsByReference(soap*) allocate and default initialize
/// - ns5__GroupOfLocationsByReference* soap_new_ns5__GroupOfLocationsByReference(soap*, int num) allocate array and default initialize values
/// - ns5__GroupOfLocationsByReference* soap_new_req_ns5__GroupOfLocationsByReference(soap*, ...) allocate, set required members
/// - ns5__GroupOfLocationsByReference* soap_new_set_ns5__GroupOfLocationsByReference(soap*, ...) allocate, set all public members
/// - ns5__GroupOfLocationsByReference::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GroupOfLocationsByReference(soap*, ns5__GroupOfLocationsByReference*) deserialize from a stream
/// - int soap_write_ns5__GroupOfLocationsByReference(soap*, ns5__GroupOfLocationsByReference*) serialize to a stream
/// - ns5__GroupOfLocationsByReference* ns5__GroupOfLocationsByReference::soap_dup(soap*) returns deep copy of ns5__GroupOfLocationsByReference, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GroupOfLocationsByReference::soap_del() deep deletes ns5__GroupOfLocationsByReference data members, use only after ns5__GroupOfLocationsByReference::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GroupOfLocationsByReference : public ns5__GroupOfLocations
{ public:
/*  INHERITED FROM ns5__GroupOfLocations:
/// Element "groupOfLocationsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  groupOfLocationsExtension      0;	///< Optional element.
    END OF INHERITED FROM ns5__GroupOfLocations */
/// Element "predefinedLocationSetReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference                       predefinedLocationSetReference 1;	///< Required element.
/// Element "groupOfLocationsByReferenceExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  groupOfLocationsByReferenceExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GroupOfNonOrderedLocations is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
///
/// class ns5__GroupOfNonOrderedLocations operations:
/// - ns5__GroupOfNonOrderedLocations* soap_new_ns5__GroupOfNonOrderedLocations(soap*) allocate and default initialize
/// - ns5__GroupOfNonOrderedLocations* soap_new_ns5__GroupOfNonOrderedLocations(soap*, int num) allocate array and default initialize values
/// - ns5__GroupOfNonOrderedLocations* soap_new_req_ns5__GroupOfNonOrderedLocations(soap*, ...) allocate, set required members
/// - ns5__GroupOfNonOrderedLocations* soap_new_set_ns5__GroupOfNonOrderedLocations(soap*, ...) allocate, set all public members
/// - ns5__GroupOfNonOrderedLocations::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GroupOfNonOrderedLocations(soap*, ns5__GroupOfNonOrderedLocations*) deserialize from a stream
/// - int soap_write_ns5__GroupOfNonOrderedLocations(soap*, ns5__GroupOfNonOrderedLocations*) serialize to a stream
/// - ns5__GroupOfNonOrderedLocations* ns5__GroupOfNonOrderedLocations::soap_dup(soap*) returns deep copy of ns5__GroupOfNonOrderedLocations, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GroupOfNonOrderedLocations::soap_del() deep deletes ns5__GroupOfNonOrderedLocations data members, use only after ns5__GroupOfNonOrderedLocations::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GroupOfNonOrderedLocations : public ns5__GroupOfLocations
{ public:
/*  INHERITED FROM ns5__GroupOfLocations:
/// Element "groupOfLocationsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  groupOfLocationsExtension      0;	///< Optional element.
    END OF INHERITED FROM ns5__GroupOfLocations */
/// Vector of ns5__Location* of length 1..unbounded.
    std::vector<ns5__Location*         > locationContainedInGroup       1;
/// Element "groupOfNonOrderedLocationsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  groupOfNonOrderedLocationsExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Itinerary is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
///
/// class ns5__Itinerary operations:
/// - ns5__Itinerary* soap_new_ns5__Itinerary(soap*) allocate and default initialize
/// - ns5__Itinerary* soap_new_ns5__Itinerary(soap*, int num) allocate array and default initialize values
/// - ns5__Itinerary* soap_new_req_ns5__Itinerary(soap*, ...) allocate, set required members
/// - ns5__Itinerary* soap_new_set_ns5__Itinerary(soap*, ...) allocate, set all public members
/// - ns5__Itinerary::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Itinerary(soap*, ns5__Itinerary*) deserialize from a stream
/// - int soap_write_ns5__Itinerary(soap*, ns5__Itinerary*) serialize to a stream
/// - ns5__Itinerary* ns5__Itinerary::soap_dup(soap*) returns deep copy of ns5__Itinerary, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Itinerary::soap_del() deep deletes ns5__Itinerary data members, use only after ns5__Itinerary::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Itinerary : public ns5__GroupOfLocations
{ public:
/*  INHERITED FROM ns5__GroupOfLocations:
/// Element "groupOfLocationsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  groupOfLocationsExtension      0;	///< Optional element.
    END OF INHERITED FROM ns5__GroupOfLocations */
/// Vector of locationContainedInItinerary of length 1..unbounded.
    std::vector<
/// class _ns5__Itinerary_locationContainedInItinerary operations:
/// - _ns5__Itinerary_locationContainedInItinerary* soap_new__ns5__Itinerary_locationContainedInItinerary(soap*) allocate and default initialize
/// - _ns5__Itinerary_locationContainedInItinerary* soap_new__ns5__Itinerary_locationContainedInItinerary(soap*, int num) allocate array and default initialize values
/// - _ns5__Itinerary_locationContainedInItinerary* soap_new_req__ns5__Itinerary_locationContainedInItinerary(soap*, ...) allocate, set required members
/// - _ns5__Itinerary_locationContainedInItinerary* soap_new_set__ns5__Itinerary_locationContainedInItinerary(soap*, ...) allocate, set all public members
/// - _ns5__Itinerary_locationContainedInItinerary::soap_default(soap*) default initialize members
/// - int soap_read__ns5__Itinerary_locationContainedInItinerary(soap*, _ns5__Itinerary_locationContainedInItinerary*) deserialize from a stream
/// - int soap_write__ns5__Itinerary_locationContainedInItinerary(soap*, _ns5__Itinerary_locationContainedInItinerary*) serialize to a stream
/// - _ns5__Itinerary_locationContainedInItinerary* _ns5__Itinerary_locationContainedInItinerary::soap_dup(soap*) returns deep copy of _ns5__Itinerary_locationContainedInItinerary, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns5__Itinerary_locationContainedInItinerary::soap_del() deep deletes _ns5__Itinerary_locationContainedInItinerary data members, use only after _ns5__Itinerary_locationContainedInItinerary::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns5__Itinerary_locationContainedInItinerary
    {
/// INHERITED FROM ns5__Location:
/// Vector of ns5__ExternalReferencing* of length 0..unbounded.
    std::vector<ns5__ExternalReferencing*> externalReferencing            0;
/// Element "locationForDisplay" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               locationForDisplay             0;	///< Optional element.
/// Element "locationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationExtension              0;	///< Optional element.
//  END OF INHERITED FROM ns5__Location
/// Attribute "index" of XSD type xs:int.
   @int                                  index                          1;	///< Required attribute.
    }>                                   locationContainedInItinerary   1;
/// Vector of ns5__Destination* of length 0..unbounded.
    std::vector<ns5__Destination*      > routeDestination               0;
/// Element "itineraryExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  itineraryExtension             0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":LocationByReference is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Location.
///
/// class ns5__LocationByReference operations:
/// - ns5__LocationByReference* soap_new_ns5__LocationByReference(soap*) allocate and default initialize
/// - ns5__LocationByReference* soap_new_ns5__LocationByReference(soap*, int num) allocate array and default initialize values
/// - ns5__LocationByReference* soap_new_req_ns5__LocationByReference(soap*, ...) allocate, set required members
/// - ns5__LocationByReference* soap_new_set_ns5__LocationByReference(soap*, ...) allocate, set all public members
/// - ns5__LocationByReference::soap_default(soap*) default initialize members
/// - int soap_read_ns5__LocationByReference(soap*, ns5__LocationByReference*) deserialize from a stream
/// - int soap_write_ns5__LocationByReference(soap*, ns5__LocationByReference*) serialize to a stream
/// - ns5__LocationByReference* ns5__LocationByReference::soap_dup(soap*) returns deep copy of ns5__LocationByReference, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__LocationByReference::soap_del() deep deletes ns5__LocationByReference data members, use only after ns5__LocationByReference::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__LocationByReference : public ns5__Location
{ public:
/*  INHERITED FROM ns5__Location:
/// Vector of ns5__ExternalReferencing* of length 0..unbounded.
    std::vector<ns5__ExternalReferencing*> externalReferencing            0;
/// Element "locationForDisplay" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               locationForDisplay             0;	///< Optional element.
/// Element "locationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationExtension              0;	///< Optional element.
    END OF INHERITED FROM ns5__Location */
/// Element "predefinedLocationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference                       predefinedLocationReference    1;	///< Required element.
/// Element "locationByReferenceExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationByReferenceExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ManagedCause is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
///
/// class ns5__ManagedCause operations:
/// - ns5__ManagedCause* soap_new_ns5__ManagedCause(soap*) allocate and default initialize
/// - ns5__ManagedCause* soap_new_ns5__ManagedCause(soap*, int num) allocate array and default initialize values
/// - ns5__ManagedCause* soap_new_req_ns5__ManagedCause(soap*, ...) allocate, set required members
/// - ns5__ManagedCause* soap_new_set_ns5__ManagedCause(soap*, ...) allocate, set all public members
/// - ns5__ManagedCause::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ManagedCause(soap*, ns5__ManagedCause*) deserialize from a stream
/// - int soap_write_ns5__ManagedCause(soap*, ns5__ManagedCause*) serialize to a stream
/// - ns5__ManagedCause* ns5__ManagedCause::soap_dup(soap*) returns deep copy of ns5__ManagedCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ManagedCause::soap_del() deep deletes ns5__ManagedCause data members, use only after ns5__ManagedCause::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ManagedCause : public ns5__Cause
{ public:
/*  INHERITED FROM ns5__Cause:
/// Element "causeExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  causeExtension                 0;	///< Optional element.
    END OF INHERITED FROM ns5__Cause */
/// Element "managedCause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference*                      managedCause                   0;	///< Optional element.
/// Element "managedCauseExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  managedCauseExtension          0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MeasuredDataPublication is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication.
///
/// class ns5__MeasuredDataPublication operations:
/// - ns5__MeasuredDataPublication* soap_new_ns5__MeasuredDataPublication(soap*) allocate and default initialize
/// - ns5__MeasuredDataPublication* soap_new_ns5__MeasuredDataPublication(soap*, int num) allocate array and default initialize values
/// - ns5__MeasuredDataPublication* soap_new_req_ns5__MeasuredDataPublication(soap*, ...) allocate, set required members
/// - ns5__MeasuredDataPublication* soap_new_set_ns5__MeasuredDataPublication(soap*, ...) allocate, set all public members
/// - ns5__MeasuredDataPublication::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MeasuredDataPublication(soap*, ns5__MeasuredDataPublication*) deserialize from a stream
/// - int soap_write_ns5__MeasuredDataPublication(soap*, ns5__MeasuredDataPublication*) serialize to a stream
/// - ns5__MeasuredDataPublication* ns5__MeasuredDataPublication::soap_dup(soap*) returns deep copy of ns5__MeasuredDataPublication, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MeasuredDataPublication::soap_del() deep deletes ns5__MeasuredDataPublication data members, use only after ns5__MeasuredDataPublication::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MeasuredDataPublication : public ns5__PayloadPublication
{ public:
/*  INHERITED FROM ns5__PayloadPublication:
/// Element "feedDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             feedDescription                0;	///< Optional element.
/// Element "feedType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         feedType                       0;	///< Optional element.
/// Element "publicationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        publicationTime                1;	///< Required element.
/// Element "publicationCreator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        publicationCreator             1;	///< Required element.
/// Element "payloadPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  payloadPublicationExtension    0;	///< Optional element.
/// Attribute "lang" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Language.
   @ns5__Language                        lang                           1;	///< Required attribute.
    END OF INHERITED FROM ns5__PayloadPublication */
/// Element "measurementSiteTableReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Reference.
    ns5__Reference                       measurementSiteTableReference  1;	///< Required element.
/// Element "headerInformation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":HeaderInformation.
    ns5__HeaderInformation*              headerInformation              1;	///< Required element.
/// Vector of ns5__SiteMeasurements* of length 1..unbounded.
    std::vector<ns5__SiteMeasurements* > siteMeasurements               1;
/// Element "measuredDataPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  measuredDataPublicationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MeasurementSiteTablePublication is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication.
///
/// class ns5__MeasurementSiteTablePublication operations:
/// - ns5__MeasurementSiteTablePublication* soap_new_ns5__MeasurementSiteTablePublication(soap*) allocate and default initialize
/// - ns5__MeasurementSiteTablePublication* soap_new_ns5__MeasurementSiteTablePublication(soap*, int num) allocate array and default initialize values
/// - ns5__MeasurementSiteTablePublication* soap_new_req_ns5__MeasurementSiteTablePublication(soap*, ...) allocate, set required members
/// - ns5__MeasurementSiteTablePublication* soap_new_set_ns5__MeasurementSiteTablePublication(soap*, ...) allocate, set all public members
/// - ns5__MeasurementSiteTablePublication::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MeasurementSiteTablePublication(soap*, ns5__MeasurementSiteTablePublication*) deserialize from a stream
/// - int soap_write_ns5__MeasurementSiteTablePublication(soap*, ns5__MeasurementSiteTablePublication*) serialize to a stream
/// - ns5__MeasurementSiteTablePublication* ns5__MeasurementSiteTablePublication::soap_dup(soap*) returns deep copy of ns5__MeasurementSiteTablePublication, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MeasurementSiteTablePublication::soap_del() deep deletes ns5__MeasurementSiteTablePublication data members, use only after ns5__MeasurementSiteTablePublication::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MeasurementSiteTablePublication : public ns5__PayloadPublication
{ public:
/*  INHERITED FROM ns5__PayloadPublication:
/// Element "feedDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             feedDescription                0;	///< Optional element.
/// Element "feedType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         feedType                       0;	///< Optional element.
/// Element "publicationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        publicationTime                1;	///< Required element.
/// Element "publicationCreator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        publicationCreator             1;	///< Required element.
/// Element "payloadPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  payloadPublicationExtension    0;	///< Optional element.
/// Attribute "lang" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Language.
   @ns5__Language                        lang                           1;	///< Required attribute.
    END OF INHERITED FROM ns5__PayloadPublication */
/// Element "headerInformation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":HeaderInformation.
    ns5__HeaderInformation*              headerInformation              1;	///< Required element.
/// Vector of ns5__MeasurementSiteTable* of length 1..unbounded.
    std::vector<ns5__MeasurementSiteTable*> measurementSiteTable           1;
/// Element "measurementSiteTablePublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  measurementSiteTablePublicationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":NetworkLocation is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Location.
///
/// class ns5__NetworkLocation operations:
/// - ns5__NetworkLocation* soap_new_ns5__NetworkLocation(soap*) allocate and default initialize
/// - ns5__NetworkLocation* soap_new_ns5__NetworkLocation(soap*, int num) allocate array and default initialize values
/// - ns5__NetworkLocation* soap_new_req_ns5__NetworkLocation(soap*, ...) allocate, set required members
/// - ns5__NetworkLocation* soap_new_set_ns5__NetworkLocation(soap*, ...) allocate, set all public members
/// - ns5__NetworkLocation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__NetworkLocation(soap*, ns5__NetworkLocation*) deserialize from a stream
/// - int soap_write_ns5__NetworkLocation(soap*, ns5__NetworkLocation*) serialize to a stream
/// - ns5__NetworkLocation* ns5__NetworkLocation::soap_dup(soap*) returns deep copy of ns5__NetworkLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__NetworkLocation::soap_del() deep deletes ns5__NetworkLocation data members, use only after ns5__NetworkLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__NetworkLocation : public ns5__Location
{ public:
/*  INHERITED FROM ns5__Location:
/// Vector of ns5__ExternalReferencing* of length 0..unbounded.
    std::vector<ns5__ExternalReferencing*> externalReferencing            0;
/// Element "locationForDisplay" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               locationForDisplay             0;	///< Optional element.
/// Element "locationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationExtension              0;	///< Optional element.
    END OF INHERITED FROM ns5__Location */
/// Element "supplementaryPositionalDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SupplementaryPositionalDescription.
    ns5__SupplementaryPositionalDescription*  supplementaryPositionalDescription 0;	///< Optional element.
/// Element "destination" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Destination.
    ns5__Destination*                    destination                    0;	///< Optional element.
/// Element "networkLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkLocationExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":NonManagedCause is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
///
/// class ns5__NonManagedCause operations:
/// - ns5__NonManagedCause* soap_new_ns5__NonManagedCause(soap*) allocate and default initialize
/// - ns5__NonManagedCause* soap_new_ns5__NonManagedCause(soap*, int num) allocate array and default initialize values
/// - ns5__NonManagedCause* soap_new_req_ns5__NonManagedCause(soap*, ...) allocate, set required members
/// - ns5__NonManagedCause* soap_new_set_ns5__NonManagedCause(soap*, ...) allocate, set all public members
/// - ns5__NonManagedCause::soap_default(soap*) default initialize members
/// - int soap_read_ns5__NonManagedCause(soap*, ns5__NonManagedCause*) deserialize from a stream
/// - int soap_write_ns5__NonManagedCause(soap*, ns5__NonManagedCause*) serialize to a stream
/// - ns5__NonManagedCause* ns5__NonManagedCause::soap_dup(soap*) returns deep copy of ns5__NonManagedCause, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__NonManagedCause::soap_del() deep deletes ns5__NonManagedCause data members, use only after ns5__NonManagedCause::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__NonManagedCause : public ns5__Cause
{ public:
/*  INHERITED FROM ns5__Cause:
/// Element "causeExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  causeExtension                 0;	///< Optional element.
    END OF INHERITED FROM ns5__Cause */
/// Element "causeDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             causeDescription               0;	///< Optional element.
/// Element "causeType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":CauseTypeEnum.
    enum ns5__CauseTypeEnum*             causeType                      0;	///< Optional element.
/// Element "nonManagedCauseExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  nonManagedCauseExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":NonRoadEventInformation is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SituationRecord.
///
/// class ns5__NonRoadEventInformation operations:
/// - ns5__NonRoadEventInformation* soap_new_ns5__NonRoadEventInformation(soap*) allocate and default initialize
/// - ns5__NonRoadEventInformation* soap_new_ns5__NonRoadEventInformation(soap*, int num) allocate array and default initialize values
/// - ns5__NonRoadEventInformation* soap_new_req_ns5__NonRoadEventInformation(soap*, ...) allocate, set required members
/// - ns5__NonRoadEventInformation* soap_new_set_ns5__NonRoadEventInformation(soap*, ...) allocate, set all public members
/// - ns5__NonRoadEventInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__NonRoadEventInformation(soap*, ns5__NonRoadEventInformation*) deserialize from a stream
/// - int soap_write_ns5__NonRoadEventInformation(soap*, ns5__NonRoadEventInformation*) serialize to a stream
/// - ns5__NonRoadEventInformation* ns5__NonRoadEventInformation::soap_dup(soap*) returns deep copy of ns5__NonRoadEventInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__NonRoadEventInformation::soap_del() deep deletes ns5__NonRoadEventInformation data members, use only after ns5__NonRoadEventInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__NonRoadEventInformation : public ns5__SituationRecord
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/// Element "nonRoadEventInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  nonRoadEventInformationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":OperatorAction is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SituationRecord.
///
/// class ns5__OperatorAction operations:
/// - ns5__OperatorAction* soap_new_ns5__OperatorAction(soap*) allocate and default initialize
/// - ns5__OperatorAction* soap_new_ns5__OperatorAction(soap*, int num) allocate array and default initialize values
/// - ns5__OperatorAction* soap_new_req_ns5__OperatorAction(soap*, ...) allocate, set required members
/// - ns5__OperatorAction* soap_new_set_ns5__OperatorAction(soap*, ...) allocate, set all public members
/// - ns5__OperatorAction::soap_default(soap*) default initialize members
/// - int soap_read_ns5__OperatorAction(soap*, ns5__OperatorAction*) deserialize from a stream
/// - int soap_write_ns5__OperatorAction(soap*, ns5__OperatorAction*) serialize to a stream
/// - ns5__OperatorAction* ns5__OperatorAction::soap_dup(soap*) returns deep copy of ns5__OperatorAction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__OperatorAction::soap_del() deep deletes ns5__OperatorAction data members, use only after ns5__OperatorAction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__OperatorAction : public ns5__SituationRecord
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PointDestination is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Destination.
///
/// class ns5__PointDestination operations:
/// - ns5__PointDestination* soap_new_ns5__PointDestination(soap*) allocate and default initialize
/// - ns5__PointDestination* soap_new_ns5__PointDestination(soap*, int num) allocate array and default initialize values
/// - ns5__PointDestination* soap_new_req_ns5__PointDestination(soap*, ...) allocate, set required members
/// - ns5__PointDestination* soap_new_set_ns5__PointDestination(soap*, ...) allocate, set all public members
/// - ns5__PointDestination::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PointDestination(soap*, ns5__PointDestination*) deserialize from a stream
/// - int soap_write_ns5__PointDestination(soap*, ns5__PointDestination*) serialize to a stream
/// - ns5__PointDestination* ns5__PointDestination::soap_dup(soap*) returns deep copy of ns5__PointDestination, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PointDestination::soap_del() deep deletes ns5__PointDestination data members, use only after ns5__PointDestination::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PointDestination : public ns5__Destination
{ public:
/*  INHERITED FROM ns5__Destination:
/// Element "destinationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  destinationExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__Destination */
/// Element "point" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Point.
    ns5__Point*                          point                          1;	///< Required element.
/// Element "pointDestinationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  pointDestinationExtension      0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PredefinedLocationsPublication is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication.
///
/// class ns5__PredefinedLocationsPublication operations:
/// - ns5__PredefinedLocationsPublication* soap_new_ns5__PredefinedLocationsPublication(soap*) allocate and default initialize
/// - ns5__PredefinedLocationsPublication* soap_new_ns5__PredefinedLocationsPublication(soap*, int num) allocate array and default initialize values
/// - ns5__PredefinedLocationsPublication* soap_new_req_ns5__PredefinedLocationsPublication(soap*, ...) allocate, set required members
/// - ns5__PredefinedLocationsPublication* soap_new_set_ns5__PredefinedLocationsPublication(soap*, ...) allocate, set all public members
/// - ns5__PredefinedLocationsPublication::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PredefinedLocationsPublication(soap*, ns5__PredefinedLocationsPublication*) deserialize from a stream
/// - int soap_write_ns5__PredefinedLocationsPublication(soap*, ns5__PredefinedLocationsPublication*) serialize to a stream
/// - ns5__PredefinedLocationsPublication* ns5__PredefinedLocationsPublication::soap_dup(soap*) returns deep copy of ns5__PredefinedLocationsPublication, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PredefinedLocationsPublication::soap_del() deep deletes ns5__PredefinedLocationsPublication data members, use only after ns5__PredefinedLocationsPublication::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PredefinedLocationsPublication : public ns5__PayloadPublication
{ public:
/*  INHERITED FROM ns5__PayloadPublication:
/// Element "feedDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             feedDescription                0;	///< Optional element.
/// Element "feedType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         feedType                       0;	///< Optional element.
/// Element "publicationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        publicationTime                1;	///< Required element.
/// Element "publicationCreator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        publicationCreator             1;	///< Required element.
/// Element "payloadPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  payloadPublicationExtension    0;	///< Optional element.
/// Attribute "lang" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Language.
   @ns5__Language                        lang                           1;	///< Required attribute.
    END OF INHERITED FROM ns5__PayloadPublication */
/// Element "headerInformation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":HeaderInformation.
    ns5__HeaderInformation*              headerInformation              1;	///< Required element.
/// Vector of ns5__PredefinedLocationSet* of length 1..unbounded.
    std::vector<ns5__PredefinedLocationSet*> predefinedLocationSet          1;
/// Element "predefinedLocationsPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  predefinedLocationsPublicationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SituationPublication is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication.
///
/// class ns5__SituationPublication operations:
/// - ns5__SituationPublication* soap_new_ns5__SituationPublication(soap*) allocate and default initialize
/// - ns5__SituationPublication* soap_new_ns5__SituationPublication(soap*, int num) allocate array and default initialize values
/// - ns5__SituationPublication* soap_new_req_ns5__SituationPublication(soap*, ...) allocate, set required members
/// - ns5__SituationPublication* soap_new_set_ns5__SituationPublication(soap*, ...) allocate, set all public members
/// - ns5__SituationPublication::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SituationPublication(soap*, ns5__SituationPublication*) deserialize from a stream
/// - int soap_write_ns5__SituationPublication(soap*, ns5__SituationPublication*) serialize to a stream
/// - ns5__SituationPublication* ns5__SituationPublication::soap_dup(soap*) returns deep copy of ns5__SituationPublication, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SituationPublication::soap_del() deep deletes ns5__SituationPublication data members, use only after ns5__SituationPublication::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SituationPublication : public ns5__PayloadPublication
{ public:
/*  INHERITED FROM ns5__PayloadPublication:
/// Element "feedDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             feedDescription                0;	///< Optional element.
/// Element "feedType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         feedType                       0;	///< Optional element.
/// Element "publicationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        publicationTime                1;	///< Required element.
/// Element "publicationCreator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        publicationCreator             1;	///< Required element.
/// Element "payloadPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  payloadPublicationExtension    0;	///< Optional element.
/// Attribute "lang" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Language.
   @ns5__Language                        lang                           1;	///< Required attribute.
    END OF INHERITED FROM ns5__PayloadPublication */
/// Vector of ns5__Situation* of length 0..unbounded.
    std::vector<ns5__Situation*        > situation                      0;
/// Element "situationPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationPublicationExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TimePeriodByHour is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TimePeriodOfDay.
///
/// class ns5__TimePeriodByHour operations:
/// - ns5__TimePeriodByHour* soap_new_ns5__TimePeriodByHour(soap*) allocate and default initialize
/// - ns5__TimePeriodByHour* soap_new_ns5__TimePeriodByHour(soap*, int num) allocate array and default initialize values
/// - ns5__TimePeriodByHour* soap_new_req_ns5__TimePeriodByHour(soap*, ...) allocate, set required members
/// - ns5__TimePeriodByHour* soap_new_set_ns5__TimePeriodByHour(soap*, ...) allocate, set all public members
/// - ns5__TimePeriodByHour::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TimePeriodByHour(soap*, ns5__TimePeriodByHour*) deserialize from a stream
/// - int soap_write_ns5__TimePeriodByHour(soap*, ns5__TimePeriodByHour*) serialize to a stream
/// - ns5__TimePeriodByHour* ns5__TimePeriodByHour::soap_dup(soap*) returns deep copy of ns5__TimePeriodByHour, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TimePeriodByHour::soap_del() deep deletes ns5__TimePeriodByHour data members, use only after ns5__TimePeriodByHour::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TimePeriodByHour : public ns5__TimePeriodOfDay
{ public:
/*  INHERITED FROM ns5__TimePeriodOfDay:
/// Element "timePeriodOfDayExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  timePeriodOfDayExtension       0;	///< Optional element.
    END OF INHERITED FROM ns5__TimePeriodOfDay */
/// Element "startTimeOfPeriod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Time.
    ns5__Time                            startTimeOfPeriod              1;	///< Required element.
/// Element "endTimeOfPeriod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Time.
    ns5__Time                            endTimeOfPeriod                1;	///< Required element.
/// Element "timePeriodByHourExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  timePeriodByHourExtension      0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegAreaDescriptor is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegDescriptor.
///
/// class ns5__TpegAreaDescriptor operations:
/// - ns5__TpegAreaDescriptor* soap_new_ns5__TpegAreaDescriptor(soap*) allocate and default initialize
/// - ns5__TpegAreaDescriptor* soap_new_ns5__TpegAreaDescriptor(soap*, int num) allocate array and default initialize values
/// - ns5__TpegAreaDescriptor* soap_new_req_ns5__TpegAreaDescriptor(soap*, ...) allocate, set required members
/// - ns5__TpegAreaDescriptor* soap_new_set_ns5__TpegAreaDescriptor(soap*, ...) allocate, set all public members
/// - ns5__TpegAreaDescriptor::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegAreaDescriptor(soap*, ns5__TpegAreaDescriptor*) deserialize from a stream
/// - int soap_write_ns5__TpegAreaDescriptor(soap*, ns5__TpegAreaDescriptor*) serialize to a stream
/// - ns5__TpegAreaDescriptor* ns5__TpegAreaDescriptor::soap_dup(soap*) returns deep copy of ns5__TpegAreaDescriptor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegAreaDescriptor::soap_del() deep deletes ns5__TpegAreaDescriptor data members, use only after ns5__TpegAreaDescriptor::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegAreaDescriptor : public ns5__TpegDescriptor
{ public:
/*  INHERITED FROM ns5__TpegDescriptor:
/// Element "descriptor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             descriptor                     1;	///< Required element.
/// Element "tpegDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegDescriptorExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegDescriptor */
/// Element "tpegAreaDescriptorType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc03AreaDescriptorSubtypeEnum.
    enum ns5__TpegLoc03AreaDescriptorSubtypeEnum  tpegAreaDescriptorType         1;	///< Required element.
/// Element "tpegAreaDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegAreaDescriptorExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegFramedPoint is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPointLocation.
///
/// class ns5__TpegFramedPoint operations:
/// - ns5__TpegFramedPoint* soap_new_ns5__TpegFramedPoint(soap*) allocate and default initialize
/// - ns5__TpegFramedPoint* soap_new_ns5__TpegFramedPoint(soap*, int num) allocate array and default initialize values
/// - ns5__TpegFramedPoint* soap_new_req_ns5__TpegFramedPoint(soap*, ...) allocate, set required members
/// - ns5__TpegFramedPoint* soap_new_set_ns5__TpegFramedPoint(soap*, ...) allocate, set all public members
/// - ns5__TpegFramedPoint::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegFramedPoint(soap*, ns5__TpegFramedPoint*) deserialize from a stream
/// - int soap_write_ns5__TpegFramedPoint(soap*, ns5__TpegFramedPoint*) serialize to a stream
/// - ns5__TpegFramedPoint* ns5__TpegFramedPoint::soap_dup(soap*) returns deep copy of ns5__TpegFramedPoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegFramedPoint::soap_del() deep deletes ns5__TpegFramedPoint data members, use only after ns5__TpegFramedPoint::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegFramedPoint : public ns5__TpegPointLocation
{ public:
/*  INHERITED FROM ns5__TpegPointLocation:
/// Element "tpegDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc02DirectionTypeEnum.
    enum ns5__TpegLoc02DirectionTypeEnum  tpegDirection                  1;	///< Required element.
/// Element "tpegPointLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointLocationExtension     0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegPointLocation */
/// Element "tpegFramedPointLocationType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01FramedPointLocationSubtypeEnum.
    enum ns5__TpegLoc01FramedPointLocationSubtypeEnum  tpegFramedPointLocationType    1;	///< Required element.
/// Element "framedPoint" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegNonJunctionPoint.
    ns5__TpegNonJunctionPoint*           framedPoint                    1;	///< Required element.
/// Element "to" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPoint.
    ns5__TpegPoint*                      to                             1;	///< Required element.
/// Element "from" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPoint.
    ns5__TpegPoint*                      from                           1;	///< Required element.
/// Element "tpegFramedPointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegFramedPointExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegGeometricArea is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegAreaLocation.
///
/// class ns5__TpegGeometricArea operations:
/// - ns5__TpegGeometricArea* soap_new_ns5__TpegGeometricArea(soap*) allocate and default initialize
/// - ns5__TpegGeometricArea* soap_new_ns5__TpegGeometricArea(soap*, int num) allocate array and default initialize values
/// - ns5__TpegGeometricArea* soap_new_req_ns5__TpegGeometricArea(soap*, ...) allocate, set required members
/// - ns5__TpegGeometricArea* soap_new_set_ns5__TpegGeometricArea(soap*, ...) allocate, set all public members
/// - ns5__TpegGeometricArea::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegGeometricArea(soap*, ns5__TpegGeometricArea*) deserialize from a stream
/// - int soap_write_ns5__TpegGeometricArea(soap*, ns5__TpegGeometricArea*) serialize to a stream
/// - ns5__TpegGeometricArea* ns5__TpegGeometricArea::soap_dup(soap*) returns deep copy of ns5__TpegGeometricArea, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegGeometricArea::soap_del() deep deletes ns5__TpegGeometricArea data members, use only after ns5__TpegGeometricArea::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegGeometricArea : public ns5__TpegAreaLocation
{ public:
/*  INHERITED FROM ns5__TpegAreaLocation:
/// Element "tpegAreaLocationType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01AreaLocationSubtypeEnum.
    enum ns5__TpegLoc01AreaLocationSubtypeEnum  tpegAreaLocationType           1;	///< Required element.
/// Element "tpegHeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegHeight.
    ns5__TpegHeight*                     tpegHeight                     0;	///< Optional element.
/// Element "tpegAreaLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegAreaLocationExtension      0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegAreaLocation */
/// Element "radius" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsNonNegativeInteger.
    ns5__MetresAsNonNegativeInteger      radius                         1;	///< Required element.
/// Element "centrePoint" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               centrePoint                    1;	///< Required element.
/// Element "name" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegAreaDescriptor.
    ns5__TpegAreaDescriptor*             name                           0;	///< Optional element.
/// Element "tpegGeometricAreaExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegGeometricAreaExtension     0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegJunction is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPoint.
///
/// class ns5__TpegJunction operations:
/// - ns5__TpegJunction* soap_new_ns5__TpegJunction(soap*) allocate and default initialize
/// - ns5__TpegJunction* soap_new_ns5__TpegJunction(soap*, int num) allocate array and default initialize values
/// - ns5__TpegJunction* soap_new_req_ns5__TpegJunction(soap*, ...) allocate, set required members
/// - ns5__TpegJunction* soap_new_set_ns5__TpegJunction(soap*, ...) allocate, set all public members
/// - ns5__TpegJunction::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegJunction(soap*, ns5__TpegJunction*) deserialize from a stream
/// - int soap_write_ns5__TpegJunction(soap*, ns5__TpegJunction*) serialize to a stream
/// - ns5__TpegJunction* ns5__TpegJunction::soap_dup(soap*) returns deep copy of ns5__TpegJunction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegJunction::soap_del() deep deletes ns5__TpegJunction data members, use only after ns5__TpegJunction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegJunction : public ns5__TpegPoint
{ public:
/*  INHERITED FROM ns5__TpegPoint:
/// Element "tpegPointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointExtension             0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegPoint */
/// Element "pointCoordinates" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               pointCoordinates               1;	///< Required element.
/// Element "name" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegJunctionPointDescriptor.
    ns5__TpegJunctionPointDescriptor*    name                           0;	///< Optional element.
/// Vector of ns5__TpegIlcPointDescriptor* of length 1..3.
    std::vector<ns5__TpegIlcPointDescriptor*> ilc                            1:3;
/// Vector of ns5__TpegOtherPointDescriptor* of length 0..unbounded.
    std::vector<ns5__TpegOtherPointDescriptor*> otherName                      0;
/// Element "tpegJunctionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegJunctionExtension          0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegNamedOnlyArea is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegAreaLocation.
///
/// class ns5__TpegNamedOnlyArea operations:
/// - ns5__TpegNamedOnlyArea* soap_new_ns5__TpegNamedOnlyArea(soap*) allocate and default initialize
/// - ns5__TpegNamedOnlyArea* soap_new_ns5__TpegNamedOnlyArea(soap*, int num) allocate array and default initialize values
/// - ns5__TpegNamedOnlyArea* soap_new_req_ns5__TpegNamedOnlyArea(soap*, ...) allocate, set required members
/// - ns5__TpegNamedOnlyArea* soap_new_set_ns5__TpegNamedOnlyArea(soap*, ...) allocate, set all public members
/// - ns5__TpegNamedOnlyArea::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegNamedOnlyArea(soap*, ns5__TpegNamedOnlyArea*) deserialize from a stream
/// - int soap_write_ns5__TpegNamedOnlyArea(soap*, ns5__TpegNamedOnlyArea*) serialize to a stream
/// - ns5__TpegNamedOnlyArea* ns5__TpegNamedOnlyArea::soap_dup(soap*) returns deep copy of ns5__TpegNamedOnlyArea, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegNamedOnlyArea::soap_del() deep deletes ns5__TpegNamedOnlyArea data members, use only after ns5__TpegNamedOnlyArea::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegNamedOnlyArea : public ns5__TpegAreaLocation
{ public:
/*  INHERITED FROM ns5__TpegAreaLocation:
/// Element "tpegAreaLocationType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01AreaLocationSubtypeEnum.
    enum ns5__TpegLoc01AreaLocationSubtypeEnum  tpegAreaLocationType           1;	///< Required element.
/// Element "tpegHeight" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegHeight.
    ns5__TpegHeight*                     tpegHeight                     0;	///< Optional element.
/// Element "tpegAreaLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegAreaLocationExtension      0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegAreaLocation */
/// Vector of ns5__TpegAreaDescriptor* of length 1..unbounded.
    std::vector<ns5__TpegAreaDescriptor*> name                           1;
/// Element "tpegNamedOnlyAreaExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegNamedOnlyAreaExtension     0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegNonJunctionPoint is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPoint.
///
/// class ns5__TpegNonJunctionPoint operations:
/// - ns5__TpegNonJunctionPoint* soap_new_ns5__TpegNonJunctionPoint(soap*) allocate and default initialize
/// - ns5__TpegNonJunctionPoint* soap_new_ns5__TpegNonJunctionPoint(soap*, int num) allocate array and default initialize values
/// - ns5__TpegNonJunctionPoint* soap_new_req_ns5__TpegNonJunctionPoint(soap*, ...) allocate, set required members
/// - ns5__TpegNonJunctionPoint* soap_new_set_ns5__TpegNonJunctionPoint(soap*, ...) allocate, set all public members
/// - ns5__TpegNonJunctionPoint::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegNonJunctionPoint(soap*, ns5__TpegNonJunctionPoint*) deserialize from a stream
/// - int soap_write_ns5__TpegNonJunctionPoint(soap*, ns5__TpegNonJunctionPoint*) serialize to a stream
/// - ns5__TpegNonJunctionPoint* ns5__TpegNonJunctionPoint::soap_dup(soap*) returns deep copy of ns5__TpegNonJunctionPoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegNonJunctionPoint::soap_del() deep deletes ns5__TpegNonJunctionPoint data members, use only after ns5__TpegNonJunctionPoint::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegNonJunctionPoint : public ns5__TpegPoint
{ public:
/*  INHERITED FROM ns5__TpegPoint:
/// Element "tpegPointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointExtension             0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegPoint */
/// Element "pointCoordinates" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               pointCoordinates               1;	///< Required element.
/// Vector of ns5__TpegOtherPointDescriptor* of length 1..unbounded.
    std::vector<ns5__TpegOtherPointDescriptor*> name                           1;
/// Element "tpegNonJunctionPointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegNonJunctionPointExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegPointDescriptor is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegDescriptor.
///
/// class ns5__TpegPointDescriptor operations:
/// - ns5__TpegPointDescriptor* soap_new_ns5__TpegPointDescriptor(soap*) allocate and default initialize
/// - ns5__TpegPointDescriptor* soap_new_ns5__TpegPointDescriptor(soap*, int num) allocate array and default initialize values
/// - ns5__TpegPointDescriptor* soap_new_req_ns5__TpegPointDescriptor(soap*, ...) allocate, set required members
/// - ns5__TpegPointDescriptor* soap_new_set_ns5__TpegPointDescriptor(soap*, ...) allocate, set all public members
/// - ns5__TpegPointDescriptor::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegPointDescriptor(soap*, ns5__TpegPointDescriptor*) deserialize from a stream
/// - int soap_write_ns5__TpegPointDescriptor(soap*, ns5__TpegPointDescriptor*) serialize to a stream
/// - ns5__TpegPointDescriptor* ns5__TpegPointDescriptor::soap_dup(soap*) returns deep copy of ns5__TpegPointDescriptor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegPointDescriptor::soap_del() deep deletes ns5__TpegPointDescriptor data members, use only after ns5__TpegPointDescriptor::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegPointDescriptor : public ns5__TpegDescriptor
{ public:
/*  INHERITED FROM ns5__TpegDescriptor:
/// Element "descriptor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             descriptor                     1;	///< Required element.
/// Element "tpegDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegDescriptorExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegDescriptor */
/// Element "tpegPointDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointDescriptorExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegSimplePoint is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPointLocation.
///
/// class ns5__TpegSimplePoint operations:
/// - ns5__TpegSimplePoint* soap_new_ns5__TpegSimplePoint(soap*) allocate and default initialize
/// - ns5__TpegSimplePoint* soap_new_ns5__TpegSimplePoint(soap*, int num) allocate array and default initialize values
/// - ns5__TpegSimplePoint* soap_new_req_ns5__TpegSimplePoint(soap*, ...) allocate, set required members
/// - ns5__TpegSimplePoint* soap_new_set_ns5__TpegSimplePoint(soap*, ...) allocate, set all public members
/// - ns5__TpegSimplePoint::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegSimplePoint(soap*, ns5__TpegSimplePoint*) deserialize from a stream
/// - int soap_write_ns5__TpegSimplePoint(soap*, ns5__TpegSimplePoint*) serialize to a stream
/// - ns5__TpegSimplePoint* ns5__TpegSimplePoint::soap_dup(soap*) returns deep copy of ns5__TpegSimplePoint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegSimplePoint::soap_del() deep deletes ns5__TpegSimplePoint data members, use only after ns5__TpegSimplePoint::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegSimplePoint : public ns5__TpegPointLocation
{ public:
/*  INHERITED FROM ns5__TpegPointLocation:
/// Element "tpegDirection" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc02DirectionTypeEnum.
    enum ns5__TpegLoc02DirectionTypeEnum  tpegDirection                  1;	///< Required element.
/// Element "tpegPointLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointLocationExtension     0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegPointLocation */
/// Element "tpegSimplePointLocationType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc01SimplePointLocationSubtypeEnum.
    enum ns5__TpegLoc01SimplePointLocationSubtypeEnum  tpegSimplePointLocationType    1;	///< Required element.
/// Element "point" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPoint.
    ns5__TpegPoint*                      point                          1;	///< Required element.
/// Element "tpegSimplePointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegSimplePointExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficElement is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SituationRecord.
///
/// class ns5__TrafficElement operations:
/// - ns5__TrafficElement* soap_new_ns5__TrafficElement(soap*) allocate and default initialize
/// - ns5__TrafficElement* soap_new_ns5__TrafficElement(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficElement* soap_new_req_ns5__TrafficElement(soap*, ...) allocate, set required members
/// - ns5__TrafficElement* soap_new_set_ns5__TrafficElement(soap*, ...) allocate, set all public members
/// - ns5__TrafficElement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficElement(soap*, ns5__TrafficElement*) deserialize from a stream
/// - int soap_write_ns5__TrafficElement(soap*, ns5__TrafficElement*) serialize to a stream
/// - ns5__TrafficElement* ns5__TrafficElement::soap_dup(soap*) returns deep copy of ns5__TrafficElement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficElement::soap_del() deep deletes ns5__TrafficElement data members, use only after ns5__TrafficElement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficElement : public ns5__SituationRecord
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficStatusValue is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":BasicDataValue.
///
/// class ns5__TrafficStatusValue operations:
/// - ns5__TrafficStatusValue* soap_new_ns5__TrafficStatusValue(soap*) allocate and default initialize
/// - ns5__TrafficStatusValue* soap_new_ns5__TrafficStatusValue(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficStatusValue* soap_new_req_ns5__TrafficStatusValue(soap*, ...) allocate, set required members
/// - ns5__TrafficStatusValue* soap_new_set_ns5__TrafficStatusValue(soap*, ...) allocate, set all public members
/// - ns5__TrafficStatusValue::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficStatusValue(soap*, ns5__TrafficStatusValue*) deserialize from a stream
/// - int soap_write_ns5__TrafficStatusValue(soap*, ns5__TrafficStatusValue*) serialize to a stream
/// - ns5__TrafficStatusValue* ns5__TrafficStatusValue::soap_dup(soap*) returns deep copy of ns5__TrafficStatusValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficStatusValue::soap_del() deep deletes ns5__TrafficStatusValue data members, use only after ns5__TrafficStatusValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficStatusValue : public ns5__BasicDataValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/// Element "trafficStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficStatusEnum.
    enum ns5__TrafficStatusEnum*         trafficStatus                  0;	///< Optional element.
/// Element "trafficTrendType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficTrendTypeEnum.
    enum ns5__TrafficTrendTypeEnum*      trafficTrendType               0;	///< Optional element.
/// Element "trafficStatusValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficStatusValueExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficValue is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":BasicDataValue.
///
/// class ns5__TrafficValue operations:
/// - ns5__TrafficValue* soap_new_ns5__TrafficValue(soap*) allocate and default initialize
/// - ns5__TrafficValue* soap_new_ns5__TrafficValue(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficValue* soap_new_req_ns5__TrafficValue(soap*, ...) allocate, set required members
/// - ns5__TrafficValue* soap_new_set_ns5__TrafficValue(soap*, ...) allocate, set all public members
/// - ns5__TrafficValue::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficValue(soap*, ns5__TrafficValue*) deserialize from a stream
/// - int soap_write_ns5__TrafficValue(soap*, ns5__TrafficValue*) serialize to a stream
/// - ns5__TrafficValue* ns5__TrafficValue::soap_dup(soap*) returns deep copy of ns5__TrafficValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficValue::soap_del() deep deletes ns5__TrafficValue data members, use only after ns5__TrafficValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficValue : public ns5__BasicDataValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/// Element "forVehiclesWithCharacteristicsOf" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         forVehiclesWithCharacteristicsOf 0;	///< Optional element.
/// Element "trafficValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficValueExtension          0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficViewPublication is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PayloadPublication.
///
/// class ns5__TrafficViewPublication operations:
/// - ns5__TrafficViewPublication* soap_new_ns5__TrafficViewPublication(soap*) allocate and default initialize
/// - ns5__TrafficViewPublication* soap_new_ns5__TrafficViewPublication(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficViewPublication* soap_new_req_ns5__TrafficViewPublication(soap*, ...) allocate, set required members
/// - ns5__TrafficViewPublication* soap_new_set_ns5__TrafficViewPublication(soap*, ...) allocate, set all public members
/// - ns5__TrafficViewPublication::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficViewPublication(soap*, ns5__TrafficViewPublication*) deserialize from a stream
/// - int soap_write_ns5__TrafficViewPublication(soap*, ns5__TrafficViewPublication*) serialize to a stream
/// - ns5__TrafficViewPublication* ns5__TrafficViewPublication::soap_dup(soap*) returns deep copy of ns5__TrafficViewPublication, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficViewPublication::soap_del() deep deletes ns5__TrafficViewPublication data members, use only after ns5__TrafficViewPublication::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficViewPublication : public ns5__PayloadPublication
{ public:
/*  INHERITED FROM ns5__PayloadPublication:
/// Element "feedDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             feedDescription                0;	///< Optional element.
/// Element "feedType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         feedType                       0;	///< Optional element.
/// Element "publicationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        publicationTime                1;	///< Required element.
/// Element "publicationCreator" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InternationalIdentifier.
    ns5__InternationalIdentifier*        publicationCreator             1;	///< Required element.
/// Element "payloadPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  payloadPublicationExtension    0;	///< Optional element.
/// Attribute "lang" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Language.
   @ns5__Language                        lang                           1;	///< Required attribute.
    END OF INHERITED FROM ns5__PayloadPublication */
/// Element "headerInformation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":HeaderInformation.
    ns5__HeaderInformation*              headerInformation              1;	///< Required element.
/// Vector of ns5__TrafficView* of length 1..unbounded.
    std::vector<ns5__TrafficView*      > trafficView                    1;
/// Element "trafficViewPublicationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficViewPublicationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TravelTimeValue is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":BasicDataValue.
///
/// class ns5__TravelTimeValue operations:
/// - ns5__TravelTimeValue* soap_new_ns5__TravelTimeValue(soap*) allocate and default initialize
/// - ns5__TravelTimeValue* soap_new_ns5__TravelTimeValue(soap*, int num) allocate array and default initialize values
/// - ns5__TravelTimeValue* soap_new_req_ns5__TravelTimeValue(soap*, ...) allocate, set required members
/// - ns5__TravelTimeValue* soap_new_set_ns5__TravelTimeValue(soap*, ...) allocate, set all public members
/// - ns5__TravelTimeValue::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TravelTimeValue(soap*, ns5__TravelTimeValue*) deserialize from a stream
/// - int soap_write_ns5__TravelTimeValue(soap*, ns5__TravelTimeValue*) serialize to a stream
/// - ns5__TravelTimeValue* ns5__TravelTimeValue::soap_dup(soap*) returns deep copy of ns5__TravelTimeValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TravelTimeValue::soap_del() deep deletes ns5__TravelTimeValue data members, use only after ns5__TravelTimeValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TravelTimeValue : public ns5__BasicDataValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/// Element "travelTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        travelTime                     0;	///< Optional element.
/// Element "travelTimeTrendType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TravelTimeTrendTypeEnum.
    enum ns5__TravelTimeTrendTypeEnum*   travelTimeTrendType            0;	///< Optional element.
/// Element "travelTimeType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TravelTimeTypeEnum.
    enum ns5__TravelTimeTypeEnum*        travelTimeType                 0;	///< Optional element.
/// Element "freeFlowSpeed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":KilometresPerHour.
    ns5__KilometresPerHour*              freeFlowSpeed                  0;	///< Optional element.
/// Element "freeFlowTravelTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        freeFlowTravelTime             0;	///< Optional element.
/// Element "normallyExpectedTravelTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        normallyExpectedTravelTime     0;	///< Optional element.
/// Vector of enum ns5__VehicleTypeEnum of length 0..unbounded.
    std::vector<enum ns5__VehicleTypeEnum> vehicleType                    0;
/// Element "travelTimeValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  travelTimeValueExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":WeatherValue is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":BasicDataValue.
///
/// class ns5__WeatherValue operations:
/// - ns5__WeatherValue* soap_new_ns5__WeatherValue(soap*) allocate and default initialize
/// - ns5__WeatherValue* soap_new_ns5__WeatherValue(soap*, int num) allocate array and default initialize values
/// - ns5__WeatherValue* soap_new_req_ns5__WeatherValue(soap*, ...) allocate, set required members
/// - ns5__WeatherValue* soap_new_set_ns5__WeatherValue(soap*, ...) allocate, set all public members
/// - ns5__WeatherValue::soap_default(soap*) default initialize members
/// - int soap_read_ns5__WeatherValue(soap*, ns5__WeatherValue*) deserialize from a stream
/// - int soap_write_ns5__WeatherValue(soap*, ns5__WeatherValue*) serialize to a stream
/// - ns5__WeatherValue* ns5__WeatherValue::soap_dup(soap*) returns deep copy of ns5__WeatherValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__WeatherValue::soap_del() deep deletes ns5__WeatherValue data members, use only after ns5__WeatherValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__WeatherValue : public ns5__BasicDataValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/// Element "weatherValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherValueExtension          0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ServiceDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ProducerResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for SIRI Service Delivery.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceDeliveryStructure operations:
/// - ns2__ServiceDeliveryStructure* soap_new_ns2__ServiceDeliveryStructure(soap*) allocate and default initialize
/// - ns2__ServiceDeliveryStructure* soap_new_ns2__ServiceDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceDeliveryStructure* soap_new_req_ns2__ServiceDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceDeliveryStructure* soap_new_set_ns2__ServiceDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceDeliveryStructure(soap*, ns2__ServiceDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceDeliveryStructure(soap*, ns2__ServiceDeliveryStructure*) serialize to a stream
/// - ns2__ServiceDeliveryStructure* ns2__ServiceDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__ServiceDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceDeliveryStructure::soap_del() deep deletes ns2__ServiceDeliveryStructure data members, use only after ns2__ServiceDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceDeliveryStructure : public ns2__ProducerResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__ProducerResponseStructure:
//  BEGIN GROUP <xs:group name="ProducerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to reponse from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoint Address to which acknowledgements to confirm delivery are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An arbitrary unique reference associated with the response which may be used to reference it.
/// </BLOCKQUOTE></PRE>
/// Element "ResponseMessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      ResponseMessageIdentifier      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique identifier associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ProducerResponseStructure */
//  BEGIN GROUP <xs:group name="ServiceDeliveryBodyGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for SIRI Service Delivery.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="ServiceDeliveryRequestStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for overall request. Specifc error conditions will be given on each individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the complerte request could be processed successfully or not. Default is 'true'. If any of the individual requests within the delivery failed, should be set to ' false'.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type xs:boolean.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning conditions that appluy to the overall request. More Specific error conditions should be included on each request that fails.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ServiceDeliveryStructure_ErrorCondition operations:
/// - _ns2__ServiceDeliveryStructure_ErrorCondition* soap_new__ns2__ServiceDeliveryStructure_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__ServiceDeliveryStructure_ErrorCondition* soap_new__ns2__ServiceDeliveryStructure_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__ServiceDeliveryStructure_ErrorCondition* soap_new_req__ns2__ServiceDeliveryStructure_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__ServiceDeliveryStructure_ErrorCondition* soap_new_set__ns2__ServiceDeliveryStructure_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__ServiceDeliveryStructure_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ServiceDeliveryStructure_ErrorCondition(soap*, _ns2__ServiceDeliveryStructure_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__ServiceDeliveryStructure_ErrorCondition(soap*, _ns2__ServiceDeliveryStructure_ErrorCondition*) serialize to a stream
/// - _ns2__ServiceDeliveryStructure_ErrorCondition* _ns2__ServiceDeliveryStructure_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__ServiceDeliveryStructure_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ServiceDeliveryStructure_ErrorCondition::soap_del() deep deletes _ns2__ServiceDeliveryStructure_ErrorCondition data members, use only after _ns2__ServiceDeliveryStructure_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ServiceDeliveryStructure_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceDeliveryStructure_ErrorCondition;	///< Union _ns2__union_ServiceDeliveryStructure_ErrorCondition selector: set to SOAP_UNION__ns2__union_ServiceDeliveryStructure_ErrorCondition_<fieldname>
    union _ns2__union_ServiceDeliveryStructure_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Service does not support the requested capability.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilityNotSupportedError.
    ns2__CapabilityNotSupportedErrorStructure*  CapabilityNotSupportedError    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ServiceDeliveryStructure_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Whether there is a further delvery message with more current updates that follows this one. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "MoreData" of XSD type xs:boolean.
    bool                                 MoreData                       0 = false;	///< Default element value="false".
//  BEGIN GROUP <xs:group name="SiriServiceDeliveryGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Delivery types.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceDeliveryStructure;	///< Union _ns2__union_ServiceDeliveryStructure selector: set to SOAP_UNION__ns2__union_ServiceDeliveryStructure_<fieldname>
    union _ns2__union_ServiceDeliveryStructure
    {
/// <PRE><BLOCKQUOTE>
///   Delivery for Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ProductionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ProductionTimetableDeliveryStructure*> *ProductionTimetableDelivery    1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableDeliveryStructure*> *EstimatedTimetableDelivery     1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableDeliveryStructure*> *StopTimetableDelivery          1;
/// <PRE><BLOCKQUOTE>
///   Delviery for Stop Event service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringDeliveryStructure*> *StopMonitoringDelivery         1;
/// <PRE><BLOCKQUOTE>
///   Delviery for Vehicle Activity Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringDeliveryStructure*> *VehicleMonitoringDelivery      1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableDeliveryStructure*> *ConnectionTimetableDelivery    1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Feeder Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringFeederDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringFeederDeliveryStructure*> *ConnectionMonitoringFeederDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Distributor Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringDistributorDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringDistributorDeliveryStructure*> *ConnectionMonitoringDistributorDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for general Message service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for General Message Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageDeliveryStructure*> *GeneralMessageDelivery         1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringDeliveryStructure*> *FacilityMonitoringDelivery     1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeDeliveryStructure*> *SituationExchangeDelivery      1;
    }                                    union_ServiceDeliveryStructure;
//  END OF CHOICE
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Default gml coordinate format for eny location elements in response; applies if Coordinates element is used to specify points. May be overridden on individual points.
/// </BLOCKQUOTE></PRE>
/// Attribute "srsName" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
   @ns2__SrsNameType*                    srsName                        0;	///< Optional attribute.
};

/// @brief "http://www.siri.org.uk/siri":CapabilitiesRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AuthenticatedRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Requests for capabilities of the current system.
/// </BLOCKQUOTE></PRE>
/// class ns2__CapabilitiesRequestStructure operations:
/// - ns2__CapabilitiesRequestStructure* soap_new_ns2__CapabilitiesRequestStructure(soap*) allocate and default initialize
/// - ns2__CapabilitiesRequestStructure* soap_new_ns2__CapabilitiesRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CapabilitiesRequestStructure* soap_new_req_ns2__CapabilitiesRequestStructure(soap*, ...) allocate, set required members
/// - ns2__CapabilitiesRequestStructure* soap_new_set_ns2__CapabilitiesRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__CapabilitiesRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CapabilitiesRequestStructure(soap*, ns2__CapabilitiesRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__CapabilitiesRequestStructure(soap*, ns2__CapabilitiesRequestStructure*) serialize to a stream
/// - ns2__CapabilitiesRequestStructure* ns2__CapabilitiesRequestStructure::soap_dup(soap*) returns deep copy of ns2__CapabilitiesRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CapabilitiesRequestStructure::soap_del() deep deletes ns2__CapabilitiesRequestStructure data members, use only after ns2__CapabilitiesRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CapabilitiesRequestStructure : public ns2__AuthenticatedRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SiriServiceCapabilitiesRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Defines the capabilities of an individual SIRI service request functions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Request for information about ProductionTimetable Service Capabilities. Answered with a ProductionTimetableCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductionTimetableCapabilitiesRequest.
    _ns2__ProductionTimetableCapabilitiesRequest*  ProductionTimetableCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about Estimated Timetable Service Capabilities. Answered with a EstimatedTimetableCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EstimatedTimetableCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  EstimatedTimetableCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Timetable Service Capabilities Answered with a StopTimetableCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopTimetableCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  StopTimetableCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Monitoring Service Capabilities. Answered with StopMonitoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopMonitoringCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  StopMonitoringCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about Vehicle Monitoring Service Capabilities. Answered with a VehicleMontoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMonitoringCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  VehicleMonitoringCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about Connection Timetable Service Capabilities. Answered with a ConnectionTimetableCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionTimetableCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  ConnectionTimetableCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about Connection Monitoring Service Capabilities. Answered with a ConnectionMontoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionMonitoringCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  ConnectionMonitoringCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about General Message Service Capabilities. Answered with a GeneralMessageCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":GeneralMessageCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  GeneralMessageCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about Vehicle Monitoring Service Capabilities. Answered with a VehicleMontoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityMonitoringCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  FacilityMonitoringCapabilitiesRequest 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Request for information about Situation Exchange Service Capabilities. Answered with a VehicleMontoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationExchangeCapabilitiesRequest.
    ns2__ServiceCapabilitiesRequestStructure*  SituationExchangeCapabilitiesRequest 0;	///< Optional element.
//  END OF GROUP
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":CapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ProducerResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for the capabilities of an implementation.
/// </BLOCKQUOTE></PRE>
/// class ns2__CapabilitiesResponseStructure operations:
/// - ns2__CapabilitiesResponseStructure* soap_new_ns2__CapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__CapabilitiesResponseStructure* soap_new_ns2__CapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CapabilitiesResponseStructure* soap_new_req_ns2__CapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__CapabilitiesResponseStructure* soap_new_set_ns2__CapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__CapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CapabilitiesResponseStructure(soap*, ns2__CapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__CapabilitiesResponseStructure(soap*, ns2__CapabilitiesResponseStructure*) serialize to a stream
/// - ns2__CapabilitiesResponseStructure* ns2__CapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__CapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CapabilitiesResponseStructure::soap_del() deep deletes ns2__CapabilitiesResponseStructure data members, use only after ns2__CapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CapabilitiesResponseStructure : public ns2__ProducerResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__ProducerResponseStructure:
//  BEGIN GROUP <xs:group name="ProducerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to reponse from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoint Address to which acknowledgements to confirm delivery are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An arbitrary unique reference associated with the response which may be used to reference it.
/// </BLOCKQUOTE></PRE>
/// Element "ResponseMessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      ResponseMessageIdentifier      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique identifier associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ProducerResponseStructure */
//  BEGIN GROUP <xs:group name="SiriServiceCapabilitiesResponseGroup">
/// <PRE><BLOCKQUOTE>
///   Defines the capabilities of an individual SIRI service response functions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Capabilities for ProductionTimetable Service. Answers a Answered with a ProductionTimetableCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductionTimetableCapabilitiesResponse.
    ns2__ProductionTimetableCapabilitiesResponseStructure*  ProductionTimetableCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Estimated Timetable Service. Answers a EstimatedTimetableCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EstimatedTimetableCapabilitiesResponse.
    ns2__EstimatedTimetableCapabilitiesResponseStructure*  EstimatedTimetableCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Timetable Service. Answers a StopTimetableCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopTimetableCapabilitiesResponse.
    ns2__StopTimetableCapabilitiesResponseStructure*  StopTimetableCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Stop Monitoring Service. Answers a StopMonitoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopMonitoringCapabilitiesResponse.
    ns2__StopMonitoringCapabilitiesResponseStructure*  StopMonitoringCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Vehicle Monitoring Service. Answers a VehicleMontoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMonitoringCapabilitiesResponse.
    ns2__VehicleMonitoringCapabilitiesResponseStructure*  VehicleMonitoringCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Connection Timetable Service. Answers a ConnectionTimetableCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionTimetableCapabilitiesResponse.
    ns2__ConnectionTimetableCapabilitiesResponseStructure*  ConnectionTimetableCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Connection Monitoring Service. Answers a ConnectionMontoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionMonitoringCapabilitiesResponse.
    ns2__ConnectionMonitoringCapabilitiesResponseStructure*  ConnectionMonitoringCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Capabilities for General Message Service. Answers a GeneralMessageCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":GeneralMessageCapabilitiesResponse.
    ns2__GeneralMessageCapabilitiesResponseStructure*  GeneralMessageCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Vehicle Monitoring Service. Answers a VehicleMontoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityMonitoringCapabilitiesResponse.
    ns2__FacilityMonitoringCapabilitiesResponseStructure*  FacilityMonitoringCapabilitiesResponse 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Situation Exchange Service. Answers a VehicleMontoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationExchangeCapabilitiesResponse.
    ns2__SituationExchangeCapabilitiesResponseStructure*  SituationExchangeCapabilitiesResponse 0;	///< Optional element.
//  END OF GROUP
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":TerminateSubscriptionRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AuthenticatedRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for request to terminate a subscription or subscriptions.
/// </BLOCKQUOTE></PRE>
/// class ns2__TerminateSubscriptionRequestStructure operations:
/// - ns2__TerminateSubscriptionRequestStructure* soap_new_ns2__TerminateSubscriptionRequestStructure(soap*) allocate and default initialize
/// - ns2__TerminateSubscriptionRequestStructure* soap_new_ns2__TerminateSubscriptionRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TerminateSubscriptionRequestStructure* soap_new_req_ns2__TerminateSubscriptionRequestStructure(soap*, ...) allocate, set required members
/// - ns2__TerminateSubscriptionRequestStructure* soap_new_set_ns2__TerminateSubscriptionRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__TerminateSubscriptionRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TerminateSubscriptionRequestStructure(soap*, ns2__TerminateSubscriptionRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__TerminateSubscriptionRequestStructure(soap*, ns2__TerminateSubscriptionRequestStructure*) serialize to a stream
/// - ns2__TerminateSubscriptionRequestStructure* ns2__TerminateSubscriptionRequestStructure::soap_dup(soap*) returns deep copy of ns2__TerminateSubscriptionRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TerminateSubscriptionRequestStructure::soap_del() deep deletes ns2__TerminateSubscriptionRequestStructure data members, use only after ns2__TerminateSubscriptionRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TerminateSubscriptionRequestStructure : public ns2__AuthenticatedRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="TerminateSubscriptionTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be processed.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Subscription ref will be unique within this.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_TerminateSubscriptionRequestStructure;	///< Union _ns2__union_TerminateSubscriptionRequestStructure selector: set to SOAP_UNION__ns2__union_TerminateSubscriptionRequestStructure_<fieldname>
    union _ns2__union_TerminateSubscriptionRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Terminate all subscriptions for the requestor.
/// </BLOCKQUOTE></PRE>
/// Element "All" of XSD type "http://www.siri.org.uk/siri":EmptyType.
    enum ns2__EmptyType                  All                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Terminate the subscription identfiied by the reference.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SubscriptionQualifierStructure* of length 1..unbounded.
    std::vector<ns2__SubscriptionQualifierStructure*> *SubscriptionRef                1;
    }                                    union_TerminateSubscriptionRequestStructure;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":TerminateSubscriptionResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseEndpointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Response to a request to terminate a subscription or subscriptions.
/// </BLOCKQUOTE></PRE>
/// class ns2__TerminateSubscriptionResponseStructure operations:
/// - ns2__TerminateSubscriptionResponseStructure* soap_new_ns2__TerminateSubscriptionResponseStructure(soap*) allocate and default initialize
/// - ns2__TerminateSubscriptionResponseStructure* soap_new_ns2__TerminateSubscriptionResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TerminateSubscriptionResponseStructure* soap_new_req_ns2__TerminateSubscriptionResponseStructure(soap*, ...) allocate, set required members
/// - ns2__TerminateSubscriptionResponseStructure* soap_new_set_ns2__TerminateSubscriptionResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__TerminateSubscriptionResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TerminateSubscriptionResponseStructure(soap*, ns2__TerminateSubscriptionResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__TerminateSubscriptionResponseStructure(soap*, ns2__TerminateSubscriptionResponseStructure*) serialize to a stream
/// - ns2__TerminateSubscriptionResponseStructure* ns2__TerminateSubscriptionResponseStructure::soap_dup(soap*) returns deep copy of ns2__TerminateSubscriptionResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TerminateSubscriptionResponseStructure::soap_del() deep deletes ns2__TerminateSubscriptionResponseStructure data members, use only after ns2__TerminateSubscriptionResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TerminateSubscriptionResponseStructure : public ns2__ResponseEndpointStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__ResponseEndpointStructure:
//  BEGIN GROUP <xs:group name="ResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to response May be used to reference response in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address for further interaction.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant reference that identifies responder.
/// </BLOCKQUOTE></PRE>
/// Element "ResponderRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ResponderRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique reference associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ResponseEndpointStructure */
//  BEGIN GROUP <xs:group name="TerminationStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Info.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Status of each subscription termnination response.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TerminationResponseStatusStructure* of length 0..unbounded.
    std::vector<ns2__TerminationResponseStatusStructure*> TerminationResponseStatus      0;
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":SubscriptionResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ResponseEndpointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Subscription Response.
/// </BLOCKQUOTE></PRE>
/// class ns2__SubscriptionResponseStructure operations:
/// - ns2__SubscriptionResponseStructure* soap_new_ns2__SubscriptionResponseStructure(soap*) allocate and default initialize
/// - ns2__SubscriptionResponseStructure* soap_new_ns2__SubscriptionResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SubscriptionResponseStructure* soap_new_req_ns2__SubscriptionResponseStructure(soap*, ...) allocate, set required members
/// - ns2__SubscriptionResponseStructure* soap_new_set_ns2__SubscriptionResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__SubscriptionResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SubscriptionResponseStructure(soap*, ns2__SubscriptionResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__SubscriptionResponseStructure(soap*, ns2__SubscriptionResponseStructure*) serialize to a stream
/// - ns2__SubscriptionResponseStructure* ns2__SubscriptionResponseStructure::soap_dup(soap*) returns deep copy of ns2__SubscriptionResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SubscriptionResponseStructure::soap_del() deep deletes ns2__SubscriptionResponseStructure data members, use only after ns2__SubscriptionResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SubscriptionResponseStructure : public ns2__ResponseEndpointStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__ResponseEndpointStructure:
//  BEGIN GROUP <xs:group name="ResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to response May be used to reference response in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address for further interaction.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant reference that identifies responder.
/// </BLOCKQUOTE></PRE>
/// Element "ResponderRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ResponderRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique reference associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ResponseEndpointStructure */
//  BEGIN GROUP <xs:group name="SubscriptionResponsePayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Subscription Response content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Contains infromation about the processing of a an individual service subscription - either success info or an error condition. (VDV Acknowledgement).
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StatusResponseStructure* element refs of length 1..unbounded.
    std::vector<ns2__StatusResponseStructure*> ResponseStatus                 1;
/// <PRE><BLOCKQUOTE>
///   Endpoint address of subscription manager if different from that of the Producer or known default.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionManagerAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                SubscriptionManagerAddress     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time at which service providing the subscription was last started. Can be used to detect restarts. If absent, unknown.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceStartedTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ServiceStartedTime             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":DataReadyResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ConsumerResponseEndpointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Data ready Acknowledgement Response.
/// </BLOCKQUOTE></PRE>
/// class ns2__DataReadyResponseStructure operations:
/// - ns2__DataReadyResponseStructure* soap_new_ns2__DataReadyResponseStructure(soap*) allocate and default initialize
/// - ns2__DataReadyResponseStructure* soap_new_ns2__DataReadyResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DataReadyResponseStructure* soap_new_req_ns2__DataReadyResponseStructure(soap*, ...) allocate, set required members
/// - ns2__DataReadyResponseStructure* soap_new_set_ns2__DataReadyResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__DataReadyResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DataReadyResponseStructure(soap*, ns2__DataReadyResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__DataReadyResponseStructure(soap*, ns2__DataReadyResponseStructure*) serialize to a stream
/// - ns2__DataReadyResponseStructure* ns2__DataReadyResponseStructure::soap_dup(soap*) returns deep copy of ns2__DataReadyResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DataReadyResponseStructure::soap_del() deep deletes ns2__DataReadyResponseStructure data members, use only after ns2__DataReadyResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DataReadyResponseStructure : public ns2__ConsumerResponseEndpointStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__ConsumerResponseEndpointStructure:
//  BEGIN GROUP <xs:group name="ConsumerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to this response message from Consumer. May be used to reference the response in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Consumer - a Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ConsumerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique idenitifer associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ConsumerResponseEndpointStructure */
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition as to why Consumer cannot fetch data.
/// </BLOCKQUOTE></PRE>
/// class _ns2__DataReadyResponseStructure_ErrorCondition operations:
/// - _ns2__DataReadyResponseStructure_ErrorCondition* soap_new__ns2__DataReadyResponseStructure_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__DataReadyResponseStructure_ErrorCondition* soap_new__ns2__DataReadyResponseStructure_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__DataReadyResponseStructure_ErrorCondition* soap_new_req__ns2__DataReadyResponseStructure_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__DataReadyResponseStructure_ErrorCondition* soap_new_set__ns2__DataReadyResponseStructure_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__DataReadyResponseStructure_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__DataReadyResponseStructure_ErrorCondition(soap*, _ns2__DataReadyResponseStructure_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__DataReadyResponseStructure_ErrorCondition(soap*, _ns2__DataReadyResponseStructure_ErrorCondition*) serialize to a stream
/// - _ns2__DataReadyResponseStructure_ErrorCondition* _ns2__DataReadyResponseStructure_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__DataReadyResponseStructure_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__DataReadyResponseStructure_ErrorCondition::soap_del() deep deletes _ns2__DataReadyResponseStructure_ErrorCondition data members, use only after _ns2__DataReadyResponseStructure_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__DataReadyResponseStructure_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_DataReadyResponseStructure_ErrorCondition;	///< Union _ns2__union_DataReadyResponseStructure_ErrorCondition selector: set to SOAP_UNION__ns2__union_DataReadyResponseStructure_ErrorCondition_<fieldname>
    union _ns2__union_DataReadyResponseStructure_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Subscription not found.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownSubscriptionError.
    ns2__UnknownSubscriptionErrorStructure*  UnknownSubscriptionError       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_DataReadyResponseStructure_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":DataReceivedResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ConsumerResponseEndpointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Data received Acknowledgement Response.
/// </BLOCKQUOTE></PRE>
/// class ns2__DataReceivedResponseStructure operations:
/// - ns2__DataReceivedResponseStructure* soap_new_ns2__DataReceivedResponseStructure(soap*) allocate and default initialize
/// - ns2__DataReceivedResponseStructure* soap_new_ns2__DataReceivedResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DataReceivedResponseStructure* soap_new_req_ns2__DataReceivedResponseStructure(soap*, ...) allocate, set required members
/// - ns2__DataReceivedResponseStructure* soap_new_set_ns2__DataReceivedResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__DataReceivedResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DataReceivedResponseStructure(soap*, ns2__DataReceivedResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__DataReceivedResponseStructure(soap*, ns2__DataReceivedResponseStructure*) serialize to a stream
/// - ns2__DataReceivedResponseStructure* ns2__DataReceivedResponseStructure::soap_dup(soap*) returns deep copy of ns2__DataReceivedResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DataReceivedResponseStructure::soap_del() deep deletes ns2__DataReceivedResponseStructure data members, use only after ns2__DataReceivedResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DataReceivedResponseStructure : public ns2__ConsumerResponseEndpointStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__ConsumerResponseEndpointStructure:
//  BEGIN GROUP <xs:group name="ConsumerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to this response message from Consumer. May be used to reference the response in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Consumer - a Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ConsumerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique idenitifer associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ConsumerResponseEndpointStructure */
//  BEGIN GROUP <xs:group name="DataReceivedPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Data received Acknowledgement content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// class _ns2__DataReceivedResponseStructure_ErrorCondition operations:
/// - _ns2__DataReceivedResponseStructure_ErrorCondition* soap_new__ns2__DataReceivedResponseStructure_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__DataReceivedResponseStructure_ErrorCondition* soap_new__ns2__DataReceivedResponseStructure_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__DataReceivedResponseStructure_ErrorCondition* soap_new_req__ns2__DataReceivedResponseStructure_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__DataReceivedResponseStructure_ErrorCondition* soap_new_set__ns2__DataReceivedResponseStructure_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__DataReceivedResponseStructure_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__DataReceivedResponseStructure_ErrorCondition(soap*, _ns2__DataReceivedResponseStructure_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__DataReceivedResponseStructure_ErrorCondition(soap*, _ns2__DataReceivedResponseStructure_ErrorCondition*) serialize to a stream
/// - _ns2__DataReceivedResponseStructure_ErrorCondition* _ns2__DataReceivedResponseStructure_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__DataReceivedResponseStructure_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__DataReceivedResponseStructure_ErrorCondition::soap_del() deep deletes _ns2__DataReceivedResponseStructure_ErrorCondition data members, use only after _ns2__DataReceivedResponseStructure_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__DataReceivedResponseStructure_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_DataReceivedResponseStructure_ErrorCondition;	///< Union _ns2__union_DataReceivedResponseStructure_ErrorCondition selector: set to SOAP_UNION__ns2__union_DataReceivedResponseStructure_ErrorCondition_<fieldname>
    union _ns2__union_DataReceivedResponseStructure_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Subscription not found.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownSubscriptionError.
    ns2__UnknownSubscriptionErrorStructure*  UnknownSubscriptionError       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_DataReceivedResponseStructure_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":RequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AuthenticatedRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for General SIRI Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__RequestStructure operations:
/// - ns2__RequestStructure* soap_new_ns2__RequestStructure(soap*) allocate and default initialize
/// - ns2__RequestStructure* soap_new_ns2__RequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RequestStructure* soap_new_req_ns2__RequestStructure(soap*, ...) allocate, set required members
/// - ns2__RequestStructure* soap_new_set_ns2__RequestStructure(soap*, ...) allocate, set all public members
/// - ns2__RequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RequestStructure(soap*, ns2__RequestStructure*) deserialize from a stream
/// - int soap_write_ns2__RequestStructure(soap*, ns2__RequestStructure*) serialize to a stream
/// - ns2__RequestStructure* ns2__RequestStructure::soap_dup(soap*) returns deep copy of ns2__RequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RequestStructure::soap_del() deep deletes ns2__RequestStructure data members, use only after ns2__RequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RequestStructure : public ns2__AuthenticatedRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Abstract Service Request for SIRI Service request.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractFunctionalServiceRequestStructure operations:
/// - ns2__AbstractFunctionalServiceRequestStructure* soap_new_ns2__AbstractFunctionalServiceRequestStructure(soap*) allocate and default initialize
/// - ns2__AbstractFunctionalServiceRequestStructure* soap_new_ns2__AbstractFunctionalServiceRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractFunctionalServiceRequestStructure* soap_new_req_ns2__AbstractFunctionalServiceRequestStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractFunctionalServiceRequestStructure* soap_new_set_ns2__AbstractFunctionalServiceRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractFunctionalServiceRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractFunctionalServiceRequestStructure(soap*, ns2__AbstractFunctionalServiceRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractFunctionalServiceRequestStructure(soap*, ns2__AbstractFunctionalServiceRequestStructure*) serialize to a stream
/// - ns2__AbstractFunctionalServiceRequestStructure* ns2__AbstractFunctionalServiceRequestStructure::soap_dup(soap*) returns deep copy of ns2__AbstractFunctionalServiceRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractFunctionalServiceRequestStructure::soap_del() deep deletes ns2__AbstractFunctionalServiceRequestStructure data members, use only after ns2__AbstractFunctionalServiceRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractFunctionalServiceRequestStructure : public ns2__AbstractServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
};

/// @brief "http://www.siri.org.uk/siri":ConsumerRequestEndpointStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AuthenticatedRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Unique reference to this request, created by Consumer. May be used to reference the request in subsequent interactions. Used by WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConsumerRequestEndpointStructure operations:
/// - ns2__ConsumerRequestEndpointStructure* soap_new_ns2__ConsumerRequestEndpointStructure(soap*) allocate and default initialize
/// - ns2__ConsumerRequestEndpointStructure* soap_new_ns2__ConsumerRequestEndpointStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConsumerRequestEndpointStructure* soap_new_req_ns2__ConsumerRequestEndpointStructure(soap*, ...) allocate, set required members
/// - ns2__ConsumerRequestEndpointStructure* soap_new_set_ns2__ConsumerRequestEndpointStructure(soap*, ...) allocate, set all public members
/// - ns2__ConsumerRequestEndpointStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConsumerRequestEndpointStructure(soap*, ns2__ConsumerRequestEndpointStructure*) deserialize from a stream
/// - int soap_write_ns2__ConsumerRequestEndpointStructure(soap*, ns2__ConsumerRequestEndpointStructure*) serialize to a stream
/// - ns2__ConsumerRequestEndpointStructure* ns2__ConsumerRequestEndpointStructure::soap_dup(soap*) returns deep copy of ns2__ConsumerRequestEndpointStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConsumerRequestEndpointStructure::soap_del() deep deletes ns2__ConsumerRequestEndpointStructure data members, use only after ns2__ConsumerRequestEndpointStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConsumerRequestEndpointStructure : public ns2__AuthenticatedRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
//  BEGIN GROUP <xs:group name="ConsumerRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to this request, created by Consumer. May be used to reference the request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Consumer - a Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ConsumerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message. Some systems may use just timestamp for this.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ProducerRequestEndpointStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AuthenticatedRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Unique reference to request to the producer. May be used to reference request in subsequent interactions. Used for WSDL.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProducerRequestEndpointStructure operations:
/// - ns2__ProducerRequestEndpointStructure* soap_new_ns2__ProducerRequestEndpointStructure(soap*) allocate and default initialize
/// - ns2__ProducerRequestEndpointStructure* soap_new_ns2__ProducerRequestEndpointStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProducerRequestEndpointStructure* soap_new_req_ns2__ProducerRequestEndpointStructure(soap*, ...) allocate, set required members
/// - ns2__ProducerRequestEndpointStructure* soap_new_set_ns2__ProducerRequestEndpointStructure(soap*, ...) allocate, set all public members
/// - ns2__ProducerRequestEndpointStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProducerRequestEndpointStructure(soap*, ns2__ProducerRequestEndpointStructure*) deserialize from a stream
/// - int soap_write_ns2__ProducerRequestEndpointStructure(soap*, ns2__ProducerRequestEndpointStructure*) serialize to a stream
/// - ns2__ProducerRequestEndpointStructure* ns2__ProducerRequestEndpointStructure::soap_dup(soap*) returns deep copy of ns2__ProducerRequestEndpointStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProducerRequestEndpointStructure::soap_del() deep deletes ns2__ProducerRequestEndpointStructure data members, use only after ns2__ProducerRequestEndpointStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProducerRequestEndpointStructure : public ns2__AuthenticatedRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
//  BEGIN GROUP <xs:group name="ProducerRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from ProducerRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message. Some systems may use just timestamp for this. Where there are multiple SubscriptionFilters, this can be used to distinguish between different notifications for different filters.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for ServcieCapabilities request.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceCapabilitiesRequestStructure operations:
/// - ns2__ServiceCapabilitiesRequestStructure* soap_new_ns2__ServiceCapabilitiesRequestStructure(soap*) allocate and default initialize
/// - ns2__ServiceCapabilitiesRequestStructure* soap_new_ns2__ServiceCapabilitiesRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceCapabilitiesRequestStructure* soap_new_req_ns2__ServiceCapabilitiesRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceCapabilitiesRequestStructure* soap_new_set_ns2__ServiceCapabilitiesRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceCapabilitiesRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceCapabilitiesRequestStructure(soap*, ns2__ServiceCapabilitiesRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceCapabilitiesRequestStructure(soap*, ns2__ServiceCapabilitiesRequestStructure*) serialize to a stream
/// - ns2__ServiceCapabilitiesRequestStructure* ns2__ServiceCapabilitiesRequestStructure::soap_dup(soap*) returns deep copy of ns2__ServiceCapabilitiesRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceCapabilitiesRequestStructure::soap_del() deep deletes ns2__ServiceCapabilitiesRequestStructure data members, use only after ns2__ServiceCapabilitiesRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceCapabilitiesRequestStructure : public ns2__AbstractServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/// <PRE><BLOCKQUOTE>
///   Whether to include the requestors permissions in the response. Only applies if Access control capability supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantPermissions" of XSD type xs:boolean.
    bool                                 ParticipantPermissions         0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AuthenticatedRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Requests for stop reference data for use in service requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractDiscoveryRequestStructure operations:
/// - ns2__AbstractDiscoveryRequestStructure* soap_new_ns2__AbstractDiscoveryRequestStructure(soap*) allocate and default initialize
/// - ns2__AbstractDiscoveryRequestStructure* soap_new_ns2__AbstractDiscoveryRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractDiscoveryRequestStructure* soap_new_req_ns2__AbstractDiscoveryRequestStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractDiscoveryRequestStructure* soap_new_set_ns2__AbstractDiscoveryRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractDiscoveryRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractDiscoveryRequestStructure(soap*, ns2__AbstractDiscoveryRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractDiscoveryRequestStructure(soap*, ns2__AbstractDiscoveryRequestStructure*) serialize to a stream
/// - ns2__AbstractDiscoveryRequestStructure* ns2__AbstractDiscoveryRequestStructure::soap_dup(soap*) returns deep copy of ns2__AbstractDiscoveryRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractDiscoveryRequestStructure::soap_del() deep deletes ns2__AbstractDiscoveryRequestStructure data members, use only after ns2__AbstractDiscoveryRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractDiscoveryRequestStructure : public ns2__AuthenticatedRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":NaturalLanguageStringStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Tyoe for a string in a specified language.
/// </BLOCKQUOTE></PRE>
/// class ns2__NaturalLanguageStringStructure operations:
/// - ns2__NaturalLanguageStringStructure* soap_new_ns2__NaturalLanguageStringStructure(soap*) allocate and default initialize
/// - ns2__NaturalLanguageStringStructure* soap_new_ns2__NaturalLanguageStringStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NaturalLanguageStringStructure* soap_new_req_ns2__NaturalLanguageStringStructure(soap*, ...) allocate, set required members
/// - ns2__NaturalLanguageStringStructure* soap_new_set_ns2__NaturalLanguageStringStructure(soap*, ...) allocate, set all public members
/// - ns2__NaturalLanguageStringStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NaturalLanguageStringStructure(soap*, ns2__NaturalLanguageStringStructure*) deserialize from a stream
/// - int soap_write_ns2__NaturalLanguageStringStructure(soap*, ns2__NaturalLanguageStringStructure*) serialize to a stream
/// - ns2__NaturalLanguageStringStructure* ns2__NaturalLanguageStringStructure::soap_dup(soap*) returns deep copy of ns2__NaturalLanguageStringStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NaturalLanguageStringStructure::soap_del() deep deletes ns2__NaturalLanguageStringStructure data members, use only after ns2__NaturalLanguageStringStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NaturalLanguageStringStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":PopulatedStringType" simpleContent.
    ns2__PopulatedStringType             __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
};

/// @brief "http://www.siri.org.uk/siri":MessageRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for message ref.
/// </BLOCKQUOTE></PRE>
/// class ns2__MessageRefStructure operations:
/// - ns2__MessageRefStructure* soap_new_ns2__MessageRefStructure(soap*) allocate and default initialize
/// - ns2__MessageRefStructure* soap_new_ns2__MessageRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MessageRefStructure* soap_new_req_ns2__MessageRefStructure(soap*, ...) allocate, set required members
/// - ns2__MessageRefStructure* soap_new_set_ns2__MessageRefStructure(soap*, ...) allocate, set all public members
/// - ns2__MessageRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MessageRefStructure(soap*, ns2__MessageRefStructure*) deserialize from a stream
/// - int soap_write_ns2__MessageRefStructure(soap*, ns2__MessageRefStructure*) serialize to a stream
/// - ns2__MessageRefStructure* ns2__MessageRefStructure::soap_dup(soap*) returns deep copy of ns2__MessageRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MessageRefStructure::soap_del() deep deletes ns2__MessageRefStructure data members, use only after ns2__MessageRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MessageRefStructure : public ns2__MessageQualifierStructure
{ public:
};

/// @brief "http://www.siri.org.uk/siri":ItemRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to an Item.
/// </BLOCKQUOTE></PRE>
/// class ns2__ItemRefStructure operations:
/// - ns2__ItemRefStructure* soap_new_ns2__ItemRefStructure(soap*) allocate and default initialize
/// - ns2__ItemRefStructure* soap_new_ns2__ItemRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ItemRefStructure* soap_new_req_ns2__ItemRefStructure(soap*, ...) allocate, set required members
/// - ns2__ItemRefStructure* soap_new_set_ns2__ItemRefStructure(soap*, ...) allocate, set all public members
/// - ns2__ItemRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ItemRefStructure(soap*, ns2__ItemRefStructure*) deserialize from a stream
/// - int soap_write_ns2__ItemRefStructure(soap*, ns2__ItemRefStructure*) serialize to a stream
/// - ns2__ItemRefStructure* ns2__ItemRefStructure::soap_dup(soap*) returns deep copy of ns2__ItemRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ItemRefStructure::soap_del() deep deletes ns2__ItemRefStructure data members, use only after ns2__ItemRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ItemRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":ItemIdentifierType" simpleContent.
    ns2__ItemIdentifierType              __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":CapabilityRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for capability ref.
/// </BLOCKQUOTE></PRE>
/// class ns2__CapabilityRefStructure operations:
/// - ns2__CapabilityRefStructure* soap_new_ns2__CapabilityRefStructure(soap*) allocate and default initialize
/// - ns2__CapabilityRefStructure* soap_new_ns2__CapabilityRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CapabilityRefStructure* soap_new_req_ns2__CapabilityRefStructure(soap*, ...) allocate, set required members
/// - ns2__CapabilityRefStructure* soap_new_set_ns2__CapabilityRefStructure(soap*, ...) allocate, set all public members
/// - ns2__CapabilityRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CapabilityRefStructure(soap*, ns2__CapabilityRefStructure*) deserialize from a stream
/// - int soap_write_ns2__CapabilityRefStructure(soap*, ns2__CapabilityRefStructure*) serialize to a stream
/// - ns2__CapabilityRefStructure* ns2__CapabilityRefStructure::soap_dup(soap*) returns deep copy of ns2__CapabilityRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CapabilityRefStructure::soap_del() deep deletes ns2__CapabilityRefStructure data members, use only after ns2__CapabilityRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CapabilityRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":CapabilityCodeType" simpleContent.
    ns2__CapabilityCodeType              __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":ParticipantRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to Unique identifier of participant.
/// </BLOCKQUOTE></PRE>
/// class ns2__ParticipantRefStructure operations:
/// - ns2__ParticipantRefStructure* soap_new_ns2__ParticipantRefStructure(soap*) allocate and default initialize
/// - ns2__ParticipantRefStructure* soap_new_ns2__ParticipantRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ParticipantRefStructure* soap_new_req_ns2__ParticipantRefStructure(soap*, ...) allocate, set required members
/// - ns2__ParticipantRefStructure* soap_new_set_ns2__ParticipantRefStructure(soap*, ...) allocate, set all public members
/// - ns2__ParticipantRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ParticipantRefStructure(soap*, ns2__ParticipantRefStructure*) deserialize from a stream
/// - int soap_write_ns2__ParticipantRefStructure(soap*, ns2__ParticipantRefStructure*) serialize to a stream
/// - ns2__ParticipantRefStructure* ns2__ParticipantRefStructure::soap_dup(soap*) returns deep copy of ns2__ParticipantRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ParticipantRefStructure::soap_del() deep deletes ns2__ParticipantRefStructure data members, use only after ns2__ParticipantRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ParticipantRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":ParticipantCodeType" simpleContent.
    ns2__ParticipantCodeType             __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":FacilityRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a Faclility.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityRefStructure operations:
/// - ns2__FacilityRefStructure* soap_new_ns2__FacilityRefStructure(soap*) allocate and default initialize
/// - ns2__FacilityRefStructure* soap_new_ns2__FacilityRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityRefStructure* soap_new_req_ns2__FacilityRefStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityRefStructure* soap_new_set_ns2__FacilityRefStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityRefStructure(soap*, ns2__FacilityRefStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityRefStructure(soap*, ns2__FacilityRefStructure*) serialize to a stream
/// - ns2__FacilityRefStructure* ns2__FacilityRefStructure::soap_dup(soap*) returns deep copy of ns2__FacilityRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityRefStructure::soap_del() deep deletes ns2__FacilityRefStructure data members, use only after ns2__FacilityRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":FacilityCodeType" simpleContent.
    ns2__FacilityCodeType                __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":VehicleJourneyRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleJourneyRefStructure operations:
/// - ns2__VehicleJourneyRefStructure* soap_new_ns2__VehicleJourneyRefStructure(soap*) allocate and default initialize
/// - ns2__VehicleJourneyRefStructure* soap_new_ns2__VehicleJourneyRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleJourneyRefStructure* soap_new_req_ns2__VehicleJourneyRefStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleJourneyRefStructure* soap_new_set_ns2__VehicleJourneyRefStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleJourneyRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleJourneyRefStructure(soap*, ns2__VehicleJourneyRefStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleJourneyRefStructure(soap*, ns2__VehicleJourneyRefStructure*) serialize to a stream
/// - ns2__VehicleJourneyRefStructure* ns2__VehicleJourneyRefStructure::soap_dup(soap*) returns deep copy of ns2__VehicleJourneyRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleJourneyRefStructure::soap_del() deep deletes ns2__VehicleJourneyRefStructure data members, use only after ns2__VehicleJourneyRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleJourneyRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":VehicleJourneyCodeType" simpleContent.
    ns2__VehicleJourneyCodeType          __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":DatedVehicleJourneyRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a Dated VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// class ns2__DatedVehicleJourneyRefStructure operations:
/// - ns2__DatedVehicleJourneyRefStructure* soap_new_ns2__DatedVehicleJourneyRefStructure(soap*) allocate and default initialize
/// - ns2__DatedVehicleJourneyRefStructure* soap_new_ns2__DatedVehicleJourneyRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DatedVehicleJourneyRefStructure* soap_new_req_ns2__DatedVehicleJourneyRefStructure(soap*, ...) allocate, set required members
/// - ns2__DatedVehicleJourneyRefStructure* soap_new_set_ns2__DatedVehicleJourneyRefStructure(soap*, ...) allocate, set all public members
/// - ns2__DatedVehicleJourneyRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DatedVehicleJourneyRefStructure(soap*, ns2__DatedVehicleJourneyRefStructure*) deserialize from a stream
/// - int soap_write_ns2__DatedVehicleJourneyRefStructure(soap*, ns2__DatedVehicleJourneyRefStructure*) serialize to a stream
/// - ns2__DatedVehicleJourneyRefStructure* ns2__DatedVehicleJourneyRefStructure::soap_dup(soap*) returns deep copy of ns2__DatedVehicleJourneyRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DatedVehicleJourneyRefStructure::soap_del() deep deletes ns2__DatedVehicleJourneyRefStructure data members, use only after ns2__DatedVehicleJourneyRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DatedVehicleJourneyRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":DatedVehicleJourneyCodeType" simpleContent.
    ns2__DatedVehicleJourneyCodeType     __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":InterchangeRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SERVCIE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// class ns2__InterchangeRefStructure operations:
/// - ns2__InterchangeRefStructure* soap_new_ns2__InterchangeRefStructure(soap*) allocate and default initialize
/// - ns2__InterchangeRefStructure* soap_new_ns2__InterchangeRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InterchangeRefStructure* soap_new_req_ns2__InterchangeRefStructure(soap*, ...) allocate, set required members
/// - ns2__InterchangeRefStructure* soap_new_set_ns2__InterchangeRefStructure(soap*, ...) allocate, set all public members
/// - ns2__InterchangeRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InterchangeRefStructure(soap*, ns2__InterchangeRefStructure*) deserialize from a stream
/// - int soap_write_ns2__InterchangeRefStructure(soap*, ns2__InterchangeRefStructure*) serialize to a stream
/// - ns2__InterchangeRefStructure* ns2__InterchangeRefStructure::soap_dup(soap*) returns deep copy of ns2__InterchangeRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InterchangeRefStructure::soap_del() deep deletes ns2__InterchangeRefStructure data members, use only after ns2__InterchangeRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InterchangeRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":InterchangeCodeType" simpleContent.
    ns2__InterchangeCodeType             __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":DataFrameRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for identifier of a data VERSION FRAME.
/// </BLOCKQUOTE></PRE>
/// class ns2__DataFrameRefStructure operations:
/// - ns2__DataFrameRefStructure* soap_new_ns2__DataFrameRefStructure(soap*) allocate and default initialize
/// - ns2__DataFrameRefStructure* soap_new_ns2__DataFrameRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DataFrameRefStructure* soap_new_req_ns2__DataFrameRefStructure(soap*, ...) allocate, set required members
/// - ns2__DataFrameRefStructure* soap_new_set_ns2__DataFrameRefStructure(soap*, ...) allocate, set all public members
/// - ns2__DataFrameRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DataFrameRefStructure(soap*, ns2__DataFrameRefStructure*) deserialize from a stream
/// - int soap_write_ns2__DataFrameRefStructure(soap*, ns2__DataFrameRefStructure*) serialize to a stream
/// - ns2__DataFrameRefStructure* ns2__DataFrameRefStructure::soap_dup(soap*) returns deep copy of ns2__DataFrameRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DataFrameRefStructure::soap_del() deep deletes ns2__DataFrameRefStructure data members, use only after ns2__DataFrameRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DataFrameRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":DataFrameQualifierType" simpleContent.
    ns2__DataFrameQualifierType          __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":TrainPartRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a Train Part.
/// </BLOCKQUOTE></PRE>
/// class ns2__TrainPartRefStructure operations:
/// - ns2__TrainPartRefStructure* soap_new_ns2__TrainPartRefStructure(soap*) allocate and default initialize
/// - ns2__TrainPartRefStructure* soap_new_ns2__TrainPartRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TrainPartRefStructure* soap_new_req_ns2__TrainPartRefStructure(soap*, ...) allocate, set required members
/// - ns2__TrainPartRefStructure* soap_new_set_ns2__TrainPartRefStructure(soap*, ...) allocate, set all public members
/// - ns2__TrainPartRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TrainPartRefStructure(soap*, ns2__TrainPartRefStructure*) deserialize from a stream
/// - int soap_write_ns2__TrainPartRefStructure(soap*, ns2__TrainPartRefStructure*) serialize to a stream
/// - ns2__TrainPartRefStructure* ns2__TrainPartRefStructure::soap_dup(soap*) returns deep copy of ns2__TrainPartRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TrainPartRefStructure::soap_del() deep deletes ns2__TrainPartRefStructure data members, use only after ns2__TrainPartRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TrainPartRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":TrainPartCodeType" simpleContent.
    ns2__TrainPartCodeType               __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":BlockRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a BLOCK.
/// </BLOCKQUOTE></PRE>
/// class ns2__BlockRefStructure operations:
/// - ns2__BlockRefStructure* soap_new_ns2__BlockRefStructure(soap*) allocate and default initialize
/// - ns2__BlockRefStructure* soap_new_ns2__BlockRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__BlockRefStructure* soap_new_req_ns2__BlockRefStructure(soap*, ...) allocate, set required members
/// - ns2__BlockRefStructure* soap_new_set_ns2__BlockRefStructure(soap*, ...) allocate, set all public members
/// - ns2__BlockRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__BlockRefStructure(soap*, ns2__BlockRefStructure*) deserialize from a stream
/// - int soap_write_ns2__BlockRefStructure(soap*, ns2__BlockRefStructure*) serialize to a stream
/// - ns2__BlockRefStructure* ns2__BlockRefStructure::soap_dup(soap*) returns deep copy of ns2__BlockRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BlockRefStructure::soap_del() deep deletes ns2__BlockRefStructure data members, use only after ns2__BlockRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BlockRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":BlockNumber" simpleContent.
    ns2__BlockNumber                     __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":CourseOfJourneyRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a COURSE OF JOURNEY (Run).
/// </BLOCKQUOTE></PRE>
/// class ns2__CourseOfJourneyRefStructure operations:
/// - ns2__CourseOfJourneyRefStructure* soap_new_ns2__CourseOfJourneyRefStructure(soap*) allocate and default initialize
/// - ns2__CourseOfJourneyRefStructure* soap_new_ns2__CourseOfJourneyRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CourseOfJourneyRefStructure* soap_new_req_ns2__CourseOfJourneyRefStructure(soap*, ...) allocate, set required members
/// - ns2__CourseOfJourneyRefStructure* soap_new_set_ns2__CourseOfJourneyRefStructure(soap*, ...) allocate, set all public members
/// - ns2__CourseOfJourneyRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CourseOfJourneyRefStructure(soap*, ns2__CourseOfJourneyRefStructure*) deserialize from a stream
/// - int soap_write_ns2__CourseOfJourneyRefStructure(soap*, ns2__CourseOfJourneyRefStructure*) serialize to a stream
/// - ns2__CourseOfJourneyRefStructure* ns2__CourseOfJourneyRefStructure::soap_dup(soap*) returns deep copy of ns2__CourseOfJourneyRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CourseOfJourneyRefStructure::soap_del() deep deletes ns2__CourseOfJourneyRefStructure data members, use only after ns2__CourseOfJourneyRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CourseOfJourneyRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":CourseOfJourneyNumber" simpleContent.
    ns2__CourseOfJourneyNumber           __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":JourneyPartRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a JOURNEY PART
/// </BLOCKQUOTE></PRE>
/// class ns2__JourneyPartRefStructure operations:
/// - ns2__JourneyPartRefStructure* soap_new_ns2__JourneyPartRefStructure(soap*) allocate and default initialize
/// - ns2__JourneyPartRefStructure* soap_new_ns2__JourneyPartRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__JourneyPartRefStructure* soap_new_req_ns2__JourneyPartRefStructure(soap*, ...) allocate, set required members
/// - ns2__JourneyPartRefStructure* soap_new_set_ns2__JourneyPartRefStructure(soap*, ...) allocate, set all public members
/// - ns2__JourneyPartRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__JourneyPartRefStructure(soap*, ns2__JourneyPartRefStructure*) deserialize from a stream
/// - int soap_write_ns2__JourneyPartRefStructure(soap*, ns2__JourneyPartRefStructure*) serialize to a stream
/// - ns2__JourneyPartRefStructure* ns2__JourneyPartRefStructure::soap_dup(soap*) returns deep copy of ns2__JourneyPartRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__JourneyPartRefStructure::soap_del() deep deletes ns2__JourneyPartRefStructure data members, use only after ns2__JourneyPartRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__JourneyPartRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":JourneyPartIdType" simpleContent.
    ns2__JourneyPartIdType               __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":TrainNumberRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a TRAIN NUMBER
/// </BLOCKQUOTE></PRE>
/// class ns2__TrainNumberRefStructure operations:
/// - ns2__TrainNumberRefStructure* soap_new_ns2__TrainNumberRefStructure(soap*) allocate and default initialize
/// - ns2__TrainNumberRefStructure* soap_new_ns2__TrainNumberRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TrainNumberRefStructure* soap_new_req_ns2__TrainNumberRefStructure(soap*, ...) allocate, set required members
/// - ns2__TrainNumberRefStructure* soap_new_set_ns2__TrainNumberRefStructure(soap*, ...) allocate, set all public members
/// - ns2__TrainNumberRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TrainNumberRefStructure(soap*, ns2__TrainNumberRefStructure*) deserialize from a stream
/// - int soap_write_ns2__TrainNumberRefStructure(soap*, ns2__TrainNumberRefStructure*) serialize to a stream
/// - ns2__TrainNumberRefStructure* ns2__TrainNumberRefStructure::soap_dup(soap*) returns deep copy of ns2__TrainNumberRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TrainNumberRefStructure::soap_del() deep deletes ns2__TrainNumberRefStructure data members, use only after ns2__TrainNumberRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TrainNumberRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":TrainNumber" simpleContent.
    ns2__TrainNumber                     __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":DestinationRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__DestinationRefStructure operations:
/// - ns2__DestinationRefStructure* soap_new_ns2__DestinationRefStructure(soap*) allocate and default initialize
/// - ns2__DestinationRefStructure* soap_new_ns2__DestinationRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DestinationRefStructure* soap_new_req_ns2__DestinationRefStructure(soap*, ...) allocate, set required members
/// - ns2__DestinationRefStructure* soap_new_set_ns2__DestinationRefStructure(soap*, ...) allocate, set all public members
/// - ns2__DestinationRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DestinationRefStructure(soap*, ns2__DestinationRefStructure*) deserialize from a stream
/// - int soap_write_ns2__DestinationRefStructure(soap*, ns2__DestinationRefStructure*) serialize to a stream
/// - ns2__DestinationRefStructure* ns2__DestinationRefStructure::soap_dup(soap*) returns deep copy of ns2__DestinationRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DestinationRefStructure::soap_del() deep deletes ns2__DestinationRefStructure data members, use only after ns2__DestinationRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DestinationRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":DestinationCodeType" simpleContent.
    ns2__DestinationCodeType             __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":VersionRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference Timetable Version.
/// </BLOCKQUOTE></PRE>
/// class ns2__VersionRefStructure operations:
/// - ns2__VersionRefStructure* soap_new_ns2__VersionRefStructure(soap*) allocate and default initialize
/// - ns2__VersionRefStructure* soap_new_ns2__VersionRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VersionRefStructure* soap_new_req_ns2__VersionRefStructure(soap*, ...) allocate, set required members
/// - ns2__VersionRefStructure* soap_new_set_ns2__VersionRefStructure(soap*, ...) allocate, set all public members
/// - ns2__VersionRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VersionRefStructure(soap*, ns2__VersionRefStructure*) deserialize from a stream
/// - int soap_write_ns2__VersionRefStructure(soap*, ns2__VersionRefStructure*) serialize to a stream
/// - ns2__VersionRefStructure* ns2__VersionRefStructure::soap_dup(soap*) returns deep copy of ns2__VersionRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VersionRefStructure::soap_del() deep deletes ns2__VersionRefStructure data members, use only after ns2__VersionRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VersionRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":VersionCodeType" simpleContent.
    ns2__VersionCodeType                 __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":StopPointRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopPointRefStructure operations:
/// - ns2__StopPointRefStructure* soap_new_ns2__StopPointRefStructure(soap*) allocate and default initialize
/// - ns2__StopPointRefStructure* soap_new_ns2__StopPointRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopPointRefStructure* soap_new_req_ns2__StopPointRefStructure(soap*, ...) allocate, set required members
/// - ns2__StopPointRefStructure* soap_new_set_ns2__StopPointRefStructure(soap*, ...) allocate, set all public members
/// - ns2__StopPointRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopPointRefStructure(soap*, ns2__StopPointRefStructure*) deserialize from a stream
/// - int soap_write_ns2__StopPointRefStructure(soap*, ns2__StopPointRefStructure*) serialize to a stream
/// - ns2__StopPointRefStructure* ns2__StopPointRefStructure::soap_dup(soap*) returns deep copy of ns2__StopPointRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopPointRefStructure::soap_del() deep deletes ns2__StopPointRefStructure data members, use only after ns2__StopPointRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopPointRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":StopPointCodeType" simpleContent.
    ns2__StopPointCodeType               __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":ClearDownRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference Cleardown identifier of a stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__ClearDownRefStructure operations:
/// - ns2__ClearDownRefStructure* soap_new_ns2__ClearDownRefStructure(soap*) allocate and default initialize
/// - ns2__ClearDownRefStructure* soap_new_ns2__ClearDownRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ClearDownRefStructure* soap_new_req_ns2__ClearDownRefStructure(soap*, ...) allocate, set required members
/// - ns2__ClearDownRefStructure* soap_new_set_ns2__ClearDownRefStructure(soap*, ...) allocate, set all public members
/// - ns2__ClearDownRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ClearDownRefStructure(soap*, ns2__ClearDownRefStructure*) deserialize from a stream
/// - int soap_write_ns2__ClearDownRefStructure(soap*, ns2__ClearDownRefStructure*) serialize to a stream
/// - ns2__ClearDownRefStructure* ns2__ClearDownRefStructure::soap_dup(soap*) returns deep copy of ns2__ClearDownRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ClearDownRefStructure::soap_del() deep deletes ns2__ClearDownRefStructure data members, use only after ns2__ClearDownRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ClearDownRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":ClearDownCodeType" simpleContent.
    ns2__ClearDownCodeType               __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":StopAreaRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP AREA.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopAreaRefStructure operations:
/// - ns2__StopAreaRefStructure* soap_new_ns2__StopAreaRefStructure(soap*) allocate and default initialize
/// - ns2__StopAreaRefStructure* soap_new_ns2__StopAreaRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopAreaRefStructure* soap_new_req_ns2__StopAreaRefStructure(soap*, ...) allocate, set required members
/// - ns2__StopAreaRefStructure* soap_new_set_ns2__StopAreaRefStructure(soap*, ...) allocate, set all public members
/// - ns2__StopAreaRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopAreaRefStructure(soap*, ns2__StopAreaRefStructure*) deserialize from a stream
/// - int soap_write_ns2__StopAreaRefStructure(soap*, ns2__StopAreaRefStructure*) serialize to a stream
/// - ns2__StopAreaRefStructure* ns2__StopAreaRefStructure::soap_dup(soap*) returns deep copy of ns2__StopAreaRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopAreaRefStructure::soap_del() deep deletes ns2__StopAreaRefStructure data members, use only after ns2__StopAreaRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopAreaRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":StopAreaCodeType" simpleContent.
    ns2__StopAreaCodeType                __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":QuayRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a QUAY.
/// </BLOCKQUOTE></PRE>
/// class ns2__QuayRefStructure operations:
/// - ns2__QuayRefStructure* soap_new_ns2__QuayRefStructure(soap*) allocate and default initialize
/// - ns2__QuayRefStructure* soap_new_ns2__QuayRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__QuayRefStructure* soap_new_req_ns2__QuayRefStructure(soap*, ...) allocate, set required members
/// - ns2__QuayRefStructure* soap_new_set_ns2__QuayRefStructure(soap*, ...) allocate, set all public members
/// - ns2__QuayRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__QuayRefStructure(soap*, ns2__QuayRefStructure*) deserialize from a stream
/// - int soap_write_ns2__QuayRefStructure(soap*, ns2__QuayRefStructure*) serialize to a stream
/// - ns2__QuayRefStructure* ns2__QuayRefStructure::soap_dup(soap*) returns deep copy of ns2__QuayRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__QuayRefStructure::soap_del() deep deletes ns2__QuayRefStructure data members, use only after ns2__QuayRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__QuayRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":QuayCodeType" simpleContent.
    ns2__QuayCodeType                    __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":MonitoringRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a monitoring point (LOGICAL DISPLAY).
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoringRefStructure operations:
/// - ns2__MonitoringRefStructure* soap_new_ns2__MonitoringRefStructure(soap*) allocate and default initialize
/// - ns2__MonitoringRefStructure* soap_new_ns2__MonitoringRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoringRefStructure* soap_new_req_ns2__MonitoringRefStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoringRefStructure* soap_new_set_ns2__MonitoringRefStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoringRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoringRefStructure(soap*, ns2__MonitoringRefStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoringRefStructure(soap*, ns2__MonitoringRefStructure*) serialize to a stream
/// - ns2__MonitoringRefStructure* ns2__MonitoringRefStructure::soap_dup(soap*) returns deep copy of ns2__MonitoringRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoringRefStructure::soap_del() deep deletes ns2__MonitoringRefStructure data members, use only after ns2__MonitoringRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoringRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":MonitoringCode" simpleContent.
    ns2__MonitoringCode                  __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":ConnectionLinkRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a CONNECTION link
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionLinkRefStructure operations:
/// - ns2__ConnectionLinkRefStructure* soap_new_ns2__ConnectionLinkRefStructure(soap*) allocate and default initialize
/// - ns2__ConnectionLinkRefStructure* soap_new_ns2__ConnectionLinkRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionLinkRefStructure* soap_new_req_ns2__ConnectionLinkRefStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionLinkRefStructure* soap_new_set_ns2__ConnectionLinkRefStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionLinkRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionLinkRefStructure(soap*, ns2__ConnectionLinkRefStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionLinkRefStructure(soap*, ns2__ConnectionLinkRefStructure*) serialize to a stream
/// - ns2__ConnectionLinkRefStructure* ns2__ConnectionLinkRefStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionLinkRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionLinkRefStructure::soap_del() deep deletes ns2__ConnectionLinkRefStructure data members, use only after ns2__ConnectionLinkRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionLinkRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":ConnectionLinkCodeType" simpleContent.
    ns2__ConnectionLinkCodeType          __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":JourneyPatternRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for refrence to a JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// class ns2__JourneyPatternRefStructure operations:
/// - ns2__JourneyPatternRefStructure* soap_new_ns2__JourneyPatternRefStructure(soap*) allocate and default initialize
/// - ns2__JourneyPatternRefStructure* soap_new_ns2__JourneyPatternRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__JourneyPatternRefStructure* soap_new_req_ns2__JourneyPatternRefStructure(soap*, ...) allocate, set required members
/// - ns2__JourneyPatternRefStructure* soap_new_set_ns2__JourneyPatternRefStructure(soap*, ...) allocate, set all public members
/// - ns2__JourneyPatternRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__JourneyPatternRefStructure(soap*, ns2__JourneyPatternRefStructure*) deserialize from a stream
/// - int soap_write_ns2__JourneyPatternRefStructure(soap*, ns2__JourneyPatternRefStructure*) serialize to a stream
/// - ns2__JourneyPatternRefStructure* ns2__JourneyPatternRefStructure::soap_dup(soap*) returns deep copy of ns2__JourneyPatternRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__JourneyPatternRefStructure::soap_del() deep deletes ns2__JourneyPatternRefStructure data members, use only after ns2__JourneyPatternRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__JourneyPatternRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":JourneyPatternCodeType" simpleContent.
    ns2__JourneyPatternCodeType          __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":LineRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// class ns2__LineRefStructure operations:
/// - ns2__LineRefStructure* soap_new_ns2__LineRefStructure(soap*) allocate and default initialize
/// - ns2__LineRefStructure* soap_new_ns2__LineRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__LineRefStructure* soap_new_req_ns2__LineRefStructure(soap*, ...) allocate, set required members
/// - ns2__LineRefStructure* soap_new_set_ns2__LineRefStructure(soap*, ...) allocate, set all public members
/// - ns2__LineRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__LineRefStructure(soap*, ns2__LineRefStructure*) deserialize from a stream
/// - int soap_write_ns2__LineRefStructure(soap*, ns2__LineRefStructure*) serialize to a stream
/// - ns2__LineRefStructure* ns2__LineRefStructure::soap_dup(soap*) returns deep copy of ns2__LineRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__LineRefStructure::soap_del() deep deletes ns2__LineRefStructure data members, use only after ns2__LineRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__LineRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":LineRefCodeType" simpleContent.
    ns2__LineRefCodeType                 __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":GroupOfLinesRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs
/// </BLOCKQUOTE></PRE>
/// class ns2__GroupOfLinesRefStructure operations:
/// - ns2__GroupOfLinesRefStructure* soap_new_ns2__GroupOfLinesRefStructure(soap*) allocate and default initialize
/// - ns2__GroupOfLinesRefStructure* soap_new_ns2__GroupOfLinesRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GroupOfLinesRefStructure* soap_new_req_ns2__GroupOfLinesRefStructure(soap*, ...) allocate, set required members
/// - ns2__GroupOfLinesRefStructure* soap_new_set_ns2__GroupOfLinesRefStructure(soap*, ...) allocate, set all public members
/// - ns2__GroupOfLinesRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GroupOfLinesRefStructure(soap*, ns2__GroupOfLinesRefStructure*) deserialize from a stream
/// - int soap_write_ns2__GroupOfLinesRefStructure(soap*, ns2__GroupOfLinesRefStructure*) serialize to a stream
/// - ns2__GroupOfLinesRefStructure* ns2__GroupOfLinesRefStructure::soap_dup(soap*) returns deep copy of ns2__GroupOfLinesRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GroupOfLinesRefStructure::soap_del() deep deletes ns2__GroupOfLinesRefStructure data members, use only after ns2__GroupOfLinesRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GroupOfLinesRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":GroupOfLinesCodeType" simpleContent.
    ns2__GroupOfLinesCodeType            __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":RouteRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a Route (Transmodel)
/// </BLOCKQUOTE></PRE>
/// class ns2__RouteRefStructure operations:
/// - ns2__RouteRefStructure* soap_new_ns2__RouteRefStructure(soap*) allocate and default initialize
/// - ns2__RouteRefStructure* soap_new_ns2__RouteRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RouteRefStructure* soap_new_req_ns2__RouteRefStructure(soap*, ...) allocate, set required members
/// - ns2__RouteRefStructure* soap_new_set_ns2__RouteRefStructure(soap*, ...) allocate, set all public members
/// - ns2__RouteRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RouteRefStructure(soap*, ns2__RouteRefStructure*) deserialize from a stream
/// - int soap_write_ns2__RouteRefStructure(soap*, ns2__RouteRefStructure*) serialize to a stream
/// - ns2__RouteRefStructure* ns2__RouteRefStructure::soap_dup(soap*) returns deep copy of ns2__RouteRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RouteRefStructure::soap_del() deep deletes ns2__RouteRefStructure data members, use only after ns2__RouteRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RouteRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":RouteCodeType" simpleContent.
    ns2__RouteCodeType                   __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":DirectionRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a DIRECTION.
/// </BLOCKQUOTE></PRE>
/// class ns2__DirectionRefStructure operations:
/// - ns2__DirectionRefStructure* soap_new_ns2__DirectionRefStructure(soap*) allocate and default initialize
/// - ns2__DirectionRefStructure* soap_new_ns2__DirectionRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DirectionRefStructure* soap_new_req_ns2__DirectionRefStructure(soap*, ...) allocate, set required members
/// - ns2__DirectionRefStructure* soap_new_set_ns2__DirectionRefStructure(soap*, ...) allocate, set all public members
/// - ns2__DirectionRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DirectionRefStructure(soap*, ns2__DirectionRefStructure*) deserialize from a stream
/// - int soap_write_ns2__DirectionRefStructure(soap*, ns2__DirectionRefStructure*) serialize to a stream
/// - ns2__DirectionRefStructure* ns2__DirectionRefStructure::soap_dup(soap*) returns deep copy of ns2__DirectionRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DirectionRefStructure::soap_del() deep deletes ns2__DirectionRefStructure data members, use only after ns2__DirectionRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DirectionRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":DirectionCodeType" simpleContent.
    ns2__DirectionCodeType               __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":RouteLinkRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a ROUTE LINk.
/// </BLOCKQUOTE></PRE>
/// class ns2__RouteLinkRefStructure operations:
/// - ns2__RouteLinkRefStructure* soap_new_ns2__RouteLinkRefStructure(soap*) allocate and default initialize
/// - ns2__RouteLinkRefStructure* soap_new_ns2__RouteLinkRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RouteLinkRefStructure* soap_new_req_ns2__RouteLinkRefStructure(soap*, ...) allocate, set required members
/// - ns2__RouteLinkRefStructure* soap_new_set_ns2__RouteLinkRefStructure(soap*, ...) allocate, set all public members
/// - ns2__RouteLinkRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RouteLinkRefStructure(soap*, ns2__RouteLinkRefStructure*) deserialize from a stream
/// - int soap_write_ns2__RouteLinkRefStructure(soap*, ns2__RouteLinkRefStructure*) serialize to a stream
/// - ns2__RouteLinkRefStructure* ns2__RouteLinkRefStructure::soap_dup(soap*) returns deep copy of ns2__RouteLinkRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RouteLinkRefStructure::soap_del() deep deletes ns2__RouteLinkRefStructure data members, use only after ns2__RouteLinkRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RouteLinkRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":RouteLinkCodeType" simpleContent.
    ns2__RouteLinkCodeType               __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":VehicleRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleRefStructure operations:
/// - ns2__VehicleRefStructure* soap_new_ns2__VehicleRefStructure(soap*) allocate and default initialize
/// - ns2__VehicleRefStructure* soap_new_ns2__VehicleRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleRefStructure* soap_new_req_ns2__VehicleRefStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleRefStructure* soap_new_set_ns2__VehicleRefStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleRefStructure(soap*, ns2__VehicleRefStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleRefStructure(soap*, ns2__VehicleRefStructure*) serialize to a stream
/// - ns2__VehicleRefStructure* ns2__VehicleRefStructure::soap_dup(soap*) returns deep copy of ns2__VehicleRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleRefStructure::soap_del() deep deletes ns2__VehicleRefStructure data members, use only after ns2__VehicleRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":VehicleCodeType" simpleContent.
    ns2__VehicleCodeType                 __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":DriverRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to a DRIVER.
/// </BLOCKQUOTE></PRE>
/// class ns2__DriverRefStructure operations:
/// - ns2__DriverRefStructure* soap_new_ns2__DriverRefStructure(soap*) allocate and default initialize
/// - ns2__DriverRefStructure* soap_new_ns2__DriverRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DriverRefStructure* soap_new_req_ns2__DriverRefStructure(soap*, ...) allocate, set required members
/// - ns2__DriverRefStructure* soap_new_set_ns2__DriverRefStructure(soap*, ...) allocate, set all public members
/// - ns2__DriverRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DriverRefStructure(soap*, ns2__DriverRefStructure*) deserialize from a stream
/// - int soap_write_ns2__DriverRefStructure(soap*, ns2__DriverRefStructure*) serialize to a stream
/// - ns2__DriverRefStructure* ns2__DriverRefStructure::soap_dup(soap*) returns deep copy of ns2__DriverRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DriverRefStructure::soap_del() deep deletes ns2__DriverRefStructure data members, use only after ns2__DriverRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DriverRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":DriverCodeType" simpleContent.
    ns2__DriverCodeType                  __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":InfoChannelRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to an Info Channel.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoChannelRefStructure operations:
/// - ns2__InfoChannelRefStructure* soap_new_ns2__InfoChannelRefStructure(soap*) allocate and default initialize
/// - ns2__InfoChannelRefStructure* soap_new_ns2__InfoChannelRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoChannelRefStructure* soap_new_req_ns2__InfoChannelRefStructure(soap*, ...) allocate, set required members
/// - ns2__InfoChannelRefStructure* soap_new_set_ns2__InfoChannelRefStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoChannelRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoChannelRefStructure(soap*, ns2__InfoChannelRefStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoChannelRefStructure(soap*, ns2__InfoChannelRefStructure*) serialize to a stream
/// - ns2__InfoChannelRefStructure* ns2__InfoChannelRefStructure::soap_dup(soap*) returns deep copy of ns2__InfoChannelRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoChannelRefStructure::soap_del() deep deletes ns2__InfoChannelRefStructure data members, use only after ns2__InfoChannelRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoChannelRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":InfoChannelCodeType" simpleContent.
    ns2__InfoChannelCodeType             __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":OperatorRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to an OPERATOR.
/// </BLOCKQUOTE></PRE>
/// class ns2__OperatorRefStructure operations:
/// - ns2__OperatorRefStructure* soap_new_ns2__OperatorRefStructure(soap*) allocate and default initialize
/// - ns2__OperatorRefStructure* soap_new_ns2__OperatorRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OperatorRefStructure* soap_new_req_ns2__OperatorRefStructure(soap*, ...) allocate, set required members
/// - ns2__OperatorRefStructure* soap_new_set_ns2__OperatorRefStructure(soap*, ...) allocate, set all public members
/// - ns2__OperatorRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OperatorRefStructure(soap*, ns2__OperatorRefStructure*) deserialize from a stream
/// - int soap_write_ns2__OperatorRefStructure(soap*, ns2__OperatorRefStructure*) serialize to a stream
/// - ns2__OperatorRefStructure* ns2__OperatorRefStructure::soap_dup(soap*) returns deep copy of ns2__OperatorRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OperatorRefStructure::soap_del() deep deletes ns2__OperatorRefStructure data members, use only after ns2__OperatorRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OperatorRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":OperatorCodeType" simpleContent.
    ns2__OperatorCodeType                __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":OrganisationRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Reference to an Organisation.
/// </BLOCKQUOTE></PRE>
/// class ns2__OrganisationRefStructure operations:
/// - ns2__OrganisationRefStructure* soap_new_ns2__OrganisationRefStructure(soap*) allocate and default initialize
/// - ns2__OrganisationRefStructure* soap_new_ns2__OrganisationRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OrganisationRefStructure* soap_new_req_ns2__OrganisationRefStructure(soap*, ...) allocate, set required members
/// - ns2__OrganisationRefStructure* soap_new_set_ns2__OrganisationRefStructure(soap*, ...) allocate, set all public members
/// - ns2__OrganisationRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OrganisationRefStructure(soap*, ns2__OrganisationRefStructure*) deserialize from a stream
/// - int soap_write_ns2__OrganisationRefStructure(soap*, ns2__OrganisationRefStructure*) serialize to a stream
/// - ns2__OrganisationRefStructure* ns2__OrganisationRefStructure::soap_dup(soap*) returns deep copy of ns2__OrganisationRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OrganisationRefStructure::soap_del() deep deletes ns2__OrganisationRefStructure data members, use only after ns2__OrganisationRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OrganisationRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":OrganisationCodeType" simpleContent.
    ns2__OrganisationCodeType            __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":SituationSimpleRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION. Includes the Particpant identifier and version components of the identifier.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationSimpleRefStructure operations:
/// - ns2__SituationSimpleRefStructure* soap_new_ns2__SituationSimpleRefStructure(soap*) allocate and default initialize
/// - ns2__SituationSimpleRefStructure* soap_new_ns2__SituationSimpleRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationSimpleRefStructure* soap_new_req_ns2__SituationSimpleRefStructure(soap*, ...) allocate, set required members
/// - ns2__SituationSimpleRefStructure* soap_new_set_ns2__SituationSimpleRefStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationSimpleRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationSimpleRefStructure(soap*, ns2__SituationSimpleRefStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationSimpleRefStructure(soap*, ns2__SituationSimpleRefStructure*) serialize to a stream
/// - ns2__SituationSimpleRefStructure* ns2__SituationSimpleRefStructure::soap_dup(soap*) returns deep copy of ns2__SituationSimpleRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationSimpleRefStructure::soap_del() deep deletes ns2__SituationSimpleRefStructure data members, use only after ns2__SituationSimpleRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationSimpleRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":SituationCodeType" simpleContent.
    ns2__SituationCodeType               __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":ProductCategoryRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a TYPE OF PRODUCT CATEGORY.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductCategoryRefStructure operations:
/// - ns2__ProductCategoryRefStructure* soap_new_ns2__ProductCategoryRefStructure(soap*) allocate and default initialize
/// - ns2__ProductCategoryRefStructure* soap_new_ns2__ProductCategoryRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductCategoryRefStructure* soap_new_req_ns2__ProductCategoryRefStructure(soap*, ...) allocate, set required members
/// - ns2__ProductCategoryRefStructure* soap_new_set_ns2__ProductCategoryRefStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductCategoryRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductCategoryRefStructure(soap*, ns2__ProductCategoryRefStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductCategoryRefStructure(soap*, ns2__ProductCategoryRefStructure*) serialize to a stream
/// - ns2__ProductCategoryRefStructure* ns2__ProductCategoryRefStructure::soap_dup(soap*) returns deep copy of ns2__ProductCategoryRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductCategoryRefStructure::soap_del() deep deletes ns2__ProductCategoryRefStructure data members, use only after ns2__ProductCategoryRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductCategoryRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":ProductCategoryCodeType" simpleContent.
    ns2__ProductCategoryCodeType         __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":ServiceFeatureRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a ServiceCategory.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceFeatureRefStructure operations:
/// - ns2__ServiceFeatureRefStructure* soap_new_ns2__ServiceFeatureRefStructure(soap*) allocate and default initialize
/// - ns2__ServiceFeatureRefStructure* soap_new_ns2__ServiceFeatureRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceFeatureRefStructure* soap_new_req_ns2__ServiceFeatureRefStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceFeatureRefStructure* soap_new_set_ns2__ServiceFeatureRefStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceFeatureRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceFeatureRefStructure(soap*, ns2__ServiceFeatureRefStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceFeatureRefStructure(soap*, ns2__ServiceFeatureRefStructure*) serialize to a stream
/// - ns2__ServiceFeatureRefStructure* ns2__ServiceFeatureRefStructure::soap_dup(soap*) returns deep copy of ns2__ServiceFeatureRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceFeatureRefStructure::soap_del() deep deletes ns2__ServiceFeatureRefStructure data members, use only after ns2__ServiceFeatureRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceFeatureRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":ServiceFeatureCodeType" simpleContent.
    ns2__ServiceFeatureCodeType          __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":VehicleFeatureRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a Vehicle Feature Code. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleFeatureRefStructure operations:
/// - ns2__VehicleFeatureRefStructure* soap_new_ns2__VehicleFeatureRefStructure(soap*) allocate and default initialize
/// - ns2__VehicleFeatureRefStructure* soap_new_ns2__VehicleFeatureRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleFeatureRefStructure* soap_new_req_ns2__VehicleFeatureRefStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleFeatureRefStructure* soap_new_set_ns2__VehicleFeatureRefStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleFeatureRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleFeatureRefStructure(soap*, ns2__VehicleFeatureRefStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleFeatureRefStructure(soap*, ns2__VehicleFeatureRefStructure*) serialize to a stream
/// - ns2__VehicleFeatureRefStructure* ns2__VehicleFeatureRefStructure::soap_dup(soap*) returns deep copy of ns2__VehicleFeatureRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleFeatureRefStructure::soap_del() deep deletes ns2__VehicleFeatureRefStructure data members, use only after ns2__VehicleFeatureRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleFeatureRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":VehicleFeatureCodeType" simpleContent.
    ns2__VehicleFeatureCodeType          __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":FeatureRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a Feature Code.
/// </BLOCKQUOTE></PRE>
/// class ns2__FeatureRefStructure operations:
/// - ns2__FeatureRefStructure* soap_new_ns2__FeatureRefStructure(soap*) allocate and default initialize
/// - ns2__FeatureRefStructure* soap_new_ns2__FeatureRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FeatureRefStructure* soap_new_req_ns2__FeatureRefStructure(soap*, ...) allocate, set required members
/// - ns2__FeatureRefStructure* soap_new_set_ns2__FeatureRefStructure(soap*, ...) allocate, set all public members
/// - ns2__FeatureRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FeatureRefStructure(soap*, ns2__FeatureRefStructure*) deserialize from a stream
/// - int soap_write_ns2__FeatureRefStructure(soap*, ns2__FeatureRefStructure*) serialize to a stream
/// - ns2__FeatureRefStructure* ns2__FeatureRefStructure::soap_dup(soap*) returns deep copy of ns2__FeatureRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FeatureRefStructure::soap_del() deep deletes ns2__FeatureRefStructure data members, use only after ns2__FeatureRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FeatureRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":FeatureCodeType" simpleContent.
    ns2__FeatureCodeType                 __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":PushedActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ParameterisedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for publication action.
/// </BLOCKQUOTE></PRE>
/// class ns2__PushedActionStructure operations:
/// - ns2__PushedActionStructure* soap_new_ns2__PushedActionStructure(soap*) allocate and default initialize
/// - ns2__PushedActionStructure* soap_new_ns2__PushedActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PushedActionStructure* soap_new_req_ns2__PushedActionStructure(soap*, ...) allocate, set required members
/// - ns2__PushedActionStructure* soap_new_set_ns2__PushedActionStructure(soap*, ...) allocate, set all public members
/// - ns2__PushedActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PushedActionStructure(soap*, ns2__PushedActionStructure*) deserialize from a stream
/// - int soap_write_ns2__PushedActionStructure(soap*, ns2__PushedActionStructure*) serialize to a stream
/// - ns2__PushedActionStructure* ns2__PushedActionStructure::soap_dup(soap*) returns deep copy of ns2__PushedActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PushedActionStructure::soap_del() deep deletes ns2__PushedActionStructure data members, use only after ns2__PushedActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PushedActionStructure : public ns2__ParameterisedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Whether reminders should be sent.
/// </BLOCKQUOTE></PRE>
/// class _ns2__PushedActionStructure_BeforeNotices operations:
/// - _ns2__PushedActionStructure_BeforeNotices* soap_new__ns2__PushedActionStructure_BeforeNotices(soap*) allocate and default initialize
/// - _ns2__PushedActionStructure_BeforeNotices* soap_new__ns2__PushedActionStructure_BeforeNotices(soap*, int num) allocate array and default initialize values
/// - _ns2__PushedActionStructure_BeforeNotices* soap_new_req__ns2__PushedActionStructure_BeforeNotices(soap*, ...) allocate, set required members
/// - _ns2__PushedActionStructure_BeforeNotices* soap_new_set__ns2__PushedActionStructure_BeforeNotices(soap*, ...) allocate, set all public members
/// - _ns2__PushedActionStructure_BeforeNotices::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PushedActionStructure_BeforeNotices(soap*, _ns2__PushedActionStructure_BeforeNotices*) deserialize from a stream
/// - int soap_write__ns2__PushedActionStructure_BeforeNotices(soap*, _ns2__PushedActionStructure_BeforeNotices*) serialize to a stream
/// - _ns2__PushedActionStructure_BeforeNotices* _ns2__PushedActionStructure_BeforeNotices::soap_dup(soap*) returns deep copy of _ns2__PushedActionStructure_BeforeNotices, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PushedActionStructure_BeforeNotices::soap_del() deep deletes _ns2__PushedActionStructure_BeforeNotices data members, use only after _ns2__PushedActionStructure_BeforeNotices::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PushedActionStructure_BeforeNotices
    {
/// <PRE><BLOCKQUOTE>
///   Intervals before validity start date to send reminders.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DurationType of length 0..unbounded.
    std::vector<ns2__DurationType      > Interval                       0;
    }                                   *BeforeNotices                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether a clearing notice should be displayed.
/// </BLOCKQUOTE></PRE>
/// Element "ClearNotice" of XSD type xs:boolean.
    bool*                                ClearNotice                    0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":PublishToWebActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ParameterisedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Action Publish SITUATION To Web.
/// </BLOCKQUOTE></PRE>
/// class ns2__PublishToWebActionStructure operations:
/// - ns2__PublishToWebActionStructure* soap_new_ns2__PublishToWebActionStructure(soap*) allocate and default initialize
/// - ns2__PublishToWebActionStructure* soap_new_ns2__PublishToWebActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PublishToWebActionStructure* soap_new_req_ns2__PublishToWebActionStructure(soap*, ...) allocate, set required members
/// - ns2__PublishToWebActionStructure* soap_new_set_ns2__PublishToWebActionStructure(soap*, ...) allocate, set all public members
/// - ns2__PublishToWebActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PublishToWebActionStructure(soap*, ns2__PublishToWebActionStructure*) deserialize from a stream
/// - int soap_write_ns2__PublishToWebActionStructure(soap*, ns2__PublishToWebActionStructure*) serialize to a stream
/// - ns2__PublishToWebActionStructure* ns2__PublishToWebActionStructure::soap_dup(soap*) returns deep copy of ns2__PublishToWebActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PublishToWebActionStructure::soap_del() deep deletes ns2__PublishToWebActionStructure data members, use only after ns2__PublishToWebActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PublishToWebActionStructure : public ns2__ParameterisedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Include in SITUATION lists on web site. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Incidents" of XSD type xs:boolean.
    bool                                 Incidents                      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Include on home page on web site. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HomePage" of XSD type xs:boolean.
    bool                                 HomePage                       0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Include in moving ticker band. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "Ticker" of XSD type xs:boolean.
    bool                                 Ticker                         0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":PublishToMobileActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ParameterisedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Action Publish SITUATION To Displays.
/// </BLOCKQUOTE></PRE>
/// class ns2__PublishToMobileActionStructure operations:
/// - ns2__PublishToMobileActionStructure* soap_new_ns2__PublishToMobileActionStructure(soap*) allocate and default initialize
/// - ns2__PublishToMobileActionStructure* soap_new_ns2__PublishToMobileActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PublishToMobileActionStructure* soap_new_req_ns2__PublishToMobileActionStructure(soap*, ...) allocate, set required members
/// - ns2__PublishToMobileActionStructure* soap_new_set_ns2__PublishToMobileActionStructure(soap*, ...) allocate, set all public members
/// - ns2__PublishToMobileActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PublishToMobileActionStructure(soap*, ns2__PublishToMobileActionStructure*) deserialize from a stream
/// - int soap_write_ns2__PublishToMobileActionStructure(soap*, ns2__PublishToMobileActionStructure*) serialize to a stream
/// - ns2__PublishToMobileActionStructure* ns2__PublishToMobileActionStructure::soap_dup(soap*) returns deep copy of ns2__PublishToMobileActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PublishToMobileActionStructure::soap_del() deep deletes ns2__PublishToMobileActionStructure data members, use only after ns2__PublishToMobileActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PublishToMobileActionStructure : public ns2__ParameterisedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Include in SITUATION lists on mobile site. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Incidents" of XSD type xs:boolean.
    bool                                 Incidents                      0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Include in home page on mobile site. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HomePage" of XSD type xs:boolean.
    bool                                 HomePage                       0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":PublishToDisplayActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ParameterisedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Action Publish SITUATION To Web.
/// </BLOCKQUOTE></PRE>
/// class ns2__PublishToDisplayActionStructure operations:
/// - ns2__PublishToDisplayActionStructure* soap_new_ns2__PublishToDisplayActionStructure(soap*) allocate and default initialize
/// - ns2__PublishToDisplayActionStructure* soap_new_ns2__PublishToDisplayActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PublishToDisplayActionStructure* soap_new_req_ns2__PublishToDisplayActionStructure(soap*, ...) allocate, set required members
/// - ns2__PublishToDisplayActionStructure* soap_new_set_ns2__PublishToDisplayActionStructure(soap*, ...) allocate, set all public members
/// - ns2__PublishToDisplayActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PublishToDisplayActionStructure(soap*, ns2__PublishToDisplayActionStructure*) deserialize from a stream
/// - int soap_write_ns2__PublishToDisplayActionStructure(soap*, ns2__PublishToDisplayActionStructure*) serialize to a stream
/// - ns2__PublishToDisplayActionStructure* ns2__PublishToDisplayActionStructure::soap_dup(soap*) returns deep copy of ns2__PublishToDisplayActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PublishToDisplayActionStructure::soap_del() deep deletes ns2__PublishToDisplayActionStructure data members, use only after ns2__PublishToDisplayActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PublishToDisplayActionStructure : public ns2__ParameterisedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Include in SITUATION lists on station displays.
/// </BLOCKQUOTE></PRE>
/// Element "OnPlace" of XSD type xs:boolean.
    bool                                 OnPlace                        0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Include onboard displays.
/// </BLOCKQUOTE></PRE>
/// Element "OnBoard" of XSD type xs:boolean.
    bool                                 OnBoard                        0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":PublishToTvActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ParameterisedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Notify SITUATION to Tv.
/// </BLOCKQUOTE></PRE>
/// class ns2__PublishToTvActionStructure operations:
/// - ns2__PublishToTvActionStructure* soap_new_ns2__PublishToTvActionStructure(soap*) allocate and default initialize
/// - ns2__PublishToTvActionStructure* soap_new_ns2__PublishToTvActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PublishToTvActionStructure* soap_new_req_ns2__PublishToTvActionStructure(soap*, ...) allocate, set required members
/// - ns2__PublishToTvActionStructure* soap_new_set_ns2__PublishToTvActionStructure(soap*, ...) allocate, set all public members
/// - ns2__PublishToTvActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PublishToTvActionStructure(soap*, ns2__PublishToTvActionStructure*) deserialize from a stream
/// - int soap_write_ns2__PublishToTvActionStructure(soap*, ns2__PublishToTvActionStructure*) serialize to a stream
/// - ns2__PublishToTvActionStructure* ns2__PublishToTvActionStructure::soap_dup(soap*) returns deep copy of ns2__PublishToTvActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PublishToTvActionStructure::soap_del() deep deletes ns2__PublishToTvActionStructure data members, use only after ns2__PublishToTvActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PublishToTvActionStructure : public ns2__ParameterisedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Publish to Teltext. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Ceefax" of XSD type xs:boolean.
    bool                                 Ceefax                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Publish to Ceefax. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element "Teletext" of XSD type xs:boolean.
    bool                                 Teletext                       0 = true;	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":ManualActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ParameterisedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Action Publish SITUATION ManuallyWeb.
/// </BLOCKQUOTE></PRE>
/// class ns2__ManualActionStructure operations:
/// - ns2__ManualActionStructure* soap_new_ns2__ManualActionStructure(soap*) allocate and default initialize
/// - ns2__ManualActionStructure* soap_new_ns2__ManualActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ManualActionStructure* soap_new_req_ns2__ManualActionStructure(soap*, ...) allocate, set required members
/// - ns2__ManualActionStructure* soap_new_set_ns2__ManualActionStructure(soap*, ...) allocate, set all public members
/// - ns2__ManualActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ManualActionStructure(soap*, ns2__ManualActionStructure*) deserialize from a stream
/// - int soap_write_ns2__ManualActionStructure(soap*, ns2__ManualActionStructure*) serialize to a stream
/// - ns2__ManualActionStructure* ns2__ManualActionStructure::soap_dup(soap*) returns deep copy of ns2__ManualActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ManualActionStructure::soap_del() deep deletes ns2__ManualActionStructure data members, use only after ns2__ManualActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ManualActionStructure : public ns2__ParameterisedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
};

/// @brief "http://www.siri.org.uk/siri":ZoneRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a reference to a ZONE or locality.
/// </BLOCKQUOTE></PRE>
/// class ns2__ZoneRefStructure operations:
/// - ns2__ZoneRefStructure* soap_new_ns2__ZoneRefStructure(soap*) allocate and default initialize
/// - ns2__ZoneRefStructure* soap_new_ns2__ZoneRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ZoneRefStructure* soap_new_req_ns2__ZoneRefStructure(soap*, ...) allocate, set required members
/// - ns2__ZoneRefStructure* soap_new_set_ns2__ZoneRefStructure(soap*, ...) allocate, set all public members
/// - ns2__ZoneRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ZoneRefStructure(soap*, ns2__ZoneRefStructure*) deserialize from a stream
/// - int soap_write_ns2__ZoneRefStructure(soap*, ns2__ZoneRefStructure*) serialize to a stream
/// - ns2__ZoneRefStructure* ns2__ZoneRefStructure::soap_dup(soap*) returns deep copy of ns2__ZoneRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ZoneRefStructure::soap_del() deep deletes ns2__ZoneRefStructure data members, use only after ns2__ZoneRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ZoneRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":ZoneCodeType" simpleContent.
    ns2__ZoneCodeType                    __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":NetworkRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to an OPERATOR.
/// </BLOCKQUOTE></PRE>
/// class ns2__NetworkRefStructure operations:
/// - ns2__NetworkRefStructure* soap_new_ns2__NetworkRefStructure(soap*) allocate and default initialize
/// - ns2__NetworkRefStructure* soap_new_ns2__NetworkRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NetworkRefStructure* soap_new_req_ns2__NetworkRefStructure(soap*, ...) allocate, set required members
/// - ns2__NetworkRefStructure* soap_new_set_ns2__NetworkRefStructure(soap*, ...) allocate, set all public members
/// - ns2__NetworkRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NetworkRefStructure(soap*, ns2__NetworkRefStructure*) deserialize from a stream
/// - int soap_write_ns2__NetworkRefStructure(soap*, ns2__NetworkRefStructure*) serialize to a stream
/// - ns2__NetworkRefStructure* ns2__NetworkRefStructure::soap_dup(soap*) returns deep copy of ns2__NetworkRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NetworkRefStructure::soap_del() deep deletes ns2__NetworkRefStructure data members, use only after ns2__NetworkRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NetworkRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":OperatorCodeType" simpleContent.
    ns2__OperatorCodeType                __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":SectionRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a Section.
/// </BLOCKQUOTE></PRE>
/// class ns2__SectionRefStructure operations:
/// - ns2__SectionRefStructure* soap_new_ns2__SectionRefStructure(soap*) allocate and default initialize
/// - ns2__SectionRefStructure* soap_new_ns2__SectionRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SectionRefStructure* soap_new_req_ns2__SectionRefStructure(soap*, ...) allocate, set required members
/// - ns2__SectionRefStructure* soap_new_set_ns2__SectionRefStructure(soap*, ...) allocate, set all public members
/// - ns2__SectionRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SectionRefStructure(soap*, ns2__SectionRefStructure*) deserialize from a stream
/// - int soap_write_ns2__SectionRefStructure(soap*, ns2__SectionRefStructure*) serialize to a stream
/// - ns2__SectionRefStructure* ns2__SectionRefStructure::soap_dup(soap*) returns deep copy of ns2__SectionRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SectionRefStructure::soap_del() deep deletes ns2__SectionRefStructure data members, use only after ns2__SectionRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SectionRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":LineRefCodeType" simpleContent.
    ns2__LineRefCodeType                 __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":AdviceRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to predefined advisory NOTICE.
/// </BLOCKQUOTE></PRE>
/// class ns2__AdviceRefStructure operations:
/// - ns2__AdviceRefStructure* soap_new_ns2__AdviceRefStructure(soap*) allocate and default initialize
/// - ns2__AdviceRefStructure* soap_new_ns2__AdviceRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AdviceRefStructure* soap_new_req_ns2__AdviceRefStructure(soap*, ...) allocate, set required members
/// - ns2__AdviceRefStructure* soap_new_set_ns2__AdviceRefStructure(soap*, ...) allocate, set all public members
/// - ns2__AdviceRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AdviceRefStructure(soap*, ns2__AdviceRefStructure*) deserialize from a stream
/// - int soap_write_ns2__AdviceRefStructure(soap*, ns2__AdviceRefStructure*) serialize to a stream
/// - ns2__AdviceRefStructure* ns2__AdviceRefStructure::soap_dup(soap*) returns deep copy of ns2__AdviceRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AdviceRefStructure::soap_del() deep deletes ns2__AdviceRefStructure data members, use only after ns2__AdviceRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AdviceRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":AdviceCodeType" simpleContent.
    ns2__AdviceCodeType                  __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":PtSituationElementStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":SituationElementStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for individual PT SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__PtSituationElementStructure operations:
/// - ns2__PtSituationElementStructure* soap_new_ns2__PtSituationElementStructure(soap*) allocate and default initialize
/// - ns2__PtSituationElementStructure* soap_new_ns2__PtSituationElementStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PtSituationElementStructure* soap_new_req_ns2__PtSituationElementStructure(soap*, ...) allocate, set required members
/// - ns2__PtSituationElementStructure* soap_new_set_ns2__PtSituationElementStructure(soap*, ...) allocate, set all public members
/// - ns2__PtSituationElementStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PtSituationElementStructure(soap*, ns2__PtSituationElementStructure*) deserialize from a stream
/// - int soap_write_ns2__PtSituationElementStructure(soap*, ns2__PtSituationElementStructure*) serialize to a stream
/// - ns2__PtSituationElementStructure* ns2__PtSituationElementStructure::soap_dup(soap*) returns deep copy of ns2__PtSituationElementStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PtSituationElementStructure::soap_del() deep deletes ns2__PtSituationElementStructure data members, use only after ns2__PtSituationElementStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PtSituationElementStructure : public ns2__SituationElementStructure
{ public:
/*  INHERITED FROM ns2__AbstractSituationElementStructure:
/// <PRE><BLOCKQUOTE>
///   Time of creation of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "CreationTime" of XSD type xs:dateTime.
    xsd__dateTime                        CreationTime                   1;	///< Required element.
//  BEGIN GROUP <xs:group name="SituationSharedIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements Reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="SituationBaseIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created SITUATION. Provides namespace for Participant If absent proided from context.
/// </BLOCKQUOTE></PRE>
/// Element "CountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            CountryRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of SITUATION within a Participant. Excludes any version number.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of SITUATION within a Participant. Excldue versionr.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationNumber.
    ns2__EntryQualifierStructure*        SituationNumber                1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationUpdateIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created Update SITUATION element. Provides namespace for VersionParticipant If absent same as.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateCountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            UpdateCountryRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        UpdateParticipantRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of update version within a SITUATION Number Omit if reference to the base SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type "http://www.siri.org.uk/siri":SituationVersion.
    ns2__SituationVersion*               Version                        0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractSituationElementStructure */
/*  INHERITED FROM ns2__SituationElementStructure:
//  BEGIN GROUP <xs:group name="SituationInfoGroup">
/// <PRE><BLOCKQUOTE>
///   situation Informatiion.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Associations with other SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// Element "References" of XSD type "http://www.siri.org.uk/siri":ReferencesStructure.
    ns2__ReferencesStructure*            References                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about source of information, that is, where the agent using the capture client obtained an item of information, or in the case of an automated feed, an identifier of the specific feed. Can be used to obtain updates, verify details or otherwise assess relevance.
/// </BLOCKQUOTE></PRE>
/// Element "Source" of XSD type "http://www.siri.org.uk/siri":SituationSourceStructure.
    ns2__SituationSourceStructure*       Source                         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Time at which SITUATION element was versioned. Once versioned, no furtr changes can be made.
/// </BLOCKQUOTE></PRE>
/// Element "VersionedAtTime" of XSD type xs:dateTime.
    xsd__dateTime*                       VersionedAtTime                0;	///< Optional element.
    END OF INHERITED FROM ns2__SituationElementStructure */
//  BEGIN GROUP <xs:group name="PtSituationBodyGroup">
/// <PRE><BLOCKQUOTE>
///   Body of SITUATION.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="StatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the SITUATION has been verified.
/// </BLOCKQUOTE></PRE>
    enum ns2__VerificationStatusEnumeration                                
                                        *Verification                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   ProgressStatus. One of a specified set of overall processing states assigned to SITUATION. For example, 'Draft' for not yet published; 'Published' for live SITUATIONs; 'Closed' indicates a completed SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Progress" of XSD type "http://www.siri.org.uk/siri":WorkflowStatusEnumeration.
    enum ns2__WorkflowStatusEnumeration  Progress                       0 = ns2__WorkflowStatusEnumeration__open;	///< Default element value="open".
/// <PRE><BLOCKQUOTE>
///   Assessement of likely correctness of data.
/// </BLOCKQUOTE></PRE>
/// Element "QualityIndex" of XSD type "http://www.siri.org.uk/siri":QualityEnumeration.
    enum ns2__QualityEnumeration*        QualityIndex                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether SITUATION is real or a test.
/// </BLOCKQUOTE></PRE>
/// Element "Reality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InformationStatusEnum.
    enum ns5__InformationStatusEnum*     Reality                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Likellihoo of a future sutuation happening.
/// </BLOCKQUOTE></PRE>
/// Element "Likelihood" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum*  Likelihood                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Publishing status one of a specified set of substates to which an SITUATION can be assigned.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__PublicationStatusType of length 0..unbounded.
    std::vector<ns2__PublicationStatusType> Publication                    0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="TemporalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements affecting temporal scope of SITUATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Overall inclusive Period of applicability of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ValidityPeriod of length 1..unbounded.
    std::vector<
/// class _ns2__PtSituationElementStructure_ValidityPeriod operations:
/// - _ns2__PtSituationElementStructure_ValidityPeriod* soap_new__ns2__PtSituationElementStructure_ValidityPeriod(soap*) allocate and default initialize
/// - _ns2__PtSituationElementStructure_ValidityPeriod* soap_new__ns2__PtSituationElementStructure_ValidityPeriod(soap*, int num) allocate array and default initialize values
/// - _ns2__PtSituationElementStructure_ValidityPeriod* soap_new_req__ns2__PtSituationElementStructure_ValidityPeriod(soap*, ...) allocate, set required members
/// - _ns2__PtSituationElementStructure_ValidityPeriod* soap_new_set__ns2__PtSituationElementStructure_ValidityPeriod(soap*, ...) allocate, set all public members
/// - _ns2__PtSituationElementStructure_ValidityPeriod::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PtSituationElementStructure_ValidityPeriod(soap*, _ns2__PtSituationElementStructure_ValidityPeriod*) deserialize from a stream
/// - int soap_write__ns2__PtSituationElementStructure_ValidityPeriod(soap*, _ns2__PtSituationElementStructure_ValidityPeriod*) serialize to a stream
/// - _ns2__PtSituationElementStructure_ValidityPeriod* _ns2__PtSituationElementStructure_ValidityPeriod::soap_dup(soap*) returns deep copy of _ns2__PtSituationElementStructure_ValidityPeriod, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PtSituationElementStructure_ValidityPeriod::soap_del() deep deletes _ns2__PtSituationElementStructure_ValidityPeriod data members, use only after _ns2__PtSituationElementStructure_ValidityPeriod::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PtSituationElementStructure_ValidityPeriod
    {
/// INHERITED FROM ns2__HalfOpenTimestampRangeStructure:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start time stamp.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    xsd__dateTime                        StartTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end time stamp. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:dateTime.
    xsd__dateTime*                       EndTime                        0;	///< Optional element.
//  END OF INHERITED FROM ns2__HalfOpenTimestampRangeStructure
    }>                                   ValidityPeriod                 1;
/// <PRE><BLOCKQUOTE>
///   situation applies only on the repeated day types within the overall validity period(s). For example Sunday.
/// </BLOCKQUOTE></PRE>
/// class _ns2__PtSituationElementStructure_Repetitions operations:
/// - _ns2__PtSituationElementStructure_Repetitions* soap_new__ns2__PtSituationElementStructure_Repetitions(soap*) allocate and default initialize
/// - _ns2__PtSituationElementStructure_Repetitions* soap_new__ns2__PtSituationElementStructure_Repetitions(soap*, int num) allocate array and default initialize values
/// - _ns2__PtSituationElementStructure_Repetitions* soap_new_req__ns2__PtSituationElementStructure_Repetitions(soap*, ...) allocate, set required members
/// - _ns2__PtSituationElementStructure_Repetitions* soap_new_set__ns2__PtSituationElementStructure_Repetitions(soap*, ...) allocate, set all public members
/// - _ns2__PtSituationElementStructure_Repetitions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PtSituationElementStructure_Repetitions(soap*, _ns2__PtSituationElementStructure_Repetitions*) deserialize from a stream
/// - int soap_write__ns2__PtSituationElementStructure_Repetitions(soap*, _ns2__PtSituationElementStructure_Repetitions*) serialize to a stream
/// - _ns2__PtSituationElementStructure_Repetitions* _ns2__PtSituationElementStructure_Repetitions::soap_dup(soap*) returns deep copy of _ns2__PtSituationElementStructure_Repetitions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PtSituationElementStructure_Repetitions::soap_del() deep deletes _ns2__PtSituationElementStructure_Repetitions data members, use only after _ns2__PtSituationElementStructure_Repetitions::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PtSituationElementStructure_Repetitions
    {
/// <PRE><BLOCKQUOTE>
///   Tpeg DAY TYPE pti_table 34
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__DayTypeEnumeration element refs of length 1..unbounded.
    std::vector<enum ns2__DayTypeEnumeration> DayType                        1;
    }                                   *Repetitions                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Publication Window for SITUATION if different from validity period.
/// </BLOCKQUOTE></PRE>
/// Element "PublicationWindow" of XSD type "http://www.siri.org.uk/siri":HalfOpenTimestampRangeStructure.
    ns2__HalfOpenTimestampRangeStructure*  PublicationWindow              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ClassifierGroup">
/// <PRE><BLOCKQUOTE>
///   Structured Classification Elements. Corresponds to TPEG 18 Event Reason.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="ReasonGroup">
/// <PRE><BLOCKQUOTE>
///   StructuredReason Elements.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="TpegReasonGroup">
/// <PRE><BLOCKQUOTE>
///   Structured Classification Elements. Corresponds to TPEG 18 Event Reason.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_PtSituationElementStructure;	///< Union _ns2__union_PtSituationElementStructure selector: set to SOAP_UNION__ns2__union_PtSituationElementStructure_<fieldname>
    union _ns2__union_PtSituationElementStructure
    {
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_0/TPEG unknown event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownReason.
    std::wstring*                        UnknownReason                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_1/TPEG Pti_19 miscellaneous event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MiscellaneousReason.
    enum ns2__MiscellaneousReasonEnumeration  MiscellaneousReason            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Personnel reason.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_2/TPEG Pti_20 personnel event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":PersonnelReason.
    enum ns2__PersonnelReasonEnumeration  PersonnelReason                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_3/TPEG Pti_21 equipment event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EquipmentReason.
    enum ns2__EquipmentReasonEnumeration  EquipmentReason                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Environment reason.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_4/TPEG Pti_22 environment event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EnvironmentReason.
    enum ns2__EnvironmentReasonEnumeration  EnvironmentReason              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_255/TPEG Pti_22 undefined event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UndefinedReason.
    std::wstring*                        UndefinedReason                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_PtSituationElementStructure;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Classifier of Pub;ic Event.
/// </BLOCKQUOTE></PRE>
/// Element "PublicEventReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PublicEventTypeEnum.
    enum ns5__PublicEventTypeEnum*       PublicEventReason              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text explanation of SITUATION reason. Not normally needed. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ReasonName                     0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Severity of Incident. Corresponds to TPEG Pti26 severities. Defautl is 'normal'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Severity.
    enum ns2__SeverityEnumeration        Severity                       0 = ns2__SeverityEnumeration__normal;	///< Default element value="normal".
/// <PRE><BLOCKQUOTE>
///   Arbitrary rating of priority 1-High.
/// </BLOCKQUOTE></PRE>
/// Element "Priority" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             Priority                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Confidentiality of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Sensitivity" of XSD type "http://www.siri.org.uk/siri":SensitivityEnumeration.
    enum ns2__SensitivityEnumeration*    Sensitivity                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Intended audience of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Audience" of XSD type "http://www.siri.org.uk/siri":AudienceEnumeration.
    enum ns2__AudienceEnumeration        Audience                       0 = ns2__AudienceEnumeration__public_;	///< Default element value="public".
/// <PRE><BLOCKQUOTE>
///   Nature of scope, e.g. general, network.
/// </BLOCKQUOTE></PRE>
    enum ns2__ScopeTypeEnumeration                                     
                                        *ScopeType                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Scope of incident - Tpeg Report Type pti27.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ReportType.
    enum ns2__ReportTypeEnumeration      ReportType                     0 = ns2__ReportTypeEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Whether the SITUATION was planned (eg engineering works) or unplanned (eg service alteration). Default is 'false', i.e. unplanned.
/// </BLOCKQUOTE></PRE>
/// Element "Planned" of XSD type xs:boolean.
    bool                                 Planned                        0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Arbitrary application specific classifiers.
/// </BLOCKQUOTE></PRE>
/// Element "Keywords" of XSD type xs:NMTOKENS.
    xsd__NMTOKENS*                       Keywords                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   additioanl reasons.
/// </BLOCKQUOTE></PRE>
/// class _ns2__PtSituationElementStructure_SecondaryReasons operations:
/// - _ns2__PtSituationElementStructure_SecondaryReasons* soap_new__ns2__PtSituationElementStructure_SecondaryReasons(soap*) allocate and default initialize
/// - _ns2__PtSituationElementStructure_SecondaryReasons* soap_new__ns2__PtSituationElementStructure_SecondaryReasons(soap*, int num) allocate array and default initialize values
/// - _ns2__PtSituationElementStructure_SecondaryReasons* soap_new_req__ns2__PtSituationElementStructure_SecondaryReasons(soap*, ...) allocate, set required members
/// - _ns2__PtSituationElementStructure_SecondaryReasons* soap_new_set__ns2__PtSituationElementStructure_SecondaryReasons(soap*, ...) allocate, set all public members
/// - _ns2__PtSituationElementStructure_SecondaryReasons::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PtSituationElementStructure_SecondaryReasons(soap*, _ns2__PtSituationElementStructure_SecondaryReasons*) deserialize from a stream
/// - int soap_write__ns2__PtSituationElementStructure_SecondaryReasons(soap*, _ns2__PtSituationElementStructure_SecondaryReasons*) serialize to a stream
/// - _ns2__PtSituationElementStructure_SecondaryReasons* _ns2__PtSituationElementStructure_SecondaryReasons::soap_dup(soap*) returns deep copy of _ns2__PtSituationElementStructure_SecondaryReasons, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PtSituationElementStructure_SecondaryReasons::soap_del() deep deletes _ns2__PtSituationElementStructure_SecondaryReasons data members, use only after _ns2__PtSituationElementStructure_SecondaryReasons::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PtSituationElementStructure_SecondaryReasons
    {
//  BEGIN SEQUENCE <xs:sequence maxOccurs="unbounded">
    std::vector<
    class __ns2__PtSituationElementStructure_SecondaryReasons_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Reason.
/// </BLOCKQUOTE></PRE>
/// class _ns2__PtSituationElementStructure_SecondaryReasons_Reason operations:
/// - _ns2__PtSituationElementStructure_SecondaryReasons_Reason* soap_new__ns2__PtSituationElementStructure_SecondaryReasons_Reason(soap*) allocate and default initialize
/// - _ns2__PtSituationElementStructure_SecondaryReasons_Reason* soap_new__ns2__PtSituationElementStructure_SecondaryReasons_Reason(soap*, int num) allocate array and default initialize values
/// - _ns2__PtSituationElementStructure_SecondaryReasons_Reason* soap_new_req__ns2__PtSituationElementStructure_SecondaryReasons_Reason(soap*, ...) allocate, set required members
/// - _ns2__PtSituationElementStructure_SecondaryReasons_Reason* soap_new_set__ns2__PtSituationElementStructure_SecondaryReasons_Reason(soap*, ...) allocate, set all public members
/// - _ns2__PtSituationElementStructure_SecondaryReasons_Reason::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PtSituationElementStructure_SecondaryReasons_Reason(soap*, _ns2__PtSituationElementStructure_SecondaryReasons_Reason*) deserialize from a stream
/// - int soap_write__ns2__PtSituationElementStructure_SecondaryReasons_Reason(soap*, _ns2__PtSituationElementStructure_SecondaryReasons_Reason*) serialize to a stream
/// - _ns2__PtSituationElementStructure_SecondaryReasons_Reason* _ns2__PtSituationElementStructure_SecondaryReasons_Reason::soap_dup(soap*) returns deep copy of _ns2__PtSituationElementStructure_SecondaryReasons_Reason, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PtSituationElementStructure_SecondaryReasons_Reason::soap_del() deep deletes _ns2__PtSituationElementStructure_SecondaryReasons_Reason data members, use only after _ns2__PtSituationElementStructure_SecondaryReasons_Reason::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PtSituationElementStructure_SecondaryReasons_Reason
    {
//  BEGIN GROUP <xs:group name="ReasonGroup">
/// <PRE><BLOCKQUOTE>
///   StructuredReason Elements.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="TpegReasonGroup">
/// <PRE><BLOCKQUOTE>
///   Structured Classification Elements. Corresponds to TPEG 18 Event Reason.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_PtSituationElementStructure_SecondaryReasons_Reason;	///< Union _ns2__union_PtSituationElementStructure_SecondaryReasons_Reason selector: set to SOAP_UNION__ns2__union_PtSituationElementStructure_SecondaryReasons_Reason_<fieldname>
    union _ns2__union_PtSituationElementStructure_SecondaryReasons_Reason
    {
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_0/TPEG unknown event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownReason.
    std::wstring*                        UnknownReason                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_1/TPEG Pti_19 miscellaneous event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MiscellaneousReason.
    enum ns2__MiscellaneousReasonEnumeration  MiscellaneousReason            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Personnel reason.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_2/TPEG Pti_20 personnel event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":PersonnelReason.
    enum ns2__PersonnelReasonEnumeration  PersonnelReason                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_3/TPEG Pti_21 equipment event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EquipmentReason.
    enum ns2__EquipmentReasonEnumeration  EquipmentReason                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Environment reason.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_4/TPEG Pti_22 environment event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EnvironmentReason.
    enum ns2__EnvironmentReasonEnumeration  EnvironmentReason              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_255/TPEG Pti_22 undefined event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UndefinedReason.
    std::wstring*                        UndefinedReason                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_PtSituationElementStructure_SecondaryReasons_Reason;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Classifier of Pub;ic Event.
/// </BLOCKQUOTE></PRE>
/// Element "PublicEventReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PublicEventTypeEnum.
    enum ns5__PublicEventTypeEnum*       PublicEventReason              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text explanation of SITUATION reason. Not normally needed. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ReasonName                     0;
//  END OF GROUP
    }                                    Reason                         1;	///< Required element.
    }>                                   __PtSituationElementStructure_SecondaryReasons_sequence;
//  END OF SEQUENCE
    }                                   *SecondaryReasons               0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DescriptionGroup">
/// <PRE><BLOCKQUOTE>
///   Text description of SITUATION. Some or all of this may have been generated from the other structured content elements. Where text has been overriden this is indicated.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN                         Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Summary of SITUATION. If absent should be generated from structure elements / and or by condensing Description. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DefaultedTextStructure* of length 0..unbounded.
    std::vector<ns2__DefaultedTextStructure*> Summary                        0;
/// <PRE><BLOCKQUOTE>
///   Description of SITUATION. Should not repeat any strap line included in Summary. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DefaultedTextStructure* of length 0..unbounded.
    std::vector<ns2__DefaultedTextStructure*> Description                    0;
/// <PRE><BLOCKQUOTE>
///   Additional descriptive details about the SITUATION (Unbounded since SIRI 2.0).
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DefaultedTextStructure* of length 0..unbounded.
    std::vector<ns2__DefaultedTextStructure*> Detail                         0;
/// <PRE><BLOCKQUOTE>
///   Further advice to passengers. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DefaultedTextStructure* of length 0..unbounded.
    std::vector<ns2__DefaultedTextStructure*> Advice                         0;
/// <PRE><BLOCKQUOTE>
///   Further advice to passengers.
/// </BLOCKQUOTE></PRE>
/// Element "Internal" of XSD type "http://www.siri.org.uk/siri":DefaultedTextStructure.
    ns2__DefaultedTextStructure*         Internal                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Any images associated with SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__PtSituationElementStructure_Images operations:
/// - _ns2__PtSituationElementStructure_Images* soap_new__ns2__PtSituationElementStructure_Images(soap*) allocate and default initialize
/// - _ns2__PtSituationElementStructure_Images* soap_new__ns2__PtSituationElementStructure_Images(soap*, int num) allocate array and default initialize values
/// - _ns2__PtSituationElementStructure_Images* soap_new_req__ns2__PtSituationElementStructure_Images(soap*, ...) allocate, set required members
/// - _ns2__PtSituationElementStructure_Images* soap_new_set__ns2__PtSituationElementStructure_Images(soap*, ...) allocate, set all public members
/// - _ns2__PtSituationElementStructure_Images::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PtSituationElementStructure_Images(soap*, _ns2__PtSituationElementStructure_Images*) deserialize from a stream
/// - int soap_write__ns2__PtSituationElementStructure_Images(soap*, _ns2__PtSituationElementStructure_Images*) serialize to a stream
/// - _ns2__PtSituationElementStructure_Images* _ns2__PtSituationElementStructure_Images::soap_dup(soap*) returns deep copy of _ns2__PtSituationElementStructure_Images, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PtSituationElementStructure_Images::soap_del() deep deletes _ns2__PtSituationElementStructure_Images data members, use only after _ns2__PtSituationElementStructure_Images::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PtSituationElementStructure_Images
    {
/// <PRE><BLOCKQUOTE>
///   Image description.
/// </BLOCKQUOTE></PRE>
/// Vector of Image of length 1..unbounded.
    std::vector<
/// class _ns2__PtSituationElementStructure_Images_Image operations:
/// - _ns2__PtSituationElementStructure_Images_Image* soap_new__ns2__PtSituationElementStructure_Images_Image(soap*) allocate and default initialize
/// - _ns2__PtSituationElementStructure_Images_Image* soap_new__ns2__PtSituationElementStructure_Images_Image(soap*, int num) allocate array and default initialize values
/// - _ns2__PtSituationElementStructure_Images_Image* soap_new_req__ns2__PtSituationElementStructure_Images_Image(soap*, ...) allocate, set required members
/// - _ns2__PtSituationElementStructure_Images_Image* soap_new_set__ns2__PtSituationElementStructure_Images_Image(soap*, ...) allocate, set all public members
/// - _ns2__PtSituationElementStructure_Images_Image::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PtSituationElementStructure_Images_Image(soap*, _ns2__PtSituationElementStructure_Images_Image*) deserialize from a stream
/// - int soap_write__ns2__PtSituationElementStructure_Images_Image(soap*, _ns2__PtSituationElementStructure_Images_Image*) serialize to a stream
/// - _ns2__PtSituationElementStructure_Images_Image* _ns2__PtSituationElementStructure_Images_Image::soap_dup(soap*) returns deep copy of _ns2__PtSituationElementStructure_Images_Image, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PtSituationElementStructure_Images_Image::soap_del() deep deletes _ns2__PtSituationElementStructure_Images_Image data members, use only after _ns2__PtSituationElementStructure_Images_Image::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PtSituationElementStructure_Images_Image
    {
/// INHERITED FROM ns2__ImageStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_PtSituationElementStructure_Images_Image;	///< Union _ns2__union_PtSituationElementStructure_Images_Image selector: set to SOAP_UNION__ns2__union_PtSituationElementStructure_Images_Image_<fieldname>
    union _ns2__union_PtSituationElementStructure_Images_Image
    {
/// <PRE><BLOCKQUOTE>
///   Reference to an image.
/// </BLOCKQUOTE></PRE>
/// Element "ImageRef" of XSD type xs:anyURI.
    xsd__anyURI*                         ImageRef                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Embedded image.
/// </BLOCKQUOTE></PRE>
/// Element "ImageBinary" of XSD type xs:base64Binary.
    xsd__base64Binary*                   ImageBinary                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_PtSituationElementStructure_Images_Image;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Categorisation of image content.
/// </BLOCKQUOTE></PRE>
/// Element "ImageContent" of XSD type "http://www.siri.org.uk/siri":ImageContentEnumeration.
    enum ns2__ImageContentEnumeration*   ImageContent                   0;	///< Optional element.
//  END OF INHERITED FROM ns2__ImageStructure
    }>                                   Image                          1;
    }                                   *Images                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Hyperlinks to other resources associated with SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__PtSituationElementStructure_InfoLinks operations:
/// - _ns2__PtSituationElementStructure_InfoLinks* soap_new__ns2__PtSituationElementStructure_InfoLinks(soap*) allocate and default initialize
/// - _ns2__PtSituationElementStructure_InfoLinks* soap_new__ns2__PtSituationElementStructure_InfoLinks(soap*, int num) allocate array and default initialize values
/// - _ns2__PtSituationElementStructure_InfoLinks* soap_new_req__ns2__PtSituationElementStructure_InfoLinks(soap*, ...) allocate, set required members
/// - _ns2__PtSituationElementStructure_InfoLinks* soap_new_set__ns2__PtSituationElementStructure_InfoLinks(soap*, ...) allocate, set all public members
/// - _ns2__PtSituationElementStructure_InfoLinks::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PtSituationElementStructure_InfoLinks(soap*, _ns2__PtSituationElementStructure_InfoLinks*) deserialize from a stream
/// - int soap_write__ns2__PtSituationElementStructure_InfoLinks(soap*, _ns2__PtSituationElementStructure_InfoLinks*) serialize to a stream
/// - _ns2__PtSituationElementStructure_InfoLinks* _ns2__PtSituationElementStructure_InfoLinks::soap_dup(soap*) returns deep copy of _ns2__PtSituationElementStructure_InfoLinks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PtSituationElementStructure_InfoLinks::soap_del() deep deletes _ns2__PtSituationElementStructure_InfoLinks data members, use only after _ns2__PtSituationElementStructure_InfoLinks::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PtSituationElementStructure_InfoLinks
    {
/// <PRE><BLOCKQUOTE>
///   Hyperlink description.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__InfoLinkStructure* of length 1..unbounded.
    std::vector<ns2__InfoLinkStructure*> InfoLink                       1;
    }                                   *InfoLinks                      0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="PtBodyGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Body of SITUATION.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__PtSituationElementStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Structured model identifiying parts of transport network affected by SITUATION. OPERATOR and NETWORK values will be defaulted to values in general Context unless explicitly overridden.
/// </BLOCKQUOTE></PRE>
/// Element "Affects" of XSD type "http://www.siri.org.uk/siri":AffectsScopeStructure.
    ns2__AffectsScopeStructure*          Affects                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Structured model describing effect of the SITUATION on PT system.
/// </BLOCKQUOTE></PRE>
/// Element "Consequences" of XSD type "http://www.siri.org.uk/siri":PtConsequencesStructure.
    ns2__PtConsequencesStructure*        Consequences                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Structured model describing distribution actions to handle SITUATION. Any actions stated completely replace those from Context. If no actions are stated, any actions from general Context are used.
/// </BLOCKQUOTE></PRE>
/// Element "PublishingActions" of XSD type "http://www.siri.org.uk/siri":ActionsStructure.
    ns2__ActionsStructure*               PublishingActions              0;	///< Optional element.
    }                                   *__PtSituationElementStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":RoadSituationElementStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":SituationElementStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for individual PT SITUATION.
/// </BLOCKQUOTE></PRE>
/// class ns2__RoadSituationElementStructure operations:
/// - ns2__RoadSituationElementStructure* soap_new_ns2__RoadSituationElementStructure(soap*) allocate and default initialize
/// - ns2__RoadSituationElementStructure* soap_new_ns2__RoadSituationElementStructure(soap*, int num) allocate array and default initialize values
/// - ns2__RoadSituationElementStructure* soap_new_req_ns2__RoadSituationElementStructure(soap*, ...) allocate, set required members
/// - ns2__RoadSituationElementStructure* soap_new_set_ns2__RoadSituationElementStructure(soap*, ...) allocate, set all public members
/// - ns2__RoadSituationElementStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__RoadSituationElementStructure(soap*, ns2__RoadSituationElementStructure*) deserialize from a stream
/// - int soap_write_ns2__RoadSituationElementStructure(soap*, ns2__RoadSituationElementStructure*) serialize to a stream
/// - ns2__RoadSituationElementStructure* ns2__RoadSituationElementStructure::soap_dup(soap*) returns deep copy of ns2__RoadSituationElementStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__RoadSituationElementStructure::soap_del() deep deletes ns2__RoadSituationElementStructure data members, use only after ns2__RoadSituationElementStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__RoadSituationElementStructure : public ns2__SituationElementStructure
{ public:
/*  INHERITED FROM ns2__AbstractSituationElementStructure:
/// <PRE><BLOCKQUOTE>
///   Time of creation of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "CreationTime" of XSD type xs:dateTime.
    xsd__dateTime                        CreationTime                   1;	///< Required element.
//  BEGIN GROUP <xs:group name="SituationSharedIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements Reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="SituationBaseIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created SITUATION. Provides namespace for Participant If absent proided from context.
/// </BLOCKQUOTE></PRE>
/// Element "CountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            CountryRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ParticipantRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of SITUATION within a Participant. Excludes any version number.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of SITUATION within a Participant. Excldue versionr.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationNumber.
    ns2__EntryQualifierStructure*        SituationNumber                1;	///< Required element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationUpdateIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for reference to a SITUATION or an update to a SITUATION. Participant ref is optional and may be supplied from context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Country of a Participant who created Update SITUATION element. Provides namespace for VersionParticipant If absent same as.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateCountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            UpdateCountryRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of a Participant. Provides namespace for SITUATION. If absent provdied from context.
/// </BLOCKQUOTE></PRE>
/// Element "UpdateParticipantRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        UpdateParticipantRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of update version within a SITUATION Number Omit if reference to the base SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type "http://www.siri.org.uk/siri":SituationVersion.
    ns2__SituationVersion*               Version                        0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractSituationElementStructure */
/*  INHERITED FROM ns2__SituationElementStructure:
//  BEGIN GROUP <xs:group name="SituationInfoGroup">
/// <PRE><BLOCKQUOTE>
///   situation Informatiion.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Associations with other SITUATIONs.
/// </BLOCKQUOTE></PRE>
/// Element "References" of XSD type "http://www.siri.org.uk/siri":ReferencesStructure.
    ns2__ReferencesStructure*            References                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about source of information, that is, where the agent using the capture client obtained an item of information, or in the case of an automated feed, an identifier of the specific feed. Can be used to obtain updates, verify details or otherwise assess relevance.
/// </BLOCKQUOTE></PRE>
/// Element "Source" of XSD type "http://www.siri.org.uk/siri":SituationSourceStructure.
    ns2__SituationSourceStructure*       Source                         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Time at which SITUATION element was versioned. Once versioned, no furtr changes can be made.
/// </BLOCKQUOTE></PRE>
/// Element "VersionedAtTime" of XSD type xs:dateTime.
    xsd__dateTime*                       VersionedAtTime                0;	///< Optional element.
    END OF INHERITED FROM ns2__SituationElementStructure */
//  BEGIN GROUP <xs:group name="RoadSituationBodyGroup">
/// <PRE><BLOCKQUOTE>
///   Body of SITUATION.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="StatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status elements.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the SITUATION has been verified.
/// </BLOCKQUOTE></PRE>
    enum ns2__VerificationStatusEnumeration                                
                                        *Verification                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   ProgressStatus. One of a specified set of overall processing states assigned to SITUATION. For example, 'Draft' for not yet published; 'Published' for live SITUATIONs; 'Closed' indicates a completed SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Progress" of XSD type "http://www.siri.org.uk/siri":WorkflowStatusEnumeration.
    enum ns2__WorkflowStatusEnumeration  Progress                       0 = ns2__WorkflowStatusEnumeration__open;	///< Default element value="open".
/// <PRE><BLOCKQUOTE>
///   Assessement of likely correctness of data.
/// </BLOCKQUOTE></PRE>
/// Element "QualityIndex" of XSD type "http://www.siri.org.uk/siri":QualityEnumeration.
    enum ns2__QualityEnumeration*        QualityIndex                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether SITUATION is real or a test.
/// </BLOCKQUOTE></PRE>
/// Element "Reality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InformationStatusEnum.
    enum ns5__InformationStatusEnum*     Reality                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Likellihoo of a future sutuation happening.
/// </BLOCKQUOTE></PRE>
/// Element "Likelihood" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum*  Likelihood                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Publishing status one of a specified set of substates to which an SITUATION can be assigned.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__PublicationStatusType of length 0..unbounded.
    std::vector<ns2__PublicationStatusType> Publication                    0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="TemporalGroup">
/// <PRE><BLOCKQUOTE>
///   Elements affecting temporal scope of SITUATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Overall inclusive Period of applicability of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ValidityPeriod of length 1..unbounded.
    std::vector<
/// class _ns2__RoadSituationElementStructure_ValidityPeriod operations:
/// - _ns2__RoadSituationElementStructure_ValidityPeriod* soap_new__ns2__RoadSituationElementStructure_ValidityPeriod(soap*) allocate and default initialize
/// - _ns2__RoadSituationElementStructure_ValidityPeriod* soap_new__ns2__RoadSituationElementStructure_ValidityPeriod(soap*, int num) allocate array and default initialize values
/// - _ns2__RoadSituationElementStructure_ValidityPeriod* soap_new_req__ns2__RoadSituationElementStructure_ValidityPeriod(soap*, ...) allocate, set required members
/// - _ns2__RoadSituationElementStructure_ValidityPeriod* soap_new_set__ns2__RoadSituationElementStructure_ValidityPeriod(soap*, ...) allocate, set all public members
/// - _ns2__RoadSituationElementStructure_ValidityPeriod::soap_default(soap*) default initialize members
/// - int soap_read__ns2__RoadSituationElementStructure_ValidityPeriod(soap*, _ns2__RoadSituationElementStructure_ValidityPeriod*) deserialize from a stream
/// - int soap_write__ns2__RoadSituationElementStructure_ValidityPeriod(soap*, _ns2__RoadSituationElementStructure_ValidityPeriod*) serialize to a stream
/// - _ns2__RoadSituationElementStructure_ValidityPeriod* _ns2__RoadSituationElementStructure_ValidityPeriod::soap_dup(soap*) returns deep copy of _ns2__RoadSituationElementStructure_ValidityPeriod, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__RoadSituationElementStructure_ValidityPeriod::soap_del() deep deletes _ns2__RoadSituationElementStructure_ValidityPeriod data members, use only after _ns2__RoadSituationElementStructure_ValidityPeriod::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__RoadSituationElementStructure_ValidityPeriod
    {
/// INHERITED FROM ns2__HalfOpenTimestampRangeStructure:
/// <PRE><BLOCKQUOTE>
///   The (inclusive) start time stamp.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    xsd__dateTime                        StartTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The (inclusive) end time stamp. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
/// </BLOCKQUOTE></PRE>
/// Element "EndTime" of XSD type xs:dateTime.
    xsd__dateTime*                       EndTime                        0;	///< Optional element.
//  END OF INHERITED FROM ns2__HalfOpenTimestampRangeStructure
    }>                                   ValidityPeriod                 1;
/// <PRE><BLOCKQUOTE>
///   situation applies only on the repeated day types within the overall validity period(s). For example Sunday.
/// </BLOCKQUOTE></PRE>
/// class _ns2__RoadSituationElementStructure_Repetitions operations:
/// - _ns2__RoadSituationElementStructure_Repetitions* soap_new__ns2__RoadSituationElementStructure_Repetitions(soap*) allocate and default initialize
/// - _ns2__RoadSituationElementStructure_Repetitions* soap_new__ns2__RoadSituationElementStructure_Repetitions(soap*, int num) allocate array and default initialize values
/// - _ns2__RoadSituationElementStructure_Repetitions* soap_new_req__ns2__RoadSituationElementStructure_Repetitions(soap*, ...) allocate, set required members
/// - _ns2__RoadSituationElementStructure_Repetitions* soap_new_set__ns2__RoadSituationElementStructure_Repetitions(soap*, ...) allocate, set all public members
/// - _ns2__RoadSituationElementStructure_Repetitions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__RoadSituationElementStructure_Repetitions(soap*, _ns2__RoadSituationElementStructure_Repetitions*) deserialize from a stream
/// - int soap_write__ns2__RoadSituationElementStructure_Repetitions(soap*, _ns2__RoadSituationElementStructure_Repetitions*) serialize to a stream
/// - _ns2__RoadSituationElementStructure_Repetitions* _ns2__RoadSituationElementStructure_Repetitions::soap_dup(soap*) returns deep copy of _ns2__RoadSituationElementStructure_Repetitions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__RoadSituationElementStructure_Repetitions::soap_del() deep deletes _ns2__RoadSituationElementStructure_Repetitions data members, use only after _ns2__RoadSituationElementStructure_Repetitions::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__RoadSituationElementStructure_Repetitions
    {
/// <PRE><BLOCKQUOTE>
///   Tpeg DAY TYPE pti_table 34
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__DayTypeEnumeration element refs of length 1..unbounded.
    std::vector<enum ns2__DayTypeEnumeration> DayType                        1;
    }                                   *Repetitions                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Publication Window for SITUATION if different from validity period.
/// </BLOCKQUOTE></PRE>
/// Element "PublicationWindow" of XSD type "http://www.siri.org.uk/siri":HalfOpenTimestampRangeStructure.
    ns2__HalfOpenTimestampRangeStructure*  PublicationWindow              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ClassifierGroup">
/// <PRE><BLOCKQUOTE>
///   Structured Classification Elements. Corresponds to TPEG 18 Event Reason.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="ReasonGroup">
/// <PRE><BLOCKQUOTE>
///   StructuredReason Elements.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="TpegReasonGroup">
/// <PRE><BLOCKQUOTE>
///   Structured Classification Elements. Corresponds to TPEG 18 Event Reason.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_RoadSituationElementStructure;	///< Union _ns2__union_RoadSituationElementStructure selector: set to SOAP_UNION__ns2__union_RoadSituationElementStructure_<fieldname>
    union _ns2__union_RoadSituationElementStructure
    {
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_0/TPEG unknown event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownReason.
    std::wstring*                        UnknownReason                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_1/TPEG Pti_19 miscellaneous event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MiscellaneousReason.
    enum ns2__MiscellaneousReasonEnumeration  MiscellaneousReason            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Personnel reason.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_2/TPEG Pti_20 personnel event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":PersonnelReason.
    enum ns2__PersonnelReasonEnumeration  PersonnelReason                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_3/TPEG Pti_21 equipment event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EquipmentReason.
    enum ns2__EquipmentReasonEnumeration  EquipmentReason                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Environment reason.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_4/TPEG Pti_22 environment event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EnvironmentReason.
    enum ns2__EnvironmentReasonEnumeration  EnvironmentReason              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_255/TPEG Pti_22 undefined event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UndefinedReason.
    std::wstring*                        UndefinedReason                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_RoadSituationElementStructure;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Classifier of Pub;ic Event.
/// </BLOCKQUOTE></PRE>
/// Element "PublicEventReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PublicEventTypeEnum.
    enum ns5__PublicEventTypeEnum*       PublicEventReason              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text explanation of SITUATION reason. Not normally needed. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ReasonName                     0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Severity of Incident. Corresponds to TPEG Pti26 severities. Defautl is 'normal'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Severity.
    enum ns2__SeverityEnumeration        Severity                       0 = ns2__SeverityEnumeration__normal;	///< Default element value="normal".
/// <PRE><BLOCKQUOTE>
///   Arbitrary rating of priority 1-High.
/// </BLOCKQUOTE></PRE>
/// Element "Priority" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             Priority                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Confidentiality of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Sensitivity" of XSD type "http://www.siri.org.uk/siri":SensitivityEnumeration.
    enum ns2__SensitivityEnumeration*    Sensitivity                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Intended audience of SITUATION.
/// </BLOCKQUOTE></PRE>
/// Element "Audience" of XSD type "http://www.siri.org.uk/siri":AudienceEnumeration.
    enum ns2__AudienceEnumeration        Audience                       0 = ns2__AudienceEnumeration__public_;	///< Default element value="public".
/// <PRE><BLOCKQUOTE>
///   Nature of scope, e.g. general, network.
/// </BLOCKQUOTE></PRE>
    enum ns2__ScopeTypeEnumeration                                     
                                        *ScopeType                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Scope of incident - Tpeg Report Type pti27.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ReportType.
    enum ns2__ReportTypeEnumeration      ReportType                     0 = ns2__ReportTypeEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   Whether the SITUATION was planned (eg engineering works) or unplanned (eg service alteration). Default is 'false', i.e. unplanned.
/// </BLOCKQUOTE></PRE>
/// Element "Planned" of XSD type xs:boolean.
    bool                                 Planned                        0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Arbitrary application specific classifiers.
/// </BLOCKQUOTE></PRE>
/// Element "Keywords" of XSD type xs:NMTOKENS.
    xsd__NMTOKENS*                       Keywords                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   additioanl reasons.
/// </BLOCKQUOTE></PRE>
/// class _ns2__RoadSituationElementStructure_SecondaryReasons operations:
/// - _ns2__RoadSituationElementStructure_SecondaryReasons* soap_new__ns2__RoadSituationElementStructure_SecondaryReasons(soap*) allocate and default initialize
/// - _ns2__RoadSituationElementStructure_SecondaryReasons* soap_new__ns2__RoadSituationElementStructure_SecondaryReasons(soap*, int num) allocate array and default initialize values
/// - _ns2__RoadSituationElementStructure_SecondaryReasons* soap_new_req__ns2__RoadSituationElementStructure_SecondaryReasons(soap*, ...) allocate, set required members
/// - _ns2__RoadSituationElementStructure_SecondaryReasons* soap_new_set__ns2__RoadSituationElementStructure_SecondaryReasons(soap*, ...) allocate, set all public members
/// - _ns2__RoadSituationElementStructure_SecondaryReasons::soap_default(soap*) default initialize members
/// - int soap_read__ns2__RoadSituationElementStructure_SecondaryReasons(soap*, _ns2__RoadSituationElementStructure_SecondaryReasons*) deserialize from a stream
/// - int soap_write__ns2__RoadSituationElementStructure_SecondaryReasons(soap*, _ns2__RoadSituationElementStructure_SecondaryReasons*) serialize to a stream
/// - _ns2__RoadSituationElementStructure_SecondaryReasons* _ns2__RoadSituationElementStructure_SecondaryReasons::soap_dup(soap*) returns deep copy of _ns2__RoadSituationElementStructure_SecondaryReasons, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__RoadSituationElementStructure_SecondaryReasons::soap_del() deep deletes _ns2__RoadSituationElementStructure_SecondaryReasons data members, use only after _ns2__RoadSituationElementStructure_SecondaryReasons::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__RoadSituationElementStructure_SecondaryReasons
    {
//  BEGIN SEQUENCE <xs:sequence maxOccurs="unbounded">
    std::vector<
    class __ns2__RoadSituationElementStructure_SecondaryReasons_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Reason.
/// </BLOCKQUOTE></PRE>
/// class _ns2__RoadSituationElementStructure_SecondaryReasons_Reason operations:
/// - _ns2__RoadSituationElementStructure_SecondaryReasons_Reason* soap_new__ns2__RoadSituationElementStructure_SecondaryReasons_Reason(soap*) allocate and default initialize
/// - _ns2__RoadSituationElementStructure_SecondaryReasons_Reason* soap_new__ns2__RoadSituationElementStructure_SecondaryReasons_Reason(soap*, int num) allocate array and default initialize values
/// - _ns2__RoadSituationElementStructure_SecondaryReasons_Reason* soap_new_req__ns2__RoadSituationElementStructure_SecondaryReasons_Reason(soap*, ...) allocate, set required members
/// - _ns2__RoadSituationElementStructure_SecondaryReasons_Reason* soap_new_set__ns2__RoadSituationElementStructure_SecondaryReasons_Reason(soap*, ...) allocate, set all public members
/// - _ns2__RoadSituationElementStructure_SecondaryReasons_Reason::soap_default(soap*) default initialize members
/// - int soap_read__ns2__RoadSituationElementStructure_SecondaryReasons_Reason(soap*, _ns2__RoadSituationElementStructure_SecondaryReasons_Reason*) deserialize from a stream
/// - int soap_write__ns2__RoadSituationElementStructure_SecondaryReasons_Reason(soap*, _ns2__RoadSituationElementStructure_SecondaryReasons_Reason*) serialize to a stream
/// - _ns2__RoadSituationElementStructure_SecondaryReasons_Reason* _ns2__RoadSituationElementStructure_SecondaryReasons_Reason::soap_dup(soap*) returns deep copy of _ns2__RoadSituationElementStructure_SecondaryReasons_Reason, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__RoadSituationElementStructure_SecondaryReasons_Reason::soap_del() deep deletes _ns2__RoadSituationElementStructure_SecondaryReasons_Reason data members, use only after _ns2__RoadSituationElementStructure_SecondaryReasons_Reason::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__RoadSituationElementStructure_SecondaryReasons_Reason
    {
//  BEGIN GROUP <xs:group name="ReasonGroup">
/// <PRE><BLOCKQUOTE>
///   StructuredReason Elements.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="TpegReasonGroup">
/// <PRE><BLOCKQUOTE>
///   Structured Classification Elements. Corresponds to TPEG 18 Event Reason.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_RoadSituationElementStructure_SecondaryReasons_Reason;	///< Union _ns2__union_RoadSituationElementStructure_SecondaryReasons_Reason selector: set to SOAP_UNION__ns2__union_RoadSituationElementStructure_SecondaryReasons_Reason_<fieldname>
    union _ns2__union_RoadSituationElementStructure_SecondaryReasons_Reason
    {
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_0/TPEG unknown event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UnknownReason.
    std::wstring*                        UnknownReason                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_1/TPEG Pti_19 miscellaneous event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MiscellaneousReason.
    enum ns2__MiscellaneousReasonEnumeration  MiscellaneousReason            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Personnel reason.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_2/TPEG Pti_20 personnel event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":PersonnelReason.
    enum ns2__PersonnelReasonEnumeration  PersonnelReason                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_3/TPEG Pti_21 equipment event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EquipmentReason.
    enum ns2__EquipmentReasonEnumeration  EquipmentReason                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Environment reason.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_4/TPEG Pti_22 environment event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EnvironmentReason.
    enum ns2__EnvironmentReasonEnumeration  EnvironmentReason              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_255/TPEG Pti_22 undefined event reason.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":UndefinedReason.
    std::wstring*                        UndefinedReason                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_RoadSituationElementStructure_SecondaryReasons_Reason;
//  END OF CHOICE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Classifier of Pub;ic Event.
/// </BLOCKQUOTE></PRE>
/// Element "PublicEventReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PublicEventTypeEnum.
    enum ns5__PublicEventTypeEnum*       PublicEventReason              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Text explanation of SITUATION reason. Not normally needed. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ReasonName                     0;
//  END OF GROUP
    }                                    Reason                         1;	///< Required element.
    }>                                   __RoadSituationElementStructure_SecondaryReasons_sequence;
//  END OF SEQUENCE
    }                                   *SecondaryReasons               0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DescriptionGroup">
/// <PRE><BLOCKQUOTE>
///   Text description of SITUATION. Some or all of this may have been generated from the other structured content elements. Where text has been overriden this is indicated.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN                         Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Summary of SITUATION. If absent should be generated from structure elements / and or by condensing Description. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DefaultedTextStructure* of length 0..unbounded.
    std::vector<ns2__DefaultedTextStructure*> Summary                        0;
/// <PRE><BLOCKQUOTE>
///   Description of SITUATION. Should not repeat any strap line included in Summary. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DefaultedTextStructure* of length 0..unbounded.
    std::vector<ns2__DefaultedTextStructure*> Description                    0;
/// <PRE><BLOCKQUOTE>
///   Additional descriptive details about the SITUATION (Unbounded since SIRI 2.0).
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DefaultedTextStructure* of length 0..unbounded.
    std::vector<ns2__DefaultedTextStructure*> Detail                         0;
/// <PRE><BLOCKQUOTE>
///   Further advice to passengers. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DefaultedTextStructure* of length 0..unbounded.
    std::vector<ns2__DefaultedTextStructure*> Advice                         0;
/// <PRE><BLOCKQUOTE>
///   Further advice to passengers.
/// </BLOCKQUOTE></PRE>
/// Element "Internal" of XSD type "http://www.siri.org.uk/siri":DefaultedTextStructure.
    ns2__DefaultedTextStructure*         Internal                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Any images associated with SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__RoadSituationElementStructure_Images operations:
/// - _ns2__RoadSituationElementStructure_Images* soap_new__ns2__RoadSituationElementStructure_Images(soap*) allocate and default initialize
/// - _ns2__RoadSituationElementStructure_Images* soap_new__ns2__RoadSituationElementStructure_Images(soap*, int num) allocate array and default initialize values
/// - _ns2__RoadSituationElementStructure_Images* soap_new_req__ns2__RoadSituationElementStructure_Images(soap*, ...) allocate, set required members
/// - _ns2__RoadSituationElementStructure_Images* soap_new_set__ns2__RoadSituationElementStructure_Images(soap*, ...) allocate, set all public members
/// - _ns2__RoadSituationElementStructure_Images::soap_default(soap*) default initialize members
/// - int soap_read__ns2__RoadSituationElementStructure_Images(soap*, _ns2__RoadSituationElementStructure_Images*) deserialize from a stream
/// - int soap_write__ns2__RoadSituationElementStructure_Images(soap*, _ns2__RoadSituationElementStructure_Images*) serialize to a stream
/// - _ns2__RoadSituationElementStructure_Images* _ns2__RoadSituationElementStructure_Images::soap_dup(soap*) returns deep copy of _ns2__RoadSituationElementStructure_Images, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__RoadSituationElementStructure_Images::soap_del() deep deletes _ns2__RoadSituationElementStructure_Images data members, use only after _ns2__RoadSituationElementStructure_Images::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__RoadSituationElementStructure_Images
    {
/// <PRE><BLOCKQUOTE>
///   Image description.
/// </BLOCKQUOTE></PRE>
/// Vector of Image of length 1..unbounded.
    std::vector<
/// class _ns2__RoadSituationElementStructure_Images_Image operations:
/// - _ns2__RoadSituationElementStructure_Images_Image* soap_new__ns2__RoadSituationElementStructure_Images_Image(soap*) allocate and default initialize
/// - _ns2__RoadSituationElementStructure_Images_Image* soap_new__ns2__RoadSituationElementStructure_Images_Image(soap*, int num) allocate array and default initialize values
/// - _ns2__RoadSituationElementStructure_Images_Image* soap_new_req__ns2__RoadSituationElementStructure_Images_Image(soap*, ...) allocate, set required members
/// - _ns2__RoadSituationElementStructure_Images_Image* soap_new_set__ns2__RoadSituationElementStructure_Images_Image(soap*, ...) allocate, set all public members
/// - _ns2__RoadSituationElementStructure_Images_Image::soap_default(soap*) default initialize members
/// - int soap_read__ns2__RoadSituationElementStructure_Images_Image(soap*, _ns2__RoadSituationElementStructure_Images_Image*) deserialize from a stream
/// - int soap_write__ns2__RoadSituationElementStructure_Images_Image(soap*, _ns2__RoadSituationElementStructure_Images_Image*) serialize to a stream
/// - _ns2__RoadSituationElementStructure_Images_Image* _ns2__RoadSituationElementStructure_Images_Image::soap_dup(soap*) returns deep copy of _ns2__RoadSituationElementStructure_Images_Image, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__RoadSituationElementStructure_Images_Image::soap_del() deep deletes _ns2__RoadSituationElementStructure_Images_Image data members, use only after _ns2__RoadSituationElementStructure_Images_Image::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__RoadSituationElementStructure_Images_Image
    {
/// INHERITED FROM ns2__ImageStructure:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_RoadSituationElementStructure_Images_Image;	///< Union _ns2__union_RoadSituationElementStructure_Images_Image selector: set to SOAP_UNION__ns2__union_RoadSituationElementStructure_Images_Image_<fieldname>
    union _ns2__union_RoadSituationElementStructure_Images_Image
    {
/// <PRE><BLOCKQUOTE>
///   Reference to an image.
/// </BLOCKQUOTE></PRE>
/// Element "ImageRef" of XSD type xs:anyURI.
    xsd__anyURI*                         ImageRef                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Embedded image.
/// </BLOCKQUOTE></PRE>
/// Element "ImageBinary" of XSD type xs:base64Binary.
    xsd__base64Binary*                   ImageBinary                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_RoadSituationElementStructure_Images_Image;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Categorisation of image content.
/// </BLOCKQUOTE></PRE>
/// Element "ImageContent" of XSD type "http://www.siri.org.uk/siri":ImageContentEnumeration.
    enum ns2__ImageContentEnumeration*   ImageContent                   0;	///< Optional element.
//  END OF INHERITED FROM ns2__ImageStructure
    }>                                   Image                          1;
    }                                   *Images                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Hyperlinks to other resources associated with SITUATION.
/// </BLOCKQUOTE></PRE>
/// class _ns2__RoadSituationElementStructure_InfoLinks operations:
/// - _ns2__RoadSituationElementStructure_InfoLinks* soap_new__ns2__RoadSituationElementStructure_InfoLinks(soap*) allocate and default initialize
/// - _ns2__RoadSituationElementStructure_InfoLinks* soap_new__ns2__RoadSituationElementStructure_InfoLinks(soap*, int num) allocate array and default initialize values
/// - _ns2__RoadSituationElementStructure_InfoLinks* soap_new_req__ns2__RoadSituationElementStructure_InfoLinks(soap*, ...) allocate, set required members
/// - _ns2__RoadSituationElementStructure_InfoLinks* soap_new_set__ns2__RoadSituationElementStructure_InfoLinks(soap*, ...) allocate, set all public members
/// - _ns2__RoadSituationElementStructure_InfoLinks::soap_default(soap*) default initialize members
/// - int soap_read__ns2__RoadSituationElementStructure_InfoLinks(soap*, _ns2__RoadSituationElementStructure_InfoLinks*) deserialize from a stream
/// - int soap_write__ns2__RoadSituationElementStructure_InfoLinks(soap*, _ns2__RoadSituationElementStructure_InfoLinks*) serialize to a stream
/// - _ns2__RoadSituationElementStructure_InfoLinks* _ns2__RoadSituationElementStructure_InfoLinks::soap_dup(soap*) returns deep copy of _ns2__RoadSituationElementStructure_InfoLinks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__RoadSituationElementStructure_InfoLinks::soap_del() deep deletes _ns2__RoadSituationElementStructure_InfoLinks data members, use only after _ns2__RoadSituationElementStructure_InfoLinks::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__RoadSituationElementStructure_InfoLinks
    {
/// <PRE><BLOCKQUOTE>
///   Hyperlink description.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__InfoLinkStructure* of length 1..unbounded.
    std::vector<ns2__InfoLinkStructure*> InfoLink                       1;
    }                                   *InfoLinks                      0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="RoadBodyGroup">
/// <PRE><BLOCKQUOTE>
///   Datex 2 SITUATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Structured model identifiying parts of transport network affected by SITUATION. Operator and Network values will be defaulted to values in general Context unless explicitly overridden.
/// </BLOCKQUOTE></PRE>
/// Element "Affects" of XSD type "http://www.siri.org.uk/siri":AffectsScopeStructure.
    ns2__AffectsScopeStructure*          Affects                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Structured model describing effect of the SITUATION on PT system.
/// </BLOCKQUOTE></PRE>
/// Element "Consequences" of XSD type "http://www.siri.org.uk/siri":PtConsequencesStructure.
    ns2__PtConsequencesStructure*        Consequences                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Structured model describing distribution actions to handle SITUATION. Any actions stated completely replace those from Context. If no actions are stated, any actions from general Context are used.
/// </BLOCKQUOTE></PRE>
/// Element "PublishingActions" of XSD type "http://www.siri.org.uk/siri":ActionsStructure.
    ns2__ActionsStructure*               PublishingActions              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Datex2 SITUATION Record.
/// </BLOCKQUOTE></PRE>
/// Element "SituationRecord" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SituationRecord.
    ns5__SituationRecord*                SituationRecord                0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ProductionTimetableDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Delivery for Production Timetable Service type.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductionTimetableDeliveryStructure operations:
/// - ns2__ProductionTimetableDeliveryStructure* soap_new_ns2__ProductionTimetableDeliveryStructure(soap*) allocate and default initialize
/// - ns2__ProductionTimetableDeliveryStructure* soap_new_ns2__ProductionTimetableDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductionTimetableDeliveryStructure* soap_new_req_ns2__ProductionTimetableDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__ProductionTimetableDeliveryStructure* soap_new_set_ns2__ProductionTimetableDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductionTimetableDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductionTimetableDeliveryStructure(soap*, ns2__ProductionTimetableDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductionTimetableDeliveryStructure(soap*, ns2__ProductionTimetableDeliveryStructure*) serialize to a stream
/// - ns2__ProductionTimetableDeliveryStructure* ns2__ProductionTimetableDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__ProductionTimetableDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductionTimetableDeliveryStructure::soap_del() deep deletes ns2__ProductionTimetableDeliveryStructure data members, use only after ns2__ProductionTimetableDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductionTimetableDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="ProductionTimetablePayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Payload part of Production Timetable delivery.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A TIMETABLE to run on a specified date.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A TIMETABLE FRAME to run on a specified date.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DatedTimetableVersionFrameStructure* element refs of length 0..unbounded.
    std::vector<ns2__DatedTimetableVersionFrameStructure*> DatedTimetableVersionFrame     0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of response. fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ProductionTimetableCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for ProductionTimetable Capability.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductionTimetableCapabilitiesResponseStructure operations:
/// - ns2__ProductionTimetableCapabilitiesResponseStructure* soap_new_ns2__ProductionTimetableCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__ProductionTimetableCapabilitiesResponseStructure* soap_new_ns2__ProductionTimetableCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductionTimetableCapabilitiesResponseStructure* soap_new_req_ns2__ProductionTimetableCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__ProductionTimetableCapabilitiesResponseStructure* soap_new_set_ns2__ProductionTimetableCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductionTimetableCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductionTimetableCapabilitiesResponseStructure(soap*, ns2__ProductionTimetableCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductionTimetableCapabilitiesResponseStructure(soap*, ns2__ProductionTimetableCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__ProductionTimetableCapabilitiesResponseStructure* ns2__ProductionTimetableCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__ProductionTimetableCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductionTimetableCapabilitiesResponseStructure::soap_del() deep deletes ns2__ProductionTimetableCapabilitiesResponseStructure data members, use only after ns2__ProductionTimetableCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductionTimetableCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of ProductionTimetableService.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductionTimetableServiceCapabilities.
    ns2__ProductionTimetableServiceCapabilitiesStructure*  ProductionTimetableServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductionTimetablePermissions.
    _ns2__ProductionTimetablePermissions*  ProductionTimetablePermissions 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":EstimatedTimetableDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Real-time Timetable Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedTimetableDeliveryStructure operations:
/// - ns2__EstimatedTimetableDeliveryStructure* soap_new_ns2__EstimatedTimetableDeliveryStructure(soap*) allocate and default initialize
/// - ns2__EstimatedTimetableDeliveryStructure* soap_new_ns2__EstimatedTimetableDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedTimetableDeliveryStructure* soap_new_req_ns2__EstimatedTimetableDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedTimetableDeliveryStructure* soap_new_set_ns2__EstimatedTimetableDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedTimetableDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedTimetableDeliveryStructure(soap*, ns2__EstimatedTimetableDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedTimetableDeliveryStructure(soap*, ns2__EstimatedTimetableDeliveryStructure*) serialize to a stream
/// - ns2__EstimatedTimetableDeliveryStructure* ns2__EstimatedTimetableDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedTimetableDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedTimetableDeliveryStructure::soap_del() deep deletes ns2__EstimatedTimetableDeliveryStructure data members, use only after ns2__EstimatedTimetableDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedTimetableDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="EstimatedTimetablePayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Payload part of Estimated Timetable Delivery.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Estimated Journeys of a common TIMETABLE VERSION FRAME, grouped by timetable version.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedVersionFrameStructure* of length 1..unbounded.
    std::vector<ns2__EstimatedVersionFrameStructure*> EstimatedJourneyVersionFrame   1;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":EstimatedTimetableCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Estimated Timetable Capability.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedTimetableCapabilitiesResponseStructure operations:
/// - ns2__EstimatedTimetableCapabilitiesResponseStructure* soap_new_ns2__EstimatedTimetableCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__EstimatedTimetableCapabilitiesResponseStructure* soap_new_ns2__EstimatedTimetableCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedTimetableCapabilitiesResponseStructure* soap_new_req_ns2__EstimatedTimetableCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedTimetableCapabilitiesResponseStructure* soap_new_set_ns2__EstimatedTimetableCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedTimetableCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedTimetableCapabilitiesResponseStructure(soap*, ns2__EstimatedTimetableCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedTimetableCapabilitiesResponseStructure(soap*, ns2__EstimatedTimetableCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__EstimatedTimetableCapabilitiesResponseStructure* ns2__EstimatedTimetableCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedTimetableCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedTimetableCapabilitiesResponseStructure::soap_del() deep deletes ns2__EstimatedTimetableCapabilitiesResponseStructure data members, use only after ns2__EstimatedTimetableCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedTimetableCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of Estimated TimetableService.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EstimatedTimetableServiceCapabilities.
    ns2__EstimatedTimetableServiceCapabilitiesStructure*  EstimatedTimetableServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":EstimatedTimetablePermissions.
    _ns2__EstimatedTimetablePermissions*  EstimatedTimetablePermissions  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":StopTimetableDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Data type Delivery for Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopTimetableDeliveryStructure operations:
/// - ns2__StopTimetableDeliveryStructure* soap_new_ns2__StopTimetableDeliveryStructure(soap*) allocate and default initialize
/// - ns2__StopTimetableDeliveryStructure* soap_new_ns2__StopTimetableDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopTimetableDeliveryStructure* soap_new_req_ns2__StopTimetableDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__StopTimetableDeliveryStructure* soap_new_set_ns2__StopTimetableDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__StopTimetableDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopTimetableDeliveryStructure(soap*, ns2__StopTimetableDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__StopTimetableDeliveryStructure(soap*, ns2__StopTimetableDeliveryStructure*) serialize to a stream
/// - ns2__StopTimetableDeliveryStructure* ns2__StopTimetableDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__StopTimetableDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopTimetableDeliveryStructure::soap_del() deep deletes ns2__StopTimetableDeliveryStructure data members, use only after ns2__StopTimetableDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopTimetableDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="StopTimetablePayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Payload part of Stop Timetable delivery.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A visit to a stop by a VEHICLE as an arrival and /or departure, as timetabled in the production timetable.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TimetabledStopVisitStructure* of length 0..unbounded.
    std::vector<ns2__TimetabledStopVisitStructure*> TimetabledStopVisit            0;
/// <PRE><BLOCKQUOTE>
///   A cancellation of a previously issued TimetabledStopVisit.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TimetabledStopVisitCancellationStructure* of length 0..unbounded.
    std::vector<ns2__TimetabledStopVisitCancellationStructure*> TimetabledStopVisitCancellation 0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":TimetabledStopVisitStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractIdentifiedItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Timetabled Visit of a VEHICLE to a stop. May provide information about the arrival, the departure or both.
/// </BLOCKQUOTE></PRE>
/// class ns2__TimetabledStopVisitStructure operations:
/// - ns2__TimetabledStopVisitStructure* soap_new_ns2__TimetabledStopVisitStructure(soap*) allocate and default initialize
/// - ns2__TimetabledStopVisitStructure* soap_new_ns2__TimetabledStopVisitStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TimetabledStopVisitStructure* soap_new_req_ns2__TimetabledStopVisitStructure(soap*, ...) allocate, set required members
/// - ns2__TimetabledStopVisitStructure* soap_new_set_ns2__TimetabledStopVisitStructure(soap*, ...) allocate, set all public members
/// - ns2__TimetabledStopVisitStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TimetabledStopVisitStructure(soap*, ns2__TimetabledStopVisitStructure*) deserialize from a stream
/// - int soap_write_ns2__TimetabledStopVisitStructure(soap*, ns2__TimetabledStopVisitStructure*) serialize to a stream
/// - ns2__TimetabledStopVisitStructure* ns2__TimetabledStopVisitStructure::soap_dup(soap*) returns deep copy of ns2__TimetabledStopVisitStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TimetabledStopVisitStructure::soap_del() deep deletes ns2__TimetabledStopVisitStructure data members, use only after ns2__TimetabledStopVisitStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TimetabledStopVisitStructure : public ns2__AbstractIdentifiedItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point / LOGICAL DISPLAY to which Stop Visit applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Timetabled VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TargetedVehicleJourney.
    ns2__TargetedVehicleJourneyStructure*  TargetedVehicleJourney         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":TimetabledStopVisitCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractReferencingItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Cancellation of Timetabled Visit of a VEHICLE to a stop. May provide information about the arrival, the departure or both.
/// </BLOCKQUOTE></PRE>
/// class ns2__TimetabledStopVisitCancellationStructure operations:
/// - ns2__TimetabledStopVisitCancellationStructure* soap_new_ns2__TimetabledStopVisitCancellationStructure(soap*) allocate and default initialize
/// - ns2__TimetabledStopVisitCancellationStructure* soap_new_ns2__TimetabledStopVisitCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TimetabledStopVisitCancellationStructure* soap_new_req_ns2__TimetabledStopVisitCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__TimetabledStopVisitCancellationStructure* soap_new_set_ns2__TimetabledStopVisitCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__TimetabledStopVisitCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TimetabledStopVisitCancellationStructure(soap*, ns2__TimetabledStopVisitCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__TimetabledStopVisitCancellationStructure(soap*, ns2__TimetabledStopVisitCancellationStructure*) serialize to a stream
/// - ns2__TimetabledStopVisitCancellationStructure* ns2__TimetabledStopVisitCancellationStructure::soap_dup(soap*) returns deep copy of ns2__TimetabledStopVisitCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TimetabledStopVisitCancellationStructure::soap_del() deep deletes ns2__TimetabledStopVisitCancellationStructure data members, use only after ns2__TimetabledStopVisitCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TimetabledStopVisitCancellationStructure : public ns2__AbstractReferencingItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractReferencingItemStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractReferencingItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point to which Stop Visit applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
//  BEGIN GROUP <xs:group name="JourneyIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the dated VEHICLE JOURNEY that the VEHICLE is making.
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reason for cancellation. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Reason                         0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopTimetableCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopTimetableCapabilitiesResponseStructure operations:
/// - ns2__StopTimetableCapabilitiesResponseStructure* soap_new_ns2__StopTimetableCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__StopTimetableCapabilitiesResponseStructure* soap_new_ns2__StopTimetableCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopTimetableCapabilitiesResponseStructure* soap_new_req_ns2__StopTimetableCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__StopTimetableCapabilitiesResponseStructure* soap_new_set_ns2__StopTimetableCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__StopTimetableCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopTimetableCapabilitiesResponseStructure(soap*, ns2__StopTimetableCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__StopTimetableCapabilitiesResponseStructure(soap*, ns2__StopTimetableCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__StopTimetableCapabilitiesResponseStructure* ns2__StopTimetableCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__StopTimetableCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopTimetableCapabilitiesResponseStructure::soap_del() deep deletes ns2__StopTimetableCapabilitiesResponseStructure data members, use only after ns2__StopTimetableCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopTimetableCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopTimetableServiceCapabilities.
    ns2__StopTimetableServiceCapabilitiesStructure*  StopTimetableServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopTimetablePermissions.
    _ns2__StopTimetablePermissions*      StopTimetablePermissions       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringDeliveryStructure operations:
/// - ns2__StopMonitoringDeliveryStructure* soap_new_ns2__StopMonitoringDeliveryStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringDeliveryStructure* soap_new_ns2__StopMonitoringDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringDeliveryStructure* soap_new_req_ns2__StopMonitoringDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringDeliveryStructure* soap_new_set_ns2__StopMonitoringDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringDeliveryStructure(soap*, ns2__StopMonitoringDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringDeliveryStructure(soap*, ns2__StopMonitoringDeliveryStructure*) serialize to a stream
/// - ns2__StopMonitoringDeliveryStructure* ns2__StopMonitoringDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringDeliveryStructure::soap_del() deep deletes ns2__StopMonitoringDeliveryStructure data members, use only after ns2__StopMonitoringDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="StopMonitoringPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Payload part of Stop Monitoring Service delivery.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point (LOGICAL DISPLAY that was requested. This can a be used to return the reference to the requested Monitoring Point if there are no stop visits for the stop. Normally tere will only be one. SIRI v1.3
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__MonitoringRefStructure* of length 0..unbounded.
    std::vector<ns2__MonitoringRefStructure*> MonitoringRef                  0;
/// <PRE><BLOCKQUOTE>
///   Name to use to describe monitoring point (Stop or display). Normally Consumer will already have access to this in its reference data but may be included to increase utility of delivery data i to devices that do not hold reference data, e.g. for SIRI LITE services(+SIRI v2.0).
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> MonitoringName                 0;
/// <PRE><BLOCKQUOTE>
///   A visit to a stop by a VEHICLE as an arrival and /or departure.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__MonitoredStopVisitStructure* element refs of length 0..unbounded.
    std::vector<ns2__MonitoredStopVisitStructure*> MonitoredStopVisit             0;
/// <PRE><BLOCKQUOTE>
///   Reference to an previously communicated Stop Visit which should now be removed from the arrival/departure board for the stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__MonitoredStopVisitCancellationStructure* element refs of length 0..unbounded.
    std::vector<ns2__MonitoredStopVisitCancellationStructure*> MonitoredStopVisitCancellation 0;
/// <PRE><BLOCKQUOTE>
///   LINE notice for stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopLineNoticeStructure* element refs of length 0..unbounded.
    std::vector<ns2__StopLineNoticeStructure*> StopLineNotice                 0;
/// <PRE><BLOCKQUOTE>
///   Reference to an previously communicated LINE notice which should now be removed from the arrival/departure board for the stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopLineNoticeCancellationStructure* element refs of length 0..unbounded.
    std::vector<ns2__StopLineNoticeCancellationStructure*> StopLineNoticeCancellation     0;
/// <PRE><BLOCKQUOTE>
///   Notice for stop. (SIRI 2.0++)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Notice for stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopNoticeStructure* element refs of length 0..unbounded.
    std::vector<ns2__StopNoticeStructure*> StopNotice                     0;
/// <PRE><BLOCKQUOTE>
///   Reference to an previously communicated Notice which should now be removed from the arrival/departure board for the stop. (SIRI 2.0++)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to an previously communicated Notice which should now be removed from the arrival/departure board for the stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopNoticeCancellationStructure* element refs of length 0..unbounded.
    std::vector<ns2__StopNoticeCancellationStructure*> StopNoticeCancellation         0;
/// <PRE><BLOCKQUOTE>
///   Information about unavailablilty of some or all services at the SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Exceptions to service availability for all or some services SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceExceptionStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceExceptionStructure*> ServiceException               0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Text associated with whole delivery. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Note                           0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":MonitoredStopVisitStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractIdentifiedItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Visit of a VEHICLE to a stop monitoring point. May provide information about the arrival, the departure or both.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoredStopVisitStructure operations:
/// - ns2__MonitoredStopVisitStructure* soap_new_ns2__MonitoredStopVisitStructure(soap*) allocate and default initialize
/// - ns2__MonitoredStopVisitStructure* soap_new_ns2__MonitoredStopVisitStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoredStopVisitStructure* soap_new_req_ns2__MonitoredStopVisitStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoredStopVisitStructure* soap_new_set_ns2__MonitoredStopVisitStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoredStopVisitStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoredStopVisitStructure(soap*, ns2__MonitoredStopVisitStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoredStopVisitStructure(soap*, ns2__MonitoredStopVisitStructure*) serialize to a stream
/// - ns2__MonitoredStopVisitStructure* ns2__MonitoredStopVisitStructure::soap_dup(soap*) returns deep copy of ns2__MonitoredStopVisitStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoredStopVisitStructure::soap_del() deep deletes ns2__MonitoredStopVisitStructure data members, use only after ns2__MonitoredStopVisitStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoredStopVisitStructure : public ns2__AbstractIdentifiedItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
/// <PRE><BLOCKQUOTE>
///   Time until when data is valid. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntilTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntilTime                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="StopVisitReferenceGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   External identifiers of Stop Visit.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__MonitoredStopVisitStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point to which Stop Visit applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier associated with Stop Visit for use in direct wireless communication between bus and stop display. Cleardown codes are short arbitrary identifiers suitable for radio transmission.
/// </BLOCKQUOTE></PRE>
/// Element "ClearDownRef" of XSD type "http://www.siri.org.uk/siri":ClearDownRefStructure.
    ns2__ClearDownRefStructure*          ClearDownRef                   0;	///< Optional element.
    }                                   *__MonitoredStopVisitStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Provides real-time information about the VEHICLE JOURNEY along which a VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoredVehicleJourney" of XSD type "http://www.siri.org.uk/siri":MonitoredVehicleJourneyStructure.
    ns2__MonitoredVehicleJourneyStructure*  MonitoredVehicleJourney        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Text associated with Stop Visit.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopVisitNote                  0;
/// <PRE><BLOCKQUOTE>
///   Facility associated with stop visit
/// </BLOCKQUOTE></PRE>
/// Element "StopFacility" of XSD type "http://www.siri.org.uk/siri":FacilityRefStructure.
    ns2__FacilityRefStructure*           StopFacility                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":MonitoredStopVisitCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractReferencingItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Cancellation of an earlier Stop Visit.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoredStopVisitCancellationStructure operations:
/// - ns2__MonitoredStopVisitCancellationStructure* soap_new_ns2__MonitoredStopVisitCancellationStructure(soap*) allocate and default initialize
/// - ns2__MonitoredStopVisitCancellationStructure* soap_new_ns2__MonitoredStopVisitCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoredStopVisitCancellationStructure* soap_new_req_ns2__MonitoredStopVisitCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoredStopVisitCancellationStructure* soap_new_set_ns2__MonitoredStopVisitCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoredStopVisitCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoredStopVisitCancellationStructure(soap*, ns2__MonitoredStopVisitCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoredStopVisitCancellationStructure(soap*, ns2__MonitoredStopVisitCancellationStructure*) serialize to a stream
/// - ns2__MonitoredStopVisitCancellationStructure* ns2__MonitoredStopVisitCancellationStructure::soap_dup(soap*) returns deep copy of ns2__MonitoredStopVisitCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoredStopVisitCancellationStructure::soap_del() deep deletes ns2__MonitoredStopVisitCancellationStructure data members, use only after ns2__MonitoredStopVisitCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoredStopVisitCancellationStructure : public ns2__AbstractReferencingItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractReferencingItemStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractReferencingItemStructure */
//  BEGIN GROUP <xs:group name="StopVisitCancellationIdentityGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   External identifiers of Cancelled Stop Visit.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__MonitoredStopVisitCancellationStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point to which cancellation applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
//  BEGIN GROUP <xs:group name="LineIdentityGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements for identifying a LINE and DIRECTION.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__MonitoredStopVisitCancellationStructure_sequence_
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE DIRECTION DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
    }                                   *__MonitoredStopVisitCancellationStructure_sequence_ 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   VEHICLE JOURNEY of Stop Visit that is being cancelled.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  VehicleJourneyRef              0;	///< Optional element.
    }                                   *__MonitoredStopVisitCancellationStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Cleardown identifier of Stop Visit that is being deleted.
/// </BLOCKQUOTE></PRE>
/// Element "ClearDownRef" of XSD type "http://www.siri.org.uk/siri":ClearDownRefStructure.
    ns2__ClearDownRefStructure*          ClearDownRef                   0;	///< Optional element.
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reason for cancellation. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Reason                         0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopLineNoticeStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractIdentifiedItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for a Stop Line Notice.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopLineNoticeStructure operations:
/// - ns2__StopLineNoticeStructure* soap_new_ns2__StopLineNoticeStructure(soap*) allocate and default initialize
/// - ns2__StopLineNoticeStructure* soap_new_ns2__StopLineNoticeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopLineNoticeStructure* soap_new_req_ns2__StopLineNoticeStructure(soap*, ...) allocate, set required members
/// - ns2__StopLineNoticeStructure* soap_new_set_ns2__StopLineNoticeStructure(soap*, ...) allocate, set all public members
/// - ns2__StopLineNoticeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopLineNoticeStructure(soap*, ns2__StopLineNoticeStructure*) deserialize from a stream
/// - int soap_write_ns2__StopLineNoticeStructure(soap*, ns2__StopLineNoticeStructure*) serialize to a stream
/// - ns2__StopLineNoticeStructure* ns2__StopLineNoticeStructure::soap_dup(soap*) returns deep copy of ns2__StopLineNoticeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopLineNoticeStructure::soap_del() deep deletes ns2__StopLineNoticeStructure data members, use only after ns2__StopLineNoticeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopLineNoticeStructure : public ns2__AbstractIdentifiedItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point to which LINE notice applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
//  BEGIN GROUP <xs:group name="LineIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for identifying a LINE and DIRECTION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE DIRECTION DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Special text associated with LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> LineNote                       0;
/// <PRE><BLOCKQUOTE>
///   Variant of a notice for use in a particular media channel. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DeliveryVariantStructure* of length 0..unbounded.
    std::vector<ns2__DeliveryVariantStructure*> DeliveryVariant                0;
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__SituationRefStructure*> SituationRef                   0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopLineNoticeCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractReferencingItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Cancellation of an earlier Stop Line Notice.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopLineNoticeCancellationStructure operations:
/// - ns2__StopLineNoticeCancellationStructure* soap_new_ns2__StopLineNoticeCancellationStructure(soap*) allocate and default initialize
/// - ns2__StopLineNoticeCancellationStructure* soap_new_ns2__StopLineNoticeCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopLineNoticeCancellationStructure* soap_new_req_ns2__StopLineNoticeCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__StopLineNoticeCancellationStructure* soap_new_set_ns2__StopLineNoticeCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__StopLineNoticeCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopLineNoticeCancellationStructure(soap*, ns2__StopLineNoticeCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__StopLineNoticeCancellationStructure(soap*, ns2__StopLineNoticeCancellationStructure*) serialize to a stream
/// - ns2__StopLineNoticeCancellationStructure* ns2__StopLineNoticeCancellationStructure::soap_dup(soap*) returns deep copy of ns2__StopLineNoticeCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopLineNoticeCancellationStructure::soap_del() deep deletes ns2__StopLineNoticeCancellationStructure data members, use only after ns2__StopLineNoticeCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopLineNoticeCancellationStructure : public ns2__AbstractReferencingItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractReferencingItemStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractReferencingItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point to which LINE notice applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
//  BEGIN GROUP <xs:group name="LineIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for identifying a LINE and DIRECTION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE DIRECTION DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopNoticeStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractRequiredIdentifiedItemStructure.
///
/// class ns2__StopNoticeStructure operations:
/// - ns2__StopNoticeStructure* soap_new_ns2__StopNoticeStructure(soap*) allocate and default initialize
/// - ns2__StopNoticeStructure* soap_new_ns2__StopNoticeStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopNoticeStructure* soap_new_req_ns2__StopNoticeStructure(soap*, ...) allocate, set required members
/// - ns2__StopNoticeStructure* soap_new_set_ns2__StopNoticeStructure(soap*, ...) allocate, set all public members
/// - ns2__StopNoticeStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopNoticeStructure(soap*, ns2__StopNoticeStructure*) deserialize from a stream
/// - int soap_write_ns2__StopNoticeStructure(soap*, ns2__StopNoticeStructure*) serialize to a stream
/// - ns2__StopNoticeStructure* ns2__StopNoticeStructure::soap_dup(soap*) returns deep copy of ns2__StopNoticeStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopNoticeStructure::soap_del() deep deletes ns2__StopNoticeStructure data members, use only after ns2__StopNoticeStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopNoticeStructure : public ns2__AbstractRequiredIdentifiedItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractRequiredIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType              ItemIdentifier                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequiredIdentifiedItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point to which SITUATION applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__SituationRefStructure*> SituationRef                   0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopNoticeCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractRequiredReferencingItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Cancellation of an earlier Stop Notice.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopNoticeCancellationStructure operations:
/// - ns2__StopNoticeCancellationStructure* soap_new_ns2__StopNoticeCancellationStructure(soap*) allocate and default initialize
/// - ns2__StopNoticeCancellationStructure* soap_new_ns2__StopNoticeCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopNoticeCancellationStructure* soap_new_req_ns2__StopNoticeCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__StopNoticeCancellationStructure* soap_new_set_ns2__StopNoticeCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__StopNoticeCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopNoticeCancellationStructure(soap*, ns2__StopNoticeCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__StopNoticeCancellationStructure(soap*, ns2__StopNoticeCancellationStructure*) serialize to a stream
/// - ns2__StopNoticeCancellationStructure* ns2__StopNoticeCancellationStructure::soap_dup(soap*) returns deep copy of ns2__StopNoticeCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopNoticeCancellationStructure::soap_del() deep deletes ns2__StopNoticeCancellationStructure data members, use only after ns2__StopNoticeCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopNoticeCancellationStructure : public ns2__AbstractRequiredReferencingItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractRequiredReferencingItemStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequiredReferencingItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a stop monitoring point to which Notice applies.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   In case of a delayed cancellation this time tells from when the cancellation applies.
/// </BLOCKQUOTE></PRE>
/// Element "AppliesFromTime" of XSD type xs:dateTime.
    xsd__dateTime*                       AppliesFromTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringCapabilitiesResponseStructure operations:
/// - ns2__StopMonitoringCapabilitiesResponseStructure* soap_new_ns2__StopMonitoringCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringCapabilitiesResponseStructure* soap_new_ns2__StopMonitoringCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringCapabilitiesResponseStructure* soap_new_req_ns2__StopMonitoringCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringCapabilitiesResponseStructure* soap_new_set_ns2__StopMonitoringCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringCapabilitiesResponseStructure(soap*, ns2__StopMonitoringCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringCapabilitiesResponseStructure(soap*, ns2__StopMonitoringCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__StopMonitoringCapabilitiesResponseStructure* ns2__StopMonitoringCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringCapabilitiesResponseStructure::soap_del() deep deletes ns2__StopMonitoringCapabilitiesResponseStructure data members, use only after ns2__StopMonitoringCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of StopMonitoring Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopMonitoringServiceCapabilities.
    ns2__StopMonitoringServiceCapabilitiesStructure*  StopMonitoringServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participants permissions to use the service, Only returned if requested.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopMonitoringPermissions.
    _ns2__StopMonitoringPermissions*     StopMonitoringPermissions      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Vehicle Monitoring Service. Provides information about one or more vehicles; each has its own VEHICLE activity element.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringDeliveryStructure operations:
/// - ns2__VehicleMonitoringDeliveryStructure* soap_new_ns2__VehicleMonitoringDeliveryStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringDeliveryStructure* soap_new_ns2__VehicleMonitoringDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringDeliveryStructure* soap_new_req_ns2__VehicleMonitoringDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringDeliveryStructure* soap_new_set_ns2__VehicleMonitoringDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringDeliveryStructure(soap*, ns2__VehicleMonitoringDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringDeliveryStructure(soap*, ns2__VehicleMonitoringDeliveryStructure*) serialize to a stream
/// - ns2__VehicleMonitoringDeliveryStructure* ns2__VehicleMonitoringDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringDeliveryStructure::soap_del() deep deletes ns2__VehicleMonitoringDeliveryStructure data members, use only after ns2__VehicleMonitoringDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="VehicleMonitoringPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Payload part of Vehicle Monitoring delivery.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Describes the progress of a VEHICLE along its route.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleActivityStructure* of length 0..unbounded.
    std::vector<ns2__VehicleActivityStructure*> VehicleActivity                0;
/// <PRE><BLOCKQUOTE>
///   Reference to an previously communicated VEHICLE activity which should now be removed from the system.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleActivityCancellationStructure* of length 0..unbounded.
    std::vector<ns2__VehicleActivityCancellationStructure*> VehicleActivityCancellation    0;
/// <PRE><BLOCKQUOTE>
///   Annotation to accompany of Vehicle Activities.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> VehicleActivityNote            0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":VehicleActivityStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractIdentifiedItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for a Vehicle Activity.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleActivityStructure operations:
/// - ns2__VehicleActivityStructure* soap_new_ns2__VehicleActivityStructure(soap*) allocate and default initialize
/// - ns2__VehicleActivityStructure* soap_new_ns2__VehicleActivityStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleActivityStructure* soap_new_req_ns2__VehicleActivityStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleActivityStructure* soap_new_set_ns2__VehicleActivityStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleActivityStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleActivityStructure(soap*, ns2__VehicleActivityStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleActivityStructure(soap*, ns2__VehicleActivityStructure*) serialize to a stream
/// - ns2__VehicleActivityStructure* ns2__VehicleActivityStructure::soap_dup(soap*) returns deep copy of ns2__VehicleActivityStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleActivityStructure::soap_del() deep deletes ns2__VehicleActivityStructure data members, use only after ns2__VehicleActivityStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleActivityStructure : public ns2__AbstractIdentifiedItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
/// <PRE><BLOCKQUOTE>
///   Time until when data is valid.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntilTime" of XSD type xs:dateTime.
    xsd__dateTime                        ValidUntilTime                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to monitored VEHICLE or GROUP OF VEHICLEs.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleMonitoringRef" of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringRefStructure.
    ns2__VehicleMonitoringRefStructure*  VehicleMonitoringRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name associated with Monitoring Reference. Supports SIRI LITE servcies (+SIRI v2.0).
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> MonitoringName                 0;
/// <PRE><BLOCKQUOTE>
///   Provides information about the progress of the VEHICLE along its current link, that is link from previous visited top to current position.
/// </BLOCKQUOTE></PRE>
/// Element "ProgressBetweenStops" of XSD type "http://www.siri.org.uk/siri":ProgressBetweenStopsStructure.
    ns2__ProgressBetweenStopsStructure*  ProgressBetweenStops           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Monitored VEHICLE JOURNEY that VEHICLE is following.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleActivityStructure_MonitoredVehicleJourney operations:
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney* soap_new__ns2__VehicleActivityStructure_MonitoredVehicleJourney(soap*) allocate and default initialize
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney* soap_new__ns2__VehicleActivityStructure_MonitoredVehicleJourney(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney* soap_new_req__ns2__VehicleActivityStructure_MonitoredVehicleJourney(soap*, ...) allocate, set required members
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney* soap_new_set__ns2__VehicleActivityStructure_MonitoredVehicleJourney(soap*, ...) allocate, set all public members
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleActivityStructure_MonitoredVehicleJourney(soap*, _ns2__VehicleActivityStructure_MonitoredVehicleJourney*) deserialize from a stream
/// - int soap_write__ns2__VehicleActivityStructure_MonitoredVehicleJourney(soap*, _ns2__VehicleActivityStructure_MonitoredVehicleJourney*) serialize to a stream
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney* _ns2__VehicleActivityStructure_MonitoredVehicleJourney::soap_dup(soap*) returns deep copy of _ns2__VehicleActivityStructure_MonitoredVehicleJourney, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney::soap_del() deep deletes _ns2__VehicleActivityStructure_MonitoredVehicleJourney data members, use only after _ns2__VehicleActivityStructure_MonitoredVehicleJourney::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleActivityStructure_MonitoredVehicleJourney
    {
/// INHERITED FROM ns2__MonitoredVehicleJourneyStructure:
//  BEGIN GROUP <xs:group name="MonitoredJourneyIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying a VEHICLE JOURNEY. LINE and DIRECTION will be same as for journey unless overridden.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to LINE of journey.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to DIRECTION of journey.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A reference to the DATED VEHICLE JOURNEY that the VEHICLE is making, unique with the data horizon of the service.
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="VehicleJourneyInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Common information about a VEHICLE JOURNEY. (Similar to VDV TripInfo)
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="ServiceInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements classifying the Service or journey. Values for these elements can be specified on a timetabled schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__VehicleActivityStructure_MonitoredVehicleJourney_sequence
    {
//  BEGIN GROUP <xs:group name="BasicServiceInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Information that classifies journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   OPERATOR of a VEHICLE JOURNEY. Note that the operator may change over the course of a journey. This shoudl show teh operator for the curent point in the journey. Use Journey Parts tp record all the operators in the whole journeyh.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Product Classification of VEHICLE JOURNEY- subdivides a transport mode. e.g. express, loacl.
/// </BLOCKQUOTE></PRE>
/// Element "ProductCategoryRef" of XSD type "http://www.siri.org.uk/siri":ProductCategoryRefStructure.
    ns2__ProductCategoryRefStructure*    ProductCategoryRef             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package. Corresponds to NeTEX TYPE OF SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> ServiceFeatureRef              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Features of VEHICLE providing journey. Recommended SIRI values based on TPEG are given in SIRI documentation and enumerated in the siri_facilities package.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__VehicleFeatureRefStructure*> VehicleFeatureRef              0;
    }                                   *__VehicleActivityStructure_MonitoredVehicleJourney_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndNamesGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   End names for journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__VehicleActivityStructure_MonitoredVehicleJourney_sequence_
    {
/// <PRE><BLOCKQUOTE>
///   Reference to the origin SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OriginRef.
    ns2__JourneyPlaceRefStructure*       OriginRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of the origin of the journey. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginName                     0;
/// <PRE><BLOCKQUOTE>
///   Short name of the origin of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as Origin Name.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> OriginShortName                0;
/// <PRE><BLOCKQUOTE>
///   DIRECTION name shown for joruney at the origin. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationDisplayAtOrigin     0;
/// <PRE><BLOCKQUOTE>
///   Names of VIA points, used to help identify the LINE, for example, Luton to Luton via Sutton. Currently 3 in VDV. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ViaNameStructure* of length 0..unbounded.
    std::vector<ns2__ViaNameStructure* > Via                            0;
/// <PRE><BLOCKQUOTE>
///   Reference to a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the destination SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":DestinationRef.
    ns2__DestinationRefStructure*        DestinationRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the destination stop (vehicle signage), Can be overwritten for a journey, and then also section by section by the entry in an individual CALl. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DestinationName                0;
/// <PRE><BLOCKQUOTE>
///   Short name of the DESTINATION.of the journey; used to help identify the VEHICLE JOURNEY on arrival boards. If absent, same as DestinationName. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> DestinationShortName           0;
    }                                   *__VehicleActivityStructure_MonitoredVehicleJourney_sequence_ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing a VEHICLE JOURNEY. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul DATED VEHICLE JOURNEYs of the timetable. Each real-time journey (e.g. ESTIMATED VEHICLE JOURNEY or MONITORED VEHICLE JORUNEY) takes its values from the DATED VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   For train services with named journeys. Train name, e.g. West Coast Express. If omitted: No train name. Inherited property. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> VehicleJourneyName             0;
/// <PRE><BLOCKQUOTE>
///   Additional descriptive text associated with journey. Inherited property.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> JourneyNote                    0;
/// <PRE><BLOCKQUOTE>
///   Contact details for use by members of public. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "PublicContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         PublicContact                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contact details for use by operational staff. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "OperationsContact" of XSD type "http://www.siri.org.uk/siri":SimpleContactStructure.
    ns2__SimpleContactStructure*         OperationsContact              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyEndTimesGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Call times for journey.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__VehicleActivityStructure_MonitoredVehicleJourney_sequence__
    {
/// <PRE><BLOCKQUOTE>
///   Whether this is a Headway Service, that is shown as operating at a prescribed interval rather than to a fixed timetable. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "HeadwayService" of XSD type xs:boolean.
    bool                                 HeadwayService                 0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Timetabled departure time from Origin.
/// </BLOCKQUOTE></PRE>
/// Element "OriginAimedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       OriginAimedDepartureTime       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timetabled arrival time at Destination.
/// </BLOCKQUOTE></PRE>
/// Element "DestinationAimedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       DestinationAimedArrivalTime    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether journey is first or last journey of day. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FirstOrLastJourney.
    enum ns2__FirstOrLastJourneyEnumeration  FirstOrLastJourney             0 = ns2__FirstOrLastJourneyEnumeration__unspecified;	///< Default element value="unspecified".
    }                                   *__VehicleActivityStructure_MonitoredVehicleJourney_sequence__ 0;
//  END OF SEQUENCE
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DisruptionGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing nature of disruption.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Information about a change of Equipment availabilti at stop or on vehicle that may affect access or use.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Description of any change concerning a MONITORED FACILITY New structure defined in SIRI XSD 1.1 for Facilities Management.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityConditionStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityConditionStructure*> FacilityConditionElement       0;
/// <PRE><BLOCKQUOTE>
///   This sequence is here only for compatibility reasons between Siri 1.0 and Siri 1.1
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A change to the availaibility of EQUIPMENT. Basic structure defined in the first 1.0 SIRI XSd.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityChangeElement.
    ns2__FacilityChangeStructure*        FacilityChangeElement          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__SituationRefStructure*> SituationRef                   0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyProgressGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the real-time progress of a monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether there is real-time information available for journey; if not present, not known.
/// </BLOCKQUOTE></PRE>
/// Element "Monitored" of XSD type xs:boolean.
    bool*                                Monitored                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Condition indicating nature of real-time fault. Present if VEHICLE JOURNEY is normally monitored but temporarily cannot be Monitored for a known reason.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringError" of XSD type xs:NMTOKENS.
    xsd__NMTOKENS*                       MonitoringError                0;	///< Optional element.
//  BEGIN GROUP <xs:group name="ProgressDataQualityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the qua;ity of real-time progress data of a journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the VEHICLE iis in traffic congestion. If not, present, not known.
/// </BLOCKQUOTE></PRE>
/// Element "InCongestion" of XSD type xs:boolean.
    bool*                                InCongestion                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the panic alarm on the VEHICLE is activated. This may lead to indeterminate predictions. If absent, default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "InPanic" of XSD type xs:boolean.
    bool                                 InPanic                        0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether the prediction should be judged as inaccurate.
/// </BLOCKQUOTE></PRE>
/// Element "PredictionInaccurate" of XSD type xs:boolean.
    bool*                                PredictionInaccurate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   System originating real-time data. Can be used to make judgements of relative quality and accuracy compared to other feeds.
/// </BLOCKQUOTE></PRE>
/// Element "DataSource" of XSD type xs:string.
    std::wstring*                        DataSource                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Confidence QUALITY LEVEL of data. Default is 'reliable'.
/// </BLOCKQUOTE></PRE>
/// Element "ConfidenceLevel" of XSD type "http://www.siri.org.uk/siri":QualityIndexEnumeration.
    enum ns2__QualityIndexEnumeration    ConfidenceLevel                0 = ns2__QualityIndexEnumeration__reliable;	///< Default element value="reliable".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ProgressDataGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the real-time progress of a journey.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Current geospatial location of VEHICLE. Measured to front of vehicle.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleLocation" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              VehicleLocation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bearing in compass degrees in which VEHICLE is heading.
/// </BLOCKQUOTE></PRE>
/// Element "Bearing" of XSD type "http://www.siri.org.uk/siri":AbsoluteBearingType.
    ns2__AbsoluteBearingType*            Bearing                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Rate of progress of VEHICLE. Default is 'normal'
/// </BLOCKQUOTE></PRE>
/// Element "ProgressRate" of XSD type "http://www.siri.org.uk/siri":ProgressRateEnumeration.
    enum ns2__ProgressRateEnumeration*   ProgressRate                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Velocity of VEHICLE. EIther actual speed or average speed may be used. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Velocity" of XSD type "http://www.siri.org.uk/siri":VelocityType.
    ns2__VelocityType*                   Velocity                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the engine of the vehicle is on. Default is 'true' (+SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Element "EngineOn" of XSD type xs:boolean.
    bool                                 EngineOn                       0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   How full the VEHICLE is. If omitted, not known.
/// </BLOCKQUOTE></PRE>
/// Element "Occupancy" of XSD type "http://www.siri.org.uk/siri":OccupancyEnumeration.
    enum ns2__OccupancyEnumeration*      Occupancy                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Delay of VEHICLE against schedule, to a precision in seconds. Early times are shown as negative values.
/// </BLOCKQUOTE></PRE>
/// Element "Delay" of XSD type "http://www.siri.org.uk/siri":DurationType.
    ns2__DurationType*                   Delay                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An arbitrary textual status description of the running of this VEHICLE JOURNEY. (Unbounded 0:* since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> ProgressStatus                 0;
/// <PRE><BLOCKQUOTE>
///   An classification of the progress state of running of this VEHICLE JOURNEY. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "VehicleStatus" of XSD type "http://www.siri.org.uk/siri":VehicleStatusEnumeration.
    enum ns2__VehicleStatusEnumeration*  VehicleStatus                  0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="TrainOperationalInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   If a VEHICLE JOURNEY is a coupled journey, i.e. comprises several coupled BLOCKparts, there will be a separate delivery for each BLOCKp art and this element will indicate the vehicles that the journey part uses.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TrainBlockPartStructure* of length 0..unbounded.
    std::vector<ns2__TrainBlockPartStructure*> TrainBlockPart                 0;
//  BEGIN GROUP <xs:group name="OperationalInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="OperationalBlockGroup">
/// <PRE><BLOCKQUOTE>
///   Operational information about the monitored VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   BLOCK that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "BlockRef" of XSD type "http://www.siri.org.uk/siri":BlockRefStructure.
    ns2__BlockRefStructure*              BlockRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   COURSE OF JOURNEY ('Run') that VEHICLE is running.
/// </BLOCKQUOTE></PRE>
/// Element "CourseOfJourneyRef" of XSD type "http://www.siri.org.uk/siri":CourseOfJourneyRefStructure.
    ns2__CourseOfJourneyRefStructure*    CourseOfJourneyRef             0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleJourneyRef.
    ns2__VehicleJourneyRefStructure*     VehicleJourneyRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleRef.
    ns2__VehicleRefStructure*            VehicleRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refercence to other VEHICLE Journeys (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FramedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__FramedVehicleJourneyRefStructure*> AdditionalVehicleJourneyRef    0;
/// <PRE><BLOCKQUOTE>
///   A reference to the DRIVER or Crew currently logged in to operate a monitored VEHICLE. May be omitted if real-time data is not available - i.e. it is timetabled data. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               DriverRef                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The name oo the Driver or Crew +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "DriverName" of XSD type xs:normalizedString.
    xsd__normalizedString*               DriverName                     0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   TRAIN NUMBERs for journey. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers operations:
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers* soap_new__ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers(soap*) allocate and default initialize
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers* soap_new__ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers* soap_new_req__ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers(soap*, ...) allocate, set required members
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers* soap_new_set__ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers(soap*, ...) allocate, set all public members
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers(soap*, _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers*) deserialize from a stream
/// - int soap_write__ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers(soap*, _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers*) serialize to a stream
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers* _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers::soap_dup(soap*) returns deep copy of _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers::soap_del() deep deletes _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers data members, use only after _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleActivityStructure_MonitoredVehicleJourney_TrainNumbers
    {
/// <PRE><BLOCKQUOTE>
///   TRAIN NUMBER assigned to VEHICLE JOURNEY. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TrainNumberRefStructure* of length 1..unbounded.
    std::vector<ns2__TrainNumberRefStructure*> TrainNumberRef                 1;
    }                                   *TrainNumbers                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   JOURNEY PARTs making up JOURNEY +SIRIv2.0 e.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts operations:
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts* soap_new__ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts(soap*) allocate and default initialize
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts* soap_new__ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts* soap_new_req__ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts(soap*, ...) allocate, set required members
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts* soap_new_set__ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts(soap*, ...) allocate, set all public members
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts(soap*, _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts*) deserialize from a stream
/// - int soap_write__ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts(soap*, _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts*) serialize to a stream
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts* _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts::soap_dup(soap*) returns deep copy of _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts::soap_del() deep deletes _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts data members, use only after _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleActivityStructure_MonitoredVehicleJourney_JourneyParts
    {
/// <PRE><BLOCKQUOTE>
///   Information about Parts of JOURNEY +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__JourneyPartInfoStructure* of length 1..unbounded.
    std::vector<ns2__JourneyPartInfoStructure*> JourneyPartInfo                1;
    }                                   *JourneyParts                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="MonitoredCallingPatternGroup">
/// <PRE><BLOCKQUOTE>
///   The service pattern of a monitored VEHICLE JOURNEY. CALLs should be assigned to one of three groups according to the vehicle's current position.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Information on stops called at previously, origin and all intermediate stops up to but not including the current stop, in order or visits. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Element "PreviousCalls" of XSD type "http://www.siri.org.uk/siri":PreviousCallsStructure.
    ns2__PreviousCallsStructure*         PreviousCalls                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Monitored CALL at the current stop.For SIRI-SM this is the stop for which data is requested. For SIRI-VM this is the most recent stop visited by the VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoredCall" of XSD type "http://www.siri.org.uk/siri":MonitoredCallStructure.
    ns2__MonitoredCallStructure*         MonitoredCall                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information on CALLs at the intermediate stops beyond the current stop, up to and including the destination, in order of visits. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// Element "OnwardCalls" of XSD type "http://www.siri.org.uk/siri":OnwardCallsStructure.
    ns2__OnwardCallsStructure*           OnwardCalls                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the above CALL sequence is complete, i.e. represents every CALL of the ROUTE and so can be used to replace a previous CALL sequence. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "IsCompleteStopSequence" of XSD type xs:boolean.
    bool                                 IsCompleteStopSequence         0 = false;	///< Default element value="false".
//  END OF GROUP
//  END OF INHERITED FROM ns2__MonitoredVehicleJourneyStructure
    }                                    MonitoredVehicleJourney        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Text associated with Delivery.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> VehicleActivityNote            0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a Vehicle Monitoring scope
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringRefStructure operations:
/// - ns2__VehicleMonitoringRefStructure* soap_new_ns2__VehicleMonitoringRefStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringRefStructure* soap_new_ns2__VehicleMonitoringRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringRefStructure* soap_new_req_ns2__VehicleMonitoringRefStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringRefStructure* soap_new_set_ns2__VehicleMonitoringRefStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringRefStructure(soap*, ns2__VehicleMonitoringRefStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringRefStructure(soap*, ns2__VehicleMonitoringRefStructure*) serialize to a stream
/// - ns2__VehicleMonitoringRefStructure* ns2__VehicleMonitoringRefStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringRefStructure::soap_del() deep deletes ns2__VehicleMonitoringRefStructure data members, use only after ns2__VehicleMonitoringRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":VehicleMonitoringCodeType" simpleContent.
    ns2__VehicleMonitoringCodeType       __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":VehicleActivityCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractReferencingItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for cancellation of an earlier Vehicle Activity.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleActivityCancellationStructure operations:
/// - ns2__VehicleActivityCancellationStructure* soap_new_ns2__VehicleActivityCancellationStructure(soap*) allocate and default initialize
/// - ns2__VehicleActivityCancellationStructure* soap_new_ns2__VehicleActivityCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleActivityCancellationStructure* soap_new_req_ns2__VehicleActivityCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleActivityCancellationStructure* soap_new_set_ns2__VehicleActivityCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleActivityCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleActivityCancellationStructure(soap*, ns2__VehicleActivityCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleActivityCancellationStructure(soap*, ns2__VehicleActivityCancellationStructure*) serialize to a stream
/// - ns2__VehicleActivityCancellationStructure* ns2__VehicleActivityCancellationStructure::soap_dup(soap*) returns deep copy of ns2__VehicleActivityCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleActivityCancellationStructure::soap_del() deep deletes ns2__VehicleActivityCancellationStructure data members, use only after ns2__VehicleActivityCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleActivityCancellationStructure : public ns2__AbstractReferencingItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractReferencingItemStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractReferencingItemStructure */
//  BEGIN GROUP <xs:group name="VehicleActivityCancellationIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Identifiers of Vehicle Activity.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleMonitoringRef" of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringRefStructure.
    ns2__VehicleMonitoringRefStructure*  VehicleMonitoringRef           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to VEHICLE JOURNEY that VEHICLE is making.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  VehicleJourneyRef              0;	///< Optional element.
//  BEGIN GROUP <xs:group name="LineIdentityGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements for identifying a LINE and DIRECTION.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__VehicleActivityCancellationStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE DIRECTION DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
    }                                   *__VehicleActivityCancellationStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reason for cancellation. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Reason                         0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringCapabilitiesResponseStructure operations:
/// - ns2__VehicleMonitoringCapabilitiesResponseStructure* soap_new_ns2__VehicleMonitoringCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringCapabilitiesResponseStructure* soap_new_ns2__VehicleMonitoringCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringCapabilitiesResponseStructure* soap_new_req_ns2__VehicleMonitoringCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringCapabilitiesResponseStructure* soap_new_set_ns2__VehicleMonitoringCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringCapabilitiesResponseStructure(soap*, ns2__VehicleMonitoringCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringCapabilitiesResponseStructure(soap*, ns2__VehicleMonitoringCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__VehicleMonitoringCapabilitiesResponseStructure* ns2__VehicleMonitoringCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringCapabilitiesResponseStructure::soap_del() deep deletes ns2__VehicleMonitoringCapabilitiesResponseStructure data members, use only after ns2__VehicleMonitoringCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMonitoringServiceCapabilities.
    ns2__VehicleMonitoringServiceCapabilitiesStructure*  VehicleMonitoringServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMonitoringPermissions.
    _ns2__VehicleMonitoringPermissions*  VehicleMonitoringPermissions   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ConnectionTimetableDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Connection Protection.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionTimetableDeliveryStructure operations:
/// - ns2__ConnectionTimetableDeliveryStructure* soap_new_ns2__ConnectionTimetableDeliveryStructure(soap*) allocate and default initialize
/// - ns2__ConnectionTimetableDeliveryStructure* soap_new_ns2__ConnectionTimetableDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionTimetableDeliveryStructure* soap_new_req_ns2__ConnectionTimetableDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionTimetableDeliveryStructure* soap_new_set_ns2__ConnectionTimetableDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionTimetableDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionTimetableDeliveryStructure(soap*, ns2__ConnectionTimetableDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionTimetableDeliveryStructure(soap*, ns2__ConnectionTimetableDeliveryStructure*) serialize to a stream
/// - ns2__ConnectionTimetableDeliveryStructure* ns2__ConnectionTimetableDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionTimetableDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionTimetableDeliveryStructure::soap_del() deep deletes ns2__ConnectionTimetableDeliveryStructure data members, use only after ns2__ConnectionTimetableDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionTimetableDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="ConnectionTimetablePayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Feeder delivery payload content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A feeder arrival at the arrival SCHEDUELD STOP POINT of the CONNECTION link .
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TimetabledFeederArrivalStructure* element refs of length 0..unbounded.
    std::vector<ns2__TimetabledFeederArrivalStructure*> TimetabledFeederArrival        0;
/// <PRE><BLOCKQUOTE>
///   Cancellation of a previously issued Feeder Arrival.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__TimetabledFeederArrivalCancellationStructure* element refs of length 0..unbounded.
    std::vector<ns2__TimetabledFeederArrivalCancellationStructure*> TimetabledFeederArrivalCancellation 0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":AbstractFeederItemStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractIdentifiedItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for an SERVICE JOURNEY INTERCHANGE feeder Activity.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractFeederItemStructure operations:
/// - ns2__AbstractFeederItemStructure* soap_new_ns2__AbstractFeederItemStructure(soap*) allocate and default initialize
/// - ns2__AbstractFeederItemStructure* soap_new_ns2__AbstractFeederItemStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractFeederItemStructure* soap_new_req_ns2__AbstractFeederItemStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractFeederItemStructure* soap_new_set_ns2__AbstractFeederItemStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractFeederItemStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractFeederItemStructure(soap*, ns2__AbstractFeederItemStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractFeederItemStructure(soap*, ns2__AbstractFeederItemStructure*) serialize to a stream
/// - ns2__AbstractFeederItemStructure* ns2__AbstractFeederItemStructure::soap_dup(soap*) returns deep copy of ns2__AbstractFeederItemStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractFeederItemStructure::soap_del() deep deletes ns2__AbstractFeederItemStructure data members, use only after ns2__AbstractFeederItemStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractFeederItemStructure : public ns2__AbstractIdentifiedItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
/// <PRE><BLOCKQUOTE>
///   Time until when data is valid. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntilTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntilTime                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="InterchangeFeederIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying CALL at CONNECTION link of SERVICE JORUNEY INTERCHANGE of Feeder Journey .
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned. i.e. associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":TimetabledFeederArrivalCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractReferencingItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Timetabled Deletion of a feeder connection.
/// </BLOCKQUOTE></PRE>
/// class ns2__TimetabledFeederArrivalCancellationStructure operations:
/// - ns2__TimetabledFeederArrivalCancellationStructure* soap_new_ns2__TimetabledFeederArrivalCancellationStructure(soap*) allocate and default initialize
/// - ns2__TimetabledFeederArrivalCancellationStructure* soap_new_ns2__TimetabledFeederArrivalCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TimetabledFeederArrivalCancellationStructure* soap_new_req_ns2__TimetabledFeederArrivalCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__TimetabledFeederArrivalCancellationStructure* soap_new_set_ns2__TimetabledFeederArrivalCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__TimetabledFeederArrivalCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TimetabledFeederArrivalCancellationStructure(soap*, ns2__TimetabledFeederArrivalCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__TimetabledFeederArrivalCancellationStructure(soap*, ns2__TimetabledFeederArrivalCancellationStructure*) serialize to a stream
/// - ns2__TimetabledFeederArrivalCancellationStructure* ns2__TimetabledFeederArrivalCancellationStructure::soap_dup(soap*) returns deep copy of ns2__TimetabledFeederArrivalCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TimetabledFeederArrivalCancellationStructure::soap_del() deep deletes ns2__TimetabledFeederArrivalCancellationStructure data members, use only after ns2__TimetabledFeederArrivalCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TimetabledFeederArrivalCancellationStructure : public ns2__AbstractReferencingItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractReferencingItemStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractReferencingItemStructure */
//  BEGIN GROUP <xs:group name="InterchangeFeederIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying CALL at CONNECTION link of SERVICE JORUNEY INTERCHANGE of Feeder Journey .
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned. i.e. associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  VehicleJourneyRef              1;	///< Required element.
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__TimetabledFeederArrivalCancellationStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
    }                                   *__TimetabledFeederArrivalCancellationStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reason for deletion. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Reason                         0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionTimetableCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Connection TimetableService.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionTimetableCapabilitiesResponseStructure operations:
/// - ns2__ConnectionTimetableCapabilitiesResponseStructure* soap_new_ns2__ConnectionTimetableCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__ConnectionTimetableCapabilitiesResponseStructure* soap_new_ns2__ConnectionTimetableCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionTimetableCapabilitiesResponseStructure* soap_new_req_ns2__ConnectionTimetableCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionTimetableCapabilitiesResponseStructure* soap_new_set_ns2__ConnectionTimetableCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionTimetableCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionTimetableCapabilitiesResponseStructure(soap*, ns2__ConnectionTimetableCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionTimetableCapabilitiesResponseStructure(soap*, ns2__ConnectionTimetableCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__ConnectionTimetableCapabilitiesResponseStructure* ns2__ConnectionTimetableCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionTimetableCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionTimetableCapabilitiesResponseStructure::soap_del() deep deletes ns2__ConnectionTimetableCapabilitiesResponseStructure data members, use only after ns2__ConnectionTimetableCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionTimetableCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionTimetableServiceCapabilities.
    ns2__ConnectionTimetableServiceCapabilitiesStructure*  ConnectionTimetableServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service, Only returned if requested.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions operations:
/// - _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions* soap_new__ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions(soap*) allocate and default initialize
/// - _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions* soap_new__ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions(soap*, int num) allocate array and default initialize values
/// - _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions* soap_new_req__ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions(soap*, ...) allocate, set required members
/// - _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions* soap_new_set__ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions(soap*, ...) allocate, set all public members
/// - _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions(soap*, _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions*) deserialize from a stream
/// - int soap_write__ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions(soap*, _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions*) serialize to a stream
/// - _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions* _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions::soap_dup(soap*) returns deep copy of _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions::soap_del() deep deletes _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions data members, use only after _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ConnectionTimetableCapabilitiesResponseStructure_ConnectionTimetablePermissions
    {
/// INHERITED FROM ns2__PermissionsStructure:
/// <PRE><BLOCKQUOTE>
///   Version of permission set.
/// </BLOCKQUOTE></PRE>
/// Element "PermissionVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            PermissionVersionRef           0;	///< Optional element.
//  END OF INHERITED FROM ns2__PermissionsStructure
/// <PRE><BLOCKQUOTE>
///   Permission for a single participant or all participants to use an aspect of the service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionServicePermissionStructure* of length 0..unbounded.
    std::vector<ns2__ConnectionServicePermissionStructure*> ConnectionTimetablePermission  0;
    }                                   *ConnectionTimetablePermissions 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringFeederDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Connection Monitoring.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionMonitoringFeederDeliveryStructure operations:
/// - ns2__ConnectionMonitoringFeederDeliveryStructure* soap_new_ns2__ConnectionMonitoringFeederDeliveryStructure(soap*) allocate and default initialize
/// - ns2__ConnectionMonitoringFeederDeliveryStructure* soap_new_ns2__ConnectionMonitoringFeederDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionMonitoringFeederDeliveryStructure* soap_new_req_ns2__ConnectionMonitoringFeederDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionMonitoringFeederDeliveryStructure* soap_new_set_ns2__ConnectionMonitoringFeederDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionMonitoringFeederDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionMonitoringFeederDeliveryStructure(soap*, ns2__ConnectionMonitoringFeederDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionMonitoringFeederDeliveryStructure(soap*, ns2__ConnectionMonitoringFeederDeliveryStructure*) serialize to a stream
/// - ns2__ConnectionMonitoringFeederDeliveryStructure* ns2__ConnectionMonitoringFeederDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionMonitoringFeederDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionMonitoringFeederDeliveryStructure::soap_del() deep deletes ns2__ConnectionMonitoringFeederDeliveryStructure data members, use only after ns2__ConnectionMonitoringFeederDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionMonitoringFeederDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="ConnectionMonitoringFeederPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Feeder delivery payload content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A feeder arrival at the connection point.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__MonitoredFeederArrivalStructure* element refs of length 0..unbounded.
    std::vector<ns2__MonitoredFeederArrivalStructure*> MonitoredFeederArrival         0;
/// <PRE><BLOCKQUOTE>
///   Cancellation of a feeder arrival at a connection point.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__MonitoredFeederArrivalCancellationStructure* element refs of length 0..unbounded.
    std::vector<ns2__MonitoredFeederArrivalCancellationStructure*> MonitoredFeederArrivalCancellation 0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringDistributorDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Distributor Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionMonitoringDistributorDeliveryStructure operations:
/// - ns2__ConnectionMonitoringDistributorDeliveryStructure* soap_new_ns2__ConnectionMonitoringDistributorDeliveryStructure(soap*) allocate and default initialize
/// - ns2__ConnectionMonitoringDistributorDeliveryStructure* soap_new_ns2__ConnectionMonitoringDistributorDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionMonitoringDistributorDeliveryStructure* soap_new_req_ns2__ConnectionMonitoringDistributorDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionMonitoringDistributorDeliveryStructure* soap_new_set_ns2__ConnectionMonitoringDistributorDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionMonitoringDistributorDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionMonitoringDistributorDeliveryStructure(soap*, ns2__ConnectionMonitoringDistributorDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionMonitoringDistributorDeliveryStructure(soap*, ns2__ConnectionMonitoringDistributorDeliveryStructure*) serialize to a stream
/// - ns2__ConnectionMonitoringDistributorDeliveryStructure* ns2__ConnectionMonitoringDistributorDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionMonitoringDistributorDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionMonitoringDistributorDeliveryStructure::soap_del() deep deletes ns2__ConnectionMonitoringDistributorDeliveryStructure data members, use only after ns2__ConnectionMonitoringDistributorDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionMonitoringDistributorDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="ConnectionMonitoringDistributorPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Distributor (fetcher) payload content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An action to delay the Distributor (fetcher) until a specified time.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__WaitProlongedDepartureStructure* of length 0..unbounded.
    std::vector<ns2__WaitProlongedDepartureStructure*> WaitProlongedDeparture         0;
/// <PRE><BLOCKQUOTE>
///   A Change to a stop position.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StoppingPositionChangedDepartureStructure* of length 0..unbounded.
    std::vector<ns2__StoppingPositionChangedDepartureStructure*> StoppingPositionChangedDeparture 0;
/// <PRE><BLOCKQUOTE>
///   Deletion of previous connection.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DistributorDepartureCancellationStructure* of length 0..unbounded.
    std::vector<ns2__DistributorDepartureCancellationStructure*> DistributorDepartureCancellation 0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":DistributorDepartureCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDistributorItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Cancellation of a Distributor VEHICLE JOURNEY from a connection.
/// </BLOCKQUOTE></PRE>
/// class ns2__DistributorDepartureCancellationStructure operations:
/// - ns2__DistributorDepartureCancellationStructure* soap_new_ns2__DistributorDepartureCancellationStructure(soap*) allocate and default initialize
/// - ns2__DistributorDepartureCancellationStructure* soap_new_ns2__DistributorDepartureCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DistributorDepartureCancellationStructure* soap_new_req_ns2__DistributorDepartureCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__DistributorDepartureCancellationStructure* soap_new_set_ns2__DistributorDepartureCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__DistributorDepartureCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DistributorDepartureCancellationStructure(soap*, ns2__DistributorDepartureCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__DistributorDepartureCancellationStructure(soap*, ns2__DistributorDepartureCancellationStructure*) serialize to a stream
/// - ns2__DistributorDepartureCancellationStructure* ns2__DistributorDepartureCancellationStructure::soap_dup(soap*) returns deep copy of ns2__DistributorDepartureCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DistributorDepartureCancellationStructure::soap_del() deep deletes ns2__DistributorDepartureCancellationStructure data members, use only after ns2__DistributorDepartureCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DistributorDepartureCancellationStructure : public ns2__AbstractDistributorItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractDistributorItemStructure:
//  BEGIN GROUP <xs:group name="InterchangeDistributorIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Identifiers of Interchange Distributor Stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned and at which SERVICE JOURNEY INTERCHANGE takes place. A reference associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT within CONNECTION link from which distributor leaves.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "StopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Order of visit to a stop within JOURNEY PATTERN of distributor VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                DistributorVisitNumber         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then Order can be used to associate the Order as well if useful for translation.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorOrder" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                DistributorOrder               0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Information about the connecting Distributor (fetcher) VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorJourney" of XSD type "http://www.siri.org.uk/siri":InterchangeJourneyStructure.
    ns2__InterchangeJourneyStructure*    DistributorJourney             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY or journeys for which the Distributor (fetcher) will wait .
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FramedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__FramedVehicleJourneyRefStructure*> FeederVehicleJourneyRef        0;
    END OF INHERITED FROM ns2__AbstractDistributorItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reason for failure of connection. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Reason                         0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":WaitProlongedDepartureStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDistributorItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Distributor prolonged wait action.
/// </BLOCKQUOTE></PRE>
/// class ns2__WaitProlongedDepartureStructure operations:
/// - ns2__WaitProlongedDepartureStructure* soap_new_ns2__WaitProlongedDepartureStructure(soap*) allocate and default initialize
/// - ns2__WaitProlongedDepartureStructure* soap_new_ns2__WaitProlongedDepartureStructure(soap*, int num) allocate array and default initialize values
/// - ns2__WaitProlongedDepartureStructure* soap_new_req_ns2__WaitProlongedDepartureStructure(soap*, ...) allocate, set required members
/// - ns2__WaitProlongedDepartureStructure* soap_new_set_ns2__WaitProlongedDepartureStructure(soap*, ...) allocate, set all public members
/// - ns2__WaitProlongedDepartureStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__WaitProlongedDepartureStructure(soap*, ns2__WaitProlongedDepartureStructure*) deserialize from a stream
/// - int soap_write_ns2__WaitProlongedDepartureStructure(soap*, ns2__WaitProlongedDepartureStructure*) serialize to a stream
/// - ns2__WaitProlongedDepartureStructure* ns2__WaitProlongedDepartureStructure::soap_dup(soap*) returns deep copy of ns2__WaitProlongedDepartureStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__WaitProlongedDepartureStructure::soap_del() deep deletes ns2__WaitProlongedDepartureStructure data members, use only after ns2__WaitProlongedDepartureStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__WaitProlongedDepartureStructure : public ns2__AbstractDistributorItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractDistributorItemStructure:
//  BEGIN GROUP <xs:group name="InterchangeDistributorIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Identifiers of Interchange Distributor Stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned and at which SERVICE JOURNEY INTERCHANGE takes place. A reference associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT within CONNECTION link from which distributor leaves.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "StopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Order of visit to a stop within JOURNEY PATTERN of distributor VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                DistributorVisitNumber         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then Order can be used to associate the Order as well if useful for translation.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorOrder" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                DistributorOrder               0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Information about the connecting Distributor (fetcher) VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorJourney" of XSD type "http://www.siri.org.uk/siri":InterchangeJourneyStructure.
    ns2__InterchangeJourneyStructure*    DistributorJourney             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY or journeys for which the Distributor (fetcher) will wait .
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FramedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__FramedVehicleJourneyRefStructure*> FeederVehicleJourneyRef        0;
    END OF INHERITED FROM ns2__AbstractDistributorItemStructure */
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__WaitProlongedDepartureStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Estimated departure time from the connection.
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedDepartureTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ExpectedDepartureTime          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
    }                                   *__WaitProlongedDepartureStructure_sequence 0;
//  END OF SEQUENCE
};

/// @brief "http://www.siri.org.uk/siri":StoppingPositionChangedDepartureStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDistributorItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Change to a Distributor stop position.
/// </BLOCKQUOTE></PRE>
/// class ns2__StoppingPositionChangedDepartureStructure operations:
/// - ns2__StoppingPositionChangedDepartureStructure* soap_new_ns2__StoppingPositionChangedDepartureStructure(soap*) allocate and default initialize
/// - ns2__StoppingPositionChangedDepartureStructure* soap_new_ns2__StoppingPositionChangedDepartureStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StoppingPositionChangedDepartureStructure* soap_new_req_ns2__StoppingPositionChangedDepartureStructure(soap*, ...) allocate, set required members
/// - ns2__StoppingPositionChangedDepartureStructure* soap_new_set_ns2__StoppingPositionChangedDepartureStructure(soap*, ...) allocate, set all public members
/// - ns2__StoppingPositionChangedDepartureStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StoppingPositionChangedDepartureStructure(soap*, ns2__StoppingPositionChangedDepartureStructure*) deserialize from a stream
/// - int soap_write_ns2__StoppingPositionChangedDepartureStructure(soap*, ns2__StoppingPositionChangedDepartureStructure*) serialize to a stream
/// - ns2__StoppingPositionChangedDepartureStructure* ns2__StoppingPositionChangedDepartureStructure::soap_dup(soap*) returns deep copy of ns2__StoppingPositionChangedDepartureStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StoppingPositionChangedDepartureStructure::soap_del() deep deletes ns2__StoppingPositionChangedDepartureStructure data members, use only after ns2__StoppingPositionChangedDepartureStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StoppingPositionChangedDepartureStructure : public ns2__AbstractDistributorItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractDistributorItemStructure:
//  BEGIN GROUP <xs:group name="InterchangeDistributorIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Identifiers of Interchange Distributor Stop.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned and at which SERVICE JOURNEY INTERCHANGE takes place. A reference associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT within CONNECTION link from which distributor leaves.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element "StopPointRef" of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Order of visit to a stop within JOURNEY PATTERN of distributor VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorVisitNumber" of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
    ns2__VisitNumberType*                DistributorVisitNumber         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then Order can be used to associate the Order as well if useful for translation.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorOrder" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                DistributorOrder               0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Information about the connecting Distributor (fetcher) VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "DistributorJourney" of XSD type "http://www.siri.org.uk/siri":InterchangeJourneyStructure.
    ns2__InterchangeJourneyStructure*    DistributorJourney             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a feeder VEHICLE JOURNEY or journeys for which the Distributor (fetcher) will wait .
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FramedVehicleJourneyRefStructure* of length 0..unbounded.
    std::vector<ns2__FramedVehicleJourneyRefStructure*> FeederVehicleJourneyRef        0;
    END OF INHERITED FROM ns2__AbstractDistributorItemStructure */
/// <PRE><BLOCKQUOTE>
///   Description of the revised stopping position of the Distributor (fetcher) in the connection zone. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguagePlaceNameStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguagePlaceNameStructure*> ChangeNote                     0;
/// <PRE><BLOCKQUOTE>
///   New location from which Distributor will leave.
/// </BLOCKQUOTE></PRE>
/// Element "NewLocation" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              NewLocation                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Connection Monitoring Capability.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionMonitoringCapabilitiesResponseStructure operations:
/// - ns2__ConnectionMonitoringCapabilitiesResponseStructure* soap_new_ns2__ConnectionMonitoringCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__ConnectionMonitoringCapabilitiesResponseStructure* soap_new_ns2__ConnectionMonitoringCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionMonitoringCapabilitiesResponseStructure* soap_new_req_ns2__ConnectionMonitoringCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionMonitoringCapabilitiesResponseStructure* soap_new_set_ns2__ConnectionMonitoringCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionMonitoringCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionMonitoringCapabilitiesResponseStructure(soap*, ns2__ConnectionMonitoringCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionMonitoringCapabilitiesResponseStructure(soap*, ns2__ConnectionMonitoringCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__ConnectionMonitoringCapabilitiesResponseStructure* ns2__ConnectionMonitoringCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionMonitoringCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionMonitoringCapabilitiesResponseStructure::soap_del() deep deletes ns2__ConnectionMonitoringCapabilitiesResponseStructure data members, use only after ns2__ConnectionMonitoringCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionMonitoringCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionMonitoringServiceCapabilities.
    ns2__ConnectionMonitoringServiceCapabilitiesStructure*  ConnectionMonitoringServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participants permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionMonitoringPermissions.
    _ns2__ConnectionMonitoringPermissions*  ConnectionMonitoringPermissions 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":GeneralMessageDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Delivery for General Message.
/// </BLOCKQUOTE></PRE>
/// class ns2__GeneralMessageDeliveryStructure operations:
/// - ns2__GeneralMessageDeliveryStructure* soap_new_ns2__GeneralMessageDeliveryStructure(soap*) allocate and default initialize
/// - ns2__GeneralMessageDeliveryStructure* soap_new_ns2__GeneralMessageDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GeneralMessageDeliveryStructure* soap_new_req_ns2__GeneralMessageDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__GeneralMessageDeliveryStructure* soap_new_set_ns2__GeneralMessageDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__GeneralMessageDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GeneralMessageDeliveryStructure(soap*, ns2__GeneralMessageDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__GeneralMessageDeliveryStructure(soap*, ns2__GeneralMessageDeliveryStructure*) serialize to a stream
/// - ns2__GeneralMessageDeliveryStructure* ns2__GeneralMessageDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__GeneralMessageDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GeneralMessageDeliveryStructure::soap_del() deep deletes ns2__GeneralMessageDeliveryStructure data members, use only after ns2__GeneralMessageDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GeneralMessageDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="GeneralMessagePayloadGroup">
/// <PRE><BLOCKQUOTE>
///   General Message payload content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An informative message.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__InfoMessageStructure* element refs of length 0..unbounded.
    std::vector<ns2__InfoMessageStructure*> GeneralMessage                 0;
/// <PRE><BLOCKQUOTE>
///   A revocation of a previous message.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__InfoMessageCancellationStructure* element refs of length 0..unbounded.
    std::vector<ns2__InfoMessageCancellationStructure*> GeneralMessageCancellation     0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":InfoMessageStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractIdentifiedItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for an Info Message. @formatRef.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoMessageStructure operations:
/// - ns2__InfoMessageStructure* soap_new_ns2__InfoMessageStructure(soap*) allocate and default initialize
/// - ns2__InfoMessageStructure* soap_new_ns2__InfoMessageStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoMessageStructure* soap_new_req_ns2__InfoMessageStructure(soap*, ...) allocate, set required members
/// - ns2__InfoMessageStructure* soap_new_set_ns2__InfoMessageStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoMessageStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoMessageStructure(soap*, ns2__InfoMessageStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoMessageStructure(soap*, ns2__InfoMessageStructure*) serialize to a stream
/// - ns2__InfoMessageStructure* ns2__InfoMessageStructure::soap_dup(soap*) returns deep copy of ns2__InfoMessageStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoMessageStructure::soap_del() deep deletes ns2__InfoMessageStructure data members, use only after ns2__InfoMessageStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoMessageStructure : public ns2__AbstractIdentifiedItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
//  BEGIN GROUP <xs:group name="InfoMessageGroup">
/// <PRE><BLOCKQUOTE>
///   Extra information provided on general message notifcation that can be used to filter messages.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of message.
/// </BLOCKQUOTE></PRE>
/// Element "InfoMessageIdentifier" of XSD type "http://www.siri.org.uk/siri":InfoMessageRefStructure.
    ns2__InfoMessageRefStructure*        InfoMessageIdentifier          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional version number of update to previosu message.
/// </BLOCKQUOTE></PRE>
/// Element "InfoMessageVersion" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                InfoMessageVersion             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Info Channel to which message belongs.
/// </BLOCKQUOTE></PRE>
/// Element "InfoChannelRef" of XSD type "http://www.siri.org.uk/siri":InfoChannelRefStructure.
    ns2__InfoChannelRefStructure*        InfoChannelRef                 0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Time until when message is valid. If absent unopen ended.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntilTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntilTime                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationRef.
    ns2__SituationRefStructure*          SituationRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Message Content. Format is specified by Format Ref.
/// </BLOCKQUOTE></PRE>
/// Element "Content" of XSD type xs:anyType.
    xsd__anyType*                        Content                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a format of the Content. If absent, free text.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatRef" of XSD type xs:string.
   @std::wstring*                        formatRef                      0;	///< Optional attribute.
};

/// @brief "http://www.siri.org.uk/siri":InfoMessageCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractReferencingItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Revocation of a previous message.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoMessageCancellationStructure operations:
/// - ns2__InfoMessageCancellationStructure* soap_new_ns2__InfoMessageCancellationStructure(soap*) allocate and default initialize
/// - ns2__InfoMessageCancellationStructure* soap_new_ns2__InfoMessageCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoMessageCancellationStructure* soap_new_req_ns2__InfoMessageCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__InfoMessageCancellationStructure* soap_new_set_ns2__InfoMessageCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoMessageCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoMessageCancellationStructure(soap*, ns2__InfoMessageCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoMessageCancellationStructure(soap*, ns2__InfoMessageCancellationStructure*) serialize to a stream
/// - ns2__InfoMessageCancellationStructure* ns2__InfoMessageCancellationStructure::soap_dup(soap*) returns deep copy of ns2__InfoMessageCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoMessageCancellationStructure::soap_del() deep deletes ns2__InfoMessageCancellationStructure data members, use only after ns2__InfoMessageCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoMessageCancellationStructure : public ns2__AbstractReferencingItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractReferencingItemStructure:
/// <PRE><BLOCKQUOTE>
///   Reference to an Activity Element of a delivery.
/// </BLOCKQUOTE></PRE>
/// Element "ItemRef" of XSD type "http://www.siri.org.uk/siri":ItemRefStructure.
    ns2__ItemRefStructure*               ItemRef                        0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractReferencingItemStructure */
/// <PRE><BLOCKQUOTE>
///   Identifier of message. Unique within service and Producer participant.
/// </BLOCKQUOTE></PRE>
/// Element "InfoMessageIdentifier" of XSD type "http://www.siri.org.uk/siri":InfoMessageRefStructure.
    ns2__InfoMessageRefStructure*        InfoMessageIdentifier          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Info Channel to which message belongs.
/// </BLOCKQUOTE></PRE>
/// Element "InfoChannelRef" of XSD type "http://www.siri.org.uk/siri":InfoChannelRefStructure.
    ns2__InfoChannelRefStructure*        InfoChannelRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":InfoMessageRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to an Info Message.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoMessageRefStructure operations:
/// - ns2__InfoMessageRefStructure* soap_new_ns2__InfoMessageRefStructure(soap*) allocate and default initialize
/// - ns2__InfoMessageRefStructure* soap_new_ns2__InfoMessageRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoMessageRefStructure* soap_new_req_ns2__InfoMessageRefStructure(soap*, ...) allocate, set required members
/// - ns2__InfoMessageRefStructure* soap_new_set_ns2__InfoMessageRefStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoMessageRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoMessageRefStructure(soap*, ns2__InfoMessageRefStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoMessageRefStructure(soap*, ns2__InfoMessageRefStructure*) serialize to a stream
/// - ns2__InfoMessageRefStructure* ns2__InfoMessageRefStructure::soap_dup(soap*) returns deep copy of ns2__InfoMessageRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoMessageRefStructure::soap_del() deep deletes ns2__InfoMessageRefStructure data members, use only after ns2__InfoMessageRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoMessageRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":InfoMessageIdentifierType" simpleContent.
    ns2__InfoMessageIdentifierType       __item                        ;
};

/// @brief "http://www.siri.org.uk/siri":GeneralMessageCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for General MessageService.
/// </BLOCKQUOTE></PRE>
/// class ns2__GeneralMessageCapabilitiesResponseStructure operations:
/// - ns2__GeneralMessageCapabilitiesResponseStructure* soap_new_ns2__GeneralMessageCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__GeneralMessageCapabilitiesResponseStructure* soap_new_ns2__GeneralMessageCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GeneralMessageCapabilitiesResponseStructure* soap_new_req_ns2__GeneralMessageCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__GeneralMessageCapabilitiesResponseStructure* soap_new_set_ns2__GeneralMessageCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__GeneralMessageCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GeneralMessageCapabilitiesResponseStructure(soap*, ns2__GeneralMessageCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__GeneralMessageCapabilitiesResponseStructure(soap*, ns2__GeneralMessageCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__GeneralMessageCapabilitiesResponseStructure* ns2__GeneralMessageCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__GeneralMessageCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GeneralMessageCapabilitiesResponseStructure::soap_del() deep deletes ns2__GeneralMessageCapabilitiesResponseStructure data members, use only after ns2__GeneralMessageCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GeneralMessageCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of General Message Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":GeneralMessageServiceCapabilities.
    ns2__GeneralMessageServiceCapabilitiesStructure*  GeneralMessageServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":GeneralMessagePermissions.
    _ns2__GeneralMessagePermissions*     GeneralMessagePermissions      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":FacilityMonitoringDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Vehicle Monitoring Service. Provides information about one or more vehicles; each has its own VEHICLE activity element.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityMonitoringDeliveryStructure operations:
/// - ns2__FacilityMonitoringDeliveryStructure* soap_new_ns2__FacilityMonitoringDeliveryStructure(soap*) allocate and default initialize
/// - ns2__FacilityMonitoringDeliveryStructure* soap_new_ns2__FacilityMonitoringDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityMonitoringDeliveryStructure* soap_new_req_ns2__FacilityMonitoringDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityMonitoringDeliveryStructure* soap_new_set_ns2__FacilityMonitoringDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityMonitoringDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityMonitoringDeliveryStructure(soap*, ns2__FacilityMonitoringDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityMonitoringDeliveryStructure(soap*, ns2__FacilityMonitoringDeliveryStructure*) serialize to a stream
/// - ns2__FacilityMonitoringDeliveryStructure* ns2__FacilityMonitoringDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__FacilityMonitoringDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityMonitoringDeliveryStructure::soap_del() deep deletes ns2__FacilityMonitoringDeliveryStructure data members, use only after ns2__FacilityMonitoringDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityMonitoringDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="FacilityMonitoringPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Payload part of Vehicle Monitoring delivery.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Condition of a Facility that is being monitored.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityConditionStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityConditionStructure*> FacilityCondition              0;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":FacilityMonitoringCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityMonitoringCapabilitiesResponseStructure operations:
/// - ns2__FacilityMonitoringCapabilitiesResponseStructure* soap_new_ns2__FacilityMonitoringCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__FacilityMonitoringCapabilitiesResponseStructure* soap_new_ns2__FacilityMonitoringCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityMonitoringCapabilitiesResponseStructure* soap_new_req_ns2__FacilityMonitoringCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityMonitoringCapabilitiesResponseStructure* soap_new_set_ns2__FacilityMonitoringCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityMonitoringCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityMonitoringCapabilitiesResponseStructure(soap*, ns2__FacilityMonitoringCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityMonitoringCapabilitiesResponseStructure(soap*, ns2__FacilityMonitoringCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__FacilityMonitoringCapabilitiesResponseStructure* ns2__FacilityMonitoringCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__FacilityMonitoringCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityMonitoringCapabilitiesResponseStructure::soap_del() deep deletes ns2__FacilityMonitoringCapabilitiesResponseStructure data members, use only after ns2__FacilityMonitoringCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityMonitoringCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityMonitoringServiceCapabilities.
    ns2__FacilityMonitoringServiceCapabilitiesStructure*  FacilityMonitoringServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FacilityMonitoringPermissions.
    _ns2__FacilityMonitoringPermissions*  FacilityMonitoringPermissions  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":SituationExchangeDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Situation Exchange Service. Provides information about one or more vehicles; each has its own VEHICLE activity element.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationExchangeDeliveryStructure operations:
/// - ns2__SituationExchangeDeliveryStructure* soap_new_ns2__SituationExchangeDeliveryStructure(soap*) allocate and default initialize
/// - ns2__SituationExchangeDeliveryStructure* soap_new_ns2__SituationExchangeDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationExchangeDeliveryStructure* soap_new_req_ns2__SituationExchangeDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__SituationExchangeDeliveryStructure* soap_new_set_ns2__SituationExchangeDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationExchangeDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationExchangeDeliveryStructure(soap*, ns2__SituationExchangeDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationExchangeDeliveryStructure(soap*, ns2__SituationExchangeDeliveryStructure*) serialize to a stream
/// - ns2__SituationExchangeDeliveryStructure* ns2__SituationExchangeDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__SituationExchangeDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationExchangeDeliveryStructure::soap_del() deep deletes ns2__SituationExchangeDeliveryStructure data members, use only after ns2__SituationExchangeDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationExchangeDeliveryStructure : public ns2__AbstractServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceDeliveryStructure:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef             ;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SubscriptionIdentifierResourcePropertyGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to subscription May be used to reference subscription in subsequent interactions.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscriber - reference to a Participant.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                 ;
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionFilterRefStructure.
    ns2__SubscriptionFilterRefStructure*  SubscriptionFilterRef         ;
/// <PRE><BLOCKQUOTE>
///   Reference to a service subscription: unique within Service and Subscriber.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionRef" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionRef                nullptr;	///< Required nillable (xsi:nil when NULL) element.
//  END OF SEQUENCE
//  END OF GROUP
//  END OF CHOICE
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DeliveryDefaultGroup">
/// <PRE><BLOCKQUOTE>
///   Common defaults.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default language for text elements.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultLanguage" of XSD type xs:language.
    xsd__language*                       DefaultLanguage                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceDeliveryStructure */
//  BEGIN GROUP <xs:group name="SituationExchangePayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Payload part of Situation Exchange Service delivery.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Default context for common properties of SITUATIONs, Values specified apply to all SITUATIONs unless overridden. Can be used optionally to reduce file bulk.
/// </BLOCKQUOTE></PRE>
/// Element "PtSituationContext" of XSD type "http://www.siri.org.uk/siri":ContextStructure.
    ns2__ContextStructure*               PtSituationContext             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   SITUATIONs in Delivery.
/// </BLOCKQUOTE></PRE>
/// class _ns2__SituationExchangeDeliveryStructure_Situations operations:
/// - _ns2__SituationExchangeDeliveryStructure_Situations* soap_new__ns2__SituationExchangeDeliveryStructure_Situations(soap*) allocate and default initialize
/// - _ns2__SituationExchangeDeliveryStructure_Situations* soap_new__ns2__SituationExchangeDeliveryStructure_Situations(soap*, int num) allocate array and default initialize values
/// - _ns2__SituationExchangeDeliveryStructure_Situations* soap_new_req__ns2__SituationExchangeDeliveryStructure_Situations(soap*, ...) allocate, set required members
/// - _ns2__SituationExchangeDeliveryStructure_Situations* soap_new_set__ns2__SituationExchangeDeliveryStructure_Situations(soap*, ...) allocate, set all public members
/// - _ns2__SituationExchangeDeliveryStructure_Situations::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SituationExchangeDeliveryStructure_Situations(soap*, _ns2__SituationExchangeDeliveryStructure_Situations*) deserialize from a stream
/// - int soap_write__ns2__SituationExchangeDeliveryStructure_Situations(soap*, _ns2__SituationExchangeDeliveryStructure_Situations*) serialize to a stream
/// - _ns2__SituationExchangeDeliveryStructure_Situations* _ns2__SituationExchangeDeliveryStructure_Situations::soap_dup(soap*) returns deep copy of _ns2__SituationExchangeDeliveryStructure_Situations, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SituationExchangeDeliveryStructure_Situations::soap_del() deep deletes _ns2__SituationExchangeDeliveryStructure_Situations data members, use only after _ns2__SituationExchangeDeliveryStructure_Situations::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__SituationExchangeDeliveryStructure_Situations
    {
/// <PRE><BLOCKQUOTE>
///   Description of an SITUATION.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__PtSituationElementStructure* of length 0..unbounded.
    std::vector<ns2__PtSituationElementStructure*> PtSituationElement             0;
/// <PRE><BLOCKQUOTE>
///   Type for individual IPT ncident.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__RoadSituationElementStructure* element refs of length 0..unbounded.
    std::vector<ns2__RoadSituationElementStructure*> RoadSituationElement           0;
    }                                   *Situations                     0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":SituationExchangeCapabilitiesResponseStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractServiceCapabilitiesResponseStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Delivery for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationExchangeCapabilitiesResponseStructure operations:
/// - ns2__SituationExchangeCapabilitiesResponseStructure* soap_new_ns2__SituationExchangeCapabilitiesResponseStructure(soap*) allocate and default initialize
/// - ns2__SituationExchangeCapabilitiesResponseStructure* soap_new_ns2__SituationExchangeCapabilitiesResponseStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationExchangeCapabilitiesResponseStructure* soap_new_req_ns2__SituationExchangeCapabilitiesResponseStructure(soap*, ...) allocate, set required members
/// - ns2__SituationExchangeCapabilitiesResponseStructure* soap_new_set_ns2__SituationExchangeCapabilitiesResponseStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationExchangeCapabilitiesResponseStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationExchangeCapabilitiesResponseStructure(soap*, ns2__SituationExchangeCapabilitiesResponseStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationExchangeCapabilitiesResponseStructure(soap*, ns2__SituationExchangeCapabilitiesResponseStructure*) serialize to a stream
/// - ns2__SituationExchangeCapabilitiesResponseStructure* ns2__SituationExchangeCapabilitiesResponseStructure::soap_dup(soap*) returns deep copy of ns2__SituationExchangeCapabilitiesResponseStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationExchangeCapabilitiesResponseStructure::soap_del() deep deletes ns2__SituationExchangeCapabilitiesResponseStructure data members, use only after ns2__SituationExchangeCapabilitiesResponseStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationExchangeCapabilitiesResponseStructure : public ns2__AbstractServiceCapabilitiesResponseStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure:
//  BEGIN GROUP <xs:group name="ContextualisedResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Endpoint reference proprerties for response message: participant and SIRI service type are given by context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to the request which gave rise to this message.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="CapabilityStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceCapabilitiesResponseStructure */
/// <PRE><BLOCKQUOTE>
///   Capabilities of Situation Exchange Service. Answers a SituationExchangeCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationExchangeServiceCapabilities.
    ns2__SituationExchangeServiceCapabilitiesStructure*  SituationExchangeServiceCapabilities 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Participant's permissions to use the service.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":SituationExchangePermissions.
    _ns2__SituationExchangePermissions*  SituationExchangePermissions   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":StopPointsDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Response with STOP POINTs available to make requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopPointsDeliveryStructure operations:
/// - ns2__StopPointsDeliveryStructure* soap_new_ns2__StopPointsDeliveryStructure(soap*) allocate and default initialize
/// - ns2__StopPointsDeliveryStructure* soap_new_ns2__StopPointsDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopPointsDeliveryStructure* soap_new_req_ns2__StopPointsDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__StopPointsDeliveryStructure* soap_new_set_ns2__StopPointsDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__StopPointsDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopPointsDeliveryStructure(soap*, ns2__StopPointsDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__StopPointsDeliveryStructure(soap*, ns2__StopPointsDeliveryStructure*) serialize to a stream
/// - ns2__StopPointsDeliveryStructure* ns2__StopPointsDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__StopPointsDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopPointsDeliveryStructure::soap_del() deep deletes ns2__StopPointsDeliveryStructure data members, use only after ns2__StopPointsDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopPointsDeliveryStructure : public ns2__AbstractDiscoveryDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure:
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure */
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT definition.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AnnotatedStopPointStructure* element refs of length 0..unbounded.
    std::vector<ns2__AnnotatedStopPointStructure*> AnnotatedStopPointRef          0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":LinesDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Response with LINEs available to make requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__LinesDeliveryStructure operations:
/// - ns2__LinesDeliveryStructure* soap_new_ns2__LinesDeliveryStructure(soap*) allocate and default initialize
/// - ns2__LinesDeliveryStructure* soap_new_ns2__LinesDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__LinesDeliveryStructure* soap_new_req_ns2__LinesDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__LinesDeliveryStructure* soap_new_set_ns2__LinesDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__LinesDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__LinesDeliveryStructure(soap*, ns2__LinesDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__LinesDeliveryStructure(soap*, ns2__LinesDeliveryStructure*) serialize to a stream
/// - ns2__LinesDeliveryStructure* ns2__LinesDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__LinesDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__LinesDeliveryStructure::soap_del() deep deletes ns2__LinesDeliveryStructure data members, use only after ns2__LinesDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__LinesDeliveryStructure : public ns2__AbstractDiscoveryDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure:
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure */
/// <PRE><BLOCKQUOTE>
///   Information about LINEs covered by server.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AnnotatedLineStructure* element refs of length 0..unbounded.
    std::vector<ns2__AnnotatedLineStructure*> AnnotatedLineRef               0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ProductCategoriesDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Response with Product Categories available to make requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductCategoriesDeliveryStructure operations:
/// - ns2__ProductCategoriesDeliveryStructure* soap_new_ns2__ProductCategoriesDeliveryStructure(soap*) allocate and default initialize
/// - ns2__ProductCategoriesDeliveryStructure* soap_new_ns2__ProductCategoriesDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductCategoriesDeliveryStructure* soap_new_req_ns2__ProductCategoriesDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__ProductCategoriesDeliveryStructure* soap_new_set_ns2__ProductCategoriesDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductCategoriesDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductCategoriesDeliveryStructure(soap*, ns2__ProductCategoriesDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductCategoriesDeliveryStructure(soap*, ns2__ProductCategoriesDeliveryStructure*) serialize to a stream
/// - ns2__ProductCategoriesDeliveryStructure* ns2__ProductCategoriesDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__ProductCategoriesDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductCategoriesDeliveryStructure::soap_del() deep deletes ns2__ProductCategoriesDeliveryStructure data members, use only after ns2__ProductCategoriesDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductCategoriesDeliveryStructure : public ns2__AbstractDiscoveryDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure:
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure */
/// <PRE><BLOCKQUOTE>
///   Category for classification of a journey as a Product
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ProductCategoryStructure* element refs of length 0..unbounded.
    std::vector<ns2__ProductCategoryStructure*> ProductCategory                0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":VehicleFeaturesDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Response with Vehicle Features available to make requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleFeaturesDeliveryStructure operations:
/// - ns2__VehicleFeaturesDeliveryStructure* soap_new_ns2__VehicleFeaturesDeliveryStructure(soap*) allocate and default initialize
/// - ns2__VehicleFeaturesDeliveryStructure* soap_new_ns2__VehicleFeaturesDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleFeaturesDeliveryStructure* soap_new_req_ns2__VehicleFeaturesDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleFeaturesDeliveryStructure* soap_new_set_ns2__VehicleFeaturesDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleFeaturesDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleFeaturesDeliveryStructure(soap*, ns2__VehicleFeaturesDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleFeaturesDeliveryStructure(soap*, ns2__VehicleFeaturesDeliveryStructure*) serialize to a stream
/// - ns2__VehicleFeaturesDeliveryStructure* ns2__VehicleFeaturesDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__VehicleFeaturesDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleFeaturesDeliveryStructure::soap_del() deep deletes ns2__VehicleFeaturesDeliveryStructure data members, use only after ns2__VehicleFeaturesDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleFeaturesDeliveryStructure : public ns2__AbstractDiscoveryDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure:
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure */
/// <PRE><BLOCKQUOTE>
///   Vehicle Feature description.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleFeaturesStructure* element refs of length 0..unbounded.
    std::vector<ns2__VehicleFeaturesStructure*> VehicleFeature                 0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":InfoChannelDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Response with Info channels categories available to make requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoChannelDeliveryStructure operations:
/// - ns2__InfoChannelDeliveryStructure* soap_new_ns2__InfoChannelDeliveryStructure(soap*) allocate and default initialize
/// - ns2__InfoChannelDeliveryStructure* soap_new_ns2__InfoChannelDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoChannelDeliveryStructure* soap_new_req_ns2__InfoChannelDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__InfoChannelDeliveryStructure* soap_new_set_ns2__InfoChannelDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoChannelDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoChannelDeliveryStructure(soap*, ns2__InfoChannelDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoChannelDeliveryStructure(soap*, ns2__InfoChannelDeliveryStructure*) serialize to a stream
/// - ns2__InfoChannelDeliveryStructure* ns2__InfoChannelDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__InfoChannelDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoChannelDeliveryStructure::soap_del() deep deletes ns2__InfoChannelDeliveryStructure data members, use only after ns2__InfoChannelDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoChannelDeliveryStructure : public ns2__AbstractDiscoveryDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure:
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure */
/// <PRE><BLOCKQUOTE>
///   Info Channel supported by Producer service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__InfoChannelStructure* element refs of length 0..unbounded.
    std::vector<ns2__InfoChannelStructure*> InfoChannel                    0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":FacilityDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Response with Facilities available to make requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityDeliveryStructure operations:
/// - ns2__FacilityDeliveryStructure* soap_new_ns2__FacilityDeliveryStructure(soap*) allocate and default initialize
/// - ns2__FacilityDeliveryStructure* soap_new_ns2__FacilityDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityDeliveryStructure* soap_new_req_ns2__FacilityDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityDeliveryStructure* soap_new_set_ns2__FacilityDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityDeliveryStructure(soap*, ns2__FacilityDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityDeliveryStructure(soap*, ns2__FacilityDeliveryStructure*) serialize to a stream
/// - ns2__FacilityDeliveryStructure* ns2__FacilityDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__FacilityDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityDeliveryStructure::soap_del() deep deletes ns2__FacilityDeliveryStructure data members, use only after ns2__FacilityDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityDeliveryStructure : public ns2__AbstractDiscoveryDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure:
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure */
/// <PRE><BLOCKQUOTE>
///   Facility Definition.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AnnotatedFacilityStructure* of length 0..unbounded.
    std::vector<ns2__AnnotatedFacilityStructure*> AnnotatedFacility              0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ServiceFeaturesDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Response with SERVICE FEATUREs available to make requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceFeaturesDeliveryStructure operations:
/// - ns2__ServiceFeaturesDeliveryStructure* soap_new_ns2__ServiceFeaturesDeliveryStructure(soap*) allocate and default initialize
/// - ns2__ServiceFeaturesDeliveryStructure* soap_new_ns2__ServiceFeaturesDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceFeaturesDeliveryStructure* soap_new_req_ns2__ServiceFeaturesDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceFeaturesDeliveryStructure* soap_new_set_ns2__ServiceFeaturesDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceFeaturesDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceFeaturesDeliveryStructure(soap*, ns2__ServiceFeaturesDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceFeaturesDeliveryStructure(soap*, ns2__ServiceFeaturesDeliveryStructure*) serialize to a stream
/// - ns2__ServiceFeaturesDeliveryStructure* ns2__ServiceFeaturesDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__ServiceFeaturesDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceFeaturesDeliveryStructure::soap_del() deep deletes ns2__ServiceFeaturesDeliveryStructure data members, use only after ns2__ServiceFeaturesDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceFeaturesDeliveryStructure : public ns2__AbstractDiscoveryDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure:
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure */
/// <PRE><BLOCKQUOTE>
///   Service Feature description.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureStructure* element refs of length 0..unbounded.
    std::vector<ns2__ServiceFeatureStructure*> ServiceFeature                 0;
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ConnectionLinksDeliveryStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryDeliveryStructure.
///
/// <PRE><BLOCKQUOTE>
///   Response with CONNECTION LINKs available to make requests. +SIR v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionLinksDeliveryStructure operations:
/// - ns2__ConnectionLinksDeliveryStructure* soap_new_ns2__ConnectionLinksDeliveryStructure(soap*) allocate and default initialize
/// - ns2__ConnectionLinksDeliveryStructure* soap_new_ns2__ConnectionLinksDeliveryStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionLinksDeliveryStructure* soap_new_req_ns2__ConnectionLinksDeliveryStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionLinksDeliveryStructure* soap_new_set_ns2__ConnectionLinksDeliveryStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionLinksDeliveryStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionLinksDeliveryStructure(soap*, ns2__ConnectionLinksDeliveryStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionLinksDeliveryStructure(soap*, ns2__ConnectionLinksDeliveryStructure*) serialize to a stream
/// - ns2__ConnectionLinksDeliveryStructure* ns2__ConnectionLinksDeliveryStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionLinksDeliveryStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionLinksDeliveryStructure::soap_del() deep deletes ns2__ConnectionLinksDeliveryStructure data members, use only after ns2__ConnectionLinksDeliveryStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionLinksDeliveryStructure : public ns2__AbstractDiscoveryDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure:
//  BEGIN GROUP <xs:group name="DeliveryStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition.
/// </BLOCKQUOTE></PRE>
/// Element "ErrorCondition" of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
    ns2__ServiceDeliveryErrorConditionStructure*  ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryDeliveryStructure */
/// <PRE><BLOCKQUOTE>
///   SCHEDULED CONNECTION LINK definition.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AnnotatedConnectionLinkStructure* element refs of length 0..unbounded.
    std::vector<ns2__AnnotatedConnectionLinkStructure*> AnnotatedConnectionLinkRef     0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of response. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        1;	///< Fixed attribute value="2.0".
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceRequest
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer for immediate delivery of data. Answered with a ServiceDelivery (or a DataReadyRequest)
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ServiceRequest is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ServiceRequestStructure.
///
/// class _ns2__ServiceRequest operations:
/// - _ns2__ServiceRequest* soap_new__ns2__ServiceRequest(soap*) allocate and default initialize
/// - _ns2__ServiceRequest* soap_new__ns2__ServiceRequest(soap*, int num) allocate array and default initialize values
/// - _ns2__ServiceRequest* soap_new_req__ns2__ServiceRequest(soap*, ...) allocate, set required members
/// - _ns2__ServiceRequest* soap_new_set__ns2__ServiceRequest(soap*, ...) allocate, set all public members
/// - _ns2__ServiceRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ServiceRequest(soap*, _ns2__ServiceRequest*) deserialize from a stream
/// - int soap_write__ns2__ServiceRequest(soap*, _ns2__ServiceRequest*) serialize to a stream
/// - _ns2__ServiceRequest* _ns2__ServiceRequest::soap_dup(soap*) returns deep copy of _ns2__ServiceRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ServiceRequest::soap_del() deep deletes _ns2__ServiceRequest data members, use only after _ns2__ServiceRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ServiceRequest : public ns2__ServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__ContextualisedRequestStructure:
/// <PRE><BLOCKQUOTE>
///   General request properties - typically configured rather than repeated on request.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceRequestContext" of XSD type "http://www.siri.org.uk/siri":ServiceRequestContextStructure.
    ns2__ServiceRequestContextStructure*  ServiceRequestContext          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ContextualisedRequestStructure */
/*  INHERITED FROM ns2__ServiceRequestStructure:
//  BEGIN GROUP <xs:group name="SiriServiceRequestGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Concrete Requests.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceRequest        ;	///< Union _ns2__union_ServiceRequest selector: set to SOAP_UNION__ns2__union_ServiceRequest_<fieldname>
    union _ns2__union_ServiceRequest
    {
/// <PRE><BLOCKQUOTE>
///   Request for daily production timetables.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ProductionTimetableRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ProductionTimetableRequestStructure*> *ProductionTimetableRequest     1;
/// <PRE><BLOCKQUOTE>
///   Request for information about the estimated timetable.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableRequestStructure*> *EstimatedTimetableRequest      1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrival and departure at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableRequestStructure*> *StopTimetableRequest           1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrivals and departures at multiple stops stop. SIRI 1.3
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringMultipleRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringMultipleRequestStructure*> *StopMonitoringMultipleRequest  1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrivals and departures at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringRequestStructure*> *StopMonitoringRequest          1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Vehicle Movements.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringRequestStructure*> *VehicleMonitoringRequest       1;
/// <PRE><BLOCKQUOTE>
///   Request for information about timetabled connections at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableRequestStructure*> *ConnectionTimetableRequest     1;
/// <PRE><BLOCKQUOTE>
///   Request for information about changes to connections at a stop for Connection Monitoring service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringRequestStructure*> *ConnectionMonitoringRequest    1;
/// <PRE><BLOCKQUOTE>
///   Request for information about general information messages affecting stops, vehicles or services.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageRequestStructure*> *GeneralMessageRequest          1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Facilities status.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringRequestStructure*> *FacilityMonitoringRequest      1;
/// <PRE><BLOCKQUOTE>
///   Request for information about Facilities status.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeRequestStructure*> *SituationExchangeRequest       1;
    }                                    union_ServiceRequest          ;
//  END OF CHOICE
//  END OF GROUP
    END OF INHERITED FROM ns2__ServiceRequestStructure */
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductionTimetableSubscriptionRequest
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ProductionTimetableSubscriptionRequest is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ProductionTimetableSubscriptionStructure.
///
/// class _ns2__ProductionTimetableSubscriptionRequest operations:
/// - _ns2__ProductionTimetableSubscriptionRequest* soap_new__ns2__ProductionTimetableSubscriptionRequest(soap*) allocate and default initialize
/// - _ns2__ProductionTimetableSubscriptionRequest* soap_new__ns2__ProductionTimetableSubscriptionRequest(soap*, int num) allocate array and default initialize values
/// - _ns2__ProductionTimetableSubscriptionRequest* soap_new_req__ns2__ProductionTimetableSubscriptionRequest(soap*, ...) allocate, set required members
/// - _ns2__ProductionTimetableSubscriptionRequest* soap_new_set__ns2__ProductionTimetableSubscriptionRequest(soap*, ...) allocate, set all public members
/// - _ns2__ProductionTimetableSubscriptionRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ProductionTimetableSubscriptionRequest(soap*, _ns2__ProductionTimetableSubscriptionRequest*) deserialize from a stream
/// - int soap_write__ns2__ProductionTimetableSubscriptionRequest(soap*, _ns2__ProductionTimetableSubscriptionRequest*) serialize to a stream
/// - _ns2__ProductionTimetableSubscriptionRequest* _ns2__ProductionTimetableSubscriptionRequest::soap_dup(soap*) returns deep copy of _ns2__ProductionTimetableSubscriptionRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ProductionTimetableSubscriptionRequest::soap_del() deep deletes _ns2__ProductionTimetableSubscriptionRequest data members, use only after _ns2__ProductionTimetableSubscriptionRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ProductionTimetableSubscriptionRequest : public ns2__ProductionTimetableSubscriptionStructure
{ public:
/*  INHERITED FROM ns2__AbstractSubscriptionStructure:
//  BEGIN GROUP <xs:group name="SubscriptionIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Type for unique identifier of a subscription.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriberRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        SubscriberRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier to be given to Subscription.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionIdentifier" of XSD type "http://www.siri.org.uk/siri":SubscriptionQualifierStructure.
    ns2__SubscriptionQualifierStructure*  SubscriptionIdentifier         1;	///< Required element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Requested end time for subscription.
/// </BLOCKQUOTE></PRE>
/// Element "InitialTerminationTime" of XSD type xs:dateTime.
    xsd__dateTime                        InitialTerminationTime         1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractSubscriptionStructure */
/*  INHERITED FROM ns2__ProductionTimetableSubscriptionStructure:
/// <PRE><BLOCKQUOTE>
///   Request for daily production timetables.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ProductionTimetableRequest.
    ns2__ProductionTimetableRequestStructure*  ProductionTimetableRequest     1;	///< Required element.
//  BEGIN GROUP <xs:group name="ProductionTimetableSubscriptionPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the subscription content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the producer should return the complete set of current data, or only provide updates to the last data returned, i.e. additions, modifications and deletions.
///   If false each subscription response will contain the full information as specified in this request.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = false;	///< Default element value="false".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
    END OF INHERITED FROM ns2__ProductionTimetableSubscriptionStructure */
};

/// @brief "http://www.ifopt.org.uk/acsb":LimitationRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to an identifier of a hazard within a stop place.
/// </BLOCKQUOTE></PRE>
/// class ns3__LimitationRefStructure operations:
/// - ns3__LimitationRefStructure* soap_new_ns3__LimitationRefStructure(soap*) allocate and default initialize
/// - ns3__LimitationRefStructure* soap_new_ns3__LimitationRefStructure(soap*, int num) allocate array and default initialize values
/// - ns3__LimitationRefStructure* soap_new_req_ns3__LimitationRefStructure(soap*, ...) allocate, set required members
/// - ns3__LimitationRefStructure* soap_new_set_ns3__LimitationRefStructure(soap*, ...) allocate, set all public members
/// - ns3__LimitationRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__LimitationRefStructure(soap*, ns3__LimitationRefStructure*) deserialize from a stream
/// - int soap_write_ns3__LimitationRefStructure(soap*, ns3__LimitationRefStructure*) serialize to a stream
/// - ns3__LimitationRefStructure* ns3__LimitationRefStructure::soap_dup(soap*) returns deep copy of ns3__LimitationRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__LimitationRefStructure::soap_del() deep deletes ns3__LimitationRefStructure data members, use only after ns3__LimitationRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__LimitationRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/acsb":LimitationIdType" simpleContent.
    ns3__LimitationIdType                __item                        ;
};

/// @brief "http://www.ifopt.org.uk/acsb":AccessibilityStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for accessibility.
/// </BLOCKQUOTE></PRE>
/// class ns3__AccessibilityStructure operations:
/// - ns3__AccessibilityStructure* soap_new_ns3__AccessibilityStructure(soap*) allocate and default initialize
/// - ns3__AccessibilityStructure* soap_new_ns3__AccessibilityStructure(soap*, int num) allocate array and default initialize values
/// - ns3__AccessibilityStructure* soap_new_req_ns3__AccessibilityStructure(soap*, ...) allocate, set required members
/// - ns3__AccessibilityStructure* soap_new_set_ns3__AccessibilityStructure(soap*, ...) allocate, set all public members
/// - ns3__AccessibilityStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AccessibilityStructure(soap*, ns3__AccessibilityStructure*) deserialize from a stream
/// - int soap_write_ns3__AccessibilityStructure(soap*, ns3__AccessibilityStructure*) serialize to a stream
/// - ns3__AccessibilityStructure* ns3__AccessibilityStructure::soap_dup(soap*) returns deep copy of ns3__AccessibilityStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AccessibilityStructure::soap_del() deep deletes ns3__AccessibilityStructure data members, use only after ns3__AccessibilityStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AccessibilityStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/acsb":AccessibilityEnumeration" simpleContent.
    enum ns3__AccessibilityEnumeration   __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":EquipmentRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// class ns4__EquipmentRefStructure operations:
/// - ns4__EquipmentRefStructure* soap_new_ns4__EquipmentRefStructure(soap*) allocate and default initialize
/// - ns4__EquipmentRefStructure* soap_new_ns4__EquipmentRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__EquipmentRefStructure* soap_new_req_ns4__EquipmentRefStructure(soap*, ...) allocate, set required members
/// - ns4__EquipmentRefStructure* soap_new_set_ns4__EquipmentRefStructure(soap*, ...) allocate, set all public members
/// - ns4__EquipmentRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EquipmentRefStructure(soap*, ns4__EquipmentRefStructure*) deserialize from a stream
/// - int soap_write_ns4__EquipmentRefStructure(soap*, ns4__EquipmentRefStructure*) serialize to a stream
/// - ns4__EquipmentRefStructure* ns4__EquipmentRefStructure::soap_dup(soap*) returns deep copy of ns4__EquipmentRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EquipmentRefStructure::soap_del() deep deletes ns4__EquipmentRefStructure data members, use only after ns4__EquipmentRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EquipmentRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":EquipmentIdType" simpleContent.
    ns4__EquipmentIdType                 __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":EquipmentTypeRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for TYPE OF EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// class ns4__EquipmentTypeRefStructure operations:
/// - ns4__EquipmentTypeRefStructure* soap_new_ns4__EquipmentTypeRefStructure(soap*) allocate and default initialize
/// - ns4__EquipmentTypeRefStructure* soap_new_ns4__EquipmentTypeRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__EquipmentTypeRefStructure* soap_new_req_ns4__EquipmentTypeRefStructure(soap*, ...) allocate, set required members
/// - ns4__EquipmentTypeRefStructure* soap_new_set_ns4__EquipmentTypeRefStructure(soap*, ...) allocate, set all public members
/// - ns4__EquipmentTypeRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__EquipmentTypeRefStructure(soap*, ns4__EquipmentTypeRefStructure*) deserialize from a stream
/// - int soap_write_ns4__EquipmentTypeRefStructure(soap*, ns4__EquipmentTypeRefStructure*) serialize to a stream
/// - ns4__EquipmentTypeRefStructure* ns4__EquipmentTypeRefStructure::soap_dup(soap*) returns deep copy of ns4__EquipmentTypeRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__EquipmentTypeRefStructure::soap_del() deep deletes ns4__EquipmentTypeRefStructure data members, use only after ns4__EquipmentTypeRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__EquipmentTypeRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":EquipmentTypeCodeType" simpleContent.
    ns4__EquipmentTypeCodeType           __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":AbstractEquipmentStructure is an abstract complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":DataManagedObjectStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for abstract EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// class ns4__AbstractEquipmentStructure operations:
/// - ns4__AbstractEquipmentStructure* soap_new_ns4__AbstractEquipmentStructure(soap*) allocate and default initialize
/// - ns4__AbstractEquipmentStructure* soap_new_ns4__AbstractEquipmentStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AbstractEquipmentStructure* soap_new_req_ns4__AbstractEquipmentStructure(soap*, ...) allocate, set required members
/// - ns4__AbstractEquipmentStructure* soap_new_set_ns4__AbstractEquipmentStructure(soap*, ...) allocate, set all public members
/// - ns4__AbstractEquipmentStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AbstractEquipmentStructure(soap*, ns4__AbstractEquipmentStructure*) deserialize from a stream
/// - int soap_write_ns4__AbstractEquipmentStructure(soap*, ns4__AbstractEquipmentStructure*) serialize to a stream
/// - ns4__AbstractEquipmentStructure* ns4__AbstractEquipmentStructure::soap_dup(soap*) returns deep copy of ns4__AbstractEquipmentStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AbstractEquipmentStructure::soap_del() deep deletes ns4__AbstractEquipmentStructure data members, use only after ns4__AbstractEquipmentStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AbstractEquipmentStructure : public ns4__DataManagedObjectStructure
{ public:
/*  INHERITED FROM ns4__VersionedObjectStructure:
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup ref=""http://www.ifopt.org.uk/ifopt":RequiredModificationDetailsGroup">.
/// Attribute "created" of XSD type xs:dateTime.
   @xsd__dateTime                        created                        1;	///< Required attribute.
/// Attribute "lastUpdated" of XSD type xs:dateTime.
   @xsd__dateTime                        lastUpdated                    1;	///< Required attribute.
/// Attribute "modification" of XSD type "http://www.ifopt.org.uk/ifopt":ModificationEnumeration.
   @enum ns4__ModificationEnumeration    modification                   0 = ns4__ModificationEnumeration__new_;	///< Default attribute value="new".
/// Attribute "version" of XSD type "http://www.ifopt.org.uk/ifopt":RevisionNumberType.
   @ns4__RevisionNumberType*             version                        0;	///< Optional attribute.
/// Attribute "status" of XSD type "http://www.ifopt.org.uk/ifopt":StatusEnumeration.
   @enum ns4__StatusEnumeration          status                         0 = ns4__StatusEnumeration__active;	///< Default attribute value="active".
//  END OF ATTRIBUTEGROUP
    END OF INHERITED FROM ns4__VersionedObjectStructure */
/*  INHERITED FROM ns4__DataManagedObjectStructure:
//  BEGIN GROUP <xs:group name="DataManagedObjectGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for a DATA MANAGED OBJECT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   ADMINISTRATIVE ZONEthat manages object. If absent then manager same as for containing parent of object.
/// </BLOCKQUOTE></PRE>
/// Element "ManagedByAreaRef" of XSD type "http://www.ifopt.org.uk/ifopt":AdministrativeAreaRefStructure.
    ns4__AdministrativeAreaRefStructure*  ManagedByAreaRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Collection of URL's associated with object.
/// </BLOCKQUOTE></PRE>
/// Element "InfoLinks" of XSD type "http://www.ifopt.org.uk/ifopt":InfoLinksStructure.
    ns4__InfoLinksStructure*             InfoLinks                      0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns4__DataManagedObjectStructure */
//  BEGIN GROUP <xs:group name="AbstractEquipmentGroup">
/// <PRE><BLOCKQUOTE>
///   Coomon Elements for EQUIPMENt.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifer of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentId" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentIdType.
    ns4__EquipmentIdType                 EquipmentId                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  EquipmentName                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type for reference to TYPE OF EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "TypeOfEquipment" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentTypeRefStructure.
    ns4__EquipmentTypeRefStructure*      TypeOfEquipment                0;	///< Optional element.
//  END OF GROUP
};

/// @brief "http://www.ifopt.org.uk/ifopt":AdministratorRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a reference to an ORGANISATION with administrative responsibility.
/// </BLOCKQUOTE></PRE>
/// class ns4__AdministratorRefStructure operations:
/// - ns4__AdministratorRefStructure* soap_new_ns4__AdministratorRefStructure(soap*) allocate and default initialize
/// - ns4__AdministratorRefStructure* soap_new_ns4__AdministratorRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AdministratorRefStructure* soap_new_req_ns4__AdministratorRefStructure(soap*, ...) allocate, set required members
/// - ns4__AdministratorRefStructure* soap_new_set_ns4__AdministratorRefStructure(soap*, ...) allocate, set all public members
/// - ns4__AdministratorRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AdministratorRefStructure(soap*, ns4__AdministratorRefStructure*) deserialize from a stream
/// - int soap_write_ns4__AdministratorRefStructure(soap*, ns4__AdministratorRefStructure*) serialize to a stream
/// - ns4__AdministratorRefStructure* ns4__AdministratorRefStructure::soap_dup(soap*) returns deep copy of ns4__AdministratorRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AdministratorRefStructure::soap_del() deep deletes ns4__AdministratorRefStructure data members, use only after ns4__AdministratorRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AdministratorRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":AdministratorCodeType" simpleContent.
    ns4__AdministratorCodeType           __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":AdministratorVersionedRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a versioned reference to an ORGANISATION with administrative responsibility.
/// </BLOCKQUOTE></PRE>
/// class ns4__AdministratorVersionedRefStructure operations:
/// - ns4__AdministratorVersionedRefStructure* soap_new_ns4__AdministratorVersionedRefStructure(soap*) allocate and default initialize
/// - ns4__AdministratorVersionedRefStructure* soap_new_ns4__AdministratorVersionedRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AdministratorVersionedRefStructure* soap_new_req_ns4__AdministratorVersionedRefStructure(soap*, ...) allocate, set required members
/// - ns4__AdministratorVersionedRefStructure* soap_new_set_ns4__AdministratorVersionedRefStructure(soap*, ...) allocate, set all public members
/// - ns4__AdministratorVersionedRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AdministratorVersionedRefStructure(soap*, ns4__AdministratorVersionedRefStructure*) deserialize from a stream
/// - int soap_write_ns4__AdministratorVersionedRefStructure(soap*, ns4__AdministratorVersionedRefStructure*) serialize to a stream
/// - ns4__AdministratorVersionedRefStructure* ns4__AdministratorVersionedRefStructure::soap_dup(soap*) returns deep copy of ns4__AdministratorVersionedRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AdministratorVersionedRefStructure::soap_del() deep deletes ns4__AdministratorVersionedRefStructure data members, use only after ns4__AdministratorVersionedRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AdministratorVersionedRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":AdministratorCodeType" simpleContent.
    ns4__AdministratorCodeType           __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup ref=""http://www.ifopt.org.uk/ifopt":ModificationDetailsGroup">.
/// Attribute "created" of XSD type xs:dateTime.
   @xsd__dateTime*                       created                        0;	///< Optional attribute.
/// Attribute "lastUpdated" of XSD type xs:dateTime.
   @xsd__dateTime*                       lastUpdated                    0;	///< Optional attribute.
/// Attribute "modification" of XSD type "http://www.ifopt.org.uk/ifopt":ModificationEnumeration.
   @enum ns4__ModificationEnumeration    modification                   0 = ns4__ModificationEnumeration__new_;	///< Default attribute value="new".
/// Attribute "version" of XSD type "http://www.ifopt.org.uk/ifopt":RevisionNumberType.
   @ns4__RevisionNumberType*             version                        0;	///< Optional attribute.
/// Attribute "status" of XSD type "http://www.ifopt.org.uk/ifopt":StatusEnumeration.
   @enum ns4__StatusEnumeration          status                         0 = ns4__StatusEnumeration__active;	///< Default attribute value="active".
//  END OF ATTRIBUTEGROUP
};

/// @brief "http://www.ifopt.org.uk/ifopt":AdministrativeAreaRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a reference to an ADMINISTRATIVE ZONE.
/// </BLOCKQUOTE></PRE>
/// class ns4__AdministrativeAreaRefStructure operations:
/// - ns4__AdministrativeAreaRefStructure* soap_new_ns4__AdministrativeAreaRefStructure(soap*) allocate and default initialize
/// - ns4__AdministrativeAreaRefStructure* soap_new_ns4__AdministrativeAreaRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AdministrativeAreaRefStructure* soap_new_req_ns4__AdministrativeAreaRefStructure(soap*, ...) allocate, set required members
/// - ns4__AdministrativeAreaRefStructure* soap_new_set_ns4__AdministrativeAreaRefStructure(soap*, ...) allocate, set all public members
/// - ns4__AdministrativeAreaRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AdministrativeAreaRefStructure(soap*, ns4__AdministrativeAreaRefStructure*) deserialize from a stream
/// - int soap_write_ns4__AdministrativeAreaRefStructure(soap*, ns4__AdministrativeAreaRefStructure*) serialize to a stream
/// - ns4__AdministrativeAreaRefStructure* ns4__AdministrativeAreaRefStructure::soap_dup(soap*) returns deep copy of ns4__AdministrativeAreaRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AdministrativeAreaRefStructure::soap_del() deep deletes ns4__AdministrativeAreaRefStructure data members, use only after ns4__AdministrativeAreaRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AdministrativeAreaRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":AdministrativeAreaCodeType" simpleContent.
    ns4__AdministrativeAreaCodeType      __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":AdministrativeAreaVersionedRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a versioned reference to anADMINISTRATIVE ZONE.
/// </BLOCKQUOTE></PRE>
/// class ns4__AdministrativeAreaVersionedRefStructure operations:
/// - ns4__AdministrativeAreaVersionedRefStructure* soap_new_ns4__AdministrativeAreaVersionedRefStructure(soap*) allocate and default initialize
/// - ns4__AdministrativeAreaVersionedRefStructure* soap_new_ns4__AdministrativeAreaVersionedRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AdministrativeAreaVersionedRefStructure* soap_new_req_ns4__AdministrativeAreaVersionedRefStructure(soap*, ...) allocate, set required members
/// - ns4__AdministrativeAreaVersionedRefStructure* soap_new_set_ns4__AdministrativeAreaVersionedRefStructure(soap*, ...) allocate, set all public members
/// - ns4__AdministrativeAreaVersionedRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AdministrativeAreaVersionedRefStructure(soap*, ns4__AdministrativeAreaVersionedRefStructure*) deserialize from a stream
/// - int soap_write_ns4__AdministrativeAreaVersionedRefStructure(soap*, ns4__AdministrativeAreaVersionedRefStructure*) serialize to a stream
/// - ns4__AdministrativeAreaVersionedRefStructure* ns4__AdministrativeAreaVersionedRefStructure::soap_dup(soap*) returns deep copy of ns4__AdministrativeAreaVersionedRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AdministrativeAreaVersionedRefStructure::soap_del() deep deletes ns4__AdministrativeAreaVersionedRefStructure data members, use only after ns4__AdministrativeAreaVersionedRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AdministrativeAreaVersionedRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":AdministrativeAreaCodeType" simpleContent.
    ns4__AdministrativeAreaCodeType      __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup ref=""http://www.ifopt.org.uk/ifopt":ModificationDetailsGroup">.
/// Attribute "created" of XSD type xs:dateTime.
   @xsd__dateTime*                       created                        0;	///< Optional attribute.
/// Attribute "lastUpdated" of XSD type xs:dateTime.
   @xsd__dateTime*                       lastUpdated                    0;	///< Optional attribute.
/// Attribute "modification" of XSD type "http://www.ifopt.org.uk/ifopt":ModificationEnumeration.
   @enum ns4__ModificationEnumeration    modification                   0 = ns4__ModificationEnumeration__new_;	///< Default attribute value="new".
/// Attribute "version" of XSD type "http://www.ifopt.org.uk/ifopt":RevisionNumberType.
   @ns4__RevisionNumberType*             version                        0;	///< Optional attribute.
/// Attribute "status" of XSD type "http://www.ifopt.org.uk/ifopt":StatusEnumeration.
   @enum ns4__StatusEnumeration          status                         0 = ns4__StatusEnumeration__active;	///< Default attribute value="active".
//  END OF ATTRIBUTEGROUP
};

/// @brief "http://www.ifopt.org.uk/ifopt":NamespaceTypeRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a reference to an Namespace.
/// </BLOCKQUOTE></PRE>
/// class ns4__NamespaceTypeRefStructure operations:
/// - ns4__NamespaceTypeRefStructure* soap_new_ns4__NamespaceTypeRefStructure(soap*) allocate and default initialize
/// - ns4__NamespaceTypeRefStructure* soap_new_ns4__NamespaceTypeRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__NamespaceTypeRefStructure* soap_new_req_ns4__NamespaceTypeRefStructure(soap*, ...) allocate, set required members
/// - ns4__NamespaceTypeRefStructure* soap_new_set_ns4__NamespaceTypeRefStructure(soap*, ...) allocate, set all public members
/// - ns4__NamespaceTypeRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__NamespaceTypeRefStructure(soap*, ns4__NamespaceTypeRefStructure*) deserialize from a stream
/// - int soap_write_ns4__NamespaceTypeRefStructure(soap*, ns4__NamespaceTypeRefStructure*) serialize to a stream
/// - ns4__NamespaceTypeRefStructure* ns4__NamespaceTypeRefStructure::soap_dup(soap*) returns deep copy of ns4__NamespaceTypeRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__NamespaceTypeRefStructure::soap_del() deep deletes ns4__NamespaceTypeRefStructure data members, use only after ns4__NamespaceTypeRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__NamespaceTypeRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":NamespaceTypeCodeType" simpleContent.
    ns4__NamespaceTypeCodeType           __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":RegionRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a Reference to identifier of Region.
/// </BLOCKQUOTE></PRE>
/// class ns4__RegionRefStructure operations:
/// - ns4__RegionRefStructure* soap_new_ns4__RegionRefStructure(soap*) allocate and default initialize
/// - ns4__RegionRefStructure* soap_new_ns4__RegionRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__RegionRefStructure* soap_new_req_ns4__RegionRefStructure(soap*, ...) allocate, set required members
/// - ns4__RegionRefStructure* soap_new_set_ns4__RegionRefStructure(soap*, ...) allocate, set all public members
/// - ns4__RegionRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__RegionRefStructure(soap*, ns4__RegionRefStructure*) deserialize from a stream
/// - int soap_write_ns4__RegionRefStructure(soap*, ns4__RegionRefStructure*) serialize to a stream
/// - ns4__RegionRefStructure* ns4__RegionRefStructure::soap_dup(soap*) returns deep copy of ns4__RegionRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__RegionRefStructure::soap_del() deep deletes ns4__RegionRefStructure data members, use only after ns4__RegionRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__RegionRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":RegionCodeType" simpleContent.
    ns4__RegionCodeType                  __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":AuthorityRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a reference to an AUTHORITY.
/// </BLOCKQUOTE></PRE>
/// class ns4__AuthorityRefStructure operations:
/// - ns4__AuthorityRefStructure* soap_new_ns4__AuthorityRefStructure(soap*) allocate and default initialize
/// - ns4__AuthorityRefStructure* soap_new_ns4__AuthorityRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AuthorityRefStructure* soap_new_req_ns4__AuthorityRefStructure(soap*, ...) allocate, set required members
/// - ns4__AuthorityRefStructure* soap_new_set_ns4__AuthorityRefStructure(soap*, ...) allocate, set all public members
/// - ns4__AuthorityRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AuthorityRefStructure(soap*, ns4__AuthorityRefStructure*) deserialize from a stream
/// - int soap_write_ns4__AuthorityRefStructure(soap*, ns4__AuthorityRefStructure*) serialize to a stream
/// - ns4__AuthorityRefStructure* ns4__AuthorityRefStructure::soap_dup(soap*) returns deep copy of ns4__AuthorityRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AuthorityRefStructure::soap_del() deep deletes ns4__AuthorityRefStructure data members, use only after ns4__AuthorityRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AuthorityRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":AuthorityCodeType" simpleContent.
    ns4__AuthorityCodeType               __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":FeatureIdRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a GIS FEATURe.
/// </BLOCKQUOTE></PRE>
/// class ns4__FeatureIdRefStructure operations:
/// - ns4__FeatureIdRefStructure* soap_new_ns4__FeatureIdRefStructure(soap*) allocate and default initialize
/// - ns4__FeatureIdRefStructure* soap_new_ns4__FeatureIdRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__FeatureIdRefStructure* soap_new_req_ns4__FeatureIdRefStructure(soap*, ...) allocate, set required members
/// - ns4__FeatureIdRefStructure* soap_new_set_ns4__FeatureIdRefStructure(soap*, ...) allocate, set all public members
/// - ns4__FeatureIdRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__FeatureIdRefStructure(soap*, ns4__FeatureIdRefStructure*) deserialize from a stream
/// - int soap_write_ns4__FeatureIdRefStructure(soap*, ns4__FeatureIdRefStructure*) serialize to a stream
/// - ns4__FeatureIdRefStructure* ns4__FeatureIdRefStructure::soap_dup(soap*) returns deep copy of ns4__FeatureIdRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__FeatureIdRefStructure::soap_del() deep deletes ns4__FeatureIdRefStructure data members, use only after ns4__FeatureIdRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__FeatureIdRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":FeatureIdType" simpleContent.
    ns4__FeatureIdType                   __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":PathJunctionRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a PATH JUNCTION.
/// </BLOCKQUOTE></PRE>
/// class ns4__PathJunctionRefStructure operations:
/// - ns4__PathJunctionRefStructure* soap_new_ns4__PathJunctionRefStructure(soap*) allocate and default initialize
/// - ns4__PathJunctionRefStructure* soap_new_ns4__PathJunctionRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__PathJunctionRefStructure* soap_new_req_ns4__PathJunctionRefStructure(soap*, ...) allocate, set required members
/// - ns4__PathJunctionRefStructure* soap_new_set_ns4__PathJunctionRefStructure(soap*, ...) allocate, set all public members
/// - ns4__PathJunctionRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__PathJunctionRefStructure(soap*, ns4__PathJunctionRefStructure*) deserialize from a stream
/// - int soap_write_ns4__PathJunctionRefStructure(soap*, ns4__PathJunctionRefStructure*) serialize to a stream
/// - ns4__PathJunctionRefStructure* ns4__PathJunctionRefStructure::soap_dup(soap*) returns deep copy of ns4__PathJunctionRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__PathJunctionRefStructure::soap_del() deep deletes ns4__PathJunctionRefStructure data members, use only after ns4__PathJunctionRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__PathJunctionRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":PathJunctionIdType" simpleContent.
    ns4__PathJunctionIdType              __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":AccessLinkRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to an ACCESS link.
/// </BLOCKQUOTE></PRE>
/// class ns4__AccessLinkRefStructure operations:
/// - ns4__AccessLinkRefStructure* soap_new_ns4__AccessLinkRefStructure(soap*) allocate and default initialize
/// - ns4__AccessLinkRefStructure* soap_new_ns4__AccessLinkRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AccessLinkRefStructure* soap_new_req_ns4__AccessLinkRefStructure(soap*, ...) allocate, set required members
/// - ns4__AccessLinkRefStructure* soap_new_set_ns4__AccessLinkRefStructure(soap*, ...) allocate, set all public members
/// - ns4__AccessLinkRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AccessLinkRefStructure(soap*, ns4__AccessLinkRefStructure*) deserialize from a stream
/// - int soap_write_ns4__AccessLinkRefStructure(soap*, ns4__AccessLinkRefStructure*) serialize to a stream
/// - ns4__AccessLinkRefStructure* ns4__AccessLinkRefStructure::soap_dup(soap*) returns deep copy of ns4__AccessLinkRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AccessLinkRefStructure::soap_del() deep deletes ns4__AccessLinkRefStructure data members, use only after ns4__AccessLinkRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AccessLinkRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":AccessLinkIdType" simpleContent.
    ns4__AccessLinkIdType                __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":NavigationPathRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a NAVIGATION PATH.
/// </BLOCKQUOTE></PRE>
/// class ns4__NavigationPathRefStructure operations:
/// - ns4__NavigationPathRefStructure* soap_new_ns4__NavigationPathRefStructure(soap*) allocate and default initialize
/// - ns4__NavigationPathRefStructure* soap_new_ns4__NavigationPathRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__NavigationPathRefStructure* soap_new_req_ns4__NavigationPathRefStructure(soap*, ...) allocate, set required members
/// - ns4__NavigationPathRefStructure* soap_new_set_ns4__NavigationPathRefStructure(soap*, ...) allocate, set all public members
/// - ns4__NavigationPathRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__NavigationPathRefStructure(soap*, ns4__NavigationPathRefStructure*) deserialize from a stream
/// - int soap_write_ns4__NavigationPathRefStructure(soap*, ns4__NavigationPathRefStructure*) serialize to a stream
/// - ns4__NavigationPathRefStructure* ns4__NavigationPathRefStructure::soap_dup(soap*) returns deep copy of ns4__NavigationPathRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__NavigationPathRefStructure::soap_del() deep deletes ns4__NavigationPathRefStructure data members, use only after ns4__NavigationPathRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__NavigationPathRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":NavigationPathIdType" simpleContent.
    ns4__NavigationPathIdType            __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a STOP PLACE.
/// </BLOCKQUOTE></PRE>
/// class ns4__StopPlaceRefStructure operations:
/// - ns4__StopPlaceRefStructure* soap_new_ns4__StopPlaceRefStructure(soap*) allocate and default initialize
/// - ns4__StopPlaceRefStructure* soap_new_ns4__StopPlaceRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__StopPlaceRefStructure* soap_new_req_ns4__StopPlaceRefStructure(soap*, ...) allocate, set required members
/// - ns4__StopPlaceRefStructure* soap_new_set_ns4__StopPlaceRefStructure(soap*, ...) allocate, set all public members
/// - ns4__StopPlaceRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__StopPlaceRefStructure(soap*, ns4__StopPlaceRefStructure*) deserialize from a stream
/// - int soap_write_ns4__StopPlaceRefStructure(soap*, ns4__StopPlaceRefStructure*) serialize to a stream
/// - ns4__StopPlaceRefStructure* ns4__StopPlaceRefStructure::soap_dup(soap*) returns deep copy of ns4__StopPlaceRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__StopPlaceRefStructure::soap_del() deep deletes ns4__StopPlaceRefStructure data members, use only after ns4__StopPlaceRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__StopPlaceRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":StopPlaceIdType" simpleContent.
    ns4__StopPlaceIdType                 __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceComponentRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to STOP PLACE.
/// </BLOCKQUOTE></PRE>
/// class ns4__StopPlaceComponentRefStructure operations:
/// - ns4__StopPlaceComponentRefStructure* soap_new_ns4__StopPlaceComponentRefStructure(soap*) allocate and default initialize
/// - ns4__StopPlaceComponentRefStructure* soap_new_ns4__StopPlaceComponentRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__StopPlaceComponentRefStructure* soap_new_req_ns4__StopPlaceComponentRefStructure(soap*, ...) allocate, set required members
/// - ns4__StopPlaceComponentRefStructure* soap_new_set_ns4__StopPlaceComponentRefStructure(soap*, ...) allocate, set all public members
/// - ns4__StopPlaceComponentRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__StopPlaceComponentRefStructure(soap*, ns4__StopPlaceComponentRefStructure*) deserialize from a stream
/// - int soap_write_ns4__StopPlaceComponentRefStructure(soap*, ns4__StopPlaceComponentRefStructure*) serialize to a stream
/// - ns4__StopPlaceComponentRefStructure* ns4__StopPlaceComponentRefStructure::soap_dup(soap*) returns deep copy of ns4__StopPlaceComponentRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__StopPlaceComponentRefStructure::soap_del() deep deletes ns4__StopPlaceComponentRefStructure data members, use only after ns4__StopPlaceComponentRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__StopPlaceComponentRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":StopPlaceComponentIdType" simpleContent.
    ns4__StopPlaceComponentIdType        __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":LevelRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to identifier of LEVEL.
/// </BLOCKQUOTE></PRE>
/// class ns4__LevelRefStructure operations:
/// - ns4__LevelRefStructure* soap_new_ns4__LevelRefStructure(soap*) allocate and default initialize
/// - ns4__LevelRefStructure* soap_new_ns4__LevelRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__LevelRefStructure* soap_new_req_ns4__LevelRefStructure(soap*, ...) allocate, set required members
/// - ns4__LevelRefStructure* soap_new_set_ns4__LevelRefStructure(soap*, ...) allocate, set all public members
/// - ns4__LevelRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__LevelRefStructure(soap*, ns4__LevelRefStructure*) deserialize from a stream
/// - int soap_write_ns4__LevelRefStructure(soap*, ns4__LevelRefStructure*) serialize to a stream
/// - ns4__LevelRefStructure* ns4__LevelRefStructure::soap_dup(soap*) returns deep copy of ns4__LevelRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__LevelRefStructure::soap_del() deep deletes ns4__LevelRefStructure data members, use only after ns4__LevelRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__LevelRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":LevelCodeType" simpleContent.
    ns4__LevelCodeType                   __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":CheckPointRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to am identifier of a hazard within a STOP PLACE.
/// </BLOCKQUOTE></PRE>
/// class ns4__CheckPointRefStructure operations:
/// - ns4__CheckPointRefStructure* soap_new_ns4__CheckPointRefStructure(soap*) allocate and default initialize
/// - ns4__CheckPointRefStructure* soap_new_ns4__CheckPointRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__CheckPointRefStructure* soap_new_req_ns4__CheckPointRefStructure(soap*, ...) allocate, set required members
/// - ns4__CheckPointRefStructure* soap_new_set_ns4__CheckPointRefStructure(soap*, ...) allocate, set all public members
/// - ns4__CheckPointRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__CheckPointRefStructure(soap*, ns4__CheckPointRefStructure*) deserialize from a stream
/// - int soap_write_ns4__CheckPointRefStructure(soap*, ns4__CheckPointRefStructure*) serialize to a stream
/// - ns4__CheckPointRefStructure* ns4__CheckPointRefStructure::soap_dup(soap*) returns deep copy of ns4__CheckPointRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__CheckPointRefStructure::soap_del() deep deletes ns4__CheckPointRefStructure data members, use only after ns4__CheckPointRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__CheckPointRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":CheckPointIdType" simpleContent.
    ns4__CheckPointIdType                __item                        ;
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AbnormalTraffic is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficElement.
///
/// class ns5__AbnormalTraffic operations:
/// - ns5__AbnormalTraffic* soap_new_ns5__AbnormalTraffic(soap*) allocate and default initialize
/// - ns5__AbnormalTraffic* soap_new_ns5__AbnormalTraffic(soap*, int num) allocate array and default initialize values
/// - ns5__AbnormalTraffic* soap_new_req_ns5__AbnormalTraffic(soap*, ...) allocate, set required members
/// - ns5__AbnormalTraffic* soap_new_set_ns5__AbnormalTraffic(soap*, ...) allocate, set all public members
/// - ns5__AbnormalTraffic::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AbnormalTraffic(soap*, ns5__AbnormalTraffic*) deserialize from a stream
/// - int soap_write_ns5__AbnormalTraffic(soap*, ns5__AbnormalTraffic*) serialize to a stream
/// - ns5__AbnormalTraffic* ns5__AbnormalTraffic::soap_dup(soap*) returns deep copy of ns5__AbnormalTraffic, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AbnormalTraffic::soap_del() deep deletes ns5__AbnormalTraffic data members, use only after ns5__AbnormalTraffic::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AbnormalTraffic : public ns5__TrafficElement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/// Element "abnormalTrafficType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AbnormalTrafficTypeEnum.
    enum ns5__AbnormalTrafficTypeEnum*   abnormalTrafficType            0;	///< Optional element.
/// Element "numberOfVehiclesWaiting" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfVehiclesWaiting        0;	///< Optional element.
/// Element "queueLength" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsNonNegativeInteger.
    ns5__MetresAsNonNegativeInteger*     queueLength                    0;	///< Optional element.
/// Element "relativeTrafficFlow" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RelativeTrafficFlowEnum.
    enum ns5__RelativeTrafficFlowEnum*   relativeTrafficFlow            0;	///< Optional element.
/// Element "trafficFlowCharacteristics" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficFlowCharacteristicsEnum.
    enum ns5__TrafficFlowCharacteristicsEnum*  trafficFlowCharacteristics     0;	///< Optional element.
/// Element "trafficTrendType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficTrendTypeEnum.
    enum ns5__TrafficTrendTypeEnum*      trafficTrendType               0;	///< Optional element.
/// Element "abnormalTrafficExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  abnormalTrafficExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Accident is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficElement.
///
/// class ns5__Accident operations:
/// - ns5__Accident* soap_new_ns5__Accident(soap*) allocate and default initialize
/// - ns5__Accident* soap_new_ns5__Accident(soap*, int num) allocate array and default initialize values
/// - ns5__Accident* soap_new_req_ns5__Accident(soap*, ...) allocate, set required members
/// - ns5__Accident* soap_new_set_ns5__Accident(soap*, ...) allocate, set all public members
/// - ns5__Accident::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Accident(soap*, ns5__Accident*) deserialize from a stream
/// - int soap_write_ns5__Accident(soap*, ns5__Accident*) serialize to a stream
/// - ns5__Accident* ns5__Accident::soap_dup(soap*) returns deep copy of ns5__Accident, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Accident::soap_del() deep deletes ns5__Accident data members, use only after ns5__Accident::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Accident : public ns5__TrafficElement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/// Element "accidentCause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AccidentCauseEnum.
    enum ns5__AccidentCauseEnum*         accidentCause                  0;	///< Optional element.
/// Vector of enum ns5__AccidentTypeEnum of length 1..unbounded.
    std::vector<enum ns5__AccidentTypeEnum> accidentType                   1;
/// Element "totalNumberOfPeopleInvolved" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             totalNumberOfPeopleInvolved    0;	///< Optional element.
/// Element "totalNumberOfVehiclesInvolved" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             totalNumberOfVehiclesInvolved  0;	///< Optional element.
/// Vector of ns5__Vehicle* of length 0..unbounded.
    std::vector<ns5__Vehicle*          > vehicleInvolved                0;
/// Vector of ns5__GroupOfVehiclesInvolved* of length 0..unbounded.
    std::vector<ns5__GroupOfVehiclesInvolved*> groupOfVehiclesInvolved        0;
/// Vector of ns5__GroupOfPeopleInvolved* of length 0..unbounded.
    std::vector<ns5__GroupOfPeopleInvolved*> groupOfPeopleInvolved          0;
/// Element "accidentExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  accidentExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Activity is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficElement.
///
/// class ns5__Activity operations:
/// - ns5__Activity* soap_new_ns5__Activity(soap*) allocate and default initialize
/// - ns5__Activity* soap_new_ns5__Activity(soap*, int num) allocate array and default initialize values
/// - ns5__Activity* soap_new_req_ns5__Activity(soap*, ...) allocate, set required members
/// - ns5__Activity* soap_new_set_ns5__Activity(soap*, ...) allocate, set all public members
/// - ns5__Activity::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Activity(soap*, ns5__Activity*) deserialize from a stream
/// - int soap_write_ns5__Activity(soap*, ns5__Activity*) serialize to a stream
/// - ns5__Activity* ns5__Activity::soap_dup(soap*) returns deep copy of ns5__Activity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Activity::soap_del() deep deletes ns5__Activity data members, use only after ns5__Activity::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Activity : public ns5__TrafficElement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/// Element "mobilityOfActivity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfActivity             0;	///< Optional element.
/// Element "activityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  activityExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":CarParks is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonRoadEventInformation.
///
/// class ns5__CarParks operations:
/// - ns5__CarParks* soap_new_ns5__CarParks(soap*) allocate and default initialize
/// - ns5__CarParks* soap_new_ns5__CarParks(soap*, int num) allocate array and default initialize values
/// - ns5__CarParks* soap_new_req_ns5__CarParks(soap*, ...) allocate, set required members
/// - ns5__CarParks* soap_new_set_ns5__CarParks(soap*, ...) allocate, set all public members
/// - ns5__CarParks::soap_default(soap*) default initialize members
/// - int soap_read_ns5__CarParks(soap*, ns5__CarParks*) deserialize from a stream
/// - int soap_write_ns5__CarParks(soap*, ns5__CarParks*) serialize to a stream
/// - ns5__CarParks* ns5__CarParks::soap_dup(soap*) returns deep copy of ns5__CarParks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__CarParks::soap_del() deep deletes ns5__CarParks data members, use only after ns5__CarParks::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__CarParks : public ns5__NonRoadEventInformation
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__NonRoadEventInformation:
/// Element "nonRoadEventInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  nonRoadEventInformationExtension 0;	///< Optional element.
    END OF INHERITED FROM ns5__NonRoadEventInformation */
/// Element "carParkConfiguration" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":CarParkConfigurationEnum.
    enum ns5__CarParkConfigurationEnum*  carParkConfiguration           0;	///< Optional element.
/// Element "carParkIdentity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          carParkIdentity                1;	///< Required element.
/// Element "carParkOccupancy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     carParkOccupancy               0;	///< Optional element.
/// Element "carParkStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":CarParkStatusEnum.
    enum ns5__CarParkStatusEnum*         carParkStatus                  0;	///< Optional element.
/// Element "exitRate" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehiclesPerHour.
    ns5__VehiclesPerHour*                exitRate                       0;	///< Optional element.
/// Element "fillRate" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehiclesPerHour.
    ns5__VehiclesPerHour*                fillRate                       0;	///< Optional element.
/// Element "numberOfVacantParkingSpaces" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfVacantParkingSpaces    0;	///< Optional element.
/// Element "occupiedSpaces" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             occupiedSpaces                 0;	///< Optional element.
/// Element "queuingTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        queuingTime                    0;	///< Optional element.
/// Element "totalCapacity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             totalCapacity                  0;	///< Optional element.
/// Element "carParksExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  carParksExtension              0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Conditions is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficElement.
///
/// class ns5__Conditions operations:
/// - ns5__Conditions* soap_new_ns5__Conditions(soap*) allocate and default initialize
/// - ns5__Conditions* soap_new_ns5__Conditions(soap*, int num) allocate array and default initialize values
/// - ns5__Conditions* soap_new_req_ns5__Conditions(soap*, ...) allocate, set required members
/// - ns5__Conditions* soap_new_set_ns5__Conditions(soap*, ...) allocate, set all public members
/// - ns5__Conditions::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Conditions(soap*, ns5__Conditions*) deserialize from a stream
/// - int soap_write_ns5__Conditions(soap*, ns5__Conditions*) serialize to a stream
/// - ns5__Conditions* ns5__Conditions::soap_dup(soap*) returns deep copy of ns5__Conditions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Conditions::soap_del() deep deletes ns5__Conditions data members, use only after ns5__Conditions::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Conditions : public ns5__TrafficElement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/// Element "drivingConditionType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DrivingConditionTypeEnum.
    enum ns5__DrivingConditionTypeEnum*  drivingConditionType           0;	///< Optional element.
/// Element "conditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  conditionsExtension            0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":EquipmentOrSystemFault is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficElement.
///
/// class ns5__EquipmentOrSystemFault operations:
/// - ns5__EquipmentOrSystemFault* soap_new_ns5__EquipmentOrSystemFault(soap*) allocate and default initialize
/// - ns5__EquipmentOrSystemFault* soap_new_ns5__EquipmentOrSystemFault(soap*, int num) allocate array and default initialize values
/// - ns5__EquipmentOrSystemFault* soap_new_req_ns5__EquipmentOrSystemFault(soap*, ...) allocate, set required members
/// - ns5__EquipmentOrSystemFault* soap_new_set_ns5__EquipmentOrSystemFault(soap*, ...) allocate, set all public members
/// - ns5__EquipmentOrSystemFault::soap_default(soap*) default initialize members
/// - int soap_read_ns5__EquipmentOrSystemFault(soap*, ns5__EquipmentOrSystemFault*) deserialize from a stream
/// - int soap_write_ns5__EquipmentOrSystemFault(soap*, ns5__EquipmentOrSystemFault*) serialize to a stream
/// - ns5__EquipmentOrSystemFault* ns5__EquipmentOrSystemFault::soap_dup(soap*) returns deep copy of ns5__EquipmentOrSystemFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__EquipmentOrSystemFault::soap_del() deep deletes ns5__EquipmentOrSystemFault data members, use only after ns5__EquipmentOrSystemFault::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__EquipmentOrSystemFault : public ns5__TrafficElement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/// Element "equipmentOrSystemFaultType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":EquipmentOrSystemFaultTypeEnum.
    enum ns5__EquipmentOrSystemFaultTypeEnum  equipmentOrSystemFaultType     1;	///< Required element.
/// Element "faultyEquipmentOrSystemType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":EquipmentOrSystemTypeEnum.
    enum ns5__EquipmentOrSystemTypeEnum  faultyEquipmentOrSystemType    1;	///< Required element.
/// Element "equipmentOrSystemFaultExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  equipmentOrSystemFaultExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":HumidityInformation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":WeatherValue.
///
/// class ns5__HumidityInformation operations:
/// - ns5__HumidityInformation* soap_new_ns5__HumidityInformation(soap*) allocate and default initialize
/// - ns5__HumidityInformation* soap_new_ns5__HumidityInformation(soap*, int num) allocate array and default initialize values
/// - ns5__HumidityInformation* soap_new_req_ns5__HumidityInformation(soap*, ...) allocate, set required members
/// - ns5__HumidityInformation* soap_new_set_ns5__HumidityInformation(soap*, ...) allocate, set all public members
/// - ns5__HumidityInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__HumidityInformation(soap*, ns5__HumidityInformation*) deserialize from a stream
/// - int soap_write_ns5__HumidityInformation(soap*, ns5__HumidityInformation*) serialize to a stream
/// - ns5__HumidityInformation* ns5__HumidityInformation::soap_dup(soap*) returns deep copy of ns5__HumidityInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__HumidityInformation::soap_del() deep deletes ns5__HumidityInformation data members, use only after ns5__HumidityInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__HumidityInformation : public ns5__WeatherValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__WeatherValue:
/// Element "weatherValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__WeatherValue */
/// Element "humidity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Humidity.
    ns5__Humidity*                       humidity                       1;	///< Required element.
/// Element "humidityInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  humidityInformationExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":IndividualVehicleMeasurements is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficValue.
///
/// class ns5__IndividualVehicleMeasurements operations:
/// - ns5__IndividualVehicleMeasurements* soap_new_ns5__IndividualVehicleMeasurements(soap*) allocate and default initialize
/// - ns5__IndividualVehicleMeasurements* soap_new_ns5__IndividualVehicleMeasurements(soap*, int num) allocate array and default initialize values
/// - ns5__IndividualVehicleMeasurements* soap_new_req_ns5__IndividualVehicleMeasurements(soap*, ...) allocate, set required members
/// - ns5__IndividualVehicleMeasurements* soap_new_set_ns5__IndividualVehicleMeasurements(soap*, ...) allocate, set all public members
/// - ns5__IndividualVehicleMeasurements::soap_default(soap*) default initialize members
/// - int soap_read_ns5__IndividualVehicleMeasurements(soap*, ns5__IndividualVehicleMeasurements*) deserialize from a stream
/// - int soap_write_ns5__IndividualVehicleMeasurements(soap*, ns5__IndividualVehicleMeasurements*) serialize to a stream
/// - ns5__IndividualVehicleMeasurements* ns5__IndividualVehicleMeasurements::soap_dup(soap*) returns deep copy of ns5__IndividualVehicleMeasurements, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__IndividualVehicleMeasurements::soap_del() deep deletes ns5__IndividualVehicleMeasurements data members, use only after ns5__IndividualVehicleMeasurements::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__IndividualVehicleMeasurements : public ns5__TrafficValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__TrafficValue:
/// Element "forVehiclesWithCharacteristicsOf" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         forVehiclesWithCharacteristicsOf 0;	///< Optional element.
/// Element "trafficValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficValue */
/// Element "vehicleSpeed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleSpeed.
    ns5__VehicleSpeed*                   vehicleSpeed                   0;	///< Optional element.
/// Element "vehicleDetectionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleDetectionTime.
    ns5__VehicleDetectionTime*           vehicleDetectionTime           0;	///< Optional element.
/// Element "vehicleHeadway" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleHeadway.
    ns5__VehicleHeadway*                 vehicleHeadway                 0;	///< Optional element.
/// Element "individualVehicleMeasurementsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  individualVehicleMeasurementsExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Linear is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NetworkLocation.
///
/// class ns5__Linear operations:
/// - ns5__Linear* soap_new_ns5__Linear(soap*) allocate and default initialize
/// - ns5__Linear* soap_new_ns5__Linear(soap*, int num) allocate array and default initialize values
/// - ns5__Linear* soap_new_req_ns5__Linear(soap*, ...) allocate, set required members
/// - ns5__Linear* soap_new_set_ns5__Linear(soap*, ...) allocate, set all public members
/// - ns5__Linear::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Linear(soap*, ns5__Linear*) deserialize from a stream
/// - int soap_write_ns5__Linear(soap*, ns5__Linear*) serialize to a stream
/// - ns5__Linear* ns5__Linear::soap_dup(soap*) returns deep copy of ns5__Linear, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Linear::soap_del() deep deletes ns5__Linear data members, use only after ns5__Linear::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Linear : public ns5__NetworkLocation
{ public:
/*  INHERITED FROM ns5__Location:
/// Vector of ns5__ExternalReferencing* of length 0..unbounded.
    std::vector<ns5__ExternalReferencing*> externalReferencing            0;
/// Element "locationForDisplay" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               locationForDisplay             0;	///< Optional element.
/// Element "locationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationExtension              0;	///< Optional element.
    END OF INHERITED FROM ns5__Location */
/*  INHERITED FROM ns5__NetworkLocation:
/// Element "supplementaryPositionalDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SupplementaryPositionalDescription.
    ns5__SupplementaryPositionalDescription*  supplementaryPositionalDescription 0;	///< Optional element.
/// Element "destination" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Destination.
    ns5__Destination*                    destination                    0;	///< Optional element.
/// Element "networkLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkLocationExtension       0;	///< Optional element.
    END OF INHERITED FROM ns5__NetworkLocation */
/// Element "tpegLinearLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLinearLocation.
    ns5__TpegLinearLocation*             tpegLinearLocation             0;	///< Optional element.
/// Element "alertCLinear" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCLinear.
    ns5__AlertCLinear*                   alertCLinear                   0;	///< Optional element.
/// Element "roadsideReferencePointLinear" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePointLinear.
    ns5__RoadsideReferencePointLinear*   roadsideReferencePointLinear   0;	///< Optional element.
/// Element "linearExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  linearExtension                0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MultilingualStringValue is a complexType with simpleContent.
///
/// class ns5__MultilingualStringValue operations:
/// - ns5__MultilingualStringValue* soap_new_ns5__MultilingualStringValue(soap*) allocate and default initialize
/// - ns5__MultilingualStringValue* soap_new_ns5__MultilingualStringValue(soap*, int num) allocate array and default initialize values
/// - ns5__MultilingualStringValue* soap_new_req_ns5__MultilingualStringValue(soap*, ...) allocate, set required members
/// - ns5__MultilingualStringValue* soap_new_set_ns5__MultilingualStringValue(soap*, ...) allocate, set all public members
/// - ns5__MultilingualStringValue::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MultilingualStringValue(soap*, ns5__MultilingualStringValue*) deserialize from a stream
/// - int soap_write_ns5__MultilingualStringValue(soap*, ns5__MultilingualStringValue*) serialize to a stream
/// - ns5__MultilingualStringValue* ns5__MultilingualStringValue::soap_dup(soap*) returns deep copy of ns5__MultilingualStringValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MultilingualStringValue::soap_del() deep deletes ns5__MultilingualStringValue data members, use only after ns5__MultilingualStringValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MultilingualStringValue : public xsd__anyType
{ public:
/// __item wraps ""http://datex2.eu/schema/2_0RC1/2_0":MultilingualStringValueType" simpleContent.
    ns5__MultilingualStringValueType     __item                        ;
/// Attribute "lang" of XSD type xs:language.
   @xsd__language*                       lang                           0;	///< Optional attribute.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":NetworkManagement is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorAction.
///
/// class ns5__NetworkManagement operations:
/// - ns5__NetworkManagement* soap_new_ns5__NetworkManagement(soap*) allocate and default initialize
/// - ns5__NetworkManagement* soap_new_ns5__NetworkManagement(soap*, int num) allocate array and default initialize values
/// - ns5__NetworkManagement* soap_new_req_ns5__NetworkManagement(soap*, ...) allocate, set required members
/// - ns5__NetworkManagement* soap_new_set_ns5__NetworkManagement(soap*, ...) allocate, set all public members
/// - ns5__NetworkManagement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__NetworkManagement(soap*, ns5__NetworkManagement*) deserialize from a stream
/// - int soap_write_ns5__NetworkManagement(soap*, ns5__NetworkManagement*) serialize to a stream
/// - ns5__NetworkManagement* ns5__NetworkManagement::soap_dup(soap*) returns deep copy of ns5__NetworkManagement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__NetworkManagement::soap_del() deep deletes ns5__NetworkManagement data members, use only after ns5__NetworkManagement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__NetworkManagement : public ns5__OperatorAction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/// Element "complianceOption" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComplianceOptionEnum.
    enum ns5__ComplianceOptionEnum       complianceOption               1;	///< Required element.
/// Vector of enum ns5__DirectionEnum of length 0..unbounded.
    std::vector<enum ns5__DirectionEnum> applicableForTrafficDirection  0;
/// Vector of enum ns5__TrafficTypeEnum of length 0..unbounded.
    std::vector<enum ns5__TrafficTypeEnum> applicableForTrafficType       0;
/// Vector of enum ns5__PlacesEnum of length 0..unbounded.
    std::vector<enum ns5__PlacesEnum   > placesAtWhichApplicable        0;
/// Element "automaticallyInitiated" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        automaticallyInitiated         0;	///< Optional element.
/// Vector of ns5__VehicleCharacteristics* of length 0..unbounded.
    std::vector<ns5__VehicleCharacteristics*> forVehiclesWithCharacteristicsOf 0;
/// Element "networkManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkManagementExtension     0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Obstruction is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficElement.
///
/// class ns5__Obstruction operations:
/// - ns5__Obstruction* soap_new_ns5__Obstruction(soap*) allocate and default initialize
/// - ns5__Obstruction* soap_new_ns5__Obstruction(soap*, int num) allocate array and default initialize values
/// - ns5__Obstruction* soap_new_req_ns5__Obstruction(soap*, ...) allocate, set required members
/// - ns5__Obstruction* soap_new_set_ns5__Obstruction(soap*, ...) allocate, set all public members
/// - ns5__Obstruction::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Obstruction(soap*, ns5__Obstruction*) deserialize from a stream
/// - int soap_write_ns5__Obstruction(soap*, ns5__Obstruction*) serialize to a stream
/// - ns5__Obstruction* ns5__Obstruction::soap_dup(soap*) returns deep copy of ns5__Obstruction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Obstruction::soap_del() deep deletes ns5__Obstruction data members, use only after ns5__Obstruction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Obstruction : public ns5__TrafficElement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/// Element "numberOfObstructions" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfObstructions           0;	///< Optional element.
/// Element "mobilityOfObstruction" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfObstruction          0;	///< Optional element.
/// Element "obstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  obstructionExtension           0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Point is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NetworkLocation.
///
/// class ns5__Point operations:
/// - ns5__Point* soap_new_ns5__Point(soap*) allocate and default initialize
/// - ns5__Point* soap_new_ns5__Point(soap*, int num) allocate array and default initialize values
/// - ns5__Point* soap_new_req_ns5__Point(soap*, ...) allocate, set required members
/// - ns5__Point* soap_new_set_ns5__Point(soap*, ...) allocate, set all public members
/// - ns5__Point::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Point(soap*, ns5__Point*) deserialize from a stream
/// - int soap_write_ns5__Point(soap*, ns5__Point*) serialize to a stream
/// - ns5__Point* ns5__Point::soap_dup(soap*) returns deep copy of ns5__Point, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Point::soap_del() deep deletes ns5__Point data members, use only after ns5__Point::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Point : public ns5__NetworkLocation
{ public:
/*  INHERITED FROM ns5__Location:
/// Vector of ns5__ExternalReferencing* of length 0..unbounded.
    std::vector<ns5__ExternalReferencing*> externalReferencing            0;
/// Element "locationForDisplay" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointCoordinates.
    ns5__PointCoordinates*               locationForDisplay             0;	///< Optional element.
/// Element "locationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  locationExtension              0;	///< Optional element.
    END OF INHERITED FROM ns5__Location */
/*  INHERITED FROM ns5__NetworkLocation:
/// Element "supplementaryPositionalDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SupplementaryPositionalDescription.
    ns5__SupplementaryPositionalDescription*  supplementaryPositionalDescription 0;	///< Optional element.
/// Element "destination" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Destination.
    ns5__Destination*                    destination                    0;	///< Optional element.
/// Element "networkLocationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkLocationExtension       0;	///< Optional element.
    END OF INHERITED FROM ns5__NetworkLocation */
/// Element "tpegPointLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPointLocation.
    ns5__TpegPointLocation*              tpegPointLocation              0;	///< Optional element.
/// Element "alertCPoint" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AlertCPoint.
    ns5__AlertCPoint*                    alertCPoint                    0;	///< Optional element.
/// Element "roadsideReferencePoint" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadsideReferencePoint.
    ns5__RoadsideReferencePoint*         roadsideReferencePoint         0;	///< Optional element.
/// Element "pointByCoordinates" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PointByCoordinates.
    ns5__PointByCoordinates*             pointByCoordinates             0;	///< Optional element.
/// Element "pointExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  pointExtension                 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PollutionInformation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":WeatherValue.
///
/// class ns5__PollutionInformation operations:
/// - ns5__PollutionInformation* soap_new_ns5__PollutionInformation(soap*) allocate and default initialize
/// - ns5__PollutionInformation* soap_new_ns5__PollutionInformation(soap*, int num) allocate array and default initialize values
/// - ns5__PollutionInformation* soap_new_req_ns5__PollutionInformation(soap*, ...) allocate, set required members
/// - ns5__PollutionInformation* soap_new_set_ns5__PollutionInformation(soap*, ...) allocate, set all public members
/// - ns5__PollutionInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PollutionInformation(soap*, ns5__PollutionInformation*) deserialize from a stream
/// - int soap_write_ns5__PollutionInformation(soap*, ns5__PollutionInformation*) serialize to a stream
/// - ns5__PollutionInformation* ns5__PollutionInformation::soap_dup(soap*) returns deep copy of ns5__PollutionInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PollutionInformation::soap_del() deep deletes ns5__PollutionInformation data members, use only after ns5__PollutionInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PollutionInformation : public ns5__WeatherValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__WeatherValue:
/// Element "weatherValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__WeatherValue */
/// Vector of ns5__PollutionMeasurement* of length 1..unbounded.
    std::vector<ns5__PollutionMeasurement*> pollutionMeasurement           1;
/// Element "pollutionInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  pollutionInformationExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PrecipitationInformation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":WeatherValue.
///
/// class ns5__PrecipitationInformation operations:
/// - ns5__PrecipitationInformation* soap_new_ns5__PrecipitationInformation(soap*) allocate and default initialize
/// - ns5__PrecipitationInformation* soap_new_ns5__PrecipitationInformation(soap*, int num) allocate array and default initialize values
/// - ns5__PrecipitationInformation* soap_new_req_ns5__PrecipitationInformation(soap*, ...) allocate, set required members
/// - ns5__PrecipitationInformation* soap_new_set_ns5__PrecipitationInformation(soap*, ...) allocate, set all public members
/// - ns5__PrecipitationInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PrecipitationInformation(soap*, ns5__PrecipitationInformation*) deserialize from a stream
/// - int soap_write_ns5__PrecipitationInformation(soap*, ns5__PrecipitationInformation*) serialize to a stream
/// - ns5__PrecipitationInformation* ns5__PrecipitationInformation::soap_dup(soap*) returns deep copy of ns5__PrecipitationInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PrecipitationInformation::soap_del() deep deletes ns5__PrecipitationInformation data members, use only after ns5__PrecipitationInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PrecipitationInformation : public ns5__WeatherValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__WeatherValue:
/// Element "weatherValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__WeatherValue */
/// Element "noPrecipitation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        noPrecipitation                0;	///< Optional element.
/// Element "precipitationDetail" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PrecipitationDetail.
    ns5__PrecipitationDetail*            precipitationDetail            0;	///< Optional element.
/// Element "precipitationInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  precipitationInformationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadOperatorServiceDisruption is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonRoadEventInformation.
///
/// class ns5__RoadOperatorServiceDisruption operations:
/// - ns5__RoadOperatorServiceDisruption* soap_new_ns5__RoadOperatorServiceDisruption(soap*) allocate and default initialize
/// - ns5__RoadOperatorServiceDisruption* soap_new_ns5__RoadOperatorServiceDisruption(soap*, int num) allocate array and default initialize values
/// - ns5__RoadOperatorServiceDisruption* soap_new_req_ns5__RoadOperatorServiceDisruption(soap*, ...) allocate, set required members
/// - ns5__RoadOperatorServiceDisruption* soap_new_set_ns5__RoadOperatorServiceDisruption(soap*, ...) allocate, set all public members
/// - ns5__RoadOperatorServiceDisruption::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadOperatorServiceDisruption(soap*, ns5__RoadOperatorServiceDisruption*) deserialize from a stream
/// - int soap_write_ns5__RoadOperatorServiceDisruption(soap*, ns5__RoadOperatorServiceDisruption*) serialize to a stream
/// - ns5__RoadOperatorServiceDisruption* ns5__RoadOperatorServiceDisruption::soap_dup(soap*) returns deep copy of ns5__RoadOperatorServiceDisruption, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadOperatorServiceDisruption::soap_del() deep deletes ns5__RoadOperatorServiceDisruption data members, use only after ns5__RoadOperatorServiceDisruption::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadOperatorServiceDisruption : public ns5__NonRoadEventInformation
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__NonRoadEventInformation:
/// Element "nonRoadEventInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  nonRoadEventInformationExtension 0;	///< Optional element.
    END OF INHERITED FROM ns5__NonRoadEventInformation */
/// Vector of enum ns5__RoadOperatorServiceDisruptionTypeEnum of length 1..unbounded.
    std::vector<enum ns5__RoadOperatorServiceDisruptionTypeEnum> roadOperatorServiceDisruptionType 1;
/// Element "roadOperatorServiceDisruptionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadOperatorServiceDisruptionExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadsideAssistance is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorAction.
///
/// class ns5__RoadsideAssistance operations:
/// - ns5__RoadsideAssistance* soap_new_ns5__RoadsideAssistance(soap*) allocate and default initialize
/// - ns5__RoadsideAssistance* soap_new_ns5__RoadsideAssistance(soap*, int num) allocate array and default initialize values
/// - ns5__RoadsideAssistance* soap_new_req_ns5__RoadsideAssistance(soap*, ...) allocate, set required members
/// - ns5__RoadsideAssistance* soap_new_set_ns5__RoadsideAssistance(soap*, ...) allocate, set all public members
/// - ns5__RoadsideAssistance::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadsideAssistance(soap*, ns5__RoadsideAssistance*) deserialize from a stream
/// - int soap_write_ns5__RoadsideAssistance(soap*, ns5__RoadsideAssistance*) serialize to a stream
/// - ns5__RoadsideAssistance* ns5__RoadsideAssistance::soap_dup(soap*) returns deep copy of ns5__RoadsideAssistance, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadsideAssistance::soap_del() deep deletes ns5__RoadsideAssistance data members, use only after ns5__RoadsideAssistance::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadsideAssistance : public ns5__OperatorAction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/// Element "roadsideAssistanceType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadsideAssistanceTypeEnum.
    enum ns5__RoadsideAssistanceTypeEnum  roadsideAssistanceType         1;	///< Required element.
/// Element "roadsideAssistanceExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadsideAssistanceExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadsideServiceDisruption is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonRoadEventInformation.
///
/// class ns5__RoadsideServiceDisruption operations:
/// - ns5__RoadsideServiceDisruption* soap_new_ns5__RoadsideServiceDisruption(soap*) allocate and default initialize
/// - ns5__RoadsideServiceDisruption* soap_new_ns5__RoadsideServiceDisruption(soap*, int num) allocate array and default initialize values
/// - ns5__RoadsideServiceDisruption* soap_new_req_ns5__RoadsideServiceDisruption(soap*, ...) allocate, set required members
/// - ns5__RoadsideServiceDisruption* soap_new_set_ns5__RoadsideServiceDisruption(soap*, ...) allocate, set all public members
/// - ns5__RoadsideServiceDisruption::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadsideServiceDisruption(soap*, ns5__RoadsideServiceDisruption*) deserialize from a stream
/// - int soap_write_ns5__RoadsideServiceDisruption(soap*, ns5__RoadsideServiceDisruption*) serialize to a stream
/// - ns5__RoadsideServiceDisruption* ns5__RoadsideServiceDisruption::soap_dup(soap*) returns deep copy of ns5__RoadsideServiceDisruption, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadsideServiceDisruption::soap_del() deep deletes ns5__RoadsideServiceDisruption data members, use only after ns5__RoadsideServiceDisruption::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadsideServiceDisruption : public ns5__NonRoadEventInformation
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__NonRoadEventInformation:
/// Element "nonRoadEventInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  nonRoadEventInformationExtension 0;	///< Optional element.
    END OF INHERITED FROM ns5__NonRoadEventInformation */
/// Vector of enum ns5__RoadsideServiceDisruptionTypeEnum of length 1..unbounded.
    std::vector<enum ns5__RoadsideServiceDisruptionTypeEnum> roadsideServiceDisruptionType  1;
/// Element "roadsideServiceDisruptionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadsideServiceDisruptionExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadSurfaceConditionInformation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":WeatherValue.
///
/// class ns5__RoadSurfaceConditionInformation operations:
/// - ns5__RoadSurfaceConditionInformation* soap_new_ns5__RoadSurfaceConditionInformation(soap*) allocate and default initialize
/// - ns5__RoadSurfaceConditionInformation* soap_new_ns5__RoadSurfaceConditionInformation(soap*, int num) allocate array and default initialize values
/// - ns5__RoadSurfaceConditionInformation* soap_new_req_ns5__RoadSurfaceConditionInformation(soap*, ...) allocate, set required members
/// - ns5__RoadSurfaceConditionInformation* soap_new_set_ns5__RoadSurfaceConditionInformation(soap*, ...) allocate, set all public members
/// - ns5__RoadSurfaceConditionInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadSurfaceConditionInformation(soap*, ns5__RoadSurfaceConditionInformation*) deserialize from a stream
/// - int soap_write_ns5__RoadSurfaceConditionInformation(soap*, ns5__RoadSurfaceConditionInformation*) serialize to a stream
/// - ns5__RoadSurfaceConditionInformation* ns5__RoadSurfaceConditionInformation::soap_dup(soap*) returns deep copy of ns5__RoadSurfaceConditionInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadSurfaceConditionInformation::soap_del() deep deletes ns5__RoadSurfaceConditionInformation data members, use only after ns5__RoadSurfaceConditionInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadSurfaceConditionInformation : public ns5__WeatherValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__WeatherValue:
/// Element "weatherValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__WeatherValue */
/// Element "roadSurfaceConditionMeasurements" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadSurfaceConditionMeasurements.
    ns5__RoadSurfaceConditionMeasurements*  roadSurfaceConditionMeasurements 1;	///< Required element.
/// Element "roadSurfaceConditionInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadSurfaceConditionInformationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":Roadworks is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorAction.
///
/// class ns5__Roadworks operations:
/// - ns5__Roadworks* soap_new_ns5__Roadworks(soap*) allocate and default initialize
/// - ns5__Roadworks* soap_new_ns5__Roadworks(soap*, int num) allocate array and default initialize values
/// - ns5__Roadworks* soap_new_req_ns5__Roadworks(soap*, ...) allocate, set required members
/// - ns5__Roadworks* soap_new_set_ns5__Roadworks(soap*, ...) allocate, set all public members
/// - ns5__Roadworks::soap_default(soap*) default initialize members
/// - int soap_read_ns5__Roadworks(soap*, ns5__Roadworks*) deserialize from a stream
/// - int soap_write_ns5__Roadworks(soap*, ns5__Roadworks*) serialize to a stream
/// - ns5__Roadworks* ns5__Roadworks::soap_dup(soap*) returns deep copy of ns5__Roadworks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__Roadworks::soap_del() deep deletes ns5__Roadworks data members, use only after ns5__Roadworks::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__Roadworks : public ns5__OperatorAction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/// Element "roadworksDuration" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadworksDurationEnum.
    enum ns5__RoadworksDurationEnum*     roadworksDuration              0;	///< Optional element.
/// Element "roadworksScale" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadworksScaleEnum.
    enum ns5__RoadworksScaleEnum*        roadworksScale                 0;	///< Optional element.
/// Element "underTraffic" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        underTraffic                   0;	///< Optional element.
/// Element "urgentRoadworks" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        urgentRoadworks                0;	///< Optional element.
/// Element "mobility" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobility                       0;	///< Optional element.
/// Element "subjects" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Subjects.
    ns5__Subjects*                       subjects                       0;	///< Optional element.
/// Element "maintenanceVehicles" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MaintenanceVehicles.
    ns5__MaintenanceVehicles*            maintenanceVehicles            0;	///< Optional element.
/// Element "roadworksExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadworksExtension             0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SignSetting is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorAction.
///
/// class ns5__SignSetting operations:
/// - ns5__SignSetting* soap_new_ns5__SignSetting(soap*) allocate and default initialize
/// - ns5__SignSetting* soap_new_ns5__SignSetting(soap*, int num) allocate array and default initialize values
/// - ns5__SignSetting* soap_new_req_ns5__SignSetting(soap*, ...) allocate, set required members
/// - ns5__SignSetting* soap_new_set_ns5__SignSetting(soap*, ...) allocate, set all public members
/// - ns5__SignSetting::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SignSetting(soap*, ns5__SignSetting*) deserialize from a stream
/// - int soap_write_ns5__SignSetting(soap*, ns5__SignSetting*) serialize to a stream
/// - ns5__SignSetting* ns5__SignSetting::soap_dup(soap*) returns deep copy of ns5__SignSetting, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignSetting::soap_del() deep deletes ns5__SignSetting data members, use only after ns5__SignSetting::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignSetting : public ns5__OperatorAction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/// Vector of enum ns5__DatexPictogramEnum of length 0..2.
    std::vector<enum ns5__DatexPictogramEnum> datexPictogram                 0:2;
/// Element "pictogramList" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         pictogramList                  0;	///< Optional element.
/// Vector of ns5__String of length 0..2.
    std::vector<ns5__String            > pictogramListEntry             0:2;
/// Element "reasonForSetting" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             reasonForSetting               0;	///< Optional element.
/// Element "setBy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             setBy                          0;	///< Optional element.
/// Element "signAddress" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         signAddress                    0;	///< Optional element.
/// Element "timeLastSet" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       timeLastSet                    0;	///< Optional element.
/// Element "signSettingExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  signSettingExtension           0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TemperatureInformation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":WeatherValue.
///
/// class ns5__TemperatureInformation operations:
/// - ns5__TemperatureInformation* soap_new_ns5__TemperatureInformation(soap*) allocate and default initialize
/// - ns5__TemperatureInformation* soap_new_ns5__TemperatureInformation(soap*, int num) allocate array and default initialize values
/// - ns5__TemperatureInformation* soap_new_req_ns5__TemperatureInformation(soap*, ...) allocate, set required members
/// - ns5__TemperatureInformation* soap_new_set_ns5__TemperatureInformation(soap*, ...) allocate, set all public members
/// - ns5__TemperatureInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TemperatureInformation(soap*, ns5__TemperatureInformation*) deserialize from a stream
/// - int soap_write_ns5__TemperatureInformation(soap*, ns5__TemperatureInformation*) serialize to a stream
/// - ns5__TemperatureInformation* ns5__TemperatureInformation::soap_dup(soap*) returns deep copy of ns5__TemperatureInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TemperatureInformation::soap_del() deep deletes ns5__TemperatureInformation data members, use only after ns5__TemperatureInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TemperatureInformation : public ns5__WeatherValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__WeatherValue:
/// Element "weatherValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__WeatherValue */
/// Element "temperature" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Temperature.
    ns5__Temperature*                    temperature                    1;	///< Required element.
/// Element "temperatureInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  temperatureInformationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegIlcPointDescriptor is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPointDescriptor.
///
/// class ns5__TpegIlcPointDescriptor operations:
/// - ns5__TpegIlcPointDescriptor* soap_new_ns5__TpegIlcPointDescriptor(soap*) allocate and default initialize
/// - ns5__TpegIlcPointDescriptor* soap_new_ns5__TpegIlcPointDescriptor(soap*, int num) allocate array and default initialize values
/// - ns5__TpegIlcPointDescriptor* soap_new_req_ns5__TpegIlcPointDescriptor(soap*, ...) allocate, set required members
/// - ns5__TpegIlcPointDescriptor* soap_new_set_ns5__TpegIlcPointDescriptor(soap*, ...) allocate, set all public members
/// - ns5__TpegIlcPointDescriptor::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegIlcPointDescriptor(soap*, ns5__TpegIlcPointDescriptor*) deserialize from a stream
/// - int soap_write_ns5__TpegIlcPointDescriptor(soap*, ns5__TpegIlcPointDescriptor*) serialize to a stream
/// - ns5__TpegIlcPointDescriptor* ns5__TpegIlcPointDescriptor::soap_dup(soap*) returns deep copy of ns5__TpegIlcPointDescriptor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegIlcPointDescriptor::soap_del() deep deletes ns5__TpegIlcPointDescriptor data members, use only after ns5__TpegIlcPointDescriptor::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegIlcPointDescriptor : public ns5__TpegPointDescriptor
{ public:
/*  INHERITED FROM ns5__TpegDescriptor:
/// Element "descriptor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             descriptor                     1;	///< Required element.
/// Element "tpegDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegDescriptorExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegDescriptor */
/*  INHERITED FROM ns5__TpegPointDescriptor:
/// Element "tpegPointDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointDescriptorExtension   0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegPointDescriptor */
/// Element "tpegIlcPointDescriptorType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc03IlcPointDescriptorSubtypeEnum.
    enum ns5__TpegLoc03IlcPointDescriptorSubtypeEnum  tpegIlcPointDescriptorType     1;	///< Required element.
/// Element "tpegIlcPointDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegIlcPointDescriptorExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegJunctionPointDescriptor is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPointDescriptor.
///
/// class ns5__TpegJunctionPointDescriptor operations:
/// - ns5__TpegJunctionPointDescriptor* soap_new_ns5__TpegJunctionPointDescriptor(soap*) allocate and default initialize
/// - ns5__TpegJunctionPointDescriptor* soap_new_ns5__TpegJunctionPointDescriptor(soap*, int num) allocate array and default initialize values
/// - ns5__TpegJunctionPointDescriptor* soap_new_req_ns5__TpegJunctionPointDescriptor(soap*, ...) allocate, set required members
/// - ns5__TpegJunctionPointDescriptor* soap_new_set_ns5__TpegJunctionPointDescriptor(soap*, ...) allocate, set all public members
/// - ns5__TpegJunctionPointDescriptor::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegJunctionPointDescriptor(soap*, ns5__TpegJunctionPointDescriptor*) deserialize from a stream
/// - int soap_write_ns5__TpegJunctionPointDescriptor(soap*, ns5__TpegJunctionPointDescriptor*) serialize to a stream
/// - ns5__TpegJunctionPointDescriptor* ns5__TpegJunctionPointDescriptor::soap_dup(soap*) returns deep copy of ns5__TpegJunctionPointDescriptor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegJunctionPointDescriptor::soap_del() deep deletes ns5__TpegJunctionPointDescriptor data members, use only after ns5__TpegJunctionPointDescriptor::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegJunctionPointDescriptor : public ns5__TpegPointDescriptor
{ public:
/*  INHERITED FROM ns5__TpegDescriptor:
/// Element "descriptor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             descriptor                     1;	///< Required element.
/// Element "tpegDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegDescriptorExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegDescriptor */
/*  INHERITED FROM ns5__TpegPointDescriptor:
/// Element "tpegPointDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointDescriptorExtension   0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegPointDescriptor */
/// Element "tpegJunctionPointDescriptorType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc03JunctionPointDescriptorSubtypeEnum.
    enum ns5__TpegLoc03JunctionPointDescriptorSubtypeEnum  tpegJunctionPointDescriptorType 1;	///< Required element.
/// Element "tpegJunctionPointDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegJunctionPointDescriptorExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TpegOtherPointDescriptor is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegPointDescriptor.
///
/// class ns5__TpegOtherPointDescriptor operations:
/// - ns5__TpegOtherPointDescriptor* soap_new_ns5__TpegOtherPointDescriptor(soap*) allocate and default initialize
/// - ns5__TpegOtherPointDescriptor* soap_new_ns5__TpegOtherPointDescriptor(soap*, int num) allocate array and default initialize values
/// - ns5__TpegOtherPointDescriptor* soap_new_req_ns5__TpegOtherPointDescriptor(soap*, ...) allocate, set required members
/// - ns5__TpegOtherPointDescriptor* soap_new_set_ns5__TpegOtherPointDescriptor(soap*, ...) allocate, set all public members
/// - ns5__TpegOtherPointDescriptor::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TpegOtherPointDescriptor(soap*, ns5__TpegOtherPointDescriptor*) deserialize from a stream
/// - int soap_write_ns5__TpegOtherPointDescriptor(soap*, ns5__TpegOtherPointDescriptor*) serialize to a stream
/// - ns5__TpegOtherPointDescriptor* ns5__TpegOtherPointDescriptor::soap_dup(soap*) returns deep copy of ns5__TpegOtherPointDescriptor, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TpegOtherPointDescriptor::soap_del() deep deletes ns5__TpegOtherPointDescriptor data members, use only after ns5__TpegOtherPointDescriptor::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TpegOtherPointDescriptor : public ns5__TpegPointDescriptor
{ public:
/*  INHERITED FROM ns5__TpegDescriptor:
/// Element "descriptor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             descriptor                     1;	///< Required element.
/// Element "tpegDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegDescriptorExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegDescriptor */
/*  INHERITED FROM ns5__TpegPointDescriptor:
/// Element "tpegPointDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegPointDescriptorExtension   0;	///< Optional element.
    END OF INHERITED FROM ns5__TpegPointDescriptor */
/// Element "tpegOtherPointDescriptorType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TpegLoc03OtherPointDescriptorSubtypeEnum.
    enum ns5__TpegLoc03OtherPointDescriptorSubtypeEnum  tpegOtherPointDescriptorType   1;	///< Required element.
/// Element "tpegOtherPointDescriptorExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  tpegOtherPointDescriptorExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficConcentration is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficValue.
///
/// class ns5__TrafficConcentration operations:
/// - ns5__TrafficConcentration* soap_new_ns5__TrafficConcentration(soap*) allocate and default initialize
/// - ns5__TrafficConcentration* soap_new_ns5__TrafficConcentration(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficConcentration* soap_new_req_ns5__TrafficConcentration(soap*, ...) allocate, set required members
/// - ns5__TrafficConcentration* soap_new_set_ns5__TrafficConcentration(soap*, ...) allocate, set all public members
/// - ns5__TrafficConcentration::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficConcentration(soap*, ns5__TrafficConcentration*) deserialize from a stream
/// - int soap_write_ns5__TrafficConcentration(soap*, ns5__TrafficConcentration*) serialize to a stream
/// - ns5__TrafficConcentration* ns5__TrafficConcentration::soap_dup(soap*) returns deep copy of ns5__TrafficConcentration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficConcentration::soap_del() deep deletes ns5__TrafficConcentration data members, use only after ns5__TrafficConcentration::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficConcentration : public ns5__TrafficValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__TrafficValue:
/// Element "forVehiclesWithCharacteristicsOf" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         forVehiclesWithCharacteristicsOf 0;	///< Optional element.
/// Element "trafficValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficValue */
/// Element "concentration" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConcentrationVehiclesPerKilometre.
    ns5__ConcentrationVehiclesPerKilometre*  concentration                  0;	///< Optional element.
/// Element "occupancy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     occupancy                      0;	///< Optional element.
/// Element "trafficConcentrationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficConcentrationExtension  0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficFlow is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficValue.
///
/// class ns5__TrafficFlow operations:
/// - ns5__TrafficFlow* soap_new_ns5__TrafficFlow(soap*) allocate and default initialize
/// - ns5__TrafficFlow* soap_new_ns5__TrafficFlow(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficFlow* soap_new_req_ns5__TrafficFlow(soap*, ...) allocate, set required members
/// - ns5__TrafficFlow* soap_new_set_ns5__TrafficFlow(soap*, ...) allocate, set all public members
/// - ns5__TrafficFlow::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficFlow(soap*, ns5__TrafficFlow*) deserialize from a stream
/// - int soap_write_ns5__TrafficFlow(soap*, ns5__TrafficFlow*) serialize to a stream
/// - ns5__TrafficFlow* ns5__TrafficFlow::soap_dup(soap*) returns deep copy of ns5__TrafficFlow, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficFlow::soap_del() deep deletes ns5__TrafficFlow data members, use only after ns5__TrafficFlow::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficFlow : public ns5__TrafficValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__TrafficValue:
/// Element "forVehiclesWithCharacteristicsOf" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         forVehiclesWithCharacteristicsOf 0;	///< Optional element.
/// Element "trafficValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficValue */
/// Element "axleFlow" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AxlesPerHour.
    ns5__AxlesPerHour*                   axleFlow                       0;	///< Optional element.
/// Element "pcuFlow" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PassengerCarUnitsPerHour.
    ns5__PassengerCarUnitsPerHour*       pcuFlow                        0;	///< Optional element.
/// Element "percentageLongVehicles" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     percentageLongVehicles         0;	///< Optional element.
/// Element "vehicleFlow" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehiclesPerHour.
    ns5__VehiclesPerHour*                vehicleFlow                    0;	///< Optional element.
/// Element "trafficFlowExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficFlowExtension           0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficHeadway is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficValue.
///
/// class ns5__TrafficHeadway operations:
/// - ns5__TrafficHeadway* soap_new_ns5__TrafficHeadway(soap*) allocate and default initialize
/// - ns5__TrafficHeadway* soap_new_ns5__TrafficHeadway(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficHeadway* soap_new_req_ns5__TrafficHeadway(soap*, ...) allocate, set required members
/// - ns5__TrafficHeadway* soap_new_set_ns5__TrafficHeadway(soap*, ...) allocate, set all public members
/// - ns5__TrafficHeadway::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficHeadway(soap*, ns5__TrafficHeadway*) deserialize from a stream
/// - int soap_write_ns5__TrafficHeadway(soap*, ns5__TrafficHeadway*) serialize to a stream
/// - ns5__TrafficHeadway* ns5__TrafficHeadway::soap_dup(soap*) returns deep copy of ns5__TrafficHeadway, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficHeadway::soap_del() deep deletes ns5__TrafficHeadway data members, use only after ns5__TrafficHeadway::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficHeadway : public ns5__TrafficValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__TrafficValue:
/// Element "forVehiclesWithCharacteristicsOf" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         forVehiclesWithCharacteristicsOf 0;	///< Optional element.
/// Element "trafficValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficValue */
/// Element "averageDistanceHeadway" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  averageDistanceHeadway         0;	///< Optional element.
/// Element "averageTimeHeadway" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        averageTimeHeadway             0;	///< Optional element.
/// Element "trafficHeadwayExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficHeadwayExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TrafficSpeed is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TrafficValue.
///
/// class ns5__TrafficSpeed operations:
/// - ns5__TrafficSpeed* soap_new_ns5__TrafficSpeed(soap*) allocate and default initialize
/// - ns5__TrafficSpeed* soap_new_ns5__TrafficSpeed(soap*, int num) allocate array and default initialize values
/// - ns5__TrafficSpeed* soap_new_req_ns5__TrafficSpeed(soap*, ...) allocate, set required members
/// - ns5__TrafficSpeed* soap_new_set_ns5__TrafficSpeed(soap*, ...) allocate, set all public members
/// - ns5__TrafficSpeed::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TrafficSpeed(soap*, ns5__TrafficSpeed*) deserialize from a stream
/// - int soap_write_ns5__TrafficSpeed(soap*, ns5__TrafficSpeed*) serialize to a stream
/// - ns5__TrafficSpeed* ns5__TrafficSpeed::soap_dup(soap*) returns deep copy of ns5__TrafficSpeed, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TrafficSpeed::soap_del() deep deletes ns5__TrafficSpeed data members, use only after ns5__TrafficSpeed::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TrafficSpeed : public ns5__TrafficValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__TrafficValue:
/// Element "forVehiclesWithCharacteristicsOf" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleCharacteristics.
    ns5__VehicleCharacteristics*         forVehiclesWithCharacteristicsOf 0;	///< Optional element.
/// Element "trafficValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficValue */
/// Element "averageVehicleSpeed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":KilometresPerHour.
    ns5__KilometresPerHour*              averageVehicleSpeed            0;	///< Optional element.
/// Element "speedPercentile" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SpeedPercentile.
    ns5__SpeedPercentile*                speedPercentile                0;	///< Optional element.
/// Element "trafficSpeedExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficSpeedExtension          0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":TransitInformation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonRoadEventInformation.
///
/// class ns5__TransitInformation operations:
/// - ns5__TransitInformation* soap_new_ns5__TransitInformation(soap*) allocate and default initialize
/// - ns5__TransitInformation* soap_new_ns5__TransitInformation(soap*, int num) allocate array and default initialize values
/// - ns5__TransitInformation* soap_new_req_ns5__TransitInformation(soap*, ...) allocate, set required members
/// - ns5__TransitInformation* soap_new_set_ns5__TransitInformation(soap*, ...) allocate, set all public members
/// - ns5__TransitInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TransitInformation(soap*, ns5__TransitInformation*) deserialize from a stream
/// - int soap_write_ns5__TransitInformation(soap*, ns5__TransitInformation*) serialize to a stream
/// - ns5__TransitInformation* ns5__TransitInformation::soap_dup(soap*) returns deep copy of ns5__TransitInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TransitInformation::soap_del() deep deletes ns5__TransitInformation data members, use only after ns5__TransitInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TransitInformation : public ns5__NonRoadEventInformation
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__NonRoadEventInformation:
/// Element "nonRoadEventInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  nonRoadEventInformationExtension 0;	///< Optional element.
    END OF INHERITED FROM ns5__NonRoadEventInformation */
/// Element "journeyDestination" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             journeyDestination             0;	///< Optional element.
/// Element "journeyOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             journeyOrigin                  0;	///< Optional element.
/// Element "journeyReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         journeyReference               0;	///< Optional element.
/// Element "transitServiceInformation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TransitServiceInformationEnum.
    enum ns5__TransitServiceInformationEnum  transitServiceInformation      1;	///< Required element.
/// Element "transitServiceType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":TransitServiceTypeEnum.
    enum ns5__TransitServiceTypeEnum     transitServiceType             1;	///< Required element.
/// Element "scheduledDepartureTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       scheduledDepartureTime         0;	///< Optional element.
/// Element "transitInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  transitInformationExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VisibilityInformation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":WeatherValue.
///
/// class ns5__VisibilityInformation operations:
/// - ns5__VisibilityInformation* soap_new_ns5__VisibilityInformation(soap*) allocate and default initialize
/// - ns5__VisibilityInformation* soap_new_ns5__VisibilityInformation(soap*, int num) allocate array and default initialize values
/// - ns5__VisibilityInformation* soap_new_req_ns5__VisibilityInformation(soap*, ...) allocate, set required members
/// - ns5__VisibilityInformation* soap_new_set_ns5__VisibilityInformation(soap*, ...) allocate, set all public members
/// - ns5__VisibilityInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__VisibilityInformation(soap*, ns5__VisibilityInformation*) deserialize from a stream
/// - int soap_write_ns5__VisibilityInformation(soap*, ns5__VisibilityInformation*) serialize to a stream
/// - ns5__VisibilityInformation* ns5__VisibilityInformation::soap_dup(soap*) returns deep copy of ns5__VisibilityInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__VisibilityInformation::soap_del() deep deletes ns5__VisibilityInformation data members, use only after ns5__VisibilityInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__VisibilityInformation : public ns5__WeatherValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__WeatherValue:
/// Element "weatherValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__WeatherValue */
/// Element "visibility" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Visibility.
    ns5__Visibility*                     visibility                     1;	///< Required element.
/// Element "visibilityInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  visibilityInformationExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":WindInformation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":WeatherValue.
///
/// class ns5__WindInformation operations:
/// - ns5__WindInformation* soap_new_ns5__WindInformation(soap*) allocate and default initialize
/// - ns5__WindInformation* soap_new_ns5__WindInformation(soap*, int num) allocate array and default initialize values
/// - ns5__WindInformation* soap_new_req_ns5__WindInformation(soap*, ...) allocate, set required members
/// - ns5__WindInformation* soap_new_set_ns5__WindInformation(soap*, ...) allocate, set all public members
/// - ns5__WindInformation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__WindInformation(soap*, ns5__WindInformation*) deserialize from a stream
/// - int soap_write_ns5__WindInformation(soap*, ns5__WindInformation*) serialize to a stream
/// - ns5__WindInformation* ns5__WindInformation::soap_dup(soap*) returns deep copy of ns5__WindInformation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__WindInformation::soap_del() deep deletes ns5__WindInformation data members, use only after ns5__WindInformation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__WindInformation : public ns5__WeatherValue
{ public:
/*  INHERITED FROM ns5__BasicDataValue:
/// Element "accuracy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     accuracy                       0;	///< Optional element.
/// Element "computationalMethod" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComputationMethodEnum.
    enum ns5__ComputationMethodEnum*     computationalMethod            0;	///< Optional element.
/// Element "fault" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        fault                          0;	///< Optional element.
/// Element "faultReason" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             faultReason                    0;	///< Optional element.
/// Element "numberOfIncompleteInputs" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfIncompleteInputs       0;	///< Optional element.
/// Element "numberOfInputValuesUsed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfInputValuesUsed        0;	///< Optional element.
/// Element "period" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Seconds.
    ns5__Seconds*                        period                         0;	///< Optional element.
/// Element "smoothingFactor" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          smoothingFactor                0;	///< Optional element.
/// Element "standardDeviation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Float.
    ns5__Float*                          standardDeviation              0;	///< Optional element.
/// Element "supplierCalculatedDataQuality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Percentage.
    ns5__Percentage*                     supplierCalculatedDataQuality  0;	///< Optional element.
/// Element "time" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       time                           0;	///< Optional element.
/// Element "pertinentLocation" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               pertinentLocation              0;	///< Optional element.
/// Element "basicDataValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  basicDataValueExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__BasicDataValue */
/*  INHERITED FROM ns5__WeatherValue:
/// Element "weatherValueExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherValueExtension          0;	///< Optional element.
    END OF INHERITED FROM ns5__WeatherValue */
/// Element "wind" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Wind.
    ns5__Wind*                           wind                           1;	///< Required element.
/// Element "windInformationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  windInformationExtension       0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":DataSupplyRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ConsumerRequestEndpointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Data supply Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__DataSupplyRequestStructure operations:
/// - ns2__DataSupplyRequestStructure* soap_new_ns2__DataSupplyRequestStructure(soap*) allocate and default initialize
/// - ns2__DataSupplyRequestStructure* soap_new_ns2__DataSupplyRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DataSupplyRequestStructure* soap_new_req_ns2__DataSupplyRequestStructure(soap*, ...) allocate, set required members
/// - ns2__DataSupplyRequestStructure* soap_new_set_ns2__DataSupplyRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__DataSupplyRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DataSupplyRequestStructure(soap*, ns2__DataSupplyRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__DataSupplyRequestStructure(soap*, ns2__DataSupplyRequestStructure*) serialize to a stream
/// - ns2__DataSupplyRequestStructure* ns2__DataSupplyRequestStructure::soap_dup(soap*) returns deep copy of ns2__DataSupplyRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DataSupplyRequestStructure::soap_del() deep deletes ns2__DataSupplyRequestStructure data members, use only after ns2__DataSupplyRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DataSupplyRequestStructure : public ns2__ConsumerRequestEndpointStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__ConsumerRequestEndpointStructure:
//  BEGIN GROUP <xs:group name="ConsumerRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to this request, created by Consumer. May be used to reference the request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Consumer - a Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ConsumerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message. Some systems may use just timestamp for this.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ConsumerRequestEndpointStructure */
//  BEGIN GROUP <xs:group name="DataSupplyTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Specifies content to be included in data supply.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a specific notification message for which data is to be fetched. Can be used to distinguish between notfcatiosn for the same service and subscriber but for different filters.If none specified,
/// </BLOCKQUOTE></PRE>
/// Element "NotificationRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            NotificationRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether to return all data, or just new updates since the last delivery. Default false, i.e. just updates.
/// </BLOCKQUOTE></PRE>
/// Element "AllData" of XSD type xs:boolean.
    bool                                 AllData                        0 = false;	///< Default element value="false".
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":CheckStatusRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":RequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for check status request.
/// </BLOCKQUOTE></PRE>
/// class ns2__CheckStatusRequestStructure operations:
/// - ns2__CheckStatusRequestStructure* soap_new_ns2__CheckStatusRequestStructure(soap*) allocate and default initialize
/// - ns2__CheckStatusRequestStructure* soap_new_ns2__CheckStatusRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__CheckStatusRequestStructure* soap_new_req_ns2__CheckStatusRequestStructure(soap*, ...) allocate, set required members
/// - ns2__CheckStatusRequestStructure* soap_new_set_ns2__CheckStatusRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__CheckStatusRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__CheckStatusRequestStructure(soap*, ns2__CheckStatusRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__CheckStatusRequestStructure(soap*, ns2__CheckStatusRequestStructure*) serialize to a stream
/// - ns2__CheckStatusRequestStructure* ns2__CheckStatusRequestStructure::soap_dup(soap*) returns deep copy of ns2__CheckStatusRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__CheckStatusRequestStructure::soap_del() deep deletes ns2__CheckStatusRequestStructure data members, use only after ns2__CheckStatusRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__CheckStatusRequestStructure : public ns2__RequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__RequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__RequestStructure */
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":HeartbeatNotificationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ProducerRequestEndpointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Service Heartbeat Notification.
/// </BLOCKQUOTE></PRE>
/// class ns2__HeartbeatNotificationStructure operations:
/// - ns2__HeartbeatNotificationStructure* soap_new_ns2__HeartbeatNotificationStructure(soap*) allocate and default initialize
/// - ns2__HeartbeatNotificationStructure* soap_new_ns2__HeartbeatNotificationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__HeartbeatNotificationStructure* soap_new_req_ns2__HeartbeatNotificationStructure(soap*, ...) allocate, set required members
/// - ns2__HeartbeatNotificationStructure* soap_new_set_ns2__HeartbeatNotificationStructure(soap*, ...) allocate, set all public members
/// - ns2__HeartbeatNotificationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__HeartbeatNotificationStructure(soap*, ns2__HeartbeatNotificationStructure*) deserialize from a stream
/// - int soap_write_ns2__HeartbeatNotificationStructure(soap*, ns2__HeartbeatNotificationStructure*) serialize to a stream
/// - ns2__HeartbeatNotificationStructure* ns2__HeartbeatNotificationStructure::soap_dup(soap*) returns deep copy of ns2__HeartbeatNotificationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__HeartbeatNotificationStructure::soap_del() deep deletes ns2__HeartbeatNotificationStructure data members, use only after ns2__HeartbeatNotificationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__HeartbeatNotificationStructure : public ns2__ProducerRequestEndpointStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__ProducerRequestEndpointStructure:
//  BEGIN GROUP <xs:group name="ProducerRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from ProducerRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message. Some systems may use just timestamp for this. Where there are multiple SubscriptionFilters, this can be used to distinguish between different notifications for different filters.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ProducerRequestEndpointStructure */
//  BEGIN GROUP <xs:group name="CheckStatusPayloadGroup">
/// <PRE><BLOCKQUOTE>
///   Data received AcknowledgementService Status Check Request content.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Status.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether data delivery is ready to be fetched SIRI v 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DataReady" of XSD type xs:boolean.
    bool*                                DataReady                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning condition that applies to the status check.
/// </BLOCKQUOTE></PRE>
/// class _ns2__HeartbeatNotificationStructure_ErrorCondition operations:
/// - _ns2__HeartbeatNotificationStructure_ErrorCondition* soap_new__ns2__HeartbeatNotificationStructure_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__HeartbeatNotificationStructure_ErrorCondition* soap_new__ns2__HeartbeatNotificationStructure_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__HeartbeatNotificationStructure_ErrorCondition* soap_new_req__ns2__HeartbeatNotificationStructure_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__HeartbeatNotificationStructure_ErrorCondition* soap_new_set__ns2__HeartbeatNotificationStructure_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__HeartbeatNotificationStructure_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__HeartbeatNotificationStructure_ErrorCondition(soap*, _ns2__HeartbeatNotificationStructure_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__HeartbeatNotificationStructure_ErrorCondition(soap*, _ns2__HeartbeatNotificationStructure_ErrorCondition*) serialize to a stream
/// - _ns2__HeartbeatNotificationStructure_ErrorCondition* _ns2__HeartbeatNotificationStructure_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__HeartbeatNotificationStructure_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__HeartbeatNotificationStructure_ErrorCondition::soap_del() deep deletes _ns2__HeartbeatNotificationStructure_ErrorCondition data members, use only after _ns2__HeartbeatNotificationStructure_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__HeartbeatNotificationStructure_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_HeartbeatNotificationStructure_ErrorCondition;	///< Union _ns2__union_HeartbeatNotificationStructure_ErrorCondition selector: set to SOAP_UNION__ns2__union_HeartbeatNotificationStructure_ErrorCondition_<fieldname>
    union _ns2__union_HeartbeatNotificationStructure_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Functional service is not available to use (but it is still capable of giving this response).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ServiceNotAvailableError.
    ns2__ServiceNotAvailableErrorStructure*  ServiceNotAvailableError       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_HeartbeatNotificationStructure_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="SuccessInfoGroup">
/// <PRE><BLOCKQUOTE>
///   Additional information provided if request is successful.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   End of data horizon of the data producer.
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntil" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntil                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum interval at which updates can be sent.
/// </BLOCKQUOTE></PRE>
/// Element "ShortestPossibleCycle" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           ShortestPossibleCycle          0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Time at which current instantiation of service started.
/// </BLOCKQUOTE></PRE>
/// Element "ServiceStartedTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ServiceStartedTime             0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractSubscriptionRequestStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":RequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for COmmon Subscription Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractSubscriptionRequestStructure operations:
/// - ns2__AbstractSubscriptionRequestStructure* soap_new_ns2__AbstractSubscriptionRequestStructure(soap*) allocate and default initialize
/// - ns2__AbstractSubscriptionRequestStructure* soap_new_ns2__AbstractSubscriptionRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractSubscriptionRequestStructure* soap_new_req_ns2__AbstractSubscriptionRequestStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractSubscriptionRequestStructure* soap_new_set_ns2__AbstractSubscriptionRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractSubscriptionRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractSubscriptionRequestStructure(soap*, ns2__AbstractSubscriptionRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractSubscriptionRequestStructure(soap*, ns2__AbstractSubscriptionRequestStructure*) serialize to a stream
/// - ns2__AbstractSubscriptionRequestStructure* ns2__AbstractSubscriptionRequestStructure::soap_dup(soap*) returns deep copy of ns2__AbstractSubscriptionRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractSubscriptionRequestStructure::soap_del() deep deletes ns2__AbstractSubscriptionRequestStructure data members, use only after ns2__AbstractSubscriptionRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractSubscriptionRequestStructure : public ns2__RequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__RequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__RequestStructure */
//  BEGIN GROUP <xs:group name="SubscriberEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which data is to be sent, if different from Address. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                ConsumerAddress                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a Subscription Filter with which this subscription is to be aggregated for purposes of notification and delivery. If absent, use the default filter. If present, use any existing filter with that identifier, if none found, create a new one. Optional SIRI feature.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterIdentifier" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        SubscriptionFilterIdentifier   0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   General values that apply to subscription. Usually set by configuration.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionContext" of XSD type "http://www.siri.org.uk/siri":SubscriptionContextStructure.
    ns2__SubscriptionContextStructure*   SubscriptionContext            0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":AbstractNotificationStructure is an abstract complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ProducerRequestEndpointStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Notification Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__AbstractNotificationStructure operations:
/// - ns2__AbstractNotificationStructure* soap_new_ns2__AbstractNotificationStructure(soap*) allocate and default initialize
/// - ns2__AbstractNotificationStructure* soap_new_ns2__AbstractNotificationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__AbstractNotificationStructure* soap_new_req_ns2__AbstractNotificationStructure(soap*, ...) allocate, set required members
/// - ns2__AbstractNotificationStructure* soap_new_set_ns2__AbstractNotificationStructure(soap*, ...) allocate, set all public members
/// - ns2__AbstractNotificationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AbstractNotificationStructure(soap*, ns2__AbstractNotificationStructure*) deserialize from a stream
/// - int soap_write_ns2__AbstractNotificationStructure(soap*, ns2__AbstractNotificationStructure*) serialize to a stream
/// - ns2__AbstractNotificationStructure* ns2__AbstractNotificationStructure::soap_dup(soap*) returns deep copy of ns2__AbstractNotificationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AbstractNotificationStructure::soap_del() deep deletes ns2__AbstractNotificationStructure data members, use only after ns2__AbstractNotificationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AbstractNotificationStructure : public ns2__ProducerRequestEndpointStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__ProducerRequestEndpointStructure:
//  BEGIN GROUP <xs:group name="ProducerRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from ProducerRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message. Some systems may use just timestamp for this. Where there are multiple SubscriptionFilters, this can be used to distinguish between different notifications for different filters.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ProducerRequestEndpointStructure */
};

/// @brief "http://www.siri.org.uk/siri":NaturalLanguagePlaceNameStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   @lang. ISO language code (default is 'en')A string containing a phrase in a natural language name that requires at least one character of text and forbids certain reserved characters.
/// </BLOCKQUOTE></PRE>
/// class ns2__NaturalLanguagePlaceNameStructure operations:
/// - ns2__NaturalLanguagePlaceNameStructure* soap_new_ns2__NaturalLanguagePlaceNameStructure(soap*) allocate and default initialize
/// - ns2__NaturalLanguagePlaceNameStructure* soap_new_ns2__NaturalLanguagePlaceNameStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NaturalLanguagePlaceNameStructure* soap_new_req_ns2__NaturalLanguagePlaceNameStructure(soap*, ...) allocate, set required members
/// - ns2__NaturalLanguagePlaceNameStructure* soap_new_set_ns2__NaturalLanguagePlaceNameStructure(soap*, ...) allocate, set all public members
/// - ns2__NaturalLanguagePlaceNameStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NaturalLanguagePlaceNameStructure(soap*, ns2__NaturalLanguagePlaceNameStructure*) deserialize from a stream
/// - int soap_write_ns2__NaturalLanguagePlaceNameStructure(soap*, ns2__NaturalLanguagePlaceNameStructure*) serialize to a stream
/// - ns2__NaturalLanguagePlaceNameStructure* ns2__NaturalLanguagePlaceNameStructure::soap_dup(soap*) returns deep copy of ns2__NaturalLanguagePlaceNameStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NaturalLanguagePlaceNameStructure::soap_del() deep deletes ns2__NaturalLanguagePlaceNameStructure data members, use only after ns2__NaturalLanguagePlaceNameStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NaturalLanguagePlaceNameStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.siri.org.uk/siri":PopulatedPlaceNameType" simpleContent.
    ns2__PopulatedPlaceNameType          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
};

/// @brief "http://www.siri.org.uk/siri":PublishToAlertsActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PushedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Action Publish SITUATION To Alert Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__PublishToAlertsActionStructure operations:
/// - ns2__PublishToAlertsActionStructure* soap_new_ns2__PublishToAlertsActionStructure(soap*) allocate and default initialize
/// - ns2__PublishToAlertsActionStructure* soap_new_ns2__PublishToAlertsActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__PublishToAlertsActionStructure* soap_new_req_ns2__PublishToAlertsActionStructure(soap*, ...) allocate, set required members
/// - ns2__PublishToAlertsActionStructure* soap_new_set_ns2__PublishToAlertsActionStructure(soap*, ...) allocate, set all public members
/// - ns2__PublishToAlertsActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PublishToAlertsActionStructure(soap*, ns2__PublishToAlertsActionStructure*) deserialize from a stream
/// - int soap_write_ns2__PublishToAlertsActionStructure(soap*, ns2__PublishToAlertsActionStructure*) serialize to a stream
/// - ns2__PublishToAlertsActionStructure* ns2__PublishToAlertsActionStructure::soap_dup(soap*) returns deep copy of ns2__PublishToAlertsActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PublishToAlertsActionStructure::soap_del() deep deletes ns2__PublishToAlertsActionStructure data members, use only after ns2__PublishToAlertsActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PublishToAlertsActionStructure : public ns2__PushedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/*  INHERITED FROM ns2__PushedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether reminders should be sent.
/// </BLOCKQUOTE></PRE>
/// class _ns2__PublishToAlertsActionStructure_BeforeNotices operations:
/// - _ns2__PublishToAlertsActionStructure_BeforeNotices* soap_new__ns2__PublishToAlertsActionStructure_BeforeNotices(soap*) allocate and default initialize
/// - _ns2__PublishToAlertsActionStructure_BeforeNotices* soap_new__ns2__PublishToAlertsActionStructure_BeforeNotices(soap*, int num) allocate array and default initialize values
/// - _ns2__PublishToAlertsActionStructure_BeforeNotices* soap_new_req__ns2__PublishToAlertsActionStructure_BeforeNotices(soap*, ...) allocate, set required members
/// - _ns2__PublishToAlertsActionStructure_BeforeNotices* soap_new_set__ns2__PublishToAlertsActionStructure_BeforeNotices(soap*, ...) allocate, set all public members
/// - _ns2__PublishToAlertsActionStructure_BeforeNotices::soap_default(soap*) default initialize members
/// - int soap_read__ns2__PublishToAlertsActionStructure_BeforeNotices(soap*, _ns2__PublishToAlertsActionStructure_BeforeNotices*) deserialize from a stream
/// - int soap_write__ns2__PublishToAlertsActionStructure_BeforeNotices(soap*, _ns2__PublishToAlertsActionStructure_BeforeNotices*) serialize to a stream
/// - _ns2__PublishToAlertsActionStructure_BeforeNotices* _ns2__PublishToAlertsActionStructure_BeforeNotices::soap_dup(soap*) returns deep copy of _ns2__PublishToAlertsActionStructure_BeforeNotices, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__PublishToAlertsActionStructure_BeforeNotices::soap_del() deep deletes _ns2__PublishToAlertsActionStructure_BeforeNotices data members, use only after _ns2__PublishToAlertsActionStructure_BeforeNotices::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__PublishToAlertsActionStructure_BeforeNotices
    {
/// <PRE><BLOCKQUOTE>
///   Intervals before validity start date to send reminders.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DurationType of length 0..unbounded.
    std::vector<ns2__DurationType      > Interval                       0;
    }                                   *BeforeNotices                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether a clearing notice should be displayed.
/// </BLOCKQUOTE></PRE>
/// Element "ClearNotice" of XSD type xs:boolean.
    bool*                                ClearNotice                    0;	///< Optional element.
    END OF INHERITED FROM ns2__PushedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Send as email alert.
/// </BLOCKQUOTE></PRE>
/// Element "ByEmail" of XSD type xs:boolean.
    bool                                 ByEmail                        0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Send as mobile alert by SMS or WAP push.
/// </BLOCKQUOTE></PRE>
/// Element "ByMobile" of XSD type xs:boolean.
    bool                                 ByMobile                       0 = true;	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":NotifyBySmsActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PushedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Notify user by SMS.
/// </BLOCKQUOTE></PRE>
/// class ns2__NotifyBySmsActionStructure operations:
/// - ns2__NotifyBySmsActionStructure* soap_new_ns2__NotifyBySmsActionStructure(soap*) allocate and default initialize
/// - ns2__NotifyBySmsActionStructure* soap_new_ns2__NotifyBySmsActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NotifyBySmsActionStructure* soap_new_req_ns2__NotifyBySmsActionStructure(soap*, ...) allocate, set required members
/// - ns2__NotifyBySmsActionStructure* soap_new_set_ns2__NotifyBySmsActionStructure(soap*, ...) allocate, set all public members
/// - ns2__NotifyBySmsActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NotifyBySmsActionStructure(soap*, ns2__NotifyBySmsActionStructure*) deserialize from a stream
/// - int soap_write_ns2__NotifyBySmsActionStructure(soap*, ns2__NotifyBySmsActionStructure*) serialize to a stream
/// - ns2__NotifyBySmsActionStructure* ns2__NotifyBySmsActionStructure::soap_dup(soap*) returns deep copy of ns2__NotifyBySmsActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NotifyBySmsActionStructure::soap_del() deep deletes ns2__NotifyBySmsActionStructure data members, use only after ns2__NotifyBySmsActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NotifyBySmsActionStructure : public ns2__PushedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/*  INHERITED FROM ns2__PushedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether reminders should be sent.
/// </BLOCKQUOTE></PRE>
/// class _ns2__NotifyBySmsActionStructure_BeforeNotices operations:
/// - _ns2__NotifyBySmsActionStructure_BeforeNotices* soap_new__ns2__NotifyBySmsActionStructure_BeforeNotices(soap*) allocate and default initialize
/// - _ns2__NotifyBySmsActionStructure_BeforeNotices* soap_new__ns2__NotifyBySmsActionStructure_BeforeNotices(soap*, int num) allocate array and default initialize values
/// - _ns2__NotifyBySmsActionStructure_BeforeNotices* soap_new_req__ns2__NotifyBySmsActionStructure_BeforeNotices(soap*, ...) allocate, set required members
/// - _ns2__NotifyBySmsActionStructure_BeforeNotices* soap_new_set__ns2__NotifyBySmsActionStructure_BeforeNotices(soap*, ...) allocate, set all public members
/// - _ns2__NotifyBySmsActionStructure_BeforeNotices::soap_default(soap*) default initialize members
/// - int soap_read__ns2__NotifyBySmsActionStructure_BeforeNotices(soap*, _ns2__NotifyBySmsActionStructure_BeforeNotices*) deserialize from a stream
/// - int soap_write__ns2__NotifyBySmsActionStructure_BeforeNotices(soap*, _ns2__NotifyBySmsActionStructure_BeforeNotices*) serialize to a stream
/// - _ns2__NotifyBySmsActionStructure_BeforeNotices* _ns2__NotifyBySmsActionStructure_BeforeNotices::soap_dup(soap*) returns deep copy of _ns2__NotifyBySmsActionStructure_BeforeNotices, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__NotifyBySmsActionStructure_BeforeNotices::soap_del() deep deletes _ns2__NotifyBySmsActionStructure_BeforeNotices data members, use only after _ns2__NotifyBySmsActionStructure_BeforeNotices::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__NotifyBySmsActionStructure_BeforeNotices
    {
/// <PRE><BLOCKQUOTE>
///   Intervals before validity start date to send reminders.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DurationType of length 0..unbounded.
    std::vector<ns2__DurationType      > Interval                       0;
    }                                   *BeforeNotices                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether a clearing notice should be displayed.
/// </BLOCKQUOTE></PRE>
/// Element "ClearNotice" of XSD type xs:boolean.
    bool*                                ClearNotice                    0;	///< Optional element.
    END OF INHERITED FROM ns2__PushedActionStructure */
/// <PRE><BLOCKQUOTE>
///   MSISDN of user to which to send messages.
/// </BLOCKQUOTE></PRE>
/// Element "Phone" of XSD type "http://www.siri.org.uk/siri":PhoneType.
    ns2__PhoneType                       Phone                          0 = "true";	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Whether content is flagged as subject to premium charge.
/// </BLOCKQUOTE></PRE>
/// Element "Premium" of XSD type xs:boolean.
    bool                                 Premium                        0 = false;	///< Default element value="false".
};

/// @brief "http://www.siri.org.uk/siri":NotifyByEmailActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PushedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Notify user by Email.
/// </BLOCKQUOTE></PRE>
/// class ns2__NotifyByEmailActionStructure operations:
/// - ns2__NotifyByEmailActionStructure* soap_new_ns2__NotifyByEmailActionStructure(soap*) allocate and default initialize
/// - ns2__NotifyByEmailActionStructure* soap_new_ns2__NotifyByEmailActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NotifyByEmailActionStructure* soap_new_req_ns2__NotifyByEmailActionStructure(soap*, ...) allocate, set required members
/// - ns2__NotifyByEmailActionStructure* soap_new_set_ns2__NotifyByEmailActionStructure(soap*, ...) allocate, set all public members
/// - ns2__NotifyByEmailActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NotifyByEmailActionStructure(soap*, ns2__NotifyByEmailActionStructure*) deserialize from a stream
/// - int soap_write_ns2__NotifyByEmailActionStructure(soap*, ns2__NotifyByEmailActionStructure*) serialize to a stream
/// - ns2__NotifyByEmailActionStructure* ns2__NotifyByEmailActionStructure::soap_dup(soap*) returns deep copy of ns2__NotifyByEmailActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NotifyByEmailActionStructure::soap_del() deep deletes ns2__NotifyByEmailActionStructure data members, use only after ns2__NotifyByEmailActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NotifyByEmailActionStructure : public ns2__PushedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/*  INHERITED FROM ns2__PushedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether reminders should be sent.
/// </BLOCKQUOTE></PRE>
/// class _ns2__NotifyByEmailActionStructure_BeforeNotices operations:
/// - _ns2__NotifyByEmailActionStructure_BeforeNotices* soap_new__ns2__NotifyByEmailActionStructure_BeforeNotices(soap*) allocate and default initialize
/// - _ns2__NotifyByEmailActionStructure_BeforeNotices* soap_new__ns2__NotifyByEmailActionStructure_BeforeNotices(soap*, int num) allocate array and default initialize values
/// - _ns2__NotifyByEmailActionStructure_BeforeNotices* soap_new_req__ns2__NotifyByEmailActionStructure_BeforeNotices(soap*, ...) allocate, set required members
/// - _ns2__NotifyByEmailActionStructure_BeforeNotices* soap_new_set__ns2__NotifyByEmailActionStructure_BeforeNotices(soap*, ...) allocate, set all public members
/// - _ns2__NotifyByEmailActionStructure_BeforeNotices::soap_default(soap*) default initialize members
/// - int soap_read__ns2__NotifyByEmailActionStructure_BeforeNotices(soap*, _ns2__NotifyByEmailActionStructure_BeforeNotices*) deserialize from a stream
/// - int soap_write__ns2__NotifyByEmailActionStructure_BeforeNotices(soap*, _ns2__NotifyByEmailActionStructure_BeforeNotices*) serialize to a stream
/// - _ns2__NotifyByEmailActionStructure_BeforeNotices* _ns2__NotifyByEmailActionStructure_BeforeNotices::soap_dup(soap*) returns deep copy of _ns2__NotifyByEmailActionStructure_BeforeNotices, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__NotifyByEmailActionStructure_BeforeNotices::soap_del() deep deletes _ns2__NotifyByEmailActionStructure_BeforeNotices data members, use only after _ns2__NotifyByEmailActionStructure_BeforeNotices::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__NotifyByEmailActionStructure_BeforeNotices
    {
/// <PRE><BLOCKQUOTE>
///   Intervals before validity start date to send reminders.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DurationType of length 0..unbounded.
    std::vector<ns2__DurationType      > Interval                       0;
    }                                   *BeforeNotices                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether a clearing notice should be displayed.
/// </BLOCKQUOTE></PRE>
/// Element "ClearNotice" of XSD type xs:boolean.
    bool*                                ClearNotice                    0;	///< Optional element.
    END OF INHERITED FROM ns2__PushedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Email address to which notice should be sent.
/// </BLOCKQUOTE></PRE>
/// Element "email" of XSD type "http://www.siri.org.uk/siri":EmailAddressType.
    ns2__EmailAddressType*               email                          0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":NotifyByPagerActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PushedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Notify user by Pager.
/// </BLOCKQUOTE></PRE>
/// class ns2__NotifyByPagerActionStructure operations:
/// - ns2__NotifyByPagerActionStructure* soap_new_ns2__NotifyByPagerActionStructure(soap*) allocate and default initialize
/// - ns2__NotifyByPagerActionStructure* soap_new_ns2__NotifyByPagerActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NotifyByPagerActionStructure* soap_new_req_ns2__NotifyByPagerActionStructure(soap*, ...) allocate, set required members
/// - ns2__NotifyByPagerActionStructure* soap_new_set_ns2__NotifyByPagerActionStructure(soap*, ...) allocate, set all public members
/// - ns2__NotifyByPagerActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NotifyByPagerActionStructure(soap*, ns2__NotifyByPagerActionStructure*) deserialize from a stream
/// - int soap_write_ns2__NotifyByPagerActionStructure(soap*, ns2__NotifyByPagerActionStructure*) serialize to a stream
/// - ns2__NotifyByPagerActionStructure* ns2__NotifyByPagerActionStructure::soap_dup(soap*) returns deep copy of ns2__NotifyByPagerActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NotifyByPagerActionStructure::soap_del() deep deletes ns2__NotifyByPagerActionStructure data members, use only after ns2__NotifyByPagerActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NotifyByPagerActionStructure : public ns2__PushedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/*  INHERITED FROM ns2__PushedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether reminders should be sent.
/// </BLOCKQUOTE></PRE>
/// class _ns2__NotifyByPagerActionStructure_BeforeNotices operations:
/// - _ns2__NotifyByPagerActionStructure_BeforeNotices* soap_new__ns2__NotifyByPagerActionStructure_BeforeNotices(soap*) allocate and default initialize
/// - _ns2__NotifyByPagerActionStructure_BeforeNotices* soap_new__ns2__NotifyByPagerActionStructure_BeforeNotices(soap*, int num) allocate array and default initialize values
/// - _ns2__NotifyByPagerActionStructure_BeforeNotices* soap_new_req__ns2__NotifyByPagerActionStructure_BeforeNotices(soap*, ...) allocate, set required members
/// - _ns2__NotifyByPagerActionStructure_BeforeNotices* soap_new_set__ns2__NotifyByPagerActionStructure_BeforeNotices(soap*, ...) allocate, set all public members
/// - _ns2__NotifyByPagerActionStructure_BeforeNotices::soap_default(soap*) default initialize members
/// - int soap_read__ns2__NotifyByPagerActionStructure_BeforeNotices(soap*, _ns2__NotifyByPagerActionStructure_BeforeNotices*) deserialize from a stream
/// - int soap_write__ns2__NotifyByPagerActionStructure_BeforeNotices(soap*, _ns2__NotifyByPagerActionStructure_BeforeNotices*) serialize to a stream
/// - _ns2__NotifyByPagerActionStructure_BeforeNotices* _ns2__NotifyByPagerActionStructure_BeforeNotices::soap_dup(soap*) returns deep copy of _ns2__NotifyByPagerActionStructure_BeforeNotices, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__NotifyByPagerActionStructure_BeforeNotices::soap_del() deep deletes _ns2__NotifyByPagerActionStructure_BeforeNotices data members, use only after _ns2__NotifyByPagerActionStructure_BeforeNotices::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__NotifyByPagerActionStructure_BeforeNotices
    {
/// <PRE><BLOCKQUOTE>
///   Intervals before validity start date to send reminders.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DurationType of length 0..unbounded.
    std::vector<ns2__DurationType      > Interval                       0;
    }                                   *BeforeNotices                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether a clearing notice should be displayed.
/// </BLOCKQUOTE></PRE>
/// Element "ClearNotice" of XSD type xs:boolean.
    bool*                                ClearNotice                    0;	///< Optional element.
    END OF INHERITED FROM ns2__PushedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a pager group to be notfied.
/// </BLOCKQUOTE></PRE>
/// Element "PagerGroupRef" of XSD type xs:string.
    std::wstring*                        PagerGroupRef                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Pager number of pager to be notfied.
/// </BLOCKQUOTE></PRE>
/// Element "Pager" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN                         Pager                          0 = "true";	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":NotifyUserActionStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":PushedActionStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Notify user by other means.
/// </BLOCKQUOTE></PRE>
/// class ns2__NotifyUserActionStructure operations:
/// - ns2__NotifyUserActionStructure* soap_new_ns2__NotifyUserActionStructure(soap*) allocate and default initialize
/// - ns2__NotifyUserActionStructure* soap_new_ns2__NotifyUserActionStructure(soap*, int num) allocate array and default initialize values
/// - ns2__NotifyUserActionStructure* soap_new_req_ns2__NotifyUserActionStructure(soap*, ...) allocate, set required members
/// - ns2__NotifyUserActionStructure* soap_new_set_ns2__NotifyUserActionStructure(soap*, ...) allocate, set all public members
/// - ns2__NotifyUserActionStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__NotifyUserActionStructure(soap*, ns2__NotifyUserActionStructure*) deserialize from a stream
/// - int soap_write_ns2__NotifyUserActionStructure(soap*, ns2__NotifyUserActionStructure*) serialize to a stream
/// - ns2__NotifyUserActionStructure* ns2__NotifyUserActionStructure::soap_dup(soap*) returns deep copy of ns2__NotifyUserActionStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__NotifyUserActionStructure::soap_del() deep deletes ns2__NotifyUserActionStructure data members, use only after ns2__NotifyUserActionStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__NotifyUserActionStructure : public ns2__PushedActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/*  INHERITED FROM ns2__PushedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Whether reminders should be sent.
/// </BLOCKQUOTE></PRE>
/// class _ns2__NotifyUserActionStructure_BeforeNotices operations:
/// - _ns2__NotifyUserActionStructure_BeforeNotices* soap_new__ns2__NotifyUserActionStructure_BeforeNotices(soap*) allocate and default initialize
/// - _ns2__NotifyUserActionStructure_BeforeNotices* soap_new__ns2__NotifyUserActionStructure_BeforeNotices(soap*, int num) allocate array and default initialize values
/// - _ns2__NotifyUserActionStructure_BeforeNotices* soap_new_req__ns2__NotifyUserActionStructure_BeforeNotices(soap*, ...) allocate, set required members
/// - _ns2__NotifyUserActionStructure_BeforeNotices* soap_new_set__ns2__NotifyUserActionStructure_BeforeNotices(soap*, ...) allocate, set all public members
/// - _ns2__NotifyUserActionStructure_BeforeNotices::soap_default(soap*) default initialize members
/// - int soap_read__ns2__NotifyUserActionStructure_BeforeNotices(soap*, _ns2__NotifyUserActionStructure_BeforeNotices*) deserialize from a stream
/// - int soap_write__ns2__NotifyUserActionStructure_BeforeNotices(soap*, _ns2__NotifyUserActionStructure_BeforeNotices*) serialize to a stream
/// - _ns2__NotifyUserActionStructure_BeforeNotices* _ns2__NotifyUserActionStructure_BeforeNotices::soap_dup(soap*) returns deep copy of _ns2__NotifyUserActionStructure_BeforeNotices, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__NotifyUserActionStructure_BeforeNotices::soap_del() deep deletes _ns2__NotifyUserActionStructure_BeforeNotices data members, use only after _ns2__NotifyUserActionStructure_BeforeNotices::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__NotifyUserActionStructure_BeforeNotices
    {
/// <PRE><BLOCKQUOTE>
///   Intervals before validity start date to send reminders.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__DurationType of length 0..unbounded.
    std::vector<ns2__DurationType      > Interval                       0;
    }                                   *BeforeNotices                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether a clearing notice should be displayed.
/// </BLOCKQUOTE></PRE>
/// Element "ClearNotice" of XSD type xs:boolean.
    bool*                                ClearNotice                    0;	///< Optional element.
    END OF INHERITED FROM ns2__PushedActionStructure */
/// <PRE><BLOCKQUOTE>
///   Workgroup of user to be notified.
/// </BLOCKQUOTE></PRE>
/// Element "WorkgroupRef" of XSD type xs:string.
    std::wstring                         WorkgroupRef                   0 = "true";	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Name of user to be notified.
/// </BLOCKQUOTE></PRE>
/// Element "UserName" of XSD type xs:string.
    std::wstring*                        UserName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a user to be notified.
/// </BLOCKQUOTE></PRE>
/// Element "UserRef" of XSD type xs:string.
    std::wstring                         UserRef                        0 = "true";	///< Default element value="true".
};

/// @brief "http://www.siri.org.uk/siri":OperationalUnitRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to an Operatorational Unit Code.
/// </BLOCKQUOTE></PRE>
/// class ns2__OperationalUnitRefStructure operations:
/// - ns2__OperationalUnitRefStructure* soap_new_ns2__OperationalUnitRefStructure(soap*) allocate and default initialize
/// - ns2__OperationalUnitRefStructure* soap_new_ns2__OperationalUnitRefStructure(soap*, int num) allocate array and default initialize values
/// - ns2__OperationalUnitRefStructure* soap_new_req_ns2__OperationalUnitRefStructure(soap*, ...) allocate, set required members
/// - ns2__OperationalUnitRefStructure* soap_new_set_ns2__OperationalUnitRefStructure(soap*, ...) allocate, set all public members
/// - ns2__OperationalUnitRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__OperationalUnitRefStructure(soap*, ns2__OperationalUnitRefStructure*) deserialize from a stream
/// - int soap_write_ns2__OperationalUnitRefStructure(soap*, ns2__OperationalUnitRefStructure*) serialize to a stream
/// - ns2__OperationalUnitRefStructure* ns2__OperationalUnitRefStructure::soap_dup(soap*) returns deep copy of ns2__OperationalUnitRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__OperationalUnitRefStructure::soap_del() deep deletes ns2__OperationalUnitRefStructure data members, use only after ns2__OperationalUnitRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__OperationalUnitRefStructure : public ns2__OperatorRefStructure
{ public:
};

/// @brief "http://www.siri.org.uk/siri":DefaultedTextStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for a text that may be overridden.
/// </BLOCKQUOTE></PRE>
/// class ns2__DefaultedTextStructure operations:
/// - ns2__DefaultedTextStructure* soap_new_ns2__DefaultedTextStructure(soap*) allocate and default initialize
/// - ns2__DefaultedTextStructure* soap_new_ns2__DefaultedTextStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DefaultedTextStructure* soap_new_req_ns2__DefaultedTextStructure(soap*, ...) allocate, set required members
/// - ns2__DefaultedTextStructure* soap_new_set_ns2__DefaultedTextStructure(soap*, ...) allocate, set all public members
/// - ns2__DefaultedTextStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DefaultedTextStructure(soap*, ns2__DefaultedTextStructure*) deserialize from a stream
/// - int soap_write_ns2__DefaultedTextStructure(soap*, ns2__DefaultedTextStructure*) serialize to a stream
/// - ns2__DefaultedTextStructure* ns2__DefaultedTextStructure::soap_dup(soap*) returns deep copy of ns2__DefaultedTextStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DefaultedTextStructure::soap_del() deep deletes ns2__DefaultedTextStructure data members, use only after ns2__DefaultedTextStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DefaultedTextStructure : public ns2__NaturalLanguageStringStructure
{ public:
/// <PRE><BLOCKQUOTE>
///   Whether the text value has been overridden from the generated default. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// Attribute "overridden" of XSD type xs:boolean.
   @bool                                 overridden                     0 = true;	///< Default attribute value="true".
};

/// @brief "http://www.siri.org.uk/siri":ProductionTimetableRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Functional Service Request for Production Timetables.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductionTimetableRequestStructure operations:
/// - ns2__ProductionTimetableRequestStructure* soap_new_ns2__ProductionTimetableRequestStructure(soap*) allocate and default initialize
/// - ns2__ProductionTimetableRequestStructure* soap_new_ns2__ProductionTimetableRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductionTimetableRequestStructure* soap_new_req_ns2__ProductionTimetableRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ProductionTimetableRequestStructure* soap_new_set_ns2__ProductionTimetableRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductionTimetableRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductionTimetableRequestStructure(soap*, ns2__ProductionTimetableRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductionTimetableRequestStructure(soap*, ns2__ProductionTimetableRequestStructure*) serialize to a stream
/// - ns2__ProductionTimetableRequestStructure* ns2__ProductionTimetableRequestStructure::soap_dup(soap*) returns deep copy of ns2__ProductionTimetableRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductionTimetableRequestStructure::soap_del() deep deletes ns2__ProductionTimetableRequestStructure data members, use only after ns2__ProductionTimetableRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductionTimetableRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="ProductionTimetableTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Start and end of timetable validity (time window) of journeys for which schedules are to be returned. Refers to the departure time at the first stop of each VEHICLE JOURNEY If blank the configured data horizon will be used.
/// </BLOCKQUOTE></PRE>
/// Element "ValidityPeriod" of XSD type "http://www.siri.org.uk/siri":ClosedTimestampRangeStructure.
    ns2__ClosedTimestampRangeStructure*  ValidityPeriod                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Communicate only differences to the timetable specified by this VERSION of the TIMETABLe.
/// </BLOCKQUOTE></PRE>
/// Element "TimetableVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            TimetableVersionRef            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include journeys for only the specified OPERATORs.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> OperatorRef                    0;
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only vehicles along the given LINEs.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ProductionTimetableRequestStructure_Lines operations:
/// - _ns2__ProductionTimetableRequestStructure_Lines* soap_new__ns2__ProductionTimetableRequestStructure_Lines(soap*) allocate and default initialize
/// - _ns2__ProductionTimetableRequestStructure_Lines* soap_new__ns2__ProductionTimetableRequestStructure_Lines(soap*, int num) allocate array and default initialize values
/// - _ns2__ProductionTimetableRequestStructure_Lines* soap_new_req__ns2__ProductionTimetableRequestStructure_Lines(soap*, ...) allocate, set required members
/// - _ns2__ProductionTimetableRequestStructure_Lines* soap_new_set__ns2__ProductionTimetableRequestStructure_Lines(soap*, ...) allocate, set all public members
/// - _ns2__ProductionTimetableRequestStructure_Lines::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ProductionTimetableRequestStructure_Lines(soap*, _ns2__ProductionTimetableRequestStructure_Lines*) deserialize from a stream
/// - int soap_write__ns2__ProductionTimetableRequestStructure_Lines(soap*, _ns2__ProductionTimetableRequestStructure_Lines*) serialize to a stream
/// - _ns2__ProductionTimetableRequestStructure_Lines* _ns2__ProductionTimetableRequestStructure_Lines::soap_dup(soap*) returns deep copy of _ns2__ProductionTimetableRequestStructure_Lines, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ProductionTimetableRequestStructure_Lines::soap_del() deep deletes _ns2__ProductionTimetableRequestStructure_Lines data members, use only after _ns2__ProductionTimetableRequestStructure_Lines::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ProductionTimetableRequestStructure_Lines
    {
/// <PRE><BLOCKQUOTE>
///   Iinclude only vehicles along the given LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__LineDirectionStructure* of length 1..unbounded.
    std::vector<ns2__LineDirectionStructure*> LineDirection                  1;
    }                                   *Lines                          0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ProductionTimetableRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of messages exchanged.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether to return the whole timetable, or just differences from the inidicated version. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "IncrementalUpdates" of XSD type xs:boolean.
    bool                                 IncrementalUpdates             0 = false;	///< Default element value="false".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":EstimatedTimetableRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Type for Functional Service Request for Estimated Timetable.
/// </BLOCKQUOTE></PRE>
/// class ns2__EstimatedTimetableRequestStructure operations:
/// - ns2__EstimatedTimetableRequestStructure* soap_new_ns2__EstimatedTimetableRequestStructure(soap*) allocate and default initialize
/// - ns2__EstimatedTimetableRequestStructure* soap_new_ns2__EstimatedTimetableRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__EstimatedTimetableRequestStructure* soap_new_req_ns2__EstimatedTimetableRequestStructure(soap*, ...) allocate, set required members
/// - ns2__EstimatedTimetableRequestStructure* soap_new_set_ns2__EstimatedTimetableRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__EstimatedTimetableRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__EstimatedTimetableRequestStructure(soap*, ns2__EstimatedTimetableRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__EstimatedTimetableRequestStructure(soap*, ns2__EstimatedTimetableRequestStructure*) serialize to a stream
/// - ns2__EstimatedTimetableRequestStructure* ns2__EstimatedTimetableRequestStructure::soap_dup(soap*) returns deep copy of ns2__EstimatedTimetableRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__EstimatedTimetableRequestStructure::soap_del() deep deletes ns2__EstimatedTimetableRequestStructure data members, use only after ns2__EstimatedTimetableRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__EstimatedTimetableRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="EstimatedTimetableTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Forward duration for which journeys should be included. For subscriptions, this duration is a continuously rolling window from the present time. For immediate requests, this duration is measured from the time of the request.
/// </BLOCKQUOTE></PRE>
/// Element "PreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           PreviewInterval                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Communicate only differences to the timetable specified by this version of the timetable.
/// </BLOCKQUOTE></PRE>
/// Element "TimetableVersionRef" of XSD type "http://www.siri.org.uk/siri":VersionRefStructure.
    ns2__VersionRefStructure*            TimetableVersionRef            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include journeys for only the specified OPERATORs.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperatorRefStructure* of length 0..unbounded.
    std::vector<ns2__OperatorRefStructure*> OperatorRef                    0;
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only VEHICLEs along the given LINEs.
/// </BLOCKQUOTE></PRE>
/// class _ns2__EstimatedTimetableRequestStructure_Lines operations:
/// - _ns2__EstimatedTimetableRequestStructure_Lines* soap_new__ns2__EstimatedTimetableRequestStructure_Lines(soap*) allocate and default initialize
/// - _ns2__EstimatedTimetableRequestStructure_Lines* soap_new__ns2__EstimatedTimetableRequestStructure_Lines(soap*, int num) allocate array and default initialize values
/// - _ns2__EstimatedTimetableRequestStructure_Lines* soap_new_req__ns2__EstimatedTimetableRequestStructure_Lines(soap*, ...) allocate, set required members
/// - _ns2__EstimatedTimetableRequestStructure_Lines* soap_new_set__ns2__EstimatedTimetableRequestStructure_Lines(soap*, ...) allocate, set all public members
/// - _ns2__EstimatedTimetableRequestStructure_Lines::soap_default(soap*) default initialize members
/// - int soap_read__ns2__EstimatedTimetableRequestStructure_Lines(soap*, _ns2__EstimatedTimetableRequestStructure_Lines*) deserialize from a stream
/// - int soap_write__ns2__EstimatedTimetableRequestStructure_Lines(soap*, _ns2__EstimatedTimetableRequestStructure_Lines*) serialize to a stream
/// - _ns2__EstimatedTimetableRequestStructure_Lines* _ns2__EstimatedTimetableRequestStructure_Lines::soap_dup(soap*) returns deep copy of _ns2__EstimatedTimetableRequestStructure_Lines, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__EstimatedTimetableRequestStructure_Lines::soap_del() deep deletes _ns2__EstimatedTimetableRequestStructure_Lines data members, use only after _ns2__EstimatedTimetableRequestStructure_Lines::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__EstimatedTimetableRequestStructure_Lines
    {
/// <PRE><BLOCKQUOTE>
///   Include only vehicles along the given LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__LineDirectionStructure* of length 1..unbounded.
    std::vector<ns2__LineDirectionStructure*> LineDirection                  1;
    }                                   *Lines                          0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="EstimatedTimetableRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of messages exchanged.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'.
/// </BLOCKQUOTE></PRE>
/// Element "EstimatedTimetableDetailLevel" of XSD type "http://www.siri.org.uk/siri":EstimatedTimetableDetailEnumeration.
    enum ns2__EstimatedTimetableDetailEnumeration*  EstimatedTimetableDetailLevel  0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":StopTimetableRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Functional Service Request for Stop Timetables.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopTimetableRequestStructure operations:
/// - ns2__StopTimetableRequestStructure* soap_new_ns2__StopTimetableRequestStructure(soap*) allocate and default initialize
/// - ns2__StopTimetableRequestStructure* soap_new_ns2__StopTimetableRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopTimetableRequestStructure* soap_new_req_ns2__StopTimetableRequestStructure(soap*, ...) allocate, set required members
/// - ns2__StopTimetableRequestStructure* soap_new_set_ns2__StopTimetableRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__StopTimetableRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopTimetableRequestStructure(soap*, ns2__StopTimetableRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__StopTimetableRequestStructure(soap*, ns2__StopTimetableRequestStructure*) serialize to a stream
/// - ns2__StopTimetableRequestStructure* ns2__StopTimetableRequestStructure::soap_dup(soap*) returns deep copy of ns2__StopTimetableRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopTimetableRequestStructure::soap_del() deep deletes ns2__StopTimetableRequestStructure data members, use only after ns2__StopTimetableRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopTimetableRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="StopTimetableTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Earliest and latest departure time. If absent, default to the data horizon of the service.
/// </BLOCKQUOTE></PRE>
/// Element "DepartureWindow" of XSD type "http://www.siri.org.uk/siri":ClosedTimestampRangeStructure.
    ns2__ClosedTimestampRangeStructure*  DepartureWindow                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The stop monitoring point about which data is requested. May be a STOP POINT, timing point or other display point.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only data for journeys for the given LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only data for journeys running in a specific relative DIRECTION, for example, "inbound" or "outbound".
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopTimetableRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of stops returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Functional Service Request for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringRequestStructure operations:
/// - ns2__StopMonitoringRequestStructure* soap_new_ns2__StopMonitoringRequestStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringRequestStructure* soap_new_ns2__StopMonitoringRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringRequestStructure* soap_new_req_ns2__StopMonitoringRequestStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringRequestStructure* soap_new_set_ns2__StopMonitoringRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringRequestStructure(soap*, ns2__StopMonitoringRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringRequestStructure(soap*, ns2__StopMonitoringRequestStructure*) serialize to a stream
/// - ns2__StopMonitoringRequestStructure* ns2__StopMonitoringRequestStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringRequestStructure::soap_del() deep deletes ns2__StopMonitoringRequestStructure data members, use only after ns2__StopMonitoringRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="StopMonitoringTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Forward duration for which Visits should be included, that is, interval before predicted arrival at the stop for which to include Visits: only journeys which will arrive or depart within this time span will be returned.
/// </BLOCKQUOTE></PRE>
/// Element "PreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           PreviewInterval                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Start time for PreviewInterval. If absent, then current time is assumed.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    xsd__dateTime*                       StartTime                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to Monitoring Point(s) about which data is requested. May be a STOP POINT, timing point, or a group of points under a single reference.
/// </BLOCKQUOTE></PRE>
/// Element "MonitoringRef" of XSD type "http://www.siri.org.uk/siri":MonitoringRefStructure.
    ns2__MonitoringRefStructure*         MonitoringRef                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Stop Visits for VEHICLEs run by the specified OPERATOR.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Stop Visits for VEHICLEs for the given LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Stop Visits for vehicles running in a specific relative DIRECTION, for example, "inbound" or "outbound". (Direction does not specify a destination.)
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only journeys to the DESTINATION of the journey.
/// </BLOCKQUOTE></PRE>
/// Element "DestinationRef" of XSD type "http://www.siri.org.uk/siri":DestinationRefStructure.
    ns2__DestinationRefStructure*        DestinationRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether to include arrival Visits, departure Visits, or all. Default is 'all'.
/// </BLOCKQUOTE></PRE>
/// Element "StopVisitTypes" of XSD type "http://www.siri.org.uk/siri":StopVisitTypeEnumeration.
    enum ns2__StopVisitTypeEnumeration   StopVisitTypes                 0 = ns2__StopVisitTypeEnumeration__all;	///< Default element value="all".
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopMonitoringRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of stops returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:boolean.
    bool                                 Language                       0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The maximum number of Stop Visits to include in a given delivery. The first n Stop Visits within the look ahead window are included. Only Visits within the Lookahead Interval are returned. The MinimumStopVisits parameter can be used to reduce the the number of entries for each LINE within the total returned.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumStopVisits" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             MaximumStopVisits              0;	///< Optional element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_StopMonitoringRequestStructure;	///< Union _ns2__union_StopMonitoringRequestStructure selector: set to SOAP_UNION__ns2__union_StopMonitoringRequestStructure_<fieldname>
    union _ns2__union_StopMonitoringRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   The minimum number of Stop Visits for a given LINE to include in a given delivery. If there are more Visits within the LookAheadInterval than allowed by MaximumStopVisits and a MinimumStopVisits value is specified, then at least the minimum number will be delivered for each LINE. I.e Stop Visits will be included even if the Stop Visits are later than those for some other LINE for which the minimum number of Stop Visits has already been supplied. This allows the Consumer to obtain at least one entry for every available LINE with vehicles approaching the stop. Only STOP Visits within the Look ahead Interval are returned.
/// </BLOCKQUOTE></PRE>
/// Element "MinimumStopVisitsPerLine" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             MinimumStopVisitsPerLine       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The minimum number of Stop Visits for a given LINE and VIA combination to include in a given delivery. As for MinimumStopVisitsPerLine but with Via also taken into account. SIRI+v2.0
/// </BLOCKQUOTE></PRE>
/// Element "MinimumStopVisitsPerLineVia" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             MinimumStopVisitsPerLineVia    0;	///< Optional element.
    }                                    union_StopMonitoringRequestStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Maximum length of text to return for text elements. Default is 30.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumTextLength" of XSD type xs:positiveInteger.
    xsd__positiveInteger                 MaximumTextLength              0 = "30";	///< Default element value="30".
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'.
/// </BLOCKQUOTE></PRE>
/// Element "StopMonitoringDetailLevel" of XSD type "http://www.siri.org.uk/siri":StopMonitoringDetailEnumeration.
    enum ns2__StopMonitoringDetailEnumeration  StopMonitoringDetailLevel      0 = ns2__StopMonitoringDetailEnumeration__normal;	///< Default element value="normal".
/// <PRE><BLOCKQUOTE>
///   Whether any related SITUATIONs should be included in the ServiceDelivery. Default is 'false'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "IncludeSituations" of XSD type xs:boolean.
    bool*                                IncludeSituations              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If calls are to be returned, maximum number of calls to include in response. If absent, exclude all calls.
/// </BLOCKQUOTE></PRE>
/// class _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls operations:
/// - _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls* soap_new__ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls(soap*) allocate and default initialize
/// - _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls* soap_new__ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls(soap*, int num) allocate array and default initialize values
/// - _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls* soap_new_req__ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls(soap*, ...) allocate, set required members
/// - _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls* soap_new_set__ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls(soap*, ...) allocate, set all public members
/// - _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls(soap*, _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls*) deserialize from a stream
/// - int soap_write__ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls(soap*, _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls*) serialize to a stream
/// - _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls* _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls::soap_dup(soap*) returns deep copy of _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls::soap_del() deep deletes _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls data members, use only after _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__StopMonitoringRequestStructure_MaximumNumberOfCalls
    {
/// <PRE><BLOCKQUOTE>
///   Maximum number of ONWARDS CALLs to include in results. Only applies if StopMonitoringDetailLevel of 'calls' specified. Zero for none. If StopMonitoringDetailLevel of 'calls' specified but MaximumNumberOfCalls.Previous absent, include all ONWARDS CALLs.
/// </BLOCKQUOTE></PRE>
/// Element "Previous" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             Previous                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum number of ONWARDS CALLs to include in results. Zero for none. Only applies if StopMonitoringDetailLevel of 'calls'specified. Zero for none. If StopMonitoringDetailLevel of 'calls' specified but MaximumNumberOfCalls.Onwards absent, include all ONWARDS CALLs.
/// </BLOCKQUOTE></PRE>
/// Element "Onwards" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             Onwards                        0;	///< Optional element.
    }                                   *MaximumNumberOfCalls           0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":StopMonitoringMultipleRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Functional Service Request for Stop Monitoring Service on multiple stops.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopMonitoringMultipleRequestStructure operations:
/// - ns2__StopMonitoringMultipleRequestStructure* soap_new_ns2__StopMonitoringMultipleRequestStructure(soap*) allocate and default initialize
/// - ns2__StopMonitoringMultipleRequestStructure* soap_new_ns2__StopMonitoringMultipleRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopMonitoringMultipleRequestStructure* soap_new_req_ns2__StopMonitoringMultipleRequestStructure(soap*, ...) allocate, set required members
/// - ns2__StopMonitoringMultipleRequestStructure* soap_new_set_ns2__StopMonitoringMultipleRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__StopMonitoringMultipleRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopMonitoringMultipleRequestStructure(soap*, ns2__StopMonitoringMultipleRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__StopMonitoringMultipleRequestStructure(soap*, ns2__StopMonitoringMultipleRequestStructure*) serialize to a stream
/// - ns2__StopMonitoringMultipleRequestStructure* ns2__StopMonitoringMultipleRequestStructure::soap_dup(soap*) returns deep copy of ns2__StopMonitoringMultipleRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopMonitoringMultipleRequestStructure::soap_del() deep deletes ns2__StopMonitoringMultipleRequestStructure data members, use only after ns2__StopMonitoringMultipleRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopMonitoringMultipleRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
/// <PRE><BLOCKQUOTE>
///   Request particulars for an individual stop as part of a list of multiple= requests.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringFilterStructure* of length 1..unbounded.
    std::vector<ns2__StopMonitoringFilterStructure*> StopMonitoringFIlter           1;
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":VehicleMonitoringRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Functional Service Request for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleMonitoringRequestStructure operations:
/// - ns2__VehicleMonitoringRequestStructure* soap_new_ns2__VehicleMonitoringRequestStructure(soap*) allocate and default initialize
/// - ns2__VehicleMonitoringRequestStructure* soap_new_ns2__VehicleMonitoringRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleMonitoringRequestStructure* soap_new_req_ns2__VehicleMonitoringRequestStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleMonitoringRequestStructure* soap_new_set_ns2__VehicleMonitoringRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleMonitoringRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleMonitoringRequestStructure(soap*, ns2__VehicleMonitoringRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleMonitoringRequestStructure(soap*, ns2__VehicleMonitoringRequestStructure*) serialize to a stream
/// - ns2__VehicleMonitoringRequestStructure* ns2__VehicleMonitoringRequestStructure::soap_dup(soap*) returns deep copy of ns2__VehicleMonitoringRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleMonitoringRequestStructure::soap_del() deep deletes ns2__VehicleMonitoringRequestStructure data members, use only after ns2__VehicleMonitoringRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleMonitoringRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="VehicleMonitoringTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   A predefined scope for making VEHICLE requests.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleMonitoringRef" of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringRefStructure.
    ns2__VehicleMonitoringRefStructure*  VehicleMonitoringRef           0;	///< Optional element.
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_VehicleMonitoringRequestStructure 0;	///< Union _ns2__union_VehicleMonitoringRequestStructure selector: set to SOAP_UNION__ns2__union_VehicleMonitoringRequestStructure_<fieldname> or 0 to omit
    union _ns2__union_VehicleMonitoringRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a specific VEHICLE about which data is requested.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleRef" of XSD type "http://www.siri.org.uk/siri":VehicleRefStructure.
    ns2__VehicleRefStructure*            VehicleRef                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only vehicles for the specific LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_VehicleMonitoringRequestStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only VEHICLEs going to this DIRECTION.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="VehicleMonitoringRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The maximum number of MONITORED VEHICLE JOURNEYs to include in a given delivery. The most recent n Events within the look ahead window are included.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumVehicles" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                MaximumVehicles                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleMonitoringDetailLevel" of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringDetailEnumeration.
    enum ns2__VehicleMonitoringDetailEnumeration*  VehicleMonitoringDetailLevel   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If calls are to be returned, maximum number of calls to include in response. If absent, exclude all calls. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// class _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls operations:
/// - _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls* soap_new__ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls(soap*) allocate and default initialize
/// - _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls* soap_new__ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls(soap*, int num) allocate array and default initialize values
/// - _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls* soap_new_req__ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls(soap*, ...) allocate, set required members
/// - _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls* soap_new_set__ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls(soap*, ...) allocate, set all public members
/// - _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls::soap_default(soap*) default initialize members
/// - int soap_read__ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls(soap*, _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls*) deserialize from a stream
/// - int soap_write__ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls(soap*, _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls*) serialize to a stream
/// - _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls* _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls::soap_dup(soap*) returns deep copy of _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls::soap_del() deep deletes _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls data members, use only after _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__VehicleMonitoringRequestStructure_MaximumNumberOfCalls
    {
/// <PRE><BLOCKQUOTE>
///   Maximum number of previous calls to include. Only applies if VehicleMonitoringDetailLevel of Calls specified. Zero for none. If VehicleMonitoringDetailLevel of Calls specified but MaximumNumberOfCalls.Previous absent, include all previous calls. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "Previous" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             Previous                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum number of onwards calls to include. Zero for none. Only applies if VehicleMonitoringDetailLevel of 'calls' specified. Zero for none. If VehicleMonitoringDetailLevel calls specified but MaximumNumberOfCalls.Onwards absent, include all onwards calls. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// Element "Onwards" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             Onwards                        0;	///< Optional element.
    }                                   *MaximumNumberOfCalls           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether any related Situations should be included in the ServiceDelivery. Default is 'false'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "IncludeSituations" of XSD type xs:boolean.
    bool*                                IncludeSituations              0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ConnectionTimetableRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Request for Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionTimetableRequestStructure operations:
/// - ns2__ConnectionTimetableRequestStructure* soap_new_ns2__ConnectionTimetableRequestStructure(soap*) allocate and default initialize
/// - ns2__ConnectionTimetableRequestStructure* soap_new_ns2__ConnectionTimetableRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionTimetableRequestStructure* soap_new_req_ns2__ConnectionTimetableRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionTimetableRequestStructure* soap_new_set_ns2__ConnectionTimetableRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionTimetableRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionTimetableRequestStructure(soap*, ns2__ConnectionTimetableRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionTimetableRequestStructure(soap*, ns2__ConnectionTimetableRequestStructure*) serialize to a stream
/// - ns2__ConnectionTimetableRequestStructure* ns2__ConnectionTimetableRequestStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionTimetableRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionTimetableRequestStructure::soap_del() deep deletes ns2__ConnectionTimetableRequestStructure data members, use only after ns2__ConnectionTimetableRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionTimetableRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="ConnectionTimetableTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Earliest and latest time. If absent, default to the data horizon of the service.
/// </BLOCKQUOTE></PRE>
/// Element "ArrivalWindow" of XSD type "http://www.siri.org.uk/siri":ClosedTimestampRangeStructure.
    ns2__ClosedTimestampRangeStructure*  ArrivalWindow                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   CONNECTION link for which data is to be supplied.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Feeder LINE for which data is to be supplied.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Feeder DIRECTION for which data is to be supplied.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ConnectionTimetableRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":TimetabledFeederArrivalStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFeederItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for incoming visit by feeder journey to SERVICE JOURNEY NTERCHANGE
/// </BLOCKQUOTE></PRE>
/// class ns2__TimetabledFeederArrivalStructure operations:
/// - ns2__TimetabledFeederArrivalStructure* soap_new_ns2__TimetabledFeederArrivalStructure(soap*) allocate and default initialize
/// - ns2__TimetabledFeederArrivalStructure* soap_new_ns2__TimetabledFeederArrivalStructure(soap*, int num) allocate array and default initialize values
/// - ns2__TimetabledFeederArrivalStructure* soap_new_req_ns2__TimetabledFeederArrivalStructure(soap*, ...) allocate, set required members
/// - ns2__TimetabledFeederArrivalStructure* soap_new_set_ns2__TimetabledFeederArrivalStructure(soap*, ...) allocate, set all public members
/// - ns2__TimetabledFeederArrivalStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__TimetabledFeederArrivalStructure(soap*, ns2__TimetabledFeederArrivalStructure*) deserialize from a stream
/// - int soap_write_ns2__TimetabledFeederArrivalStructure(soap*, ns2__TimetabledFeederArrivalStructure*) serialize to a stream
/// - ns2__TimetabledFeederArrivalStructure* ns2__TimetabledFeederArrivalStructure::soap_dup(soap*) returns deep copy of ns2__TimetabledFeederArrivalStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__TimetabledFeederArrivalStructure::soap_del() deep deletes ns2__TimetabledFeederArrivalStructure data members, use only after ns2__TimetabledFeederArrivalStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__TimetabledFeederArrivalStructure : public ns2__AbstractFeederItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
/*  INHERITED FROM ns2__AbstractFeederItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time until when data is valid. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntilTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntilTime                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="InterchangeFeederIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying CALL at CONNECTION link of SERVICE JORUNEY INTERCHANGE of Feeder Journey .
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned. i.e. associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractFeederItemStructure */
/// <PRE><BLOCKQUOTE>
///   Information about the feeder journey.
/// </BLOCKQUOTE></PRE>
/// Element "FeederJourney" of XSD type "http://www.siri.org.uk/siri":InterchangeJourneyStructure.
    ns2__InterchangeJourneyStructure*    FeederJourney                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Planned arrival time at the connection point.
/// </BLOCKQUOTE></PRE>
/// Element "AimedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime                        AimedArrivalTime               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":ConnectionMonitoringRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Request Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionMonitoringRequestStructure operations:
/// - ns2__ConnectionMonitoringRequestStructure* soap_new_ns2__ConnectionMonitoringRequestStructure(soap*) allocate and default initialize
/// - ns2__ConnectionMonitoringRequestStructure* soap_new_ns2__ConnectionMonitoringRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionMonitoringRequestStructure* soap_new_req_ns2__ConnectionMonitoringRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionMonitoringRequestStructure* soap_new_set_ns2__ConnectionMonitoringRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionMonitoringRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionMonitoringRequestStructure(soap*, ns2__ConnectionMonitoringRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionMonitoringRequestStructure(soap*, ns2__ConnectionMonitoringRequestStructure*) serialize to a stream
/// - ns2__ConnectionMonitoringRequestStructure* ns2__ConnectionMonitoringRequestStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionMonitoringRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionMonitoringRequestStructure::soap_del() deep deletes ns2__ConnectionMonitoringRequestStructure data members, use only after ns2__ConnectionMonitoringRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionMonitoringRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="ConnectionMonitoringTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Forward duration for which events should be included, that is, interval before predicted arrival at the stop for which to include events: only journeys which will arrive or depart within this time span will be returned.
/// </BLOCKQUOTE></PRE>
/// Element "PreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           PreviewInterval                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   CONNECTION LINK for which data is to be supplied.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ConnectionMonitoringRequestStructure;	///< Union _ns2__union_ConnectionMonitoringRequestStructure selector: set to SOAP_UNION__ns2__union_ConnectionMonitoringRequestStructure_<fieldname>
    union _ns2__union_ConnectionMonitoringRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Return only journeys for the specified time.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectingTimeFilter" of XSD type "http://www.siri.org.uk/siri":ConnectingTimeFilterStructure.
    ns2__ConnectingTimeFilterStructure*  ConnectingTimeFilter           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Return only the specified journeys.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectingJourneyFilterStructure* of length 1..unbounded.
    std::vector<ns2__ConnectingJourneyFilterStructure*> *ConnectingJourneyFilter        1;
    }                                    union_ConnectionMonitoringRequestStructure;
//  END OF CHOICE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ConnectionMonitoringRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionMonitoringDetailLevel" of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringDetailEnumeration.
    enum ns2__ConnectionMonitoringDetailEnumeration*  ConnectionMonitoringDetailLevel 0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":MonitoredFeederArrivalStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFeederItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Real time connection at a stop.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoredFeederArrivalStructure operations:
/// - ns2__MonitoredFeederArrivalStructure* soap_new_ns2__MonitoredFeederArrivalStructure(soap*) allocate and default initialize
/// - ns2__MonitoredFeederArrivalStructure* soap_new_ns2__MonitoredFeederArrivalStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoredFeederArrivalStructure* soap_new_req_ns2__MonitoredFeederArrivalStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoredFeederArrivalStructure* soap_new_set_ns2__MonitoredFeederArrivalStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoredFeederArrivalStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoredFeederArrivalStructure(soap*, ns2__MonitoredFeederArrivalStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoredFeederArrivalStructure(soap*, ns2__MonitoredFeederArrivalStructure*) serialize to a stream
/// - ns2__MonitoredFeederArrivalStructure* ns2__MonitoredFeederArrivalStructure::soap_dup(soap*) returns deep copy of ns2__MonitoredFeederArrivalStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoredFeederArrivalStructure::soap_del() deep deletes ns2__MonitoredFeederArrivalStructure data members, use only after ns2__MonitoredFeederArrivalStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoredFeederArrivalStructure : public ns2__AbstractFeederItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
/*  INHERITED FROM ns2__AbstractFeederItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time until when data is valid. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntilTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntilTime                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="InterchangeFeederIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying CALL at CONNECTION link of SERVICE JORUNEY INTERCHANGE of Feeder Journey .
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned. i.e. associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractFeederItemStructure */
/// <PRE><BLOCKQUOTE>
///   Direct Cleardown identifier of connection arrival Activity that is being deleted.
/// </BLOCKQUOTE></PRE>
/// Element "ClearDownRef" of XSD type "http://www.siri.org.uk/siri":ClearDownRefStructure.
    ns2__ClearDownRefStructure*          ClearDownRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Information about the feeder journey.
/// </BLOCKQUOTE></PRE>
/// Element "FeederJourney" of XSD type "http://www.siri.org.uk/siri":InterchangeJourneyStructure.
    ns2__InterchangeJourneyStructure*    FeederJourney                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE is currently at stop. Default is false (xml default added from SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleAtStop.
    bool                                 VehicleAtStop                  0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Number of passengers who wish to transfer at the connection. If absent, not known.
/// </BLOCKQUOTE></PRE>
/// Element "NumberOfTransferPassengers" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             NumberOfTransferPassengers     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AimedArrivalTime.
    xsd__dateTime*                       AimedArrivalTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Predicted arrival time at the connection zone.
/// </BLOCKQUOTE></PRE>
/// Element "ExpectedArrivalTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ExpectedArrivalTime            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ArrivalPlatformName.
    ns2__NaturalLanguageStringStructure*  ArrivalPlatformName            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Latest time by which the feeder needs informationabout the connection from the distributor as to whether it will wait and for how long. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "SuggestedWaitDecisionTime" of XSD type xs:dateTime.
    xsd__dateTime*                       SuggestedWaitDecisionTime      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":MonitoredFeederArrivalCancellationStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFeederItemStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Deletion of a feeder connection.
/// </BLOCKQUOTE></PRE>
/// class ns2__MonitoredFeederArrivalCancellationStructure operations:
/// - ns2__MonitoredFeederArrivalCancellationStructure* soap_new_ns2__MonitoredFeederArrivalCancellationStructure(soap*) allocate and default initialize
/// - ns2__MonitoredFeederArrivalCancellationStructure* soap_new_ns2__MonitoredFeederArrivalCancellationStructure(soap*, int num) allocate array and default initialize values
/// - ns2__MonitoredFeederArrivalCancellationStructure* soap_new_req_ns2__MonitoredFeederArrivalCancellationStructure(soap*, ...) allocate, set required members
/// - ns2__MonitoredFeederArrivalCancellationStructure* soap_new_set_ns2__MonitoredFeederArrivalCancellationStructure(soap*, ...) allocate, set all public members
/// - ns2__MonitoredFeederArrivalCancellationStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__MonitoredFeederArrivalCancellationStructure(soap*, ns2__MonitoredFeederArrivalCancellationStructure*) deserialize from a stream
/// - int soap_write_ns2__MonitoredFeederArrivalCancellationStructure(soap*, ns2__MonitoredFeederArrivalCancellationStructure*) serialize to a stream
/// - ns2__MonitoredFeederArrivalCancellationStructure* ns2__MonitoredFeederArrivalCancellationStructure::soap_dup(soap*) returns deep copy of ns2__MonitoredFeederArrivalCancellationStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__MonitoredFeederArrivalCancellationStructure::soap_del() deep deletes ns2__MonitoredFeederArrivalCancellationStructure data members, use only after ns2__MonitoredFeederArrivalCancellationStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__MonitoredFeederArrivalCancellationStructure : public ns2__AbstractFeederItemStructure
{ public:
/*  INHERITED FROM ns2__AbstractItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time at which data was recorded.
/// </BLOCKQUOTE></PRE>
/// Element "RecordedAtTime" of XSD type xs:dateTime.
    xsd__dateTime                        RecordedAtTime                 1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractItemStructure */
/*  INHERITED FROM ns2__AbstractIdentifiedItemStructure:
/// <PRE><BLOCKQUOTE>
///   Identifier of item.
/// </BLOCKQUOTE></PRE>
/// Element "ItemIdentifier" of XSD type "http://www.siri.org.uk/siri":ItemIdentifierType.
    ns2__ItemIdentifierType*             ItemIdentifier                 0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractIdentifiedItemStructure */
/*  INHERITED FROM ns2__AbstractFeederItemStructure:
/// <PRE><BLOCKQUOTE>
///   Time until when data is valid. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "ValidUntilTime" of XSD type xs:dateTime.
    xsd__dateTime*                       ValidUntilTime                 0;	///< Optional element.
//  BEGIN GROUP <xs:group name="InterchangeFeederIdentityGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying CALL at CONNECTION link of SERVICE JORUNEY INTERCHANGE of Feeder Journey .
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to the the SERVICE JOURNEY INTERCHANGE between two journeys for which data is being returned.
/// </BLOCKQUOTE></PRE>
/// Element "InterchangeRef" of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to the CONNECTION link or ACCESS ZONE for which data is to be returned. i.e. associated with known feeder arrival and distributor departure STOP POINTs.
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinkRef" of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              1;	///< Required element.
//  BEGIN GROUP <xs:group name="ContextualisedStopPointInSequenceGroup">
/// <PRE><BLOCKQUOTE>
///   Elements identifying Ordered visit to a stop within calling sequence of a SERVICE PATTERN.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VisitNumber.
    ns2__VisitNumberType*                VisitNumber                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Order.
    xsd__positiveInteger*                Order                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> StopPointName                  0;
//  END OF GROUP
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractFeederItemStructure */
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a DIRECTION, typically outward or return.
/// </BLOCKQUOTE></PRE>
/// Element "DirectionRef" of XSD type "http://www.siri.org.uk/siri":DirectionRefStructure.
    ns2__DirectionRefStructure*          DirectionRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Reference to a Feeder VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element "VehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  VehicleJourneyRef              1;	///< Required element.
//  BEGIN GROUP <xs:group name="JourneyPatternInfoGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Elements describing the LINE, ROUTE and DIRECTION of a VEHICLE JOURNEYwhich are derived from the JOURNEY PATTERN associated with the journey. Values for these elements can be specified on an annual schedule and will be inherited, unless overriden, onto the production timetable and then onto the individul dated VEHICLE JOURNEYs of the timetable. Each monitored journey takes its values from the dated VEHICLE JOURNEY that it follows. The absence of a value on an entity at a given level indicates that the value should be inherited (i) from any recent preceding update message for the same entity, or if there is no previous override, (ii) from its immediate parent entity.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__MonitoredFeederArrivalCancellationStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Identifier of JOURNEY PATTERN that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternRef" of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
    ns2__JourneyPatternRefStructure*     JourneyPatternRef              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of Joruney Pattern
/// </BLOCKQUOTE></PRE>
/// Element "JourneyPatternName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  JourneyPatternName             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A means of transportation such as bus, rail, etc.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__VehicleModesEnumeration of length 0..unbounded.
    std::vector<enum ns2__VehicleModesEnumeration> VehicleMode                    0;
/// <PRE><BLOCKQUOTE>
///   Identifier of ROUTE that journey follows.
/// </BLOCKQUOTE></PRE>
/// Element "RouteRef" of XSD type "http://www.siri.org.uk/siri":RouteRefStructure.
    ns2__RouteRefStructure*              RouteRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINE is known to the public. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* element refs of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> PublishedLineName              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a GROUP OF LINEs to which journey belongs. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "GroupOfLinesRef" of XSD type "http://www.siri.org.uk/siri":GroupOfLinesRefStructure.
    ns2__GroupOfLinesRefStructure*       GroupOfLinesRef                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Description of the DIRECTION. May correspond to a DESTINATION DISPLAY. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> DirectionName                  0;
/// <PRE><BLOCKQUOTE>
///   Alternative identifier of LINE that an external system may associate with journey.
/// </BLOCKQUOTE></PRE>
/// Element "ExternalLineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               ExternalLineRef                0;	///< Optional element.
    }                                   *__MonitoredFeederArrivalCancellationStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Reason for cancellation. (Unbounded since SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__NaturalLanguageStringStructure* of length 0..unbounded.
    std::vector<ns2__NaturalLanguageStringStructure*> Reason                         0;
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
};

/// @brief "http://www.siri.org.uk/siri":GeneralMessageRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Service Request for General Messages.
/// </BLOCKQUOTE></PRE>
/// class ns2__GeneralMessageRequestStructure operations:
/// - ns2__GeneralMessageRequestStructure* soap_new_ns2__GeneralMessageRequestStructure(soap*) allocate and default initialize
/// - ns2__GeneralMessageRequestStructure* soap_new_ns2__GeneralMessageRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__GeneralMessageRequestStructure* soap_new_req_ns2__GeneralMessageRequestStructure(soap*, ...) allocate, set required members
/// - ns2__GeneralMessageRequestStructure* soap_new_set_ns2__GeneralMessageRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__GeneralMessageRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__GeneralMessageRequestStructure(soap*, ns2__GeneralMessageRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__GeneralMessageRequestStructure(soap*, ns2__GeneralMessageRequestStructure*) serialize to a stream
/// - ns2__GeneralMessageRequestStructure* ns2__GeneralMessageRequestStructure::soap_dup(soap*) returns deep copy of ns2__GeneralMessageRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__GeneralMessageRequestStructure::soap_del() deep deletes ns2__GeneralMessageRequestStructure data members, use only after ns2__GeneralMessageRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__GeneralMessageRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="GeneralMessageTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Referenceto an Info Channel for which messages are to be returned.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__InfoChannelRefStructure* of length 0..unbounded.
    std::vector<ns2__InfoChannelRefStructure*> InfoChannelRef                 0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="GeneralMessageRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":FacilityMonitoringRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Functional Service Request for Facility Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityMonitoringRequestStructure operations:
/// - ns2__FacilityMonitoringRequestStructure* soap_new_ns2__FacilityMonitoringRequestStructure(soap*) allocate and default initialize
/// - ns2__FacilityMonitoringRequestStructure* soap_new_ns2__FacilityMonitoringRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityMonitoringRequestStructure* soap_new_req_ns2__FacilityMonitoringRequestStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityMonitoringRequestStructure* soap_new_set_ns2__FacilityMonitoringRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityMonitoringRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityMonitoringRequestStructure(soap*, ns2__FacilityMonitoringRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityMonitoringRequestStructure(soap*, ns2__FacilityMonitoringRequestStructure*) serialize to a stream
/// - ns2__FacilityMonitoringRequestStructure* ns2__FacilityMonitoringRequestStructure::soap_dup(soap*) returns deep copy of ns2__FacilityMonitoringRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityMonitoringRequestStructure::soap_del() deep deletes ns2__FacilityMonitoringRequestStructure data members, use only after ns2__FacilityMonitoringRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityMonitoringRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="FacilityMonitoringTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Forward duration for which Facilities status change: only status change which will occur within this time span will be returned.
/// </BLOCKQUOTE></PRE>
/// Element "PreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           PreviewInterval                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Start time for PreviewInterval. If absent, then current time is assumed.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    xsd__dateTime*                       StartTime                      0;	///< Optional element.
//  BEGIN GROUP <xs:group name="FacilityLocationGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Facility Monitoring requests, based on the facility location .
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__FacilityMonitoringRequestStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Reference to a Facility.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityRefStructure*> FacilityRef                    0;
/// <PRE><BLOCKQUOTE>
///   Classification of facilities into arbitrary Facility categories. SIRI provides a recommended set of values covering most usages. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":FeatureRef.
    ns2__FeatureRefStructure*            FeatureRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":LineRef.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a CONNECTION link
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ConnectionLinkRef.
    ns2__ConnectionLinkRefStructure*     ConnectionLinkRef              0;	///< Optional element.
//  BEGIN CHOICE <xs:choice minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Use of simple reference is deprecated
/// </BLOCKQUOTE></PRE>
   $int                                  __union_FacilityMonitoringRequestStructure 0;	///< Union _ns2__union_FacilityMonitoringRequestStructure selector: set to SOAP_UNION__ns2__union_FacilityMonitoringRequestStructure_<fieldname> or 0 to omit
    union _ns2__union_FacilityMonitoringRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Refercence to a VEHICLE JOURNEY framed by the day. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleJourneyRef.
    ns2__VehicleJourneyRefStructure*     VehicleJourneyRef              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_FacilityMonitoringRequestStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Reference to a SERVCIE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InterchangeRef.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleRef.
    ns2__VehicleRefStructure*            VehicleRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a stop place.
/// </BLOCKQUOTE></PRE>
/// Element "StopPlaceRef" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceRefStructure.
    ns4__StopPlaceRefStructure*          StopPlaceRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a stop place component.
/// </BLOCKQUOTE></PRE>
/// Element "StopPlaceComponentRef" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceComponentRefStructure.
    ns4__StopPlaceComponentRefStructure*  StopPlaceComponentRef          0;	///< Optional element.
    }                                   *__FacilityMonitoringRequestStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Filter only for facility changes that affect the following accessibility needs.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__AccessibilityNeedsFilterStructure* of length 0..unbounded.
    std::vector<ns2__AccessibilityNeedsFilterStructure*> AccessibilityNeedsFilter       0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="FacilityMonitoringRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The maximum number of facility status in a given delivery. The most recent n Events within the look ahead window are included.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumNumberOfFacilityConditions" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                MaximumNumberOfFacilityConditions 0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":SituationExchangeRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractFunctionalServiceRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Functional Service Request for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// class ns2__SituationExchangeRequestStructure operations:
/// - ns2__SituationExchangeRequestStructure* soap_new_ns2__SituationExchangeRequestStructure(soap*) allocate and default initialize
/// - ns2__SituationExchangeRequestStructure* soap_new_ns2__SituationExchangeRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SituationExchangeRequestStructure* soap_new_req_ns2__SituationExchangeRequestStructure(soap*, ...) allocate, set required members
/// - ns2__SituationExchangeRequestStructure* soap_new_set_ns2__SituationExchangeRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__SituationExchangeRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SituationExchangeRequestStructure(soap*, ns2__SituationExchangeRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__SituationExchangeRequestStructure(soap*, ns2__SituationExchangeRequestStructure*) serialize to a stream
/// - ns2__SituationExchangeRequestStructure* ns2__SituationExchangeRequestStructure::soap_dup(soap*) returns deep copy of ns2__SituationExchangeRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SituationExchangeRequestStructure::soap_del() deep deletes ns2__SituationExchangeRequestStructure data members, use only after ns2__SituationExchangeRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SituationExchangeRequestStructure : public ns2__AbstractFunctionalServiceRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure:
    END OF INHERITED FROM ns2__AbstractFunctionalServiceRequestStructure */
//  BEGIN GROUP <xs:group name="SituationExchangeTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the content to be returned. Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Forward duration for which SITUATIONs should be included, that is, only SITUATIONs that start before the end of this window time will be included.
/// </BLOCKQUOTE></PRE>
/// Element "PreviewInterval" of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
    ns2__PositiveDurationType*           PreviewInterval                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Start time for for selecting SITUATIONs to be sent. Only SITUATIONs or updates created after this time will be sent. This enables a restart without resending everything.
/// </BLOCKQUOTE></PRE>
/// Element "StartTime" of XSD type xs:dateTime.
    xsd__dateTime*                       StartTime                      0;	///< Optional element.
//  BEGIN GROUP <xs:group name="AffectedModeGroup">
/// <PRE><BLOCKQUOTE>
///   Mode Submode and OPERATOR. Overrides any value sspecified for (i) Affected Network (ii) General Context.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Vehicle mode- Tpeg ModeType pti1.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleMode.
    enum ns2__VehicleModesOfTransportEnumeration  VehicleMode                    0 = ns2__VehicleModesOfTransportEnumeration__unknown;	///< Default element value="unknown".
//  BEGIN GROUP <xs:group name="PtNetworkModeChoiceGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Submode of mode.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_SituationExchangeRequestStructure 0;	///< Union _ns2__union_SituationExchangeRequestStructure selector: set to SOAP_UNION__ns2__union_SituationExchangeRequestStructure_<fieldname> or 0 to omit
    union _ns2__union_SituationExchangeRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   TPEG pti08 Air submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":AirSubmode.
    enum ns2__AirSubmodesOfTransportEnumeration  AirSubmode                     0 = ns2__AirSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti05 Bus submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":BusSubmode.
    enum ns2__BusSubmodesOfTransportEnumeration  BusSubmode                     0 = ns2__BusSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti03 Coach submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CoachSubmode.
    enum ns2__CoachSubmodesOfTransportEnumeration  CoachSubmode                   0 = ns2__CoachSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti04 Metro submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":MetroSubmode.
    enum ns2__MetroSubmodesOfTransportEnumeration  MetroSubmode                   0 = ns2__MetroSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti02 Rail submodes loc13.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RailSubmode.
    enum ns2__RailSubmodesOfTransportEnumeration  RailSubmode                    0 = ns2__RailSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti06 Tram submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":TramSubmode.
    enum ns2__TramSubmodesOfTransportEnumeration  TramSubmode                    0 = ns2__TramSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
/// <PRE><BLOCKQUOTE>
///   TPEG pti07 Water submodes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":WaterSubmode.
    enum ns2__WaterSubmodesOfTransportEnumeration  WaterSubmode                   0 = ns2__WaterSubmodesOfTransportEnumeration__unknown;	///< Default element value="unknown".
    }                                    union_SituationExchangeRequestStructure;
//  END OF CHOICE
//  END OF GROUP
/// Element "AccessMode" of XSD type "http://www.ifopt.org.uk/ifopt":AccessModesEnumeration.
    enum ns4__AccessModesEnumeration*    AccessMode                     0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationClassifierFilterGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Situation Exchange Service requests, based on the SITUATION Classifiers. Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Severity filter value to apply: only SITUATIONs with a severity greater than or equal to the specified value will be returned. See TPEG severities. Default is 'all'.
/// </BLOCKQUOTE></PRE>
/// Element "Severity" of XSD type "http://www.siri.org.uk/siri":SeverityEnumeration.
    enum ns2__SeverityEnumeration*       Severity                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Types of SITUATION to include.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__ScopeTypeEnumeration of length 0..unbounded.
    std::vector<enum ns2__ScopeTypeEnumeration> Scope                          0;
/// <PRE><BLOCKQUOTE>
///   Whether just planned, unplanned or both SITUATIONs will be returned.
/// </BLOCKQUOTE></PRE>
/// Element "Predictability" of XSD type "http://www.siri.org.uk/siri":PredictabilityEnumeration.
    enum ns2__PredictabilityEnumeration*  Predictability                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary application specific classifiers. Only SITUATIONs that match these keywords will be returned.
/// </BLOCKQUOTE></PRE>
/// Element "Keywords" of XSD type xs:NMTOKENS.
    xsd__NMTOKENS*                       Keywords                       0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationStatusFilterGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Situation Exchange Service requests, based on the SITUATION Status. Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether incident has been verified or not If not specified return all.
/// </BLOCKQUOTE></PRE>
/// Element "Verification" of XSD type "http://www.siri.org.uk/siri":VerificationStatusEnumeration.
    enum ns2__VerificationStatusEnumeration*  Verification                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Workflow Progress Status. One of a specified set of overall processing states assigned to SITUATION. For example, 'Draft' for not yet published; 'Published' for live SITUATIONs; 'Closed' indicates a completed SITUATION. If not specified return open, published closing and closed. l.
/// </BLOCKQUOTE></PRE>
/// Vector of enum ns2__WorkflowStatusEnumeration of length 0..unbounded.
    enum ns2__WorkflowStatusEnumeration Progress                       0 = ns2__WorkflowStatusEnumeration__open;	///< Default element value="open".
/// <PRE><BLOCKQUOTE>
///   Whether SITUATION is real or a test. If not specified return all.
/// </BLOCKQUOTE></PRE>
/// Element "Reality" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InformationStatusEnum.
    enum ns5__InformationStatusEnum*     Reality                        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationNetworkFilterGroup" minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Situation Exchange Service requests, based on the SITUATION Network. Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
//  BEGIN SEQUENCE <xs:sequence minOccurs="0">
    class __ns2__SituationExchangeRequestStructure_sequence
    {
/// <PRE><BLOCKQUOTE>
///   Referance to an OPERATOR. If unspecified, all OPERATOR.s.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   OPERATIONAL UNIT responsible for managing services.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__OperationalUnitRefStructure* of length 0..unbounded.
    std::vector<ns2__OperationalUnitRefStructure*> OperationalUnitRef             0;
/// <PRE><BLOCKQUOTE>
///   Reference to a NETWORK.
/// </BLOCKQUOTE></PRE>
/// Element "NetworkRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           NetworkRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__LineRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__LineRefStructure* > LineRef                        0;
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":StopPointRef.
    ns2__StopPointRefStructure*          StopPointRef                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a CONNECTION link
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionLinkRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__ConnectionLinkRefStructure*> ConnectionLinkRef              0;
/// <PRE><BLOCKQUOTE>
///   Reference to a Facility.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityRefStructure* element refs of length 0..unbounded.
    std::vector<ns2__FacilityRefStructure*> FacilityRef                    0;
    }                                   *__SituationExchangeRequestStructure_sequence 0;
//  END OF SEQUENCE
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationStopPlaceFilterGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Situation Exchange Service requests, based on the STOP PLACEs affected SITUATIONs. Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP PLACE.
/// </BLOCKQUOTE></PRE>
/// Element "StopPlaceRef" of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceRefStructure.
    ns4__StopPlaceRefStructure*          StopPlaceRef                   0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationJourneyFilterGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Situation Exchange Service requests, based on the VEHICLE JOURNEYs affected by the SITUATION. Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice minOccurs="0">
/// <PRE><BLOCKQUOTE>
///   Use of simple reference is deprecated
/// </BLOCKQUOTE></PRE>
   $int                                  __union_SituationExchangeRequestStructure_ 0;	///< Union _ns2__union_SituationExchangeRequestStructure_ selector: set to SOAP_UNION__ns2__union_SituationExchangeRequestStructure__<fieldname> or 0 to omit
    union _ns2__union_SituationExchangeRequestStructure_
    {
/// <PRE><BLOCKQUOTE>
///   Refercence to a VEHICLE JOURENY framed by the day. SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "FramedVehicleJourneyRef" of XSD type "http://www.siri.org.uk/siri":FramedVehicleJourneyRefStructure.
    ns2__FramedVehicleJourneyRefStructure*  FramedVehicleJourneyRef        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleJourneyRef.
    ns2__VehicleJourneyRefStructure*     VehicleJourneyRef              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_SituationExchangeRequestStructure_;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Reference to a SERVCIE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":InterchangeRef.
    ns2__InterchangeRefStructure*        InterchangeRef                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":VehicleRef.
    ns2__VehicleRefStructure*            VehicleRef                     0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationPlaceFilterGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Situation Exchange Service requests, based on the SITUATION Place. Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a COUNTRY where incident takes place If specified only incidents that affect this place country will be returned.
/// </BLOCKQUOTE></PRE>
/// Element "CountryRef" of XSD type "http://www.ifopt.org.uk/ifopt":CountryRefStructure.
    ns4__CountryRefStructure*            CountryRef                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a TOPOGRAPHIC PLACE. Only incidents which are deemed to affect this place will be returned.
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        PlaceRef                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bounding box of an arbitrary area. Only incidents geocoded as falling within area will be included.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__LocationStructure* of length 0..2.
    std::vector<ns2__LocationStructure*> Location                       0:2;
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Situation Exchange Service requests, based on the SITUATION Road. Logically ANDed with other values.
/// </BLOCKQUOTE></PRE>
/// class _ns2__SituationExchangeRequestStructure_SituationRoadFilter operations:
/// - _ns2__SituationExchangeRequestStructure_SituationRoadFilter* soap_new__ns2__SituationExchangeRequestStructure_SituationRoadFilter(soap*) allocate and default initialize
/// - _ns2__SituationExchangeRequestStructure_SituationRoadFilter* soap_new__ns2__SituationExchangeRequestStructure_SituationRoadFilter(soap*, int num) allocate array and default initialize values
/// - _ns2__SituationExchangeRequestStructure_SituationRoadFilter* soap_new_req__ns2__SituationExchangeRequestStructure_SituationRoadFilter(soap*, ...) allocate, set required members
/// - _ns2__SituationExchangeRequestStructure_SituationRoadFilter* soap_new_set__ns2__SituationExchangeRequestStructure_SituationRoadFilter(soap*, ...) allocate, set all public members
/// - _ns2__SituationExchangeRequestStructure_SituationRoadFilter::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SituationExchangeRequestStructure_SituationRoadFilter(soap*, _ns2__SituationExchangeRequestStructure_SituationRoadFilter*) deserialize from a stream
/// - int soap_write__ns2__SituationExchangeRequestStructure_SituationRoadFilter(soap*, _ns2__SituationExchangeRequestStructure_SituationRoadFilter*) serialize to a stream
/// - _ns2__SituationExchangeRequestStructure_SituationRoadFilter* _ns2__SituationExchangeRequestStructure_SituationRoadFilter::soap_dup(soap*) returns deep copy of _ns2__SituationExchangeRequestStructure_SituationRoadFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SituationExchangeRequestStructure_SituationRoadFilter::soap_del() deep deletes _ns2__SituationExchangeRequestStructure_SituationRoadFilter data members, use only after _ns2__SituationExchangeRequestStructure_SituationRoadFilter::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__SituationExchangeRequestStructure_SituationRoadFilter
    {
/// Vector of ns2__RoadFilterStructure* of length 1..unbounded.
    std::vector<ns2__RoadFilterStructure*> RoadFilter                     1;
    }                                   *SituationRoadFilter            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameters to filter Situation Exchange Service requests, based on specific needs .
/// </BLOCKQUOTE></PRE>
/// Vector of ns3__PassengerAccessibilityNeedsStructure* of length 0..unbounded.
    std::vector<ns3__PassengerAccessibilityNeedsStructure*> AccessibilityNeedFilter        0;
//  END OF GROUP
//  BEGIN GROUP <xs:group name="SituationExchangeRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values.
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":IncludeTranslations.
    bool*                                IncludeTranslations            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The maximum number of SITUATION elements to return in a given delivery. The most recent n Events within the look ahead window are included.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumNumberOfSituationElements" of XSD type xs:positiveInteger.
    xsd__positiveInteger*                MaximumNumberOfSituationElements 0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":StopPointsDiscoveryRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Requests for stop reference data for use in service requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__StopPointsDiscoveryRequestStructure operations:
/// - ns2__StopPointsDiscoveryRequestStructure* soap_new_ns2__StopPointsDiscoveryRequestStructure(soap*) allocate and default initialize
/// - ns2__StopPointsDiscoveryRequestStructure* soap_new_ns2__StopPointsDiscoveryRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__StopPointsDiscoveryRequestStructure* soap_new_req_ns2__StopPointsDiscoveryRequestStructure(soap*, ...) allocate, set required members
/// - ns2__StopPointsDiscoveryRequestStructure* soap_new_set_ns2__StopPointsDiscoveryRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__StopPointsDiscoveryRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__StopPointsDiscoveryRequestStructure(soap*, ns2__StopPointsDiscoveryRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__StopPointsDiscoveryRequestStructure(soap*, ns2__StopPointsDiscoveryRequestStructure*) serialize to a stream
/// - ns2__StopPointsDiscoveryRequestStructure* ns2__StopPointsDiscoveryRequestStructure::soap_dup(soap*) returns deep copy of ns2__StopPointsDiscoveryRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__StopPointsDiscoveryRequestStructure::soap_del() deep deletes ns2__StopPointsDiscoveryRequestStructure data members, use only after ns2__StopPointsDiscoveryRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__StopPointsDiscoveryRequestStructure : public ns2__AbstractDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
//  BEGIN GROUP <xs:group name="StopPointsDiscoveryRequestTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the STOP POINTs to be returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_StopPointsDiscoveryRequestStructure;	///< Union _ns2__union_StopPointsDiscoveryRequestStructure selector: set to SOAP_UNION__ns2__union_StopPointsDiscoveryRequestStructure_<fieldname>
    union _ns2__union_StopPointsDiscoveryRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Rectangle containing stops be returned. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "BoundingBox" of XSD type "http://www.siri.org.uk/siri":BoundingBoxStructure.
    ns2__BoundingBoxStructure*           BoundingBox                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Circle containing stops be returned. Point indicates centre, precision indicates radius (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "Circle" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Circle                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only stops associated with the PLACE . (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               PlaceRef                       0;	///< Optional element.
    }                                    union_StopPointsDiscoveryRequestStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only stops run by the specified OPERATOR. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only stops for the given LINE. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopPointsDiscoveryRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of stops returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "StopPointsDetailLevel" of XSD type "http://www.siri.org.uk/siri":StopPointsDetailEnumeration.
    enum ns2__StopPointsDetailEnumeration  StopPointsDetailLevel          0 = ns2__StopPointsDetailEnumeration__normal;	///< Default element value="normal".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":LinesDiscoveryRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Requests for LINE data for use in service requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__LinesDiscoveryRequestStructure operations:
/// - ns2__LinesDiscoveryRequestStructure* soap_new_ns2__LinesDiscoveryRequestStructure(soap*) allocate and default initialize
/// - ns2__LinesDiscoveryRequestStructure* soap_new_ns2__LinesDiscoveryRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__LinesDiscoveryRequestStructure* soap_new_req_ns2__LinesDiscoveryRequestStructure(soap*, ...) allocate, set required members
/// - ns2__LinesDiscoveryRequestStructure* soap_new_set_ns2__LinesDiscoveryRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__LinesDiscoveryRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__LinesDiscoveryRequestStructure(soap*, ns2__LinesDiscoveryRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__LinesDiscoveryRequestStructure(soap*, ns2__LinesDiscoveryRequestStructure*) serialize to a stream
/// - ns2__LinesDiscoveryRequestStructure* ns2__LinesDiscoveryRequestStructure::soap_dup(soap*) returns deep copy of ns2__LinesDiscoveryRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__LinesDiscoveryRequestStructure::soap_del() deep deletes ns2__LinesDiscoveryRequestStructure data members, use only after ns2__LinesDiscoveryRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__LinesDiscoveryRequestStructure : public ns2__AbstractDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
//  BEGIN GROUP <xs:group name="LinesDiscoveryRequestTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the LINEs to be returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_LinesDiscoveryRequestStructure 0;	///< Union _ns2__union_LinesDiscoveryRequestStructure selector: set to SOAP_UNION__ns2__union_LinesDiscoveryRequestStructure_<fieldname> or 0 to omit
    union _ns2__union_LinesDiscoveryRequestStructure
    {
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Rectangle containing stops of lines be returned. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "BoundingBox" of XSD type "http://www.siri.org.uk/siri":BoundingBoxStructure.
    ns2__BoundingBoxStructure*           BoundingBox                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Circle containing stops for lines be returned. Point indicates centre, precision indicates radius (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "Circle" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Circle                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only lines for stops assoicated with the place . (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               PlaceRef                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Reference to line for which details are to be returned (v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "LineDirectionRef" of XSD type "http://www.siri.org.uk/siri":LineDirectionStructure.
    ns2__LineDirectionStructure*         LineDirectionRef               nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_LinesDiscoveryRequestStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Stop d run by the specified OPERATOR. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="LinesDiscoveryRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of Linesreturned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "LinesDetailLevel" of XSD type "http://www.siri.org.uk/siri":LinesDetailEnumeration.
    enum ns2__LinesDetailEnumeration     LinesDetailLevel               0 = ns2__LinesDetailEnumeration__normal;	///< Default element value="normal".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ProductCategoriesDiscoveryRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Requests for TYPE OF PRODUCT CATEGORY reference data for use in service requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__ProductCategoriesDiscoveryRequestStructure operations:
/// - ns2__ProductCategoriesDiscoveryRequestStructure* soap_new_ns2__ProductCategoriesDiscoveryRequestStructure(soap*) allocate and default initialize
/// - ns2__ProductCategoriesDiscoveryRequestStructure* soap_new_ns2__ProductCategoriesDiscoveryRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ProductCategoriesDiscoveryRequestStructure* soap_new_req_ns2__ProductCategoriesDiscoveryRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ProductCategoriesDiscoveryRequestStructure* soap_new_set_ns2__ProductCategoriesDiscoveryRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ProductCategoriesDiscoveryRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ProductCategoriesDiscoveryRequestStructure(soap*, ns2__ProductCategoriesDiscoveryRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ProductCategoriesDiscoveryRequestStructure(soap*, ns2__ProductCategoriesDiscoveryRequestStructure*) serialize to a stream
/// - ns2__ProductCategoriesDiscoveryRequestStructure* ns2__ProductCategoriesDiscoveryRequestStructure::soap_dup(soap*) returns deep copy of ns2__ProductCategoriesDiscoveryRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ProductCategoriesDiscoveryRequestStructure::soap_del() deep deletes ns2__ProductCategoriesDiscoveryRequestStructure data members, use only after ns2__ProductCategoriesDiscoveryRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ProductCategoriesDiscoveryRequestStructure : public ns2__AbstractDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
//  BEGIN GROUP <xs:group name="ProductCategoriesRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of Facilities returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":VehicleFeaturesRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Requests for VEHICLE feature data for use in service requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__VehicleFeaturesRequestStructure operations:
/// - ns2__VehicleFeaturesRequestStructure* soap_new_ns2__VehicleFeaturesRequestStructure(soap*) allocate and default initialize
/// - ns2__VehicleFeaturesRequestStructure* soap_new_ns2__VehicleFeaturesRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__VehicleFeaturesRequestStructure* soap_new_req_ns2__VehicleFeaturesRequestStructure(soap*, ...) allocate, set required members
/// - ns2__VehicleFeaturesRequestStructure* soap_new_set_ns2__VehicleFeaturesRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__VehicleFeaturesRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__VehicleFeaturesRequestStructure(soap*, ns2__VehicleFeaturesRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__VehicleFeaturesRequestStructure(soap*, ns2__VehicleFeaturesRequestStructure*) serialize to a stream
/// - ns2__VehicleFeaturesRequestStructure* ns2__VehicleFeaturesRequestStructure::soap_dup(soap*) returns deep copy of ns2__VehicleFeaturesRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__VehicleFeaturesRequestStructure::soap_del() deep deletes ns2__VehicleFeaturesRequestStructure data members, use only after ns2__VehicleFeaturesRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__VehicleFeaturesRequestStructure : public ns2__AbstractDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
//  BEGIN GROUP <xs:group name="VehicleFeaturesRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of Facilities returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":InfoChannelDiscoveryRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Requests for info channels for use in service requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__InfoChannelDiscoveryRequestStructure operations:
/// - ns2__InfoChannelDiscoveryRequestStructure* soap_new_ns2__InfoChannelDiscoveryRequestStructure(soap*) allocate and default initialize
/// - ns2__InfoChannelDiscoveryRequestStructure* soap_new_ns2__InfoChannelDiscoveryRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__InfoChannelDiscoveryRequestStructure* soap_new_req_ns2__InfoChannelDiscoveryRequestStructure(soap*, ...) allocate, set required members
/// - ns2__InfoChannelDiscoveryRequestStructure* soap_new_set_ns2__InfoChannelDiscoveryRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__InfoChannelDiscoveryRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__InfoChannelDiscoveryRequestStructure(soap*, ns2__InfoChannelDiscoveryRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__InfoChannelDiscoveryRequestStructure(soap*, ns2__InfoChannelDiscoveryRequestStructure*) serialize to a stream
/// - ns2__InfoChannelDiscoveryRequestStructure* ns2__InfoChannelDiscoveryRequestStructure::soap_dup(soap*) returns deep copy of ns2__InfoChannelDiscoveryRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__InfoChannelDiscoveryRequestStructure::soap_del() deep deletes ns2__InfoChannelDiscoveryRequestStructure data members, use only after ns2__InfoChannelDiscoveryRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__InfoChannelDiscoveryRequestStructure : public ns2__AbstractDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":FacilityRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Requests for info channels for use in service requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__FacilityRequestStructure operations:
/// - ns2__FacilityRequestStructure* soap_new_ns2__FacilityRequestStructure(soap*) allocate and default initialize
/// - ns2__FacilityRequestStructure* soap_new_ns2__FacilityRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__FacilityRequestStructure* soap_new_req_ns2__FacilityRequestStructure(soap*, ...) allocate, set required members
/// - ns2__FacilityRequestStructure* soap_new_set_ns2__FacilityRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__FacilityRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__FacilityRequestStructure(soap*, ns2__FacilityRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__FacilityRequestStructure(soap*, ns2__FacilityRequestStructure*) serialize to a stream
/// - ns2__FacilityRequestStructure* ns2__FacilityRequestStructure::soap_dup(soap*) returns deep copy of ns2__FacilityRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__FacilityRequestStructure::soap_del() deep deletes ns2__FacilityRequestStructure data members, use only after ns2__FacilityRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__FacilityRequestStructure : public ns2__AbstractDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
//  BEGIN GROUP <xs:group name="FacilityRequestTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the Facilities to be returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_FacilityRequestStructure;	///< Union _ns2__union_FacilityRequestStructure selector: set to SOAP_UNION__ns2__union_FacilityRequestStructure_<fieldname>
    union _ns2__union_FacilityRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Rectangle containing Facilities be returned. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "BoundingBox" of XSD type "http://www.siri.org.uk/siri":BoundingBoxStructure.
    ns2__BoundingBoxStructure*           BoundingBox                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Facilities associated with the TOPOGRAPHIC PLACE . (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               PlaceRef                       0;	///< Optional element.
    }                                    union_FacilityRequestStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Facilities run by the specified OPERATOR. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Facilities for the given LINE. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="FacilityRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of Facilities returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "FacilityDetailLevel" of XSD type "http://www.siri.org.uk/siri":FacilityDetailEnumeration.
    enum ns2__FacilityDetailEnumeration  FacilityDetailLevel            0 = ns2__FacilityDetailEnumeration__normal;	///< Default element value="normal".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ServiceFeaturesDiscoveryRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for equests for TYPE OF PRODUCT CATEGORY reference data for use in service requests.
/// </BLOCKQUOTE></PRE>
/// class ns2__ServiceFeaturesDiscoveryRequestStructure operations:
/// - ns2__ServiceFeaturesDiscoveryRequestStructure* soap_new_ns2__ServiceFeaturesDiscoveryRequestStructure(soap*) allocate and default initialize
/// - ns2__ServiceFeaturesDiscoveryRequestStructure* soap_new_ns2__ServiceFeaturesDiscoveryRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ServiceFeaturesDiscoveryRequestStructure* soap_new_req_ns2__ServiceFeaturesDiscoveryRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ServiceFeaturesDiscoveryRequestStructure* soap_new_set_ns2__ServiceFeaturesDiscoveryRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ServiceFeaturesDiscoveryRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ServiceFeaturesDiscoveryRequestStructure(soap*, ns2__ServiceFeaturesDiscoveryRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ServiceFeaturesDiscoveryRequestStructure(soap*, ns2__ServiceFeaturesDiscoveryRequestStructure*) serialize to a stream
/// - ns2__ServiceFeaturesDiscoveryRequestStructure* ns2__ServiceFeaturesDiscoveryRequestStructure::soap_dup(soap*) returns deep copy of ns2__ServiceFeaturesDiscoveryRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ServiceFeaturesDiscoveryRequestStructure::soap_del() deep deletes ns2__ServiceFeaturesDiscoveryRequestStructure data members, use only after ns2__ServiceFeaturesDiscoveryRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ServiceFeaturesDiscoveryRequestStructure : public ns2__AbstractDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
};

/// @brief "http://www.siri.org.uk/siri":ConnectionLinksDiscoveryRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractDiscoveryRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Requests for CONNECTION LINK data for use in service requests. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// class ns2__ConnectionLinksDiscoveryRequestStructure operations:
/// - ns2__ConnectionLinksDiscoveryRequestStructure* soap_new_ns2__ConnectionLinksDiscoveryRequestStructure(soap*) allocate and default initialize
/// - ns2__ConnectionLinksDiscoveryRequestStructure* soap_new_ns2__ConnectionLinksDiscoveryRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__ConnectionLinksDiscoveryRequestStructure* soap_new_req_ns2__ConnectionLinksDiscoveryRequestStructure(soap*, ...) allocate, set required members
/// - ns2__ConnectionLinksDiscoveryRequestStructure* soap_new_set_ns2__ConnectionLinksDiscoveryRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__ConnectionLinksDiscoveryRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ConnectionLinksDiscoveryRequestStructure(soap*, ns2__ConnectionLinksDiscoveryRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__ConnectionLinksDiscoveryRequestStructure(soap*, ns2__ConnectionLinksDiscoveryRequestStructure*) serialize to a stream
/// - ns2__ConnectionLinksDiscoveryRequestStructure* ns2__ConnectionLinksDiscoveryRequestStructure::soap_dup(soap*) returns deep copy of ns2__ConnectionLinksDiscoveryRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ConnectionLinksDiscoveryRequestStructure::soap_del() deep deletes ns2__ConnectionLinksDiscoveryRequestStructure data members, use only after ns2__ConnectionLinksDiscoveryRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ConnectionLinksDiscoveryRequestStructure : public ns2__AbstractDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
//  BEGIN GROUP <xs:group name="ConnectionLinksDiscoveryRequestTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the CONNECTION LINKs to be returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice minOccurs="0">
   $int                                  __union_ConnectionLinksDiscoveryRequestStructure 0;	///< Union _ns2__union_ConnectionLinksDiscoveryRequestStructure selector: set to SOAP_UNION__ns2__union_ConnectionLinksDiscoveryRequestStructure_<fieldname> or 0 to omit
    union _ns2__union_ConnectionLinksDiscoveryRequestStructure
    {
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   Rectangle containing stops of ConnectionLinks be returned.
/// </BLOCKQUOTE></PRE>
/// Element "BoundingBox" of XSD type "http://www.siri.org.uk/siri":BoundingBoxStructure.
    ns2__BoundingBoxStructure*           BoundingBox                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Circle containing stops for ConnectionLinks be returned. Point indicates centre, precision indicates radius
/// </BLOCKQUOTE></PRE>
/// Element "Circle" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Circle                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only ConnectionLinks for stops assoicated with the place .
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               PlaceRef                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF CHOICE
    }                                    union_ConnectionLinksDiscoveryRequestStructure;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only ConnectionLinks for stops assoicated with the specified line.
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only Stop d run by the specified OPERATOR.
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="ConnectionLinksDiscoveryRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of ConnectionLinks returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "ConnectionLinksDetailLevel" of XSD type "http://www.siri.org.uk/siri":ConnectionLinksDetailEnumeration.
    enum ns2__ConnectionLinksDetailEnumeration  ConnectionLinksDetailLevel     0 = ns2__ConnectionLinksDetailEnumeration__normal;	///< Default element value="normal".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        1;	///< Fixed attribute value="2.0".
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceDelivery
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to deliver payload data. Either answers a direct ServiceRequest, or asynchronously satisfies a subscription. May be sent directly in one step, or fetched in response to a DataSupply Request.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ServiceDelivery is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryStructure.
///
/// class _ns2__ServiceDelivery operations:
/// - _ns2__ServiceDelivery* soap_new__ns2__ServiceDelivery(soap*) allocate and default initialize
/// - _ns2__ServiceDelivery* soap_new__ns2__ServiceDelivery(soap*, int num) allocate array and default initialize values
/// - _ns2__ServiceDelivery* soap_new_req__ns2__ServiceDelivery(soap*, ...) allocate, set required members
/// - _ns2__ServiceDelivery* soap_new_set__ns2__ServiceDelivery(soap*, ...) allocate, set all public members
/// - _ns2__ServiceDelivery::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ServiceDelivery(soap*, _ns2__ServiceDelivery*) deserialize from a stream
/// - int soap_write__ns2__ServiceDelivery(soap*, _ns2__ServiceDelivery*) serialize to a stream
/// - _ns2__ServiceDelivery* _ns2__ServiceDelivery::soap_dup(soap*) returns deep copy of _ns2__ServiceDelivery, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ServiceDelivery::soap_del() deep deletes _ns2__ServiceDelivery data members, use only after _ns2__ServiceDelivery::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ServiceDelivery : public ns2__ServiceDeliveryStructure
{ public:
/*  INHERITED FROM ns2__ResponseStructure:
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":ResponseTimestamp.
    xsd__dateTime                        ResponseTimestamp              1;	///< Required element.
    END OF INHERITED FROM ns2__ResponseStructure */
/*  INHERITED FROM ns2__ProducerResponseStructure:
//  BEGIN GROUP <xs:group name="ProducerResponseEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to reponse from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoint Address to which acknowledgements to confirm delivery are to be sent.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An arbitrary unique reference associated with the response which may be used to reference it.
/// </BLOCKQUOTE></PRE>
/// Element "ResponseMessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      ResponseMessageIdentifier      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to an arbitrary unique identifier associated with the request which gave rise to this response.
/// </BLOCKQUOTE></PRE>
/// Element "RequestMessageRef" of XSD type "http://www.siri.org.uk/siri":MessageRefStructure.
    ns2__MessageRefStructure*            RequestMessageRef              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ProducerResponseStructure */
/*  INHERITED FROM ns2__ServiceDeliveryStructure:
//  BEGIN GROUP <xs:group name="ServiceDeliveryBodyGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for SIRI Service Delivery.
/// </BLOCKQUOTE></PRE>
//  BEGIN GROUP <xs:group name="ServiceDeliveryRequestStatusGroup">
/// <PRE><BLOCKQUOTE>
///   Status Information for overall request. Specifc error conditions will be given on each individual request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Whether the complerte request could be processed successfully or not. Default is 'true'. If any of the individual requests within the delivery failed, should be set to ' false'.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type xs:boolean.
    bool                                 Status                         0 = true;	///< Default element value="true".
/// <PRE><BLOCKQUOTE>
///   Description of any error or warning conditions that appluy to the overall request. More Specific error conditions should be included on each request that fails.
/// </BLOCKQUOTE></PRE>
/// class _ns2__ServiceDelivery_ErrorCondition operations:
/// - _ns2__ServiceDelivery_ErrorCondition* soap_new__ns2__ServiceDelivery_ErrorCondition(soap*) allocate and default initialize
/// - _ns2__ServiceDelivery_ErrorCondition* soap_new__ns2__ServiceDelivery_ErrorCondition(soap*, int num) allocate array and default initialize values
/// - _ns2__ServiceDelivery_ErrorCondition* soap_new_req__ns2__ServiceDelivery_ErrorCondition(soap*, ...) allocate, set required members
/// - _ns2__ServiceDelivery_ErrorCondition* soap_new_set__ns2__ServiceDelivery_ErrorCondition(soap*, ...) allocate, set all public members
/// - _ns2__ServiceDelivery_ErrorCondition::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ServiceDelivery_ErrorCondition(soap*, _ns2__ServiceDelivery_ErrorCondition*) deserialize from a stream
/// - int soap_write__ns2__ServiceDelivery_ErrorCondition(soap*, _ns2__ServiceDelivery_ErrorCondition*) serialize to a stream
/// - _ns2__ServiceDelivery_ErrorCondition* _ns2__ServiceDelivery_ErrorCondition::soap_dup(soap*) returns deep copy of _ns2__ServiceDelivery_ErrorCondition, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ServiceDelivery_ErrorCondition::soap_del() deep deletes _ns2__ServiceDelivery_ErrorCondition data members, use only after _ns2__ServiceDelivery_ErrorCondition::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns2__ServiceDelivery_ErrorCondition
    {
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceDelivery_ErrorCondition;	///< Union _ns2__union_ServiceDelivery_ErrorCondition selector: set to SOAP_UNION__ns2__union_ServiceDelivery_ErrorCondition_<fieldname>
    union _ns2__union_ServiceDelivery_ErrorCondition
    {
/// <PRE><BLOCKQUOTE>
///   Error: Service does not support the requested capability.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":CapabilityNotSupportedError.
    ns2__CapabilityNotSupportedErrorStructure*  CapabilityNotSupportedError    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":OtherError.
    ns2__OtherErrorStructure*            OtherError                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_ServiceDelivery_ErrorCondition;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Text description of error.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":ErrorDescriptionStructure.
    ns2__ErrorDescriptionStructure*      Description                    0;	///< Optional element.
    }                                   *ErrorCondition                 0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Whether there is a further delvery message with more current updates that follows this one. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "MoreData" of XSD type xs:boolean.
    bool                                 MoreData                       0 = false;	///< Default element value="false".
//  BEGIN GROUP <xs:group name="SiriServiceDeliveryGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Delivery types.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ServiceDelivery       ;	///< Union _ns2__union_ServiceDelivery selector: set to SOAP_UNION__ns2__union_ServiceDelivery_<fieldname>
    union _ns2__union_ServiceDelivery
    {
/// <PRE><BLOCKQUOTE>
///   Delivery for Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ProductionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ProductionTimetableDeliveryStructure*> *ProductionTimetableDelivery    1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableDeliveryStructure*> *EstimatedTimetableDelivery     1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableDeliveryStructure*> *StopTimetableDelivery          1;
/// <PRE><BLOCKQUOTE>
///   Delviery for Stop Event service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringDeliveryStructure*> *StopMonitoringDelivery         1;
/// <PRE><BLOCKQUOTE>
///   Delviery for Vehicle Activity Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringDeliveryStructure*> *VehicleMonitoringDelivery      1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableDeliveryStructure*> *ConnectionTimetableDelivery    1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Feeder Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringFeederDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringFeederDeliveryStructure*> *ConnectionMonitoringFeederDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Protection Fetcher Service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Distributor Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringDistributorDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringDistributorDeliveryStructure*> *ConnectionMonitoringDistributorDelivery 1;
/// <PRE><BLOCKQUOTE>
///   Delivery for general Message service.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Delivery for General Message Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageDeliveryStructure*> *GeneralMessageDelivery         1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringDeliveryStructure*> *FacilityMonitoringDelivery     1;
/// <PRE><BLOCKQUOTE>
///   Delivery for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeDeliveryStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeDeliveryStructure*> *SituationExchangeDelivery      1;
    }                                    union_ServiceDelivery         ;
//  END OF CHOICE
//  END OF GROUP
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Default gml coordinate format for eny location elements in response; applies if Coordinates element is used to specify points. May be overridden on individual points.
/// </BLOCKQUOTE></PRE>
/// Attribute "srsName" of XSD type "http://www.siri.org.uk/siri":SrsNameType.
   @ns2__SrsNameType*                    srsName                        0;	///< Optional attribute.
    END OF INHERITED FROM ns2__ServiceDeliveryStructure */
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ManualAction
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION Manually. i.e. a procedure must be carried out.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ManualAction is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ManualActionStructure.
///
/// class _ns2__ManualAction operations:
/// - _ns2__ManualAction* soap_new__ns2__ManualAction(soap*) allocate and default initialize
/// - _ns2__ManualAction* soap_new__ns2__ManualAction(soap*, int num) allocate array and default initialize values
/// - _ns2__ManualAction* soap_new_req__ns2__ManualAction(soap*, ...) allocate, set required members
/// - _ns2__ManualAction* soap_new_set__ns2__ManualAction(soap*, ...) allocate, set all public members
/// - _ns2__ManualAction::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ManualAction(soap*, _ns2__ManualAction*) deserialize from a stream
/// - int soap_write__ns2__ManualAction(soap*, _ns2__ManualAction*) serialize to a stream
/// - _ns2__ManualAction* _ns2__ManualAction::soap_dup(soap*) returns deep copy of _ns2__ManualAction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ManualAction::soap_del() deep deletes _ns2__ManualAction data members, use only after _ns2__ManualAction::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ManualAction : public ns2__ManualActionStructure
{ public:
/*  INHERITED FROM ns2__SimpleActionStructure:
/// <PRE><BLOCKQUOTE>
///   Processing Status of action at time of SITUATION publication.
/// </BLOCKQUOTE></PRE>
/// Element "ActionStatus" of XSD type "http://www.siri.org.uk/siri":ActionStatusEnumeration.
    enum ns2__ActionStatusEnumeration    ActionStatus                   0 = ns2__ActionStatusEnumeration__open;	///< Default element value="open".
    END OF INHERITED FROM ns2__SimpleActionStructure */
/*  INHERITED FROM ns2__ParameterisedActionStructure:
/// <PRE><BLOCKQUOTE>
///   Description of action.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  Description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Data associated with action.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ActionDataStructure* of length 0..unbounded.
    std::vector<ns2__ActionDataStructure*> ActionData                     0;
    END OF INHERITED FROM ns2__ParameterisedActionStructure */
/*  INHERITED FROM ns2__ManualActionStructure:
    END OF INHERITED FROM ns2__ManualActionStructure */
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductionTimetableCapabilitiesRequest
/// <PRE><BLOCKQUOTE>
///   Request for information about ProductionTimetable Service Capabilities. Answered with a ProductionTimetableCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ProductionTimetableCapabilitiesRequest is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
///
/// class _ns2__ProductionTimetableCapabilitiesRequest operations:
/// - _ns2__ProductionTimetableCapabilitiesRequest* soap_new__ns2__ProductionTimetableCapabilitiesRequest(soap*) allocate and default initialize
/// - _ns2__ProductionTimetableCapabilitiesRequest* soap_new__ns2__ProductionTimetableCapabilitiesRequest(soap*, int num) allocate array and default initialize values
/// - _ns2__ProductionTimetableCapabilitiesRequest* soap_new_req__ns2__ProductionTimetableCapabilitiesRequest(soap*, ...) allocate, set required members
/// - _ns2__ProductionTimetableCapabilitiesRequest* soap_new_set__ns2__ProductionTimetableCapabilitiesRequest(soap*, ...) allocate, set all public members
/// - _ns2__ProductionTimetableCapabilitiesRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ProductionTimetableCapabilitiesRequest(soap*, _ns2__ProductionTimetableCapabilitiesRequest*) deserialize from a stream
/// - int soap_write__ns2__ProductionTimetableCapabilitiesRequest(soap*, _ns2__ProductionTimetableCapabilitiesRequest*) serialize to a stream
/// - _ns2__ProductionTimetableCapabilitiesRequest* _ns2__ProductionTimetableCapabilitiesRequest::soap_dup(soap*) returns deep copy of _ns2__ProductionTimetableCapabilitiesRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ProductionTimetableCapabilitiesRequest::soap_del() deep deletes _ns2__ProductionTimetableCapabilitiesRequest data members, use only after _ns2__ProductionTimetableCapabilitiesRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ProductionTimetableCapabilitiesRequest : public ns2__ServiceCapabilitiesRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AbstractServiceRequestStructure:
//  BEGIN GROUP <xs:group name="ContextualisedRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request: participant and SIRI service type are given by context. Used on requests that are embedded in the context of another request.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractServiceRequestStructure */
/*  INHERITED FROM ns2__ServiceCapabilitiesRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Whether to include the requestors permissions in the response. Only applies if Access control capability supported. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// Element "ParticipantPermissions" of XSD type xs:boolean.
    bool                                 ParticipantPermissions         0 = false;	///< Default element value="false".
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":Extensions.
    ns2__ExtensionsStructure*            Extensions                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
    END OF INHERITED FROM ns2__ServiceCapabilitiesRequestStructure */
};

/// @brief "http://www.ifopt.org.uk/ifopt":InstalledEquipmentStructure is an abstract complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":AbstractEquipmentStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for INSTALLED EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// class ns4__InstalledEquipmentStructure operations:
/// - ns4__InstalledEquipmentStructure* soap_new_ns4__InstalledEquipmentStructure(soap*) allocate and default initialize
/// - ns4__InstalledEquipmentStructure* soap_new_ns4__InstalledEquipmentStructure(soap*, int num) allocate array and default initialize values
/// - ns4__InstalledEquipmentStructure* soap_new_req_ns4__InstalledEquipmentStructure(soap*, ...) allocate, set required members
/// - ns4__InstalledEquipmentStructure* soap_new_set_ns4__InstalledEquipmentStructure(soap*, ...) allocate, set all public members
/// - ns4__InstalledEquipmentStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__InstalledEquipmentStructure(soap*, ns4__InstalledEquipmentStructure*) deserialize from a stream
/// - int soap_write_ns4__InstalledEquipmentStructure(soap*, ns4__InstalledEquipmentStructure*) serialize to a stream
/// - ns4__InstalledEquipmentStructure* ns4__InstalledEquipmentStructure::soap_dup(soap*) returns deep copy of ns4__InstalledEquipmentStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__InstalledEquipmentStructure::soap_del() deep deletes ns4__InstalledEquipmentStructure data members, use only after ns4__InstalledEquipmentStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__InstalledEquipmentStructure : public ns4__AbstractEquipmentStructure
{ public:
/*  INHERITED FROM ns4__VersionedObjectStructure:
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup ref=""http://www.ifopt.org.uk/ifopt":RequiredModificationDetailsGroup">.
/// Attribute "created" of XSD type xs:dateTime.
   @xsd__dateTime                        created                        1;	///< Required attribute.
/// Attribute "lastUpdated" of XSD type xs:dateTime.
   @xsd__dateTime                        lastUpdated                    1;	///< Required attribute.
/// Attribute "modification" of XSD type "http://www.ifopt.org.uk/ifopt":ModificationEnumeration.
   @enum ns4__ModificationEnumeration    modification                   0 = ns4__ModificationEnumeration__new_;	///< Default attribute value="new".
/// Attribute "version" of XSD type "http://www.ifopt.org.uk/ifopt":RevisionNumberType.
   @ns4__RevisionNumberType*             version                        0;	///< Optional attribute.
/// Attribute "status" of XSD type "http://www.ifopt.org.uk/ifopt":StatusEnumeration.
   @enum ns4__StatusEnumeration          status                         0 = ns4__StatusEnumeration__active;	///< Default attribute value="active".
//  END OF ATTRIBUTEGROUP
    END OF INHERITED FROM ns4__VersionedObjectStructure */
/*  INHERITED FROM ns4__DataManagedObjectStructure:
//  BEGIN GROUP <xs:group name="DataManagedObjectGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for a DATA MANAGED OBJECT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   ADMINISTRATIVE ZONEthat manages object. If absent then manager same as for containing parent of object.
/// </BLOCKQUOTE></PRE>
/// Element "ManagedByAreaRef" of XSD type "http://www.ifopt.org.uk/ifopt":AdministrativeAreaRefStructure.
    ns4__AdministrativeAreaRefStructure*  ManagedByAreaRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Collection of URL's associated with object.
/// </BLOCKQUOTE></PRE>
/// Element "InfoLinks" of XSD type "http://www.ifopt.org.uk/ifopt":InfoLinksStructure.
    ns4__InfoLinksStructure*             InfoLinks                      0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns4__DataManagedObjectStructure */
/*  INHERITED FROM ns4__AbstractEquipmentStructure:
//  BEGIN GROUP <xs:group name="AbstractEquipmentGroup">
/// <PRE><BLOCKQUOTE>
///   Coomon Elements for EQUIPMENt.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifer of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentId" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentIdType.
    ns4__EquipmentIdType                 EquipmentId                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  EquipmentName                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type for reference to TYPE OF EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "TypeOfEquipment" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentTypeRefStructure.
    ns4__EquipmentTypeRefStructure*      TypeOfEquipment                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns4__AbstractEquipmentStructure */
};

/// @brief "http://www.ifopt.org.uk/ifopt":CountryRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to a Country identifier.
/// </BLOCKQUOTE></PRE>
/// class ns4__CountryRefStructure operations:
/// - ns4__CountryRefStructure* soap_new_ns4__CountryRefStructure(soap*) allocate and default initialize
/// - ns4__CountryRefStructure* soap_new_ns4__CountryRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__CountryRefStructure* soap_new_req_ns4__CountryRefStructure(soap*, ...) allocate, set required members
/// - ns4__CountryRefStructure* soap_new_set_ns4__CountryRefStructure(soap*, ...) allocate, set all public members
/// - ns4__CountryRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__CountryRefStructure(soap*, ns4__CountryRefStructure*) deserialize from a stream
/// - int soap_write_ns4__CountryRefStructure(soap*, ns4__CountryRefStructure*) serialize to a stream
/// - ns4__CountryRefStructure* ns4__CountryRefStructure::soap_dup(soap*) returns deep copy of ns4__CountryRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__CountryRefStructure::soap_del() deep deletes ns4__CountryRefStructure data members, use only after ns4__CountryRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__CountryRefStructure : public xsd__anyType
{ public:
/// __item wraps ""http://www.ifopt.org.uk/ifopt":CountryCodeType" simpleContent.
    ns4__CountryCodeType                 __item                        ;
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceSpaceRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to STOP PLACE Space.
/// </BLOCKQUOTE></PRE>
/// class ns4__StopPlaceSpaceRefStructure operations:
/// - ns4__StopPlaceSpaceRefStructure* soap_new_ns4__StopPlaceSpaceRefStructure(soap*) allocate and default initialize
/// - ns4__StopPlaceSpaceRefStructure* soap_new_ns4__StopPlaceSpaceRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__StopPlaceSpaceRefStructure* soap_new_req_ns4__StopPlaceSpaceRefStructure(soap*, ...) allocate, set required members
/// - ns4__StopPlaceSpaceRefStructure* soap_new_set_ns4__StopPlaceSpaceRefStructure(soap*, ...) allocate, set all public members
/// - ns4__StopPlaceSpaceRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__StopPlaceSpaceRefStructure(soap*, ns4__StopPlaceSpaceRefStructure*) deserialize from a stream
/// - int soap_write_ns4__StopPlaceSpaceRefStructure(soap*, ns4__StopPlaceSpaceRefStructure*) serialize to a stream
/// - ns4__StopPlaceSpaceRefStructure* ns4__StopPlaceSpaceRefStructure::soap_dup(soap*) returns deep copy of ns4__StopPlaceSpaceRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__StopPlaceSpaceRefStructure::soap_del() deep deletes ns4__StopPlaceSpaceRefStructure data members, use only after ns4__StopPlaceSpaceRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__StopPlaceSpaceRefStructure : public ns4__StopPlaceComponentRefStructure
{ public:
};

/// @brief "http://www.ifopt.org.uk/ifopt":AccessPathLinkRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to identifier of PATHLINK.
/// </BLOCKQUOTE></PRE>
/// class ns4__AccessPathLinkRefStructure operations:
/// - ns4__AccessPathLinkRefStructure* soap_new_ns4__AccessPathLinkRefStructure(soap*) allocate and default initialize
/// - ns4__AccessPathLinkRefStructure* soap_new_ns4__AccessPathLinkRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AccessPathLinkRefStructure* soap_new_req_ns4__AccessPathLinkRefStructure(soap*, ...) allocate, set required members
/// - ns4__AccessPathLinkRefStructure* soap_new_set_ns4__AccessPathLinkRefStructure(soap*, ...) allocate, set all public members
/// - ns4__AccessPathLinkRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AccessPathLinkRefStructure(soap*, ns4__AccessPathLinkRefStructure*) deserialize from a stream
/// - int soap_write_ns4__AccessPathLinkRefStructure(soap*, ns4__AccessPathLinkRefStructure*) serialize to a stream
/// - ns4__AccessPathLinkRefStructure* ns4__AccessPathLinkRefStructure::soap_dup(soap*) returns deep copy of ns4__AccessPathLinkRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AccessPathLinkRefStructure::soap_del() deep deletes ns4__AccessPathLinkRefStructure data members, use only after ns4__AccessPathLinkRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AccessPathLinkRefStructure : public ns4__StopPlaceComponentRefStructure
{ public:
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPathLinkRefStructure is a complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceComponentRefStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to STOP PLACE Space.
/// </BLOCKQUOTE></PRE>
/// class ns4__StopPathLinkRefStructure operations:
/// - ns4__StopPathLinkRefStructure* soap_new_ns4__StopPathLinkRefStructure(soap*) allocate and default initialize
/// - ns4__StopPathLinkRefStructure* soap_new_ns4__StopPathLinkRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__StopPathLinkRefStructure* soap_new_req_ns4__StopPathLinkRefStructure(soap*, ...) allocate, set required members
/// - ns4__StopPathLinkRefStructure* soap_new_set_ns4__StopPathLinkRefStructure(soap*, ...) allocate, set all public members
/// - ns4__StopPathLinkRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__StopPathLinkRefStructure(soap*, ns4__StopPathLinkRefStructure*) deserialize from a stream
/// - int soap_write_ns4__StopPathLinkRefStructure(soap*, ns4__StopPathLinkRefStructure*) serialize to a stream
/// - ns4__StopPathLinkRefStructure* ns4__StopPathLinkRefStructure::soap_dup(soap*) returns deep copy of ns4__StopPathLinkRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__StopPathLinkRefStructure::soap_del() deep deletes ns4__StopPathLinkRefStructure data members, use only after ns4__StopPathLinkRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__StopPathLinkRefStructure : public ns4__StopPlaceComponentRefStructure
{ public:
/*  INHERITED FROM ns4__StopPlaceComponentRefStructure:
    END OF INHERITED FROM ns4__StopPlaceComponentRefStructure */
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AnimalPresenceObstruction is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Obstruction.
///
/// class ns5__AnimalPresenceObstruction operations:
/// - ns5__AnimalPresenceObstruction* soap_new_ns5__AnimalPresenceObstruction(soap*) allocate and default initialize
/// - ns5__AnimalPresenceObstruction* soap_new_ns5__AnimalPresenceObstruction(soap*, int num) allocate array and default initialize values
/// - ns5__AnimalPresenceObstruction* soap_new_req_ns5__AnimalPresenceObstruction(soap*, ...) allocate, set required members
/// - ns5__AnimalPresenceObstruction* soap_new_set_ns5__AnimalPresenceObstruction(soap*, ...) allocate, set all public members
/// - ns5__AnimalPresenceObstruction::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AnimalPresenceObstruction(soap*, ns5__AnimalPresenceObstruction*) deserialize from a stream
/// - int soap_write_ns5__AnimalPresenceObstruction(soap*, ns5__AnimalPresenceObstruction*) serialize to a stream
/// - ns5__AnimalPresenceObstruction* ns5__AnimalPresenceObstruction::soap_dup(soap*) returns deep copy of ns5__AnimalPresenceObstruction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AnimalPresenceObstruction::soap_del() deep deletes ns5__AnimalPresenceObstruction data members, use only after ns5__AnimalPresenceObstruction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AnimalPresenceObstruction : public ns5__Obstruction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Obstruction:
/// Element "numberOfObstructions" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfObstructions           0;	///< Optional element.
/// Element "mobilityOfObstruction" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfObstruction          0;	///< Optional element.
/// Element "obstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  obstructionExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__Obstruction */
/// Element "alive" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        alive                          0;	///< Optional element.
/// Element "animalPresenceType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AnimalPresenceTypeEnum.
    enum ns5__AnimalPresenceTypeEnum     animalPresenceType             1;	///< Required element.
/// Element "animalPresenceObstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  animalPresenceObstructionExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":AuthorityOperation is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Activity.
///
/// class ns5__AuthorityOperation operations:
/// - ns5__AuthorityOperation* soap_new_ns5__AuthorityOperation(soap*) allocate and default initialize
/// - ns5__AuthorityOperation* soap_new_ns5__AuthorityOperation(soap*, int num) allocate array and default initialize values
/// - ns5__AuthorityOperation* soap_new_req_ns5__AuthorityOperation(soap*, ...) allocate, set required members
/// - ns5__AuthorityOperation* soap_new_set_ns5__AuthorityOperation(soap*, ...) allocate, set all public members
/// - ns5__AuthorityOperation::soap_default(soap*) default initialize members
/// - int soap_read_ns5__AuthorityOperation(soap*, ns5__AuthorityOperation*) deserialize from a stream
/// - int soap_write_ns5__AuthorityOperation(soap*, ns5__AuthorityOperation*) serialize to a stream
/// - ns5__AuthorityOperation* ns5__AuthorityOperation::soap_dup(soap*) returns deep copy of ns5__AuthorityOperation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__AuthorityOperation::soap_del() deep deletes ns5__AuthorityOperation data members, use only after ns5__AuthorityOperation::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__AuthorityOperation : public ns5__Activity
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Activity:
/// Element "mobilityOfActivity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfActivity             0;	///< Optional element.
/// Element "activityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  activityExtension              0;	///< Optional element.
    END OF INHERITED FROM ns5__Activity */
/// Element "authorityOperationType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":AuthorityOperationTypeEnum.
    enum ns5__AuthorityOperationTypeEnum  authorityOperationType         1;	///< Required element.
/// Element "authorityOperationExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  authorityOperationExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ConstructionWorks is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Roadworks.
///
/// class ns5__ConstructionWorks operations:
/// - ns5__ConstructionWorks* soap_new_ns5__ConstructionWorks(soap*) allocate and default initialize
/// - ns5__ConstructionWorks* soap_new_ns5__ConstructionWorks(soap*, int num) allocate array and default initialize values
/// - ns5__ConstructionWorks* soap_new_req_ns5__ConstructionWorks(soap*, ...) allocate, set required members
/// - ns5__ConstructionWorks* soap_new_set_ns5__ConstructionWorks(soap*, ...) allocate, set all public members
/// - ns5__ConstructionWorks::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ConstructionWorks(soap*, ns5__ConstructionWorks*) deserialize from a stream
/// - int soap_write_ns5__ConstructionWorks(soap*, ns5__ConstructionWorks*) serialize to a stream
/// - ns5__ConstructionWorks* ns5__ConstructionWorks::soap_dup(soap*) returns deep copy of ns5__ConstructionWorks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ConstructionWorks::soap_del() deep deletes ns5__ConstructionWorks data members, use only after ns5__ConstructionWorks::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ConstructionWorks : public ns5__Roadworks
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__Roadworks:
/// Element "roadworksDuration" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadworksDurationEnum.
    enum ns5__RoadworksDurationEnum*     roadworksDuration              0;	///< Optional element.
/// Element "roadworksScale" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadworksScaleEnum.
    enum ns5__RoadworksScaleEnum*        roadworksScale                 0;	///< Optional element.
/// Element "underTraffic" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        underTraffic                   0;	///< Optional element.
/// Element "urgentRoadworks" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        urgentRoadworks                0;	///< Optional element.
/// Element "mobility" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobility                       0;	///< Optional element.
/// Element "subjects" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Subjects.
    ns5__Subjects*                       subjects                       0;	///< Optional element.
/// Element "maintenanceVehicles" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MaintenanceVehicles.
    ns5__MaintenanceVehicles*            maintenanceVehicles            0;	///< Optional element.
/// Element "roadworksExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadworksExtension             0;	///< Optional element.
    END OF INHERITED FROM ns5__Roadworks */
/// Element "constructionWorkType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConstructionWorkTypeEnum.
    enum ns5__ConstructionWorkTypeEnum*  constructionWorkType           0;	///< Optional element.
/// Element "constructionWorksExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  constructionWorksExtension     0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":DisturbanceActivity is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Activity.
///
/// class ns5__DisturbanceActivity operations:
/// - ns5__DisturbanceActivity* soap_new_ns5__DisturbanceActivity(soap*) allocate and default initialize
/// - ns5__DisturbanceActivity* soap_new_ns5__DisturbanceActivity(soap*, int num) allocate array and default initialize values
/// - ns5__DisturbanceActivity* soap_new_req_ns5__DisturbanceActivity(soap*, ...) allocate, set required members
/// - ns5__DisturbanceActivity* soap_new_set_ns5__DisturbanceActivity(soap*, ...) allocate, set all public members
/// - ns5__DisturbanceActivity::soap_default(soap*) default initialize members
/// - int soap_read_ns5__DisturbanceActivity(soap*, ns5__DisturbanceActivity*) deserialize from a stream
/// - int soap_write_ns5__DisturbanceActivity(soap*, ns5__DisturbanceActivity*) serialize to a stream
/// - ns5__DisturbanceActivity* ns5__DisturbanceActivity::soap_dup(soap*) returns deep copy of ns5__DisturbanceActivity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__DisturbanceActivity::soap_del() deep deletes ns5__DisturbanceActivity data members, use only after ns5__DisturbanceActivity::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__DisturbanceActivity : public ns5__Activity
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Activity:
/// Element "mobilityOfActivity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfActivity             0;	///< Optional element.
/// Element "activityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  activityExtension              0;	///< Optional element.
    END OF INHERITED FROM ns5__Activity */
/// Element "disturbanceActivityType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DisturbanceActivityTypeEnum.
    enum ns5__DisturbanceActivityTypeEnum  disturbanceActivityType        1;	///< Required element.
/// Element "disturbanceActivityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  disturbanceActivityExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":EnvironmentalObstruction is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Obstruction.
///
/// class ns5__EnvironmentalObstruction operations:
/// - ns5__EnvironmentalObstruction* soap_new_ns5__EnvironmentalObstruction(soap*) allocate and default initialize
/// - ns5__EnvironmentalObstruction* soap_new_ns5__EnvironmentalObstruction(soap*, int num) allocate array and default initialize values
/// - ns5__EnvironmentalObstruction* soap_new_req_ns5__EnvironmentalObstruction(soap*, ...) allocate, set required members
/// - ns5__EnvironmentalObstruction* soap_new_set_ns5__EnvironmentalObstruction(soap*, ...) allocate, set all public members
/// - ns5__EnvironmentalObstruction::soap_default(soap*) default initialize members
/// - int soap_read_ns5__EnvironmentalObstruction(soap*, ns5__EnvironmentalObstruction*) deserialize from a stream
/// - int soap_write_ns5__EnvironmentalObstruction(soap*, ns5__EnvironmentalObstruction*) serialize to a stream
/// - ns5__EnvironmentalObstruction* ns5__EnvironmentalObstruction::soap_dup(soap*) returns deep copy of ns5__EnvironmentalObstruction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__EnvironmentalObstruction::soap_del() deep deletes ns5__EnvironmentalObstruction data members, use only after ns5__EnvironmentalObstruction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__EnvironmentalObstruction : public ns5__Obstruction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Obstruction:
/// Element "numberOfObstructions" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfObstructions           0;	///< Optional element.
/// Element "mobilityOfObstruction" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfObstruction          0;	///< Optional element.
/// Element "obstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  obstructionExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__Obstruction */
/// Element "depth" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MetresAsFloat.
    ns5__MetresAsFloat*                  depth                          0;	///< Optional element.
/// Element "environmentalObstructionType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":EnvironmentalObstructionTypeEnum.
    enum ns5__EnvironmentalObstructionTypeEnum  environmentalObstructionType   1;	///< Required element.
/// Element "environmentalObstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  environmentalObstructionExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GeneralInstructionToRoadUsers is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NetworkManagement.
///
/// class ns5__GeneralInstructionToRoadUsers operations:
/// - ns5__GeneralInstructionToRoadUsers* soap_new_ns5__GeneralInstructionToRoadUsers(soap*) allocate and default initialize
/// - ns5__GeneralInstructionToRoadUsers* soap_new_ns5__GeneralInstructionToRoadUsers(soap*, int num) allocate array and default initialize values
/// - ns5__GeneralInstructionToRoadUsers* soap_new_req_ns5__GeneralInstructionToRoadUsers(soap*, ...) allocate, set required members
/// - ns5__GeneralInstructionToRoadUsers* soap_new_set_ns5__GeneralInstructionToRoadUsers(soap*, ...) allocate, set all public members
/// - ns5__GeneralInstructionToRoadUsers::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GeneralInstructionToRoadUsers(soap*, ns5__GeneralInstructionToRoadUsers*) deserialize from a stream
/// - int soap_write_ns5__GeneralInstructionToRoadUsers(soap*, ns5__GeneralInstructionToRoadUsers*) serialize to a stream
/// - ns5__GeneralInstructionToRoadUsers* ns5__GeneralInstructionToRoadUsers::soap_dup(soap*) returns deep copy of ns5__GeneralInstructionToRoadUsers, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GeneralInstructionToRoadUsers::soap_del() deep deletes ns5__GeneralInstructionToRoadUsers data members, use only after ns5__GeneralInstructionToRoadUsers::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GeneralInstructionToRoadUsers : public ns5__NetworkManagement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__NetworkManagement:
/// Element "complianceOption" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComplianceOptionEnum.
    enum ns5__ComplianceOptionEnum       complianceOption               1;	///< Required element.
/// Vector of enum ns5__DirectionEnum of length 0..unbounded.
    std::vector<enum ns5__DirectionEnum> applicableForTrafficDirection  0;
/// Vector of enum ns5__TrafficTypeEnum of length 0..unbounded.
    std::vector<enum ns5__TrafficTypeEnum> applicableForTrafficType       0;
/// Vector of enum ns5__PlacesEnum of length 0..unbounded.
    std::vector<enum ns5__PlacesEnum   > placesAtWhichApplicable        0;
/// Element "automaticallyInitiated" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        automaticallyInitiated         0;	///< Optional element.
/// Vector of ns5__VehicleCharacteristics* of length 0..unbounded.
    std::vector<ns5__VehicleCharacteristics*> forVehiclesWithCharacteristicsOf 0;
/// Element "networkManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkManagementExtension     0;	///< Optional element.
    END OF INHERITED FROM ns5__NetworkManagement */
/// Element "generalInstructionToRoadUsersType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GeneralInstructionToRoadUsersTypeEnum.
    enum ns5__GeneralInstructionToRoadUsersTypeEnum  generalInstructionToRoadUsersType 1;	///< Required element.
/// Element "generalInstructionToRoadUsersExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  generalInstructionToRoadUsersExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GeneralNetworkManagement is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NetworkManagement.
///
/// class ns5__GeneralNetworkManagement operations:
/// - ns5__GeneralNetworkManagement* soap_new_ns5__GeneralNetworkManagement(soap*) allocate and default initialize
/// - ns5__GeneralNetworkManagement* soap_new_ns5__GeneralNetworkManagement(soap*, int num) allocate array and default initialize values
/// - ns5__GeneralNetworkManagement* soap_new_req_ns5__GeneralNetworkManagement(soap*, ...) allocate, set required members
/// - ns5__GeneralNetworkManagement* soap_new_set_ns5__GeneralNetworkManagement(soap*, ...) allocate, set all public members
/// - ns5__GeneralNetworkManagement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GeneralNetworkManagement(soap*, ns5__GeneralNetworkManagement*) deserialize from a stream
/// - int soap_write_ns5__GeneralNetworkManagement(soap*, ns5__GeneralNetworkManagement*) serialize to a stream
/// - ns5__GeneralNetworkManagement* ns5__GeneralNetworkManagement::soap_dup(soap*) returns deep copy of ns5__GeneralNetworkManagement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GeneralNetworkManagement::soap_del() deep deletes ns5__GeneralNetworkManagement data members, use only after ns5__GeneralNetworkManagement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GeneralNetworkManagement : public ns5__NetworkManagement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__NetworkManagement:
/// Element "complianceOption" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComplianceOptionEnum.
    enum ns5__ComplianceOptionEnum       complianceOption               1;	///< Required element.
/// Vector of enum ns5__DirectionEnum of length 0..unbounded.
    std::vector<enum ns5__DirectionEnum> applicableForTrafficDirection  0;
/// Vector of enum ns5__TrafficTypeEnum of length 0..unbounded.
    std::vector<enum ns5__TrafficTypeEnum> applicableForTrafficType       0;
/// Vector of enum ns5__PlacesEnum of length 0..unbounded.
    std::vector<enum ns5__PlacesEnum   > placesAtWhichApplicable        0;
/// Element "automaticallyInitiated" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        automaticallyInitiated         0;	///< Optional element.
/// Vector of ns5__VehicleCharacteristics* of length 0..unbounded.
    std::vector<ns5__VehicleCharacteristics*> forVehiclesWithCharacteristicsOf 0;
/// Element "networkManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkManagementExtension     0;	///< Optional element.
    END OF INHERITED FROM ns5__NetworkManagement */
/// Element "generalNetworkManagementType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GeneralNetworkManagementTypeEnum.
    enum ns5__GeneralNetworkManagementTypeEnum  generalNetworkManagementType   1;	///< Required element.
/// Element "trafficManuallyDirectedBy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PersonCategoryEnum.
    enum ns5__PersonCategoryEnum*        trafficManuallyDirectedBy      0;	///< Optional element.
/// Element "generalNetworkManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  generalNetworkManagementExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":GeneralObstruction is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Obstruction.
///
/// class ns5__GeneralObstruction operations:
/// - ns5__GeneralObstruction* soap_new_ns5__GeneralObstruction(soap*) allocate and default initialize
/// - ns5__GeneralObstruction* soap_new_ns5__GeneralObstruction(soap*, int num) allocate array and default initialize values
/// - ns5__GeneralObstruction* soap_new_req_ns5__GeneralObstruction(soap*, ...) allocate, set required members
/// - ns5__GeneralObstruction* soap_new_set_ns5__GeneralObstruction(soap*, ...) allocate, set all public members
/// - ns5__GeneralObstruction::soap_default(soap*) default initialize members
/// - int soap_read_ns5__GeneralObstruction(soap*, ns5__GeneralObstruction*) deserialize from a stream
/// - int soap_write_ns5__GeneralObstruction(soap*, ns5__GeneralObstruction*) serialize to a stream
/// - ns5__GeneralObstruction* ns5__GeneralObstruction::soap_dup(soap*) returns deep copy of ns5__GeneralObstruction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__GeneralObstruction::soap_del() deep deletes ns5__GeneralObstruction data members, use only after ns5__GeneralObstruction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__GeneralObstruction : public ns5__Obstruction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Obstruction:
/// Element "numberOfObstructions" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfObstructions           0;	///< Optional element.
/// Element "mobilityOfObstruction" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfObstruction          0;	///< Optional element.
/// Element "obstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  obstructionExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__Obstruction */
/// Vector of enum ns5__ObstructionTypeEnum of length 1..unbounded.
    std::vector<enum ns5__ObstructionTypeEnum> obstructionType                1;
/// Vector of ns5__GroupOfPeopleInvolved* of length 0..unbounded.
    std::vector<ns5__GroupOfPeopleInvolved*> groupOfPeopleInvolved          0;
/// Element "generalObstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  generalObstructionExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":InfrastructureDamageObstruction is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Obstruction.
///
/// class ns5__InfrastructureDamageObstruction operations:
/// - ns5__InfrastructureDamageObstruction* soap_new_ns5__InfrastructureDamageObstruction(soap*) allocate and default initialize
/// - ns5__InfrastructureDamageObstruction* soap_new_ns5__InfrastructureDamageObstruction(soap*, int num) allocate array and default initialize values
/// - ns5__InfrastructureDamageObstruction* soap_new_req_ns5__InfrastructureDamageObstruction(soap*, ...) allocate, set required members
/// - ns5__InfrastructureDamageObstruction* soap_new_set_ns5__InfrastructureDamageObstruction(soap*, ...) allocate, set all public members
/// - ns5__InfrastructureDamageObstruction::soap_default(soap*) default initialize members
/// - int soap_read_ns5__InfrastructureDamageObstruction(soap*, ns5__InfrastructureDamageObstruction*) deserialize from a stream
/// - int soap_write_ns5__InfrastructureDamageObstruction(soap*, ns5__InfrastructureDamageObstruction*) serialize to a stream
/// - ns5__InfrastructureDamageObstruction* ns5__InfrastructureDamageObstruction::soap_dup(soap*) returns deep copy of ns5__InfrastructureDamageObstruction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__InfrastructureDamageObstruction::soap_del() deep deletes ns5__InfrastructureDamageObstruction data members, use only after ns5__InfrastructureDamageObstruction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__InfrastructureDamageObstruction : public ns5__Obstruction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Obstruction:
/// Element "numberOfObstructions" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfObstructions           0;	///< Optional element.
/// Element "mobilityOfObstruction" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfObstruction          0;	///< Optional element.
/// Element "obstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  obstructionExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__Obstruction */
/// Element "infrastructureDamageType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":InfrastructureDamageTypeEnum.
    enum ns5__InfrastructureDamageTypeEnum  infrastructureDamageType       1;	///< Required element.
/// Element "infrastructureDamageObstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  infrastructureDamageObstructionExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MaintenanceWorks is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Roadworks.
///
/// class ns5__MaintenanceWorks operations:
/// - ns5__MaintenanceWorks* soap_new_ns5__MaintenanceWorks(soap*) allocate and default initialize
/// - ns5__MaintenanceWorks* soap_new_ns5__MaintenanceWorks(soap*, int num) allocate array and default initialize values
/// - ns5__MaintenanceWorks* soap_new_req_ns5__MaintenanceWorks(soap*, ...) allocate, set required members
/// - ns5__MaintenanceWorks* soap_new_set_ns5__MaintenanceWorks(soap*, ...) allocate, set all public members
/// - ns5__MaintenanceWorks::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MaintenanceWorks(soap*, ns5__MaintenanceWorks*) deserialize from a stream
/// - int soap_write_ns5__MaintenanceWorks(soap*, ns5__MaintenanceWorks*) serialize to a stream
/// - ns5__MaintenanceWorks* ns5__MaintenanceWorks::soap_dup(soap*) returns deep copy of ns5__MaintenanceWorks, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MaintenanceWorks::soap_del() deep deletes ns5__MaintenanceWorks data members, use only after ns5__MaintenanceWorks::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MaintenanceWorks : public ns5__Roadworks
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__Roadworks:
/// Element "roadworksDuration" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadworksDurationEnum.
    enum ns5__RoadworksDurationEnum*     roadworksDuration              0;	///< Optional element.
/// Element "roadworksScale" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadworksScaleEnum.
    enum ns5__RoadworksScaleEnum*        roadworksScale                 0;	///< Optional element.
/// Element "underTraffic" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        underTraffic                   0;	///< Optional element.
/// Element "urgentRoadworks" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        urgentRoadworks                0;	///< Optional element.
/// Element "mobility" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobility                       0;	///< Optional element.
/// Element "subjects" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Subjects.
    ns5__Subjects*                       subjects                       0;	///< Optional element.
/// Element "maintenanceVehicles" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MaintenanceVehicles.
    ns5__MaintenanceVehicles*            maintenanceVehicles            0;	///< Optional element.
/// Element "roadworksExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadworksExtension             0;	///< Optional element.
    END OF INHERITED FROM ns5__Roadworks */
/// Vector of enum ns5__RoadMaintenanceTypeEnum of length 1..unbounded.
    std::vector<enum ns5__RoadMaintenanceTypeEnum> roadMaintenanceType            1;
/// Element "maintenanceWorksExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  maintenanceWorksExtension      0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":MatrixSignSetting is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SignSetting.
///
/// class ns5__MatrixSignSetting operations:
/// - ns5__MatrixSignSetting* soap_new_ns5__MatrixSignSetting(soap*) allocate and default initialize
/// - ns5__MatrixSignSetting* soap_new_ns5__MatrixSignSetting(soap*, int num) allocate array and default initialize values
/// - ns5__MatrixSignSetting* soap_new_req_ns5__MatrixSignSetting(soap*, ...) allocate, set required members
/// - ns5__MatrixSignSetting* soap_new_set_ns5__MatrixSignSetting(soap*, ...) allocate, set all public members
/// - ns5__MatrixSignSetting::soap_default(soap*) default initialize members
/// - int soap_read_ns5__MatrixSignSetting(soap*, ns5__MatrixSignSetting*) deserialize from a stream
/// - int soap_write_ns5__MatrixSignSetting(soap*, ns5__MatrixSignSetting*) serialize to a stream
/// - ns5__MatrixSignSetting* ns5__MatrixSignSetting::soap_dup(soap*) returns deep copy of ns5__MatrixSignSetting, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__MatrixSignSetting::soap_del() deep deletes ns5__MatrixSignSetting data members, use only after ns5__MatrixSignSetting::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__MatrixSignSetting : public ns5__SignSetting
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__SignSetting:
/// Vector of enum ns5__DatexPictogramEnum of length 0..2.
    std::vector<enum ns5__DatexPictogramEnum> datexPictogram                 0:2;
/// Element "pictogramList" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         pictogramList                  0;	///< Optional element.
/// Vector of ns5__String of length 0..2.
    std::vector<ns5__String            > pictogramListEntry             0:2;
/// Element "reasonForSetting" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             reasonForSetting               0;	///< Optional element.
/// Element "setBy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             setBy                          0;	///< Optional element.
/// Element "signAddress" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         signAddress                    0;	///< Optional element.
/// Element "timeLastSet" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       timeLastSet                    0;	///< Optional element.
/// Element "signSettingExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  signSettingExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__SignSetting */
/// Element "aspectDisplayed" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          aspectDisplayed                1;	///< Required element.
/// Vector of enum ns5__MatrixFaultEnum of length 0..unbounded.
    std::vector<enum ns5__MatrixFaultEnum> matrixFault                    0;
/// Element "matrixIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String                          matrixIdentifier               1;	///< Required element.
/// Element "matrixSignSettingExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  matrixSignSettingExtension     0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PoorEnvironmentConditions is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Conditions.
///
/// class ns5__PoorEnvironmentConditions operations:
/// - ns5__PoorEnvironmentConditions* soap_new_ns5__PoorEnvironmentConditions(soap*) allocate and default initialize
/// - ns5__PoorEnvironmentConditions* soap_new_ns5__PoorEnvironmentConditions(soap*, int num) allocate array and default initialize values
/// - ns5__PoorEnvironmentConditions* soap_new_req_ns5__PoorEnvironmentConditions(soap*, ...) allocate, set required members
/// - ns5__PoorEnvironmentConditions* soap_new_set_ns5__PoorEnvironmentConditions(soap*, ...) allocate, set all public members
/// - ns5__PoorEnvironmentConditions::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PoorEnvironmentConditions(soap*, ns5__PoorEnvironmentConditions*) deserialize from a stream
/// - int soap_write_ns5__PoorEnvironmentConditions(soap*, ns5__PoorEnvironmentConditions*) serialize to a stream
/// - ns5__PoorEnvironmentConditions* ns5__PoorEnvironmentConditions::soap_dup(soap*) returns deep copy of ns5__PoorEnvironmentConditions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PoorEnvironmentConditions::soap_del() deep deletes ns5__PoorEnvironmentConditions data members, use only after ns5__PoorEnvironmentConditions::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PoorEnvironmentConditions : public ns5__Conditions
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Conditions:
/// Element "drivingConditionType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DrivingConditionTypeEnum.
    enum ns5__DrivingConditionTypeEnum*  drivingConditionType           0;	///< Optional element.
/// Element "conditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  conditionsExtension            0;	///< Optional element.
    END OF INHERITED FROM ns5__Conditions */
/// Vector of enum ns5__PoorEnvironmentTypeEnum of length 1..unbounded.
    std::vector<enum ns5__PoorEnvironmentTypeEnum> poorEnvironmentType            1;
/// Element "precipitationDetail" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PrecipitationDetail.
    ns5__PrecipitationDetail*            precipitationDetail            0;	///< Optional element.
/// Element "visibility" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Visibility.
    ns5__Visibility*                     visibility                     0;	///< Optional element.
/// Vector of ns5__PollutionMeasurement* of length 0..unbounded.
    std::vector<ns5__PollutionMeasurement*> pollutionMeasurement           0;
/// Element "temperature" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Temperature.
    ns5__Temperature*                    temperature                    0;	///< Optional element.
/// Element "wind" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Wind.
    ns5__Wind*                           wind                           0;	///< Optional element.
/// Element "humidity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Humidity.
    ns5__Humidity*                       humidity                       0;	///< Optional element.
/// Element "poorEnvironmentConditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  poorEnvironmentConditionsExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":PublicEvent is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Activity.
///
/// class ns5__PublicEvent operations:
/// - ns5__PublicEvent* soap_new_ns5__PublicEvent(soap*) allocate and default initialize
/// - ns5__PublicEvent* soap_new_ns5__PublicEvent(soap*, int num) allocate array and default initialize values
/// - ns5__PublicEvent* soap_new_req_ns5__PublicEvent(soap*, ...) allocate, set required members
/// - ns5__PublicEvent* soap_new_set_ns5__PublicEvent(soap*, ...) allocate, set all public members
/// - ns5__PublicEvent::soap_default(soap*) default initialize members
/// - int soap_read_ns5__PublicEvent(soap*, ns5__PublicEvent*) deserialize from a stream
/// - int soap_write_ns5__PublicEvent(soap*, ns5__PublicEvent*) serialize to a stream
/// - ns5__PublicEvent* ns5__PublicEvent::soap_dup(soap*) returns deep copy of ns5__PublicEvent, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__PublicEvent::soap_del() deep deletes ns5__PublicEvent data members, use only after ns5__PublicEvent::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__PublicEvent : public ns5__Activity
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Activity:
/// Element "mobilityOfActivity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfActivity             0;	///< Optional element.
/// Element "activityExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  activityExtension              0;	///< Optional element.
    END OF INHERITED FROM ns5__Activity */
/// Element "publicEventType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":PublicEventTypeEnum.
    enum ns5__PublicEventTypeEnum        publicEventType                1;	///< Required element.
/// Element "publicEventExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  publicEventExtension           0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":ReroutingManagement is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NetworkManagement.
///
/// class ns5__ReroutingManagement operations:
/// - ns5__ReroutingManagement* soap_new_ns5__ReroutingManagement(soap*) allocate and default initialize
/// - ns5__ReroutingManagement* soap_new_ns5__ReroutingManagement(soap*, int num) allocate array and default initialize values
/// - ns5__ReroutingManagement* soap_new_req_ns5__ReroutingManagement(soap*, ...) allocate, set required members
/// - ns5__ReroutingManagement* soap_new_set_ns5__ReroutingManagement(soap*, ...) allocate, set all public members
/// - ns5__ReroutingManagement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ReroutingManagement(soap*, ns5__ReroutingManagement*) deserialize from a stream
/// - int soap_write_ns5__ReroutingManagement(soap*, ns5__ReroutingManagement*) serialize to a stream
/// - ns5__ReroutingManagement* ns5__ReroutingManagement::soap_dup(soap*) returns deep copy of ns5__ReroutingManagement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ReroutingManagement::soap_del() deep deletes ns5__ReroutingManagement data members, use only after ns5__ReroutingManagement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ReroutingManagement : public ns5__NetworkManagement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__NetworkManagement:
/// Element "complianceOption" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComplianceOptionEnum.
    enum ns5__ComplianceOptionEnum       complianceOption               1;	///< Required element.
/// Vector of enum ns5__DirectionEnum of length 0..unbounded.
    std::vector<enum ns5__DirectionEnum> applicableForTrafficDirection  0;
/// Vector of enum ns5__TrafficTypeEnum of length 0..unbounded.
    std::vector<enum ns5__TrafficTypeEnum> applicableForTrafficType       0;
/// Vector of enum ns5__PlacesEnum of length 0..unbounded.
    std::vector<enum ns5__PlacesEnum   > placesAtWhichApplicable        0;
/// Element "automaticallyInitiated" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        automaticallyInitiated         0;	///< Optional element.
/// Vector of ns5__VehicleCharacteristics* of length 0..unbounded.
    std::vector<ns5__VehicleCharacteristics*> forVehiclesWithCharacteristicsOf 0;
/// Element "networkManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkManagementExtension     0;	///< Optional element.
    END OF INHERITED FROM ns5__NetworkManagement */
/// Vector of enum ns5__ReroutingManagementTypeEnum of length 1..unbounded.
    std::vector<enum ns5__ReroutingManagementTypeEnum> reroutingManagementType        1;
/// Element "reroutingItineraryDescription" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             reroutingItineraryDescription  0;	///< Optional element.
/// Element "signedRerouting" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        signedRerouting                0;	///< Optional element.
/// Element "entry" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         entry                          0;	///< Optional element.
/// Element "exit" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         exit                           0;	///< Optional element.
/// Element "roadOrJunctionNumber" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         roadOrJunctionNumber           0;	///< Optional element.
/// Vector of ns5__Itinerary* of length 0..unbounded.
    std::vector<ns5__Itinerary*        > alternativeRoute               0;
/// Element "reroutingManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  reroutingManagementExtension   0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadConditions is an abstract complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Conditions.
///
/// class ns5__RoadConditions operations:
/// - ns5__RoadConditions* soap_new_ns5__RoadConditions(soap*) allocate and default initialize
/// - ns5__RoadConditions* soap_new_ns5__RoadConditions(soap*, int num) allocate array and default initialize values
/// - ns5__RoadConditions* soap_new_req_ns5__RoadConditions(soap*, ...) allocate, set required members
/// - ns5__RoadConditions* soap_new_set_ns5__RoadConditions(soap*, ...) allocate, set all public members
/// - ns5__RoadConditions::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadConditions(soap*, ns5__RoadConditions*) deserialize from a stream
/// - int soap_write_ns5__RoadConditions(soap*, ns5__RoadConditions*) serialize to a stream
/// - ns5__RoadConditions* ns5__RoadConditions::soap_dup(soap*) returns deep copy of ns5__RoadConditions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadConditions::soap_del() deep deletes ns5__RoadConditions data members, use only after ns5__RoadConditions::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadConditions : public ns5__Conditions
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Conditions:
/// Element "drivingConditionType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DrivingConditionTypeEnum.
    enum ns5__DrivingConditionTypeEnum*  drivingConditionType           0;	///< Optional element.
/// Element "conditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  conditionsExtension            0;	///< Optional element.
    END OF INHERITED FROM ns5__Conditions */
/// Element "roadConditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadConditionsExtension        0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":RoadOrCarriagewayOrLaneManagement is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NetworkManagement.
///
/// class ns5__RoadOrCarriagewayOrLaneManagement operations:
/// - ns5__RoadOrCarriagewayOrLaneManagement* soap_new_ns5__RoadOrCarriagewayOrLaneManagement(soap*) allocate and default initialize
/// - ns5__RoadOrCarriagewayOrLaneManagement* soap_new_ns5__RoadOrCarriagewayOrLaneManagement(soap*, int num) allocate array and default initialize values
/// - ns5__RoadOrCarriagewayOrLaneManagement* soap_new_req_ns5__RoadOrCarriagewayOrLaneManagement(soap*, ...) allocate, set required members
/// - ns5__RoadOrCarriagewayOrLaneManagement* soap_new_set_ns5__RoadOrCarriagewayOrLaneManagement(soap*, ...) allocate, set all public members
/// - ns5__RoadOrCarriagewayOrLaneManagement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__RoadOrCarriagewayOrLaneManagement(soap*, ns5__RoadOrCarriagewayOrLaneManagement*) deserialize from a stream
/// - int soap_write_ns5__RoadOrCarriagewayOrLaneManagement(soap*, ns5__RoadOrCarriagewayOrLaneManagement*) serialize to a stream
/// - ns5__RoadOrCarriagewayOrLaneManagement* ns5__RoadOrCarriagewayOrLaneManagement::soap_dup(soap*) returns deep copy of ns5__RoadOrCarriagewayOrLaneManagement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__RoadOrCarriagewayOrLaneManagement::soap_del() deep deletes ns5__RoadOrCarriagewayOrLaneManagement data members, use only after ns5__RoadOrCarriagewayOrLaneManagement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__RoadOrCarriagewayOrLaneManagement : public ns5__NetworkManagement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__NetworkManagement:
/// Element "complianceOption" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComplianceOptionEnum.
    enum ns5__ComplianceOptionEnum       complianceOption               1;	///< Required element.
/// Vector of enum ns5__DirectionEnum of length 0..unbounded.
    std::vector<enum ns5__DirectionEnum> applicableForTrafficDirection  0;
/// Vector of enum ns5__TrafficTypeEnum of length 0..unbounded.
    std::vector<enum ns5__TrafficTypeEnum> applicableForTrafficType       0;
/// Vector of enum ns5__PlacesEnum of length 0..unbounded.
    std::vector<enum ns5__PlacesEnum   > placesAtWhichApplicable        0;
/// Element "automaticallyInitiated" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        automaticallyInitiated         0;	///< Optional element.
/// Vector of ns5__VehicleCharacteristics* of length 0..unbounded.
    std::vector<ns5__VehicleCharacteristics*> forVehiclesWithCharacteristicsOf 0;
/// Element "networkManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkManagementExtension     0;	///< Optional element.
    END OF INHERITED FROM ns5__NetworkManagement */
/// Element "roadOrCarriagewayOrLaneManagementType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadOrCarriagewayOrLaneManagementTypeEnum.
    enum ns5__RoadOrCarriagewayOrLaneManagementTypeEnum  roadOrCarriagewayOrLaneManagementType 1;	///< Required element.
/// Element "minimumCarOccupancy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             minimumCarOccupancy            0;	///< Optional element.
/// Vector of enum ns5__CarriagewayEnum of length 0..unbounded.
    std::vector<enum ns5__CarriagewayEnum> specifiedCarriageway           0;
/// Vector of enum ns5__LaneEnum of length 0..unbounded.
    std::vector<enum ns5__LaneEnum     > specifiedLane                  0;
/// Element "roadOrCarriagewayOrLaneManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadOrCarriagewayOrLaneManagementExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":SpeedManagement is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NetworkManagement.
///
/// class ns5__SpeedManagement operations:
/// - ns5__SpeedManagement* soap_new_ns5__SpeedManagement(soap*) allocate and default initialize
/// - ns5__SpeedManagement* soap_new_ns5__SpeedManagement(soap*, int num) allocate array and default initialize values
/// - ns5__SpeedManagement* soap_new_req_ns5__SpeedManagement(soap*, ...) allocate, set required members
/// - ns5__SpeedManagement* soap_new_set_ns5__SpeedManagement(soap*, ...) allocate, set all public members
/// - ns5__SpeedManagement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SpeedManagement(soap*, ns5__SpeedManagement*) deserialize from a stream
/// - int soap_write_ns5__SpeedManagement(soap*, ns5__SpeedManagement*) serialize to a stream
/// - ns5__SpeedManagement* ns5__SpeedManagement::soap_dup(soap*) returns deep copy of ns5__SpeedManagement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SpeedManagement::soap_del() deep deletes ns5__SpeedManagement data members, use only after ns5__SpeedManagement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SpeedManagement : public ns5__NetworkManagement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__NetworkManagement:
/// Element "complianceOption" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComplianceOptionEnum.
    enum ns5__ComplianceOptionEnum       complianceOption               1;	///< Required element.
/// Vector of enum ns5__DirectionEnum of length 0..unbounded.
    std::vector<enum ns5__DirectionEnum> applicableForTrafficDirection  0;
/// Vector of enum ns5__TrafficTypeEnum of length 0..unbounded.
    std::vector<enum ns5__TrafficTypeEnum> applicableForTrafficType       0;
/// Vector of enum ns5__PlacesEnum of length 0..unbounded.
    std::vector<enum ns5__PlacesEnum   > placesAtWhichApplicable        0;
/// Element "automaticallyInitiated" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        automaticallyInitiated         0;	///< Optional element.
/// Vector of ns5__VehicleCharacteristics* of length 0..unbounded.
    std::vector<ns5__VehicleCharacteristics*> forVehiclesWithCharacteristicsOf 0;
/// Element "networkManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkManagementExtension     0;	///< Optional element.
    END OF INHERITED FROM ns5__NetworkManagement */
/// Element "speedManagementType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SpeedManagementTypeEnum.
    enum ns5__SpeedManagementTypeEnum*   speedManagementType            0;	///< Optional element.
/// Element "temporarySpeedLimit" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":KilometresPerHour.
    ns5__KilometresPerHour*              temporarySpeedLimit            0;	///< Optional element.
/// Element "speedManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  speedManagementExtension       0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VariableMessageSignSetting is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":SignSetting.
///
/// class ns5__VariableMessageSignSetting operations:
/// - ns5__VariableMessageSignSetting* soap_new_ns5__VariableMessageSignSetting(soap*) allocate and default initialize
/// - ns5__VariableMessageSignSetting* soap_new_ns5__VariableMessageSignSetting(soap*, int num) allocate array and default initialize values
/// - ns5__VariableMessageSignSetting* soap_new_req_ns5__VariableMessageSignSetting(soap*, ...) allocate, set required members
/// - ns5__VariableMessageSignSetting* soap_new_set_ns5__VariableMessageSignSetting(soap*, ...) allocate, set all public members
/// - ns5__VariableMessageSignSetting::soap_default(soap*) default initialize members
/// - int soap_read_ns5__VariableMessageSignSetting(soap*, ns5__VariableMessageSignSetting*) deserialize from a stream
/// - int soap_write_ns5__VariableMessageSignSetting(soap*, ns5__VariableMessageSignSetting*) serialize to a stream
/// - ns5__VariableMessageSignSetting* ns5__VariableMessageSignSetting::soap_dup(soap*) returns deep copy of ns5__VariableMessageSignSetting, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__VariableMessageSignSetting::soap_del() deep deletes ns5__VariableMessageSignSetting data members, use only after ns5__VariableMessageSignSetting::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__VariableMessageSignSetting : public ns5__SignSetting
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__SignSetting:
/// Vector of enum ns5__DatexPictogramEnum of length 0..2.
    std::vector<enum ns5__DatexPictogramEnum> datexPictogram                 0:2;
/// Element "pictogramList" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         pictogramList                  0;	///< Optional element.
/// Vector of ns5__String of length 0..2.
    std::vector<ns5__String            > pictogramListEntry             0:2;
/// Element "reasonForSetting" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             reasonForSetting               0;	///< Optional element.
/// Element "setBy" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":MultilingualString.
    ns5__MultilingualString*             setBy                          0;	///< Optional element.
/// Element "signAddress" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         signAddress                    0;	///< Optional element.
/// Element "timeLastSet" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       timeLastSet                    0;	///< Optional element.
/// Element "signSettingExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  signSettingExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__SignSetting */
/// Element "numberOfCharacters" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfCharacters             0;	///< Optional element.
/// Element "numberOfRows" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfRows                   0;	///< Optional element.
/// Vector of enum ns5__VmsFaultEnum of length 0..unbounded.
    std::vector<enum ns5__VmsFaultEnum > vmsFault                       0;
/// Element "vmsIdentifier" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         vmsIdentifier                  0;	///< Optional element.
/// Vector of ns5__MultilingualString* of length 0..unbounded.
    std::vector<ns5__MultilingualString*> vmsLegend                      0;
/// Element "vmsType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VmsTypeEnum.
    enum ns5__VmsTypeEnum*               vmsType                        0;	///< Optional element.
/// Element "variableMessageSignSettingExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  variableMessageSignSettingExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":VehicleObstruction is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Obstruction.
///
/// class ns5__VehicleObstruction operations:
/// - ns5__VehicleObstruction* soap_new_ns5__VehicleObstruction(soap*) allocate and default initialize
/// - ns5__VehicleObstruction* soap_new_ns5__VehicleObstruction(soap*, int num) allocate array and default initialize values
/// - ns5__VehicleObstruction* soap_new_req_ns5__VehicleObstruction(soap*, ...) allocate, set required members
/// - ns5__VehicleObstruction* soap_new_set_ns5__VehicleObstruction(soap*, ...) allocate, set all public members
/// - ns5__VehicleObstruction::soap_default(soap*) default initialize members
/// - int soap_read_ns5__VehicleObstruction(soap*, ns5__VehicleObstruction*) deserialize from a stream
/// - int soap_write_ns5__VehicleObstruction(soap*, ns5__VehicleObstruction*) serialize to a stream
/// - ns5__VehicleObstruction* ns5__VehicleObstruction::soap_dup(soap*) returns deep copy of ns5__VehicleObstruction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__VehicleObstruction::soap_del() deep deletes ns5__VehicleObstruction data members, use only after ns5__VehicleObstruction::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__VehicleObstruction : public ns5__Obstruction
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Obstruction:
/// Element "numberOfObstructions" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger*             numberOfObstructions           0;	///< Optional element.
/// Element "mobilityOfObstruction" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Mobility.
    ns5__Mobility*                       mobilityOfObstruction          0;	///< Optional element.
/// Element "obstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  obstructionExtension           0;	///< Optional element.
    END OF INHERITED FROM ns5__Obstruction */
/// Element "vehicleObstructionType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":VehicleObstructionTypeEnum.
    enum ns5__VehicleObstructionTypeEnum  vehicleObstructionType         1;	///< Required element.
/// Vector of ns5__Vehicle* of length 0..unbounded.
    std::vector<ns5__Vehicle*          > obstructingVehicle             0;
/// Element "vehicleObstructionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  vehicleObstructionExtension    0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":WinterDrivingManagement is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NetworkManagement.
///
/// class ns5__WinterDrivingManagement operations:
/// - ns5__WinterDrivingManagement* soap_new_ns5__WinterDrivingManagement(soap*) allocate and default initialize
/// - ns5__WinterDrivingManagement* soap_new_ns5__WinterDrivingManagement(soap*, int num) allocate array and default initialize values
/// - ns5__WinterDrivingManagement* soap_new_req_ns5__WinterDrivingManagement(soap*, ...) allocate, set required members
/// - ns5__WinterDrivingManagement* soap_new_set_ns5__WinterDrivingManagement(soap*, ...) allocate, set all public members
/// - ns5__WinterDrivingManagement::soap_default(soap*) default initialize members
/// - int soap_read_ns5__WinterDrivingManagement(soap*, ns5__WinterDrivingManagement*) deserialize from a stream
/// - int soap_write_ns5__WinterDrivingManagement(soap*, ns5__WinterDrivingManagement*) serialize to a stream
/// - ns5__WinterDrivingManagement* ns5__WinterDrivingManagement::soap_dup(soap*) returns deep copy of ns5__WinterDrivingManagement, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__WinterDrivingManagement::soap_del() deep deletes ns5__WinterDrivingManagement data members, use only after ns5__WinterDrivingManagement::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__WinterDrivingManagement : public ns5__NetworkManagement
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__OperatorAction:
/// Element "actionOrigin" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionOriginEnum.
    enum ns5__OperatorActionOriginEnum*  actionOrigin                   0;	///< Optional element.
/// Element "operatorActionStatus" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":OperatorActionStatusEnum.
    enum ns5__OperatorActionStatusEnum*  operatorActionStatus           0;	///< Optional element.
/// Element "operatorActionExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  operatorActionExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__OperatorAction */
/*  INHERITED FROM ns5__NetworkManagement:
/// Element "complianceOption" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ComplianceOptionEnum.
    enum ns5__ComplianceOptionEnum       complianceOption               1;	///< Required element.
/// Vector of enum ns5__DirectionEnum of length 0..unbounded.
    std::vector<enum ns5__DirectionEnum> applicableForTrafficDirection  0;
/// Vector of enum ns5__TrafficTypeEnum of length 0..unbounded.
    std::vector<enum ns5__TrafficTypeEnum> applicableForTrafficType       0;
/// Vector of enum ns5__PlacesEnum of length 0..unbounded.
    std::vector<enum ns5__PlacesEnum   > placesAtWhichApplicable        0;
/// Element "automaticallyInitiated" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Boolean.
    ns5__Boolean*                        automaticallyInitiated         0;	///< Optional element.
/// Vector of ns5__VehicleCharacteristics* of length 0..unbounded.
    std::vector<ns5__VehicleCharacteristics*> forVehiclesWithCharacteristicsOf 0;
/// Element "networkManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  networkManagementExtension     0;	///< Optional element.
    END OF INHERITED FROM ns5__NetworkManagement */
/// Element "winterEquipmentManagementType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":WinterEquipmentManagementTypeEnum.
    enum ns5__WinterEquipmentManagementTypeEnum  winterEquipmentManagementType  1;	///< Required element.
/// Element "winterDrivingManagementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  winterDrivingManagementExtension 0;	///< Optional element.
};

/// @brief "http://wsdl.siri.org.uk/siri":WsSubscriptionRequestInfoStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionRequestStructure.
///
/// class ns1__WsSubscriptionRequestInfoStructure operations:
/// - ns1__WsSubscriptionRequestInfoStructure* soap_new_ns1__WsSubscriptionRequestInfoStructure(soap*) allocate and default initialize
/// - ns1__WsSubscriptionRequestInfoStructure* soap_new_ns1__WsSubscriptionRequestInfoStructure(soap*, int num) allocate array and default initialize values
/// - ns1__WsSubscriptionRequestInfoStructure* soap_new_req_ns1__WsSubscriptionRequestInfoStructure(soap*, ...) allocate, set required members
/// - ns1__WsSubscriptionRequestInfoStructure* soap_new_set_ns1__WsSubscriptionRequestInfoStructure(soap*, ...) allocate, set all public members
/// - ns1__WsSubscriptionRequestInfoStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WsSubscriptionRequestInfoStructure(soap*, ns1__WsSubscriptionRequestInfoStructure*) deserialize from a stream
/// - int soap_write_ns1__WsSubscriptionRequestInfoStructure(soap*, ns1__WsSubscriptionRequestInfoStructure*) serialize to a stream
/// - ns1__WsSubscriptionRequestInfoStructure* ns1__WsSubscriptionRequestInfoStructure::soap_dup(soap*) returns deep copy of ns1__WsSubscriptionRequestInfoStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WsSubscriptionRequestInfoStructure::soap_del() deep deletes ns1__WsSubscriptionRequestInfoStructure data members, use only after ns1__WsSubscriptionRequestInfoStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__WsSubscriptionRequestInfoStructure : public ns2__AbstractSubscriptionRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__RequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__RequestStructure */
/*  INHERITED FROM ns2__AbstractSubscriptionRequestStructure:
//  BEGIN GROUP <xs:group name="SubscriberEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which data is to be sent, if different from Address. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                ConsumerAddress                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a Subscription Filter with which this subscription is to be aggregated for purposes of notification and delivery. If absent, use the default filter. If present, use any existing filter with that identifier, if none found, create a new one. Optional SIRI feature.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterIdentifier" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        SubscriptionFilterIdentifier   0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   General values that apply to subscription. Usually set by configuration.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionContext" of XSD type "http://www.siri.org.uk/siri":SubscriptionContextStructure.
    ns2__SubscriptionContextStructure*   SubscriptionContext            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractSubscriptionRequestStructure */
};

/// @brief "http://www.siri.org.uk/siri":SubscriptionRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractSubscriptionRequestStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for SIRI Subscription Request.
/// </BLOCKQUOTE></PRE>
/// class ns2__SubscriptionRequestStructure operations:
/// - ns2__SubscriptionRequestStructure* soap_new_ns2__SubscriptionRequestStructure(soap*) allocate and default initialize
/// - ns2__SubscriptionRequestStructure* soap_new_ns2__SubscriptionRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__SubscriptionRequestStructure* soap_new_req_ns2__SubscriptionRequestStructure(soap*, ...) allocate, set required members
/// - ns2__SubscriptionRequestStructure* soap_new_set_ns2__SubscriptionRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__SubscriptionRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SubscriptionRequestStructure(soap*, ns2__SubscriptionRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__SubscriptionRequestStructure(soap*, ns2__SubscriptionRequestStructure*) serialize to a stream
/// - ns2__SubscriptionRequestStructure* ns2__SubscriptionRequestStructure::soap_dup(soap*) returns deep copy of ns2__SubscriptionRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SubscriptionRequestStructure::soap_del() deep deletes ns2__SubscriptionRequestStructure data members, use only after ns2__SubscriptionRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SubscriptionRequestStructure : public ns2__AbstractSubscriptionRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__RequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__RequestStructure */
/*  INHERITED FROM ns2__AbstractSubscriptionRequestStructure:
//  BEGIN GROUP <xs:group name="SubscriberEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which data is to be sent, if different from Address. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                ConsumerAddress                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a Subscription Filter with which this subscription is to be aggregated for purposes of notification and delivery. If absent, use the default filter. If present, use any existing filter with that identifier, if none found, create a new one. Optional SIRI feature.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterIdentifier" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        SubscriptionFilterIdentifier   0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   General values that apply to subscription. Usually set by configuration.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionContext" of XSD type "http://www.siri.org.uk/siri":SubscriptionContextStructure.
    ns2__SubscriptionContextStructure*   SubscriptionContext            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractSubscriptionRequestStructure */
//  BEGIN GROUP <xs:group name="SiriSubscriptionRequestGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Subscription types. For a given SubscriptionRequest, must all be of the same service type.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SubscriptionRequestStructure;	///< Union _ns2__union_SubscriptionRequestStructure selector: set to SOAP_UNION__ns2__union_SubscriptionRequestStructure_<fieldname>
    union _ns2__union_SubscriptionRequestStructure
    {
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of _ns2__ProductionTimetableSubscriptionRequest* element refs of length 1..unbounded.
    std::vector<_ns2__ProductionTimetableSubscriptionRequest*> *ProductionTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableSubscriptionStructure*> *EstimatedTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Stop TimetablesService.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableSubscriptionStructure*> *StopTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringSubscriptionStructure*> *StopMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringSubscriptionStructure*> *VehicleMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Subscription Request for information about Timetabled connections at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableSubscriptionStructure*> *ConnectionTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringSubscriptionRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringSubscriptionRequestStructure*> *ConnectionMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to General Message Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageSubscriptionStructure*> *GeneralMessageSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringSubscriptionStructure*> *FacilityMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeSubscriptionStructure*> *SituationExchangeSubscriptionRequest 1;
    }                                    union_SubscriptionRequestStructure;
//  END OF CHOICE
//  END OF GROUP
};

/// @brief "http://www.siri.org.uk/siri":DataReadyRequestStructure is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":AbstractNotificationStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for Request from Producer to Consumer to notify that data update is ready to fetch. Answered with a DataReadyResponse.
/// </BLOCKQUOTE></PRE>
/// class ns2__DataReadyRequestStructure operations:
/// - ns2__DataReadyRequestStructure* soap_new_ns2__DataReadyRequestStructure(soap*) allocate and default initialize
/// - ns2__DataReadyRequestStructure* soap_new_ns2__DataReadyRequestStructure(soap*, int num) allocate array and default initialize values
/// - ns2__DataReadyRequestStructure* soap_new_req_ns2__DataReadyRequestStructure(soap*, ...) allocate, set required members
/// - ns2__DataReadyRequestStructure* soap_new_set_ns2__DataReadyRequestStructure(soap*, ...) allocate, set all public members
/// - ns2__DataReadyRequestStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns2__DataReadyRequestStructure(soap*, ns2__DataReadyRequestStructure*) deserialize from a stream
/// - int soap_write_ns2__DataReadyRequestStructure(soap*, ns2__DataReadyRequestStructure*) serialize to a stream
/// - ns2__DataReadyRequestStructure* ns2__DataReadyRequestStructure::soap_dup(soap*) returns deep copy of ns2__DataReadyRequestStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__DataReadyRequestStructure::soap_del() deep deletes ns2__DataReadyRequestStructure data members, use only after ns2__DataReadyRequestStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__DataReadyRequestStructure : public ns2__AbstractNotificationStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__ProducerRequestEndpointStructure:
//  BEGIN GROUP <xs:group name="ProducerRequestEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request from producer. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from ProducerRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of Producer - Participant reference.
/// </BLOCKQUOTE></PRE>
/// Element "ProducerRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        ProducerRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique reference to this message. Some systems may use just timestamp for this. Where there are multiple SubscriptionFilters, this can be used to distinguish between different notifications for different filters.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__ProducerRequestEndpointStructure */
/*  INHERITED FROM ns2__AbstractNotificationStructure:
    END OF INHERITED FROM ns2__AbstractNotificationStructure */
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopPointsRequest
/// <PRE><BLOCKQUOTE>
///   Requests a list of the STOP POINTs and places covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":StopPointsRequest is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":StopPointsDiscoveryRequestStructure.
///
/// class _ns2__StopPointsRequest operations:
/// - _ns2__StopPointsRequest* soap_new__ns2__StopPointsRequest(soap*) allocate and default initialize
/// - _ns2__StopPointsRequest* soap_new__ns2__StopPointsRequest(soap*, int num) allocate array and default initialize values
/// - _ns2__StopPointsRequest* soap_new_req__ns2__StopPointsRequest(soap*, ...) allocate, set required members
/// - _ns2__StopPointsRequest* soap_new_set__ns2__StopPointsRequest(soap*, ...) allocate, set all public members
/// - _ns2__StopPointsRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns2__StopPointsRequest(soap*, _ns2__StopPointsRequest*) deserialize from a stream
/// - int soap_write__ns2__StopPointsRequest(soap*, _ns2__StopPointsRequest*) serialize to a stream
/// - _ns2__StopPointsRequest* _ns2__StopPointsRequest::soap_dup(soap*) returns deep copy of _ns2__StopPointsRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__StopPointsRequest::soap_del() deep deletes _ns2__StopPointsRequest data members, use only after _ns2__StopPointsRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__StopPointsRequest : public ns2__StopPointsDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
/*  INHERITED FROM ns2__StopPointsDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="StopPointsDiscoveryRequestTopicGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that specify the STOP POINTs to be returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_StopPointsRequest     ;	///< Union _ns2__union_StopPointsRequest selector: set to SOAP_UNION__ns2__union_StopPointsRequest_<fieldname>
    union _ns2__union_StopPointsRequest
    {
/// <PRE><BLOCKQUOTE>
///   Rectangle containing stops be returned. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "BoundingBox" of XSD type "http://www.siri.org.uk/siri":BoundingBoxStructure.
    ns2__BoundingBoxStructure*           BoundingBox                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Circle containing stops be returned. Point indicates centre, precision indicates radius (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "Circle" of XSD type "http://www.siri.org.uk/siri":LocationStructure.
    ns2__LocationStructure*              Circle                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only stops associated with the PLACE . (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "PlaceRef" of XSD type xs:normalizedString.
    xsd__normalizedString*               PlaceRef                       0;	///< Optional element.
    }                                    union_StopPointsRequest       ;
//  END OF CHOICE
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only stops run by the specified OPERATOR. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "OperatorRef" of XSD type "http://www.siri.org.uk/siri":OperatorRefStructure.
    ns2__OperatorRefStructure*           OperatorRef                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Filter the results to include only stops for the given LINE. (+SIRI v2.0)
/// </BLOCKQUOTE></PRE>
/// Element "LineRef" of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
    ns2__LineRefStructure*               LineRef                        0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="StopPointsDiscoveryRequestPolicyGroup">
/// <PRE><BLOCKQUOTE>
///   Parameters that affect the request processing. Mostly act to reduce the number of stops returned. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Preferred language in which to return text values. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "Language" of XSD type xs:language.
    xsd__language                        Language                       0 = "en";	///< Default element value="en".
/// <PRE><BLOCKQUOTE>
///   Level of detail to include in response. Default is 'normal'. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "StopPointsDetailLevel" of XSD type "http://www.siri.org.uk/siri":StopPointsDetailEnumeration.
    enum ns2__StopPointsDetailEnumeration  StopPointsDetailLevel          0 = ns2__StopPointsDetailEnumeration__normal;	///< Default element value="normal".
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
    END OF INHERITED FROM ns2__StopPointsDiscoveryRequestStructure */
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceFeaturesRequest
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Service Features covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":ServiceFeaturesRequest is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":ServiceFeaturesDiscoveryRequestStructure.
///
/// class _ns2__ServiceFeaturesRequest operations:
/// - _ns2__ServiceFeaturesRequest* soap_new__ns2__ServiceFeaturesRequest(soap*) allocate and default initialize
/// - _ns2__ServiceFeaturesRequest* soap_new__ns2__ServiceFeaturesRequest(soap*, int num) allocate array and default initialize values
/// - _ns2__ServiceFeaturesRequest* soap_new_req__ns2__ServiceFeaturesRequest(soap*, ...) allocate, set required members
/// - _ns2__ServiceFeaturesRequest* soap_new_set__ns2__ServiceFeaturesRequest(soap*, ...) allocate, set all public members
/// - _ns2__ServiceFeaturesRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ServiceFeaturesRequest(soap*, _ns2__ServiceFeaturesRequest*) deserialize from a stream
/// - int soap_write__ns2__ServiceFeaturesRequest(soap*, _ns2__ServiceFeaturesRequest*) serialize to a stream
/// - _ns2__ServiceFeaturesRequest* _ns2__ServiceFeaturesRequest::soap_dup(soap*) returns deep copy of _ns2__ServiceFeaturesRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ServiceFeaturesRequest::soap_del() deep deletes _ns2__ServiceFeaturesRequest data members, use only after _ns2__ServiceFeaturesRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ServiceFeaturesRequest : public ns2__ServiceFeaturesDiscoveryRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__AbstractDiscoveryRequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AbstractDiscoveryRequestStructure */
/*  INHERITED FROM ns2__ServiceFeaturesDiscoveryRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Version number of request. Fixed
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://www.siri.org.uk/siri":VersionString.
   @ns2__VersionString                   version                        0;	///< Default attribute value="2.0".
    END OF INHERITED FROM ns2__ServiceFeaturesDiscoveryRequestStructure */
};

/// @brief "http://www.ifopt.org.uk/ifopt":PlaceEquipmentStructure is a complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":InstalledEquipmentStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for SITE EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// class ns4__PlaceEquipmentStructure operations:
/// - ns4__PlaceEquipmentStructure* soap_new_ns4__PlaceEquipmentStructure(soap*) allocate and default initialize
/// - ns4__PlaceEquipmentStructure* soap_new_ns4__PlaceEquipmentStructure(soap*, int num) allocate array and default initialize values
/// - ns4__PlaceEquipmentStructure* soap_new_req_ns4__PlaceEquipmentStructure(soap*, ...) allocate, set required members
/// - ns4__PlaceEquipmentStructure* soap_new_set_ns4__PlaceEquipmentStructure(soap*, ...) allocate, set all public members
/// - ns4__PlaceEquipmentStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__PlaceEquipmentStructure(soap*, ns4__PlaceEquipmentStructure*) deserialize from a stream
/// - int soap_write_ns4__PlaceEquipmentStructure(soap*, ns4__PlaceEquipmentStructure*) serialize to a stream
/// - ns4__PlaceEquipmentStructure* ns4__PlaceEquipmentStructure::soap_dup(soap*) returns deep copy of ns4__PlaceEquipmentStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__PlaceEquipmentStructure::soap_del() deep deletes ns4__PlaceEquipmentStructure data members, use only after ns4__PlaceEquipmentStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__PlaceEquipmentStructure : public ns4__InstalledEquipmentStructure
{ public:
/*  INHERITED FROM ns4__VersionedObjectStructure:
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup ref=""http://www.ifopt.org.uk/ifopt":RequiredModificationDetailsGroup">.
/// Attribute "created" of XSD type xs:dateTime.
   @xsd__dateTime                        created                        1;	///< Required attribute.
/// Attribute "lastUpdated" of XSD type xs:dateTime.
   @xsd__dateTime                        lastUpdated                    1;	///< Required attribute.
/// Attribute "modification" of XSD type "http://www.ifopt.org.uk/ifopt":ModificationEnumeration.
   @enum ns4__ModificationEnumeration    modification                   0 = ns4__ModificationEnumeration__new_;	///< Default attribute value="new".
/// Attribute "version" of XSD type "http://www.ifopt.org.uk/ifopt":RevisionNumberType.
   @ns4__RevisionNumberType*             version                        0;	///< Optional attribute.
/// Attribute "status" of XSD type "http://www.ifopt.org.uk/ifopt":StatusEnumeration.
   @enum ns4__StatusEnumeration          status                         0 = ns4__StatusEnumeration__active;	///< Default attribute value="active".
//  END OF ATTRIBUTEGROUP
    END OF INHERITED FROM ns4__VersionedObjectStructure */
/*  INHERITED FROM ns4__DataManagedObjectStructure:
//  BEGIN GROUP <xs:group name="DataManagedObjectGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for a DATA MANAGED OBJECT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   ADMINISTRATIVE ZONEthat manages object. If absent then manager same as for containing parent of object.
/// </BLOCKQUOTE></PRE>
/// Element "ManagedByAreaRef" of XSD type "http://www.ifopt.org.uk/ifopt":AdministrativeAreaRefStructure.
    ns4__AdministrativeAreaRefStructure*  ManagedByAreaRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Collection of URL's associated with object.
/// </BLOCKQUOTE></PRE>
/// Element "InfoLinks" of XSD type "http://www.ifopt.org.uk/ifopt":InfoLinksStructure.
    ns4__InfoLinksStructure*             InfoLinks                      0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns4__DataManagedObjectStructure */
/*  INHERITED FROM ns4__AbstractEquipmentStructure:
//  BEGIN GROUP <xs:group name="AbstractEquipmentGroup">
/// <PRE><BLOCKQUOTE>
///   Coomon Elements for EQUIPMENt.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifer of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentId" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentIdType.
    ns4__EquipmentIdType                 EquipmentId                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  EquipmentName                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type for reference to TYPE OF EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "TypeOfEquipment" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentTypeRefStructure.
    ns4__EquipmentTypeRefStructure*      TypeOfEquipment                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns4__AbstractEquipmentStructure */
/*  INHERITED FROM ns4__InstalledEquipmentStructure:
    END OF INHERITED FROM ns4__InstalledEquipmentStructure */
/// <PRE><BLOCKQUOTE>
///   Arbitrary extensions.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/ifopt:""http://www.ifopt.org.uk/ifopt":Extensions.
    _ns4__Extensions*                    Extensions                     0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/ifopt":LocalServiceStructure is a complexType with complexContent extension of XSD type "http://www.ifopt.org.uk/ifopt":InstalledEquipmentStructure.
///
/// <PRE><BLOCKQUOTE>
///   Type for LOCAL SERVICE.
/// </BLOCKQUOTE></PRE>
/// class ns4__LocalServiceStructure operations:
/// - ns4__LocalServiceStructure* soap_new_ns4__LocalServiceStructure(soap*) allocate and default initialize
/// - ns4__LocalServiceStructure* soap_new_ns4__LocalServiceStructure(soap*, int num) allocate array and default initialize values
/// - ns4__LocalServiceStructure* soap_new_req_ns4__LocalServiceStructure(soap*, ...) allocate, set required members
/// - ns4__LocalServiceStructure* soap_new_set_ns4__LocalServiceStructure(soap*, ...) allocate, set all public members
/// - ns4__LocalServiceStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__LocalServiceStructure(soap*, ns4__LocalServiceStructure*) deserialize from a stream
/// - int soap_write_ns4__LocalServiceStructure(soap*, ns4__LocalServiceStructure*) serialize to a stream
/// - ns4__LocalServiceStructure* ns4__LocalServiceStructure::soap_dup(soap*) returns deep copy of ns4__LocalServiceStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__LocalServiceStructure::soap_del() deep deletes ns4__LocalServiceStructure data members, use only after ns4__LocalServiceStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__LocalServiceStructure : public ns4__InstalledEquipmentStructure
{ public:
/*  INHERITED FROM ns4__VersionedObjectStructure:
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup ref=""http://www.ifopt.org.uk/ifopt":RequiredModificationDetailsGroup">.
/// Attribute "created" of XSD type xs:dateTime.
   @xsd__dateTime                        created                        1;	///< Required attribute.
/// Attribute "lastUpdated" of XSD type xs:dateTime.
   @xsd__dateTime                        lastUpdated                    1;	///< Required attribute.
/// Attribute "modification" of XSD type "http://www.ifopt.org.uk/ifopt":ModificationEnumeration.
   @enum ns4__ModificationEnumeration    modification                   0 = ns4__ModificationEnumeration__new_;	///< Default attribute value="new".
/// Attribute "version" of XSD type "http://www.ifopt.org.uk/ifopt":RevisionNumberType.
   @ns4__RevisionNumberType*             version                        0;	///< Optional attribute.
/// Attribute "status" of XSD type "http://www.ifopt.org.uk/ifopt":StatusEnumeration.
   @enum ns4__StatusEnumeration          status                         0 = ns4__StatusEnumeration__active;	///< Default attribute value="active".
//  END OF ATTRIBUTEGROUP
    END OF INHERITED FROM ns4__VersionedObjectStructure */
/*  INHERITED FROM ns4__DataManagedObjectStructure:
//  BEGIN GROUP <xs:group name="DataManagedObjectGroup">
/// <PRE><BLOCKQUOTE>
///   Elements for a DATA MANAGED OBJECT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   ADMINISTRATIVE ZONEthat manages object. If absent then manager same as for containing parent of object.
/// </BLOCKQUOTE></PRE>
/// Element "ManagedByAreaRef" of XSD type "http://www.ifopt.org.uk/ifopt":AdministrativeAreaRefStructure.
    ns4__AdministrativeAreaRefStructure*  ManagedByAreaRef               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Collection of URL's associated with object.
/// </BLOCKQUOTE></PRE>
/// Element "InfoLinks" of XSD type "http://www.ifopt.org.uk/ifopt":InfoLinksStructure.
    ns4__InfoLinksStructure*             InfoLinks                      0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns4__DataManagedObjectStructure */
/*  INHERITED FROM ns4__AbstractEquipmentStructure:
//  BEGIN GROUP <xs:group name="AbstractEquipmentGroup">
/// <PRE><BLOCKQUOTE>
///   Coomon Elements for EQUIPMENt.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Identifer of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentId" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentIdType.
    ns4__EquipmentIdType                 EquipmentId                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "EquipmentName" of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
    ns2__NaturalLanguageStringStructure*  EquipmentName                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type for reference to TYPE OF EQUIPMENT.
/// </BLOCKQUOTE></PRE>
/// Element "TypeOfEquipment" of XSD type "http://www.ifopt.org.uk/ifopt":EquipmentTypeRefStructure.
    ns4__EquipmentTypeRefStructure*      TypeOfEquipment                0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns4__AbstractEquipmentStructure */
/*  INHERITED FROM ns4__InstalledEquipmentStructure:
    END OF INHERITED FROM ns4__InstalledEquipmentStructure */
//  BEGIN GROUP <xs:group name="LocalServiceGroup">
/// <PRE><BLOCKQUOTE>
///   Element for LOCAL SERVICe.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Conditison governing availability of serevice.
/// </BLOCKQUOTE></PRE>
/// Element "ValidityConditions" of XSD type "http://www.ifopt.org.uk/ifopt":ValidityConditionsStructure.
    ns4__ValidityConditionsStructure*    ValidityConditions             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Classification of features.
/// </BLOCKQUOTE></PRE>
/// class _ns4__LocalServiceStructure_FeatureRefs operations:
/// - _ns4__LocalServiceStructure_FeatureRefs* soap_new__ns4__LocalServiceStructure_FeatureRefs(soap*) allocate and default initialize
/// - _ns4__LocalServiceStructure_FeatureRefs* soap_new__ns4__LocalServiceStructure_FeatureRefs(soap*, int num) allocate array and default initialize values
/// - _ns4__LocalServiceStructure_FeatureRefs* soap_new_req__ns4__LocalServiceStructure_FeatureRefs(soap*, ...) allocate, set required members
/// - _ns4__LocalServiceStructure_FeatureRefs* soap_new_set__ns4__LocalServiceStructure_FeatureRefs(soap*, ...) allocate, set all public members
/// - _ns4__LocalServiceStructure_FeatureRefs::soap_default(soap*) default initialize members
/// - int soap_read__ns4__LocalServiceStructure_FeatureRefs(soap*, _ns4__LocalServiceStructure_FeatureRefs*) deserialize from a stream
/// - int soap_write__ns4__LocalServiceStructure_FeatureRefs(soap*, _ns4__LocalServiceStructure_FeatureRefs*) serialize to a stream
/// - _ns4__LocalServiceStructure_FeatureRefs* _ns4__LocalServiceStructure_FeatureRefs::soap_dup(soap*) returns deep copy of _ns4__LocalServiceStructure_FeatureRefs, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__LocalServiceStructure_FeatureRefs::soap_del() deep deletes _ns4__LocalServiceStructure_FeatureRefs data members, use only after _ns4__LocalServiceStructure_FeatureRefs::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns4__LocalServiceStructure_FeatureRefs
    {
/// <PRE><BLOCKQUOTE>
///   Features of LOCAL SERVICe.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ServiceFeatureRefStructure* of length 0..unbounded.
    std::vector<ns2__ServiceFeatureRefStructure*> FeatureRef                     0;
    }                                   *FeatureRefs                    0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   Arbitrary extensions.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.ifopt.org.uk/ifopt:""http://www.ifopt.org.uk/ifopt":Extensions.
    _ns4__Extensions*                    Extensions                     0;	///< Optional element.
};

/// @brief "http://www.ifopt.org.uk/ifopt":QuayRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to QUAY.
/// </BLOCKQUOTE></PRE>
/// class ns4__QuayRefStructure operations:
/// - ns4__QuayRefStructure* soap_new_ns4__QuayRefStructure(soap*) allocate and default initialize
/// - ns4__QuayRefStructure* soap_new_ns4__QuayRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__QuayRefStructure* soap_new_req_ns4__QuayRefStructure(soap*, ...) allocate, set required members
/// - ns4__QuayRefStructure* soap_new_set_ns4__QuayRefStructure(soap*, ...) allocate, set all public members
/// - ns4__QuayRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__QuayRefStructure(soap*, ns4__QuayRefStructure*) deserialize from a stream
/// - int soap_write_ns4__QuayRefStructure(soap*, ns4__QuayRefStructure*) serialize to a stream
/// - ns4__QuayRefStructure* ns4__QuayRefStructure::soap_dup(soap*) returns deep copy of ns4__QuayRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__QuayRefStructure::soap_del() deep deletes ns4__QuayRefStructure data members, use only after ns4__QuayRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__QuayRefStructure : public ns4__StopPlaceSpaceRefStructure
{ public:
};

/// @brief "http://www.ifopt.org.uk/ifopt":AccessSpaceRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to ACCESS SPACe.
/// </BLOCKQUOTE></PRE>
/// class ns4__AccessSpaceRefStructure operations:
/// - ns4__AccessSpaceRefStructure* soap_new_ns4__AccessSpaceRefStructure(soap*) allocate and default initialize
/// - ns4__AccessSpaceRefStructure* soap_new_ns4__AccessSpaceRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__AccessSpaceRefStructure* soap_new_req_ns4__AccessSpaceRefStructure(soap*, ...) allocate, set required members
/// - ns4__AccessSpaceRefStructure* soap_new_set_ns4__AccessSpaceRefStructure(soap*, ...) allocate, set all public members
/// - ns4__AccessSpaceRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__AccessSpaceRefStructure(soap*, ns4__AccessSpaceRefStructure*) deserialize from a stream
/// - int soap_write_ns4__AccessSpaceRefStructure(soap*, ns4__AccessSpaceRefStructure*) serialize to a stream
/// - ns4__AccessSpaceRefStructure* ns4__AccessSpaceRefStructure::soap_dup(soap*) returns deep copy of ns4__AccessSpaceRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__AccessSpaceRefStructure::soap_del() deep deletes ns4__AccessSpaceRefStructure data members, use only after ns4__AccessSpaceRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__AccessSpaceRefStructure : public ns4__StopPlaceSpaceRefStructure
{ public:
};

/// @brief "http://www.ifopt.org.uk/ifopt":BoardingPositionRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to BOARDING POSITION.
/// </BLOCKQUOTE></PRE>
/// class ns4__BoardingPositionRefStructure operations:
/// - ns4__BoardingPositionRefStructure* soap_new_ns4__BoardingPositionRefStructure(soap*) allocate and default initialize
/// - ns4__BoardingPositionRefStructure* soap_new_ns4__BoardingPositionRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__BoardingPositionRefStructure* soap_new_req_ns4__BoardingPositionRefStructure(soap*, ...) allocate, set required members
/// - ns4__BoardingPositionRefStructure* soap_new_set_ns4__BoardingPositionRefStructure(soap*, ...) allocate, set all public members
/// - ns4__BoardingPositionRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__BoardingPositionRefStructure(soap*, ns4__BoardingPositionRefStructure*) deserialize from a stream
/// - int soap_write_ns4__BoardingPositionRefStructure(soap*, ns4__BoardingPositionRefStructure*) serialize to a stream
/// - ns4__BoardingPositionRefStructure* ns4__BoardingPositionRefStructure::soap_dup(soap*) returns deep copy of ns4__BoardingPositionRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__BoardingPositionRefStructure::soap_del() deep deletes ns4__BoardingPositionRefStructure data members, use only after ns4__BoardingPositionRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__BoardingPositionRefStructure : public ns4__StopPlaceSpaceRefStructure
{ public:
};

/// @brief "http://www.ifopt.org.uk/ifopt":StopPlaceEntranceRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to STOP PLACE Entrance.
/// </BLOCKQUOTE></PRE>
/// class ns4__StopPlaceEntranceRefStructure operations:
/// - ns4__StopPlaceEntranceRefStructure* soap_new_ns4__StopPlaceEntranceRefStructure(soap*) allocate and default initialize
/// - ns4__StopPlaceEntranceRefStructure* soap_new_ns4__StopPlaceEntranceRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__StopPlaceEntranceRefStructure* soap_new_req_ns4__StopPlaceEntranceRefStructure(soap*, ...) allocate, set required members
/// - ns4__StopPlaceEntranceRefStructure* soap_new_set_ns4__StopPlaceEntranceRefStructure(soap*, ...) allocate, set all public members
/// - ns4__StopPlaceEntranceRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__StopPlaceEntranceRefStructure(soap*, ns4__StopPlaceEntranceRefStructure*) deserialize from a stream
/// - int soap_write_ns4__StopPlaceEntranceRefStructure(soap*, ns4__StopPlaceEntranceRefStructure*) serialize to a stream
/// - ns4__StopPlaceEntranceRefStructure* ns4__StopPlaceEntranceRefStructure::soap_dup(soap*) returns deep copy of ns4__StopPlaceEntranceRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__StopPlaceEntranceRefStructure::soap_del() deep deletes ns4__StopPlaceEntranceRefStructure data members, use only after ns4__StopPlaceEntranceRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__StopPlaceEntranceRefStructure : public ns4__StopPlaceSpaceRefStructure
{ public:
};

/// @brief "http://www.ifopt.org.uk/ifopt":VehicleStoppingPlaceRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to VEHICLE STOPPING PLACe.
/// </BLOCKQUOTE></PRE>
/// class ns4__VehicleStoppingPlaceRefStructure operations:
/// - ns4__VehicleStoppingPlaceRefStructure* soap_new_ns4__VehicleStoppingPlaceRefStructure(soap*) allocate and default initialize
/// - ns4__VehicleStoppingPlaceRefStructure* soap_new_ns4__VehicleStoppingPlaceRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__VehicleStoppingPlaceRefStructure* soap_new_req_ns4__VehicleStoppingPlaceRefStructure(soap*, ...) allocate, set required members
/// - ns4__VehicleStoppingPlaceRefStructure* soap_new_set_ns4__VehicleStoppingPlaceRefStructure(soap*, ...) allocate, set all public members
/// - ns4__VehicleStoppingPlaceRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__VehicleStoppingPlaceRefStructure(soap*, ns4__VehicleStoppingPlaceRefStructure*) deserialize from a stream
/// - int soap_write_ns4__VehicleStoppingPlaceRefStructure(soap*, ns4__VehicleStoppingPlaceRefStructure*) serialize to a stream
/// - ns4__VehicleStoppingPlaceRefStructure* ns4__VehicleStoppingPlaceRefStructure::soap_dup(soap*) returns deep copy of ns4__VehicleStoppingPlaceRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__VehicleStoppingPlaceRefStructure::soap_del() deep deletes ns4__VehicleStoppingPlaceRefStructure data members, use only after ns4__VehicleStoppingPlaceRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__VehicleStoppingPlaceRefStructure : public ns4__StopPlaceSpaceRefStructure
{ public:
};

/// @brief "http://www.ifopt.org.uk/ifopt":VehicleStoppingPositionRefStructure is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Type for reference to VEHICLE STOPPING POSITION.
/// </BLOCKQUOTE></PRE>
/// class ns4__VehicleStoppingPositionRefStructure operations:
/// - ns4__VehicleStoppingPositionRefStructure* soap_new_ns4__VehicleStoppingPositionRefStructure(soap*) allocate and default initialize
/// - ns4__VehicleStoppingPositionRefStructure* soap_new_ns4__VehicleStoppingPositionRefStructure(soap*, int num) allocate array and default initialize values
/// - ns4__VehicleStoppingPositionRefStructure* soap_new_req_ns4__VehicleStoppingPositionRefStructure(soap*, ...) allocate, set required members
/// - ns4__VehicleStoppingPositionRefStructure* soap_new_set_ns4__VehicleStoppingPositionRefStructure(soap*, ...) allocate, set all public members
/// - ns4__VehicleStoppingPositionRefStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns4__VehicleStoppingPositionRefStructure(soap*, ns4__VehicleStoppingPositionRefStructure*) deserialize from a stream
/// - int soap_write_ns4__VehicleStoppingPositionRefStructure(soap*, ns4__VehicleStoppingPositionRefStructure*) serialize to a stream
/// - ns4__VehicleStoppingPositionRefStructure* ns4__VehicleStoppingPositionRefStructure::soap_dup(soap*) returns deep copy of ns4__VehicleStoppingPositionRefStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__VehicleStoppingPositionRefStructure::soap_del() deep deletes ns4__VehicleStoppingPositionRefStructure data members, use only after ns4__VehicleStoppingPositionRefStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__VehicleStoppingPositionRefStructure : public ns4__StopPlaceSpaceRefStructure
{ public:
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":NonWeatherRelatedRoadConditions is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadConditions.
///
/// class ns5__NonWeatherRelatedRoadConditions operations:
/// - ns5__NonWeatherRelatedRoadConditions* soap_new_ns5__NonWeatherRelatedRoadConditions(soap*) allocate and default initialize
/// - ns5__NonWeatherRelatedRoadConditions* soap_new_ns5__NonWeatherRelatedRoadConditions(soap*, int num) allocate array and default initialize values
/// - ns5__NonWeatherRelatedRoadConditions* soap_new_req_ns5__NonWeatherRelatedRoadConditions(soap*, ...) allocate, set required members
/// - ns5__NonWeatherRelatedRoadConditions* soap_new_set_ns5__NonWeatherRelatedRoadConditions(soap*, ...) allocate, set all public members
/// - ns5__NonWeatherRelatedRoadConditions::soap_default(soap*) default initialize members
/// - int soap_read_ns5__NonWeatherRelatedRoadConditions(soap*, ns5__NonWeatherRelatedRoadConditions*) deserialize from a stream
/// - int soap_write_ns5__NonWeatherRelatedRoadConditions(soap*, ns5__NonWeatherRelatedRoadConditions*) serialize to a stream
/// - ns5__NonWeatherRelatedRoadConditions* ns5__NonWeatherRelatedRoadConditions::soap_dup(soap*) returns deep copy of ns5__NonWeatherRelatedRoadConditions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__NonWeatherRelatedRoadConditions::soap_del() deep deletes ns5__NonWeatherRelatedRoadConditions data members, use only after ns5__NonWeatherRelatedRoadConditions::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__NonWeatherRelatedRoadConditions : public ns5__RoadConditions
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Conditions:
/// Element "drivingConditionType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DrivingConditionTypeEnum.
    enum ns5__DrivingConditionTypeEnum*  drivingConditionType           0;	///< Optional element.
/// Element "conditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  conditionsExtension            0;	///< Optional element.
    END OF INHERITED FROM ns5__Conditions */
/*  INHERITED FROM ns5__RoadConditions:
/// Element "roadConditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadConditionsExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__RoadConditions */
/// Vector of enum ns5__NonWeatherRelatedRoadConditionTypeEnum of length 1..unbounded.
    std::vector<enum ns5__NonWeatherRelatedRoadConditionTypeEnum> nonWeatherRelatedRoadConditionType 1;
/// Element "nonWeatherRelatedRoadConditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  nonWeatherRelatedRoadConditionsExtension 0;	///< Optional element.
};

/// @brief "http://datex2.eu/schema/2_0RC1/2_0":WeatherRelatedRoadConditions is a complexType with complexContent extension of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadConditions.
///
/// class ns5__WeatherRelatedRoadConditions operations:
/// - ns5__WeatherRelatedRoadConditions* soap_new_ns5__WeatherRelatedRoadConditions(soap*) allocate and default initialize
/// - ns5__WeatherRelatedRoadConditions* soap_new_ns5__WeatherRelatedRoadConditions(soap*, int num) allocate array and default initialize values
/// - ns5__WeatherRelatedRoadConditions* soap_new_req_ns5__WeatherRelatedRoadConditions(soap*, ...) allocate, set required members
/// - ns5__WeatherRelatedRoadConditions* soap_new_set_ns5__WeatherRelatedRoadConditions(soap*, ...) allocate, set all public members
/// - ns5__WeatherRelatedRoadConditions::soap_default(soap*) default initialize members
/// - int soap_read_ns5__WeatherRelatedRoadConditions(soap*, ns5__WeatherRelatedRoadConditions*) deserialize from a stream
/// - int soap_write_ns5__WeatherRelatedRoadConditions(soap*, ns5__WeatherRelatedRoadConditions*) serialize to a stream
/// - ns5__WeatherRelatedRoadConditions* ns5__WeatherRelatedRoadConditions::soap_dup(soap*) returns deep copy of ns5__WeatherRelatedRoadConditions, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__WeatherRelatedRoadConditions::soap_del() deep deletes ns5__WeatherRelatedRoadConditions data members, use only after ns5__WeatherRelatedRoadConditions::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__WeatherRelatedRoadConditions : public ns5__RoadConditions
{ public:
/*  INHERITED FROM ns5__SituationRecord:
/// Element "situationRecordCreationReference" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":String.
    ns5__String*                         situationRecordCreationReference 0;	///< Optional element.
/// Element "situationRecordCreationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordCreationTime    1;	///< Required element.
/// Element "situationRecordObservationTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordObservationTime 0;	///< Optional element.
/// Element "situationRecordVersion" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":NonNegativeInteger.
    ns5__NonNegativeInteger              situationRecordVersion         1;	///< Required element.
/// Element "situationRecordVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime                        situationRecordVersionTime     1;	///< Required element.
/// Element "situationRecordFirstSupplierVersionTime" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DateTime.
    ns5__DateTime*                       situationRecordFirstSupplierVersionTime 0;	///< Optional element.
/// Element "confidentialityOverride" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ConfidentialityValueEnum.
    enum ns5__ConfidentialityValueEnum*  confidentialityOverride        0;	///< Optional element.
/// Element "probabilityOfOccurrence" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ProbabilityOfOccurrenceEnum.
    enum ns5__ProbabilityOfOccurrenceEnum  probabilityOfOccurrence        1;	///< Required element.
/// Element "source" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Source.
    ns5__Source*                         source                         0;	///< Optional element.
/// Element "validity" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Validity.
    ns5__Validity*                       validity                       1;	///< Required element.
/// Element "impact" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Impact.
    ns5__Impact*                         impact                         0;	///< Optional element.
/// Element "cause" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Cause.
    ns5__Cause*                          cause                          0;	///< Optional element.
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > generalPublicComment           0;
/// Vector of ns5__Comment* of length 0..unbounded.
    std::vector<ns5__Comment*          > nonGeneralPublicComment        0;
/// Vector of ns5__UrlLink* of length 0..unbounded.
    std::vector<ns5__UrlLink*          > urlLink                        0;
/// Element "groupOfLocations" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":GroupOfLocations.
    ns5__GroupOfLocations*               groupOfLocations               1;	///< Required element.
/// Element "management" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":Management.
    ns5__Management*                     management                     0;	///< Optional element.
/// Element "situationRecordExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  situationRecordExtension       0;	///< Optional element.
/// Attribute "id" of XSD type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM ns5__SituationRecord */
/*  INHERITED FROM ns5__TrafficElement:
/// Element "trafficElementExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  trafficElementExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__TrafficElement */
/*  INHERITED FROM ns5__Conditions:
/// Element "drivingConditionType" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":DrivingConditionTypeEnum.
    enum ns5__DrivingConditionTypeEnum*  drivingConditionType           0;	///< Optional element.
/// Element "conditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  conditionsExtension            0;	///< Optional element.
    END OF INHERITED FROM ns5__Conditions */
/*  INHERITED FROM ns5__RoadConditions:
/// Element "roadConditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  roadConditionsExtension        0;	///< Optional element.
    END OF INHERITED FROM ns5__RoadConditions */
/// Vector of enum ns5__WeatherRelatedRoadConditionTypeEnum of length 1..unbounded.
    std::vector<enum ns5__WeatherRelatedRoadConditionTypeEnum> weatherRelatedRoadConditionType 1;
/// Element "roadSurfaceConditionMeasurements" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":RoadSurfaceConditionMeasurements.
    ns5__RoadSurfaceConditionMeasurements*  roadSurfaceConditionMeasurements 0;	///< Optional element.
/// Element "weatherRelatedRoadConditionsExtension" of XSD type "http://datex2.eu/schema/2_0RC1/2_0":ExtensionType.
    ns5__ExtensionType*                  weatherRelatedRoadConditionsExtension 0;	///< Optional element.
};

/// @brief Top-level root element "http://www.siri.org.uk/siri":SubscriptionRequest
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Producer for a subscription. Answered with a SubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// @brief "http://www.siri.org.uk/siri":SubscriptionRequest is a complexType with complexContent extension of XSD type "http://www.siri.org.uk/siri":SubscriptionRequestStructure.
///
/// class _ns2__SubscriptionRequest operations:
/// - _ns2__SubscriptionRequest* soap_new__ns2__SubscriptionRequest(soap*) allocate and default initialize
/// - _ns2__SubscriptionRequest* soap_new__ns2__SubscriptionRequest(soap*, int num) allocate array and default initialize values
/// - _ns2__SubscriptionRequest* soap_new_req__ns2__SubscriptionRequest(soap*, ...) allocate, set required members
/// - _ns2__SubscriptionRequest* soap_new_set__ns2__SubscriptionRequest(soap*, ...) allocate, set all public members
/// - _ns2__SubscriptionRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns2__SubscriptionRequest(soap*, _ns2__SubscriptionRequest*) deserialize from a stream
/// - int soap_write__ns2__SubscriptionRequest(soap*, _ns2__SubscriptionRequest*) serialize to a stream
/// - _ns2__SubscriptionRequest* _ns2__SubscriptionRequest::soap_dup(soap*) returns deep copy of _ns2__SubscriptionRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__SubscriptionRequest::soap_del() deep deletes _ns2__SubscriptionRequest data members, use only after _ns2__SubscriptionRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__SubscriptionRequest : public ns2__SubscriptionRequestStructure
{ public:
/*  INHERITED FROM ns2__AbstractRequestStructure:
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestTimestamp.
    xsd__dateTime                        RequestTimestamp               1;	///< Required element.
    END OF INHERITED FROM ns2__AbstractRequestStructure */
/*  INHERITED FROM ns2__AuthenticatedRequestStructure:
//  BEGIN GROUP <xs:group name="AuthenticatedRequestGroup">
/// <PRE><BLOCKQUOTE>
///   Elemenst for authecticiation. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account may be common to all users of an application, or to an individual user. Note that to identify an individual user the RequestorRef can be used with an anonymised token. . +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountId" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        AccountId                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// Element "AccountKey" of XSD type xs:normalizedString.
    xsd__normalizedString*               AccountKey                     0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__AuthenticatedRequestStructure */
/*  INHERITED FROM ns2__RequestStructure:
//  BEGIN GROUP <xs:group name="RequestorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Elements relating to system that sent request
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                Address                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://www.siri.org.uk/siri:""http://www.siri.org.uk/siri":RequestorRef.
    ns2__ParticipantRefStructure*        RequestorRef                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Arbitrary unique identifier that can be used to reference this message. n subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// Element "MessageIdentifier" of XSD type "http://www.siri.org.uk/siri":MessageQualifierStructure.
    ns2__MessageQualifierStructure*      MessageIdentifier              0;	///< Optional element.
//  END OF GROUP
//  BEGIN GROUP <xs:group name="DelegatorEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   If request has been proxied by an intermediate aggregting system , tracking informattion relating to the original requestor. This allows teh aggergation to be stateless
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address of original Consumer, ie requesting system to which delegating response is to be returned. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                DelegatorAddress               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of delegating system that originated message. +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// Element "DelegatorRef" of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
    ns2__ParticipantRefStructure*        DelegatorRef                   0;	///< Optional element.
//  END OF GROUP
    END OF INHERITED FROM ns2__RequestStructure */
/*  INHERITED FROM ns2__AbstractSubscriptionRequestStructure:
//  BEGIN GROUP <xs:group name="SubscriberEndpointGroup">
/// <PRE><BLOCKQUOTE>
///   Unique reference to request. May be used to reference request in subsequent interactions.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Address to which data is to be sent, if different from Address. This may also be determined from RequestorRef and preconfigured data.
/// </BLOCKQUOTE></PRE>
/// Element "ConsumerAddress" of XSD type "http://www.siri.org.uk/siri":EndpointAddress.
    ns2__EndpointAddress*                ConsumerAddress                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Reference to a Subscription Filter with which this subscription is to be aggregated for purposes of notification and delivery. If absent, use the default filter. If present, use any existing filter with that identifier, if none found, create a new one. Optional SIRI feature.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionFilterIdentifier" of XSD type xs:NMTOKEN.
    xsd__NMTOKEN*                        SubscriptionFilterIdentifier   0;	///< Optional element.
//  END OF GROUP
/// <PRE><BLOCKQUOTE>
///   General values that apply to subscription. Usually set by configuration.
/// </BLOCKQUOTE></PRE>
/// Element "SubscriptionContext" of XSD type "http://www.siri.org.uk/siri":SubscriptionContextStructure.
    ns2__SubscriptionContextStructure*   SubscriptionContext            0;	///< Optional element.
    END OF INHERITED FROM ns2__AbstractSubscriptionRequestStructure */
/*  INHERITED FROM ns2__SubscriptionRequestStructure:
//  BEGIN GROUP <xs:group name="SiriSubscriptionRequestGroup">
/// <PRE><BLOCKQUOTE>
///   SIRI Functional Service Subscription types. For a given SubscriptionRequest, must all be of the same service type.
/// </BLOCKQUOTE></PRE>
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_SubscriptionRequest   ;	///< Union _ns2__union_SubscriptionRequest selector: set to SOAP_UNION__ns2__union_SubscriptionRequest_<fieldname>
    union _ns2__union_SubscriptionRequest
    {
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of _ns2__ProductionTimetableSubscriptionRequest* element refs of length 1..unbounded.
    std::vector<_ns2__ProductionTimetableSubscriptionRequest*> *ProductionTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__EstimatedTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__EstimatedTimetableSubscriptionStructure*> *EstimatedTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Stop TimetablesService.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopTimetableSubscriptionStructure*> *StopTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__StopMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__StopMonitoringSubscriptionStructure*> *StopMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__VehicleMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__VehicleMonitoringSubscriptionStructure*> *VehicleMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Subscription Request for information about Timetabled connections at a stop.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionTimetableSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionTimetableSubscriptionStructure*> *ConnectionTimetableSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__ConnectionMonitoringSubscriptionRequestStructure* element refs of length 1..unbounded.
    std::vector<ns2__ConnectionMonitoringSubscriptionRequestStructure*> *ConnectionMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to General Message Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__GeneralMessageSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__GeneralMessageSubscriptionStructure*> *GeneralMessageSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__FacilityMonitoringSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__FacilityMonitoringSubscriptionStructure*> *FacilityMonitoringSubscriptionRequest 1;
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// Vector of ns2__SituationExchangeSubscriptionStructure* element refs of length 1..unbounded.
    std::vector<ns2__SituationExchangeSubscriptionStructure*> *SituationExchangeSubscriptionRequest 1;
    }                                    union_SubscriptionRequest     ;
//  END OF CHOICE
//  END OF GROUP
    END OF INHERITED FROM ns2__SubscriptionRequestStructure */
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://wsdl.siri.org.uk/siri                                             *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":Subscribe of XSD type "http://wsdl.siri.org.uk/siri":WsSubscriptionRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":SubscribeResponse of XSD type "http://wsdl.siri.org.uk/siri":WsSubscriptionAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":DeleteSubscription of XSD type "http://wsdl.siri.org.uk/siri":WsDeleteSubscriptionRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":DeleteSubscriptionResponse of XSD type "http://wsdl.siri.org.uk/siri":WsDeleteSubscriptionAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":CheckStatus of XSD type "http://wsdl.siri.org.uk/siri":WsCheckStatusStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":CheckStatusResponse of XSD type "http://wsdl.siri.org.uk/siri":WsCheckStatusResponseStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":DataSupply of XSD type "http://wsdl.siri.org.uk/siri":WsDataSupplyRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":DataSupplyResponse of XSD type "http://wsdl.siri.org.uk/siri":WsDataSupplyAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":WSErrorConditionElement of XSD type "http://www.siri.org.uk/siri":ErrorConditionStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetCapabilities of XSD type "http://wsdl.siri.org.uk/siri":WsGetCapabilitiesAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetCapabilitiesResponse of XSD type "http://wsdl.siri.org.uk/siri":WsGetCapabilitiesAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":StopPointsDiscovery of XSD type "http://wsdl.siri.org.uk/siri":WsStopPointsDiscoveryStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":StopPointsDiscoveryResponse of XSD type "http://wsdl.siri.org.uk/siri":WsStopPointsDiscoveryAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":LinesDiscovery of XSD type "http://wsdl.siri.org.uk/siri":WsLinesDiscoveryStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":LinesDiscoveryResponse of XSD type "http://wsdl.siri.org.uk/siri":WsLinesDiscoveryAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetConnectionMonitoring of XSD type "http://wsdl.siri.org.uk/siri":WsConnectionMonitoringRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetConnectionMonitoringResponse of XSD type "http://wsdl.siri.org.uk/siri":WsConnectionMonitoringAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetConnectionTimetable of XSD type "http://wsdl.siri.org.uk/siri":WsConnectionTimetableRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetConnectionTimetableResponse of XSD type "http://wsdl.siri.org.uk/siri":WsConnectionTimetableAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetEstimatedTimetable of XSD type "http://wsdl.siri.org.uk/siri":WsEstimatedTimetableRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetEstimatedTimetableResponse of XSD type "http://wsdl.siri.org.uk/siri":WsEstimatedTimetableAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetFacilityMonitoring of XSD type "http://wsdl.siri.org.uk/siri":WsFacilityMonitoringRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetFacilityMonitoringResponse of XSD type "http://wsdl.siri.org.uk/siri":WsFacilityMonitoringAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetGeneralMessage of XSD type "http://wsdl.siri.org.uk/siri":GeneralMessageRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetGeneralMessageResponse of XSD type "http://wsdl.siri.org.uk/siri":GeneralMessageAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetProductionTimetable of XSD type "http://wsdl.siri.org.uk/siri":ProductionTimetableRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetProductionTimetableResponse of XSD type "http://wsdl.siri.org.uk/siri":ProductionTimetableAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetSituationExchange of XSD type "http://wsdl.siri.org.uk/siri":SituationExchangeRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetSituationExchangeResponse of XSD type "http://wsdl.siri.org.uk/siri":SituationExchangeAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetStopMonitoring of XSD type "http://wsdl.siri.org.uk/siri":StopMonitoringRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetMultipleStopMonitoring of XSD type "http://wsdl.siri.org.uk/siri":StopMonitoringMultipleRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetStopMonitoringResponse of XSD type "http://wsdl.siri.org.uk/siri":StopMonitoringAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetMultipleStopMonitoringResponse of XSD type "http://wsdl.siri.org.uk/siri":StopMonitoringAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetStopTimetable of XSD type "http://wsdl.siri.org.uk/siri":StopTimetableRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetStopTimetableResponse of XSD type "http://wsdl.siri.org.uk/siri":StopTimetableAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetVehicleMonitoring of XSD type "http://wsdl.siri.org.uk/siri":VehicleMonitoringRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetVehicleMonitoringResponse of XSD type "http://wsdl.siri.org.uk/siri":VehicleMonitoringAnswerStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetSiriService of XSD type "http://www.siri.org.uk/siri":ServiceRequestStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://wsdl.siri.org.uk/siri":GetSiriServiceResponse of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://wsdl.siri.org.uk/siri                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.siri.org.uk/siri                                              *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.siri.org.uk/siri":CapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":CapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Requests a the current capabilities of the server. Answred with a CpabailitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":CapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Responses with the capabilities of an implementation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TerminateSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":TerminateSubscriptionRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Subscription Manager to terminate a subscription. Answered with a TerminateSubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TerminateSubscriptionResponse of XSD type "http://www.siri.org.uk/siri":TerminateSubscriptionResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Request from Subscriber to Subscription Manager to terminate a subscription. Answered with a TerminateSubscriptionResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ResponseStatus of XSD type "http://www.siri.org.uk/siri":StatusResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Contains infromation about the processing of a an individual service subscription - either success info or an error condition. (VDV Acknowledgement).
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SubscriptionResponse of XSD type "http://www.siri.org.uk/siri":SubscriptionResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to inform whether subscriptions have been created. Answers a previous SubscriptionRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DataReadyNotification of XSD type "http://www.siri.org.uk/siri":DataReadyRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request from Producer to Consumer to notify that data update is ready to fetch. Answered with a DataReadyResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DataReadyAcknowledgement of XSD type "http://www.siri.org.uk/siri":DataReadyResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Response from Consumer to Producer to acknowledge to Producer that a DataReadyRequest has been received.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DataSupplyRequest of XSD type "http://www.siri.org.uk/siri":DataSupplyRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer to fetch update previously notified by a Data ready message. Answered with a Service Delivery.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DataReceivedAcknowledgement of XSD type "http://www.siri.org.uk/siri":DataReceivedResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Response from Consumer to Producer to acknowledge that data hase been received. Used as optioanl extra step if reliable delivery is needed. Answers a ServiceDelivery.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CheckStatusRequest of XSD type "http://www.siri.org.uk/siri":CheckStatusRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request from Consumer to Producer to check whether services is working. Answers a CheckStatusRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CheckStatusResponse of XSD type "http://www.siri.org.uk/siri":CheckStatusResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Response from Producer to Consumer to inform whether services is working. Answers a CheckStatusRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":HeartbeatNotification of XSD type "http://www.siri.org.uk/siri":HeartbeatNotificationStructure.
/// <PRE><BLOCKQUOTE>
///   Notification from Producer to Consumer to indicate that the service is running normally.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":Status of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether the request was processed successfully or not. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":Extensions of XSD type "http://www.siri.org.uk/siri":ExtensionsStructure.
/// <PRE><BLOCKQUOTE>
///   Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SrsName of XSD type "http://www.siri.org.uk/siri":SrsNameType.
/// <PRE><BLOCKQUOTE>
///   GML Spatial coordinate reference system.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ErrorCondition of XSD type "http://www.siri.org.uk/siri":ErrorConditionStructure.
/// <PRE><BLOCKQUOTE>
///   Description of error or warning condition associated with response.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ErrorConditionElement of XSD type "http://www.siri.org.uk/siri":ErrorConditionElementStructure.
/// <PRE><BLOCKQUOTE>
///   Element fror an erroc condition (for use in WSDL.)
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionElement of XSD type "http://www.siri.org.uk/siri":ServiceDeliveryErrorConditionStructure.
/// <PRE><BLOCKQUOTE>
///   Element fror an erroc condition for use in WSDL.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":UnapprovedKeyAccessError of XSD type "http://www.siri.org.uk/siri":UnapprovedKeyAccessStructure.
/// <PRE><BLOCKQUOTE>
///   Error:Recipient of a message to be distributed is not available. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":UnknownParticipantError of XSD type "http://www.siri.org.uk/siri":UnknownParticipantErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Recipient for a message to be distributed is unknown. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":UnknownEndpointError of XSD type "http://www.siri.org.uk/siri":UnknownEndpointErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Recipient for a message to be distributed is unknown. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EndpointDeniedAccessError of XSD type "http://www.siri.org.uk/siri":EndpointDeniedAccessStructure.
/// <PRE><BLOCKQUOTE>
///   Error:Endpoint to which a message is to be distributed did not allow access by the cloient. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EndpointNotAvailableAccessError of XSD type "http://www.siri.org.uk/siri":EndpointNotAvailableAccessStructure.
/// <PRE><BLOCKQUOTE>
///   Error:Recipient of a message to be distributed is not available. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceNotAvailableError of XSD type "http://www.siri.org.uk/siri":ServiceNotAvailableErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Functional service is not available to use (but it is still capable of giving this response).
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CapabilityNotSupportedError of XSD type "http://www.siri.org.uk/siri":CapabilityNotSupportedErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Service does not support the requested capability.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":BeyondDataHorizon of XSD type "http://www.siri.org.uk/siri":BeyondDataHorizonErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Data period or subscription period is outside of period covered by service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AccessNotAllowedError of XSD type "http://www.siri.org.uk/siri":AccessNotAllowedErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Requestor is not authorised to the service or data requested.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":NoInfoForTopicError of XSD type "http://www.siri.org.uk/siri":NoInfoForTopicErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Valid request was made but service does not hold any data for the requested topic. expression.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":InvalidDataReferencesError of XSD type "http://www.siri.org.uk/siri":InvalidDataReferencesErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Request contains references to identifiers that are not known. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ParametersIgnoredError of XSD type "http://www.siri.org.uk/siri":ParametersIgnoredErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Request contained parameters that were not supported by the producer. A response has been provided but some parameters have been ignored. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":UnknownExtensionsError of XSD type "http://www.siri.org.uk/siri":UnknownExtensionsErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored.. +SIRI v2.0.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AllowedResourceUsageExceededError of XSD type "http://www.siri.org.uk/siri":AllowedResourceUsageExceededErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Valid request was made but request would exceed the permitted resource usage of the client.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":UnknownSubscriberError of XSD type "http://www.siri.org.uk/siri":UnknownSubscriberErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Subscriber not found.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":UnknownSubscriptionError of XSD type "http://www.siri.org.uk/siri":UnknownSubscriptionErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Subscription not found.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":OtherError of XSD type "http://www.siri.org.uk/siri":OtherErrorStructure.
/// <PRE><BLOCKQUOTE>
///   Error: Error type other than the well defined codes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RequestTimestamp of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Timestamp on request.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RequestorRef of XSD type "http://www.siri.org.uk/siri":ParticipantRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a requestor - Participant Code.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ResponseTimestamp of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Time individual response element was created.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":IncludeTranslations of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether additional transaltions of text names are to be included in elements. If false, then only one element should be returned. Defaukt is false.Where multiple values are returned The first element returned ill be used as the defaukt value
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AccessFacility of XSD type "http://www.siri.org.uk/siri":AccessFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Access Facility.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AccommodationFacility of XSD type "http://www.siri.org.uk/siri":AccommodationFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Accomodation Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AssistanceFacility of XSD type "http://www.siri.org.uk/siri":AssistanceFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Assistance Facility.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FareClassFacility of XSD type "http://www.siri.org.uk/siri":FareClassFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of FareClass Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":HireFacility of XSD type "http://www.siri.org.uk/siri":HireFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Hire Facility.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":LuggageFacility of XSD type "http://www.siri.org.uk/siri":LuggageFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Luggage Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":MobilityFacility of XSD type "http://www.siri.org.uk/siri":MobilityFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Mobility Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":NuisanceFacility of XSD type "http://www.siri.org.uk/siri":NuisanceFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Nuisance Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ParkingFacility of XSD type "http://www.siri.org.uk/siri":ParkingFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Access Facility.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PassengerInformationFacility of XSD type "http://www.siri.org.uk/siri":PassengerInformationFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of PassengerInfo Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PassengerCommsFacility of XSD type "http://www.siri.org.uk/siri":PassengerCommsFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of PassengerComms Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RefreshmentFacility of XSD type "http://www.siri.org.uk/siri":RefreshmentFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Refreshment Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ReservedSpaceFacility of XSD type "http://www.siri.org.uk/siri":ReservedSpaceFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Reserved Space Facility.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RetailFacility of XSD type "http://www.siri.org.uk/siri":RetailFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Retail Facility.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SanitaryFacility of XSD type "http://www.siri.org.uk/siri":SanitaryFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Sanitary Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TicketingFacility of XSD type "http://www.siri.org.uk/siri":TicketingFacilityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of Ticketing Facility type - Tpeg pti23.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityRef of XSD type "http://www.siri.org.uk/siri":FacilityRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a Facility.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityConditionElement of XSD type "http://www.siri.org.uk/siri":FacilityConditionStructure.
/// <PRE><BLOCKQUOTE>
///   Description of any change concerning a MONITORED FACILITY New structure defined in SIRI XSD 1.1 for Facilities Management.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityChangeElement of XSD type "http://www.siri.org.uk/siri":FacilityChangeStructure.
/// <PRE><BLOCKQUOTE>
///   A change to the availaibility of EQUIPMENT. Basic structure defined in the first 1.0 SIRI XSd.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleJourneyRef of XSD type "http://www.siri.org.uk/siri":VehicleJourneyRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DatedVehicleJourneyRef of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a DATED VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":InterchangeRef of XSD type "http://www.siri.org.uk/siri":InterchangeRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a SERVCIE JOURNEY INTERCHANGE.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":OriginRef of XSD type "http://www.siri.org.uk/siri":JourneyPlaceRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to the origin SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ViaRef of XSD type "http://www.siri.org.uk/siri":JourneyPlaceRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT that is a VIA point on the journey.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DestinationRef of XSD type "http://www.siri.org.uk/siri":DestinationRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to the destination SCHEDULED STOP POINT of the journey.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VersionRef of XSD type "http://www.siri.org.uk/siri":VersionCodeType.
/// <PRE><BLOCKQUOTE>
///   Version Identifier.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VisitNumber of XSD type "http://www.siri.org.uk/siri":VisitNumberType.
/// <PRE><BLOCKQUOTE>
///   Sequence of visit to SCHEDULED STOP POINT.within VEHICLE JOURNEY. Increases monotonically, but not necessarily sequentially.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":Order of XSD type xs:positiveInteger.
/// <PRE><BLOCKQUOTE>
///   For implementations for which the overall Order is not used for VisitNumber, (i.e. if VisitNumberIsOrder is false) then can be used to associate the stop Order as well if useful.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopPointRef of XSD type "http://www.siri.org.uk/siri":StopPointRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP POINT.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopPointName of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
/// <PRE><BLOCKQUOTE>
///   Name of SCHEDULED STOP POINT.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TimingPoint of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether the stop is a TIMING POINT. Times for stops that are not timing points are sometimes interpolated crudely from the timing points, and may represent a lower level of accuracy. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleAtStop of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether VEHICLE is currently at stop. Default is false (xml default added from SIRI 2.0)
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionLinkRef of XSD type "http://www.siri.org.uk/siri":ConnectionLinkRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a CONNECTION link
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":JourneyPatternRef of XSD type "http://www.siri.org.uk/siri":JourneyPatternRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a JOURNEY PATTERN.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":LineRef of XSD type "http://www.siri.org.uk/siri":LineRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a LINE.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PublishedLineName of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
/// <PRE><BLOCKQUOTE>
///   Name or Number by which the LINEis known to the public.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RouteName of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
/// <PRE><BLOCKQUOTE>
///   Description of route by which it can be recogniozed.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleRef of XSD type "http://www.siri.org.uk/siri":VehicleRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a VEHICLE.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DayType of XSD type "http://www.siri.org.uk/siri":DayTypeEnumeration.
/// <PRE><BLOCKQUOTE>
///   Tpeg DAY TYPE pti_table 34
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationRef of XSD type "http://www.siri.org.uk/siri":SituationRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationSimpleRef of XSD type "http://www.siri.org.uk/siri":SituationSimpleRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION associated with the element.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationNumber of XSD type "http://www.siri.org.uk/siri":EntryQualifierStructure.
/// <PRE><BLOCKQUOTE>
///   Identifier of SITUATION within a Participant. Excldue versionr.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationFullRef of XSD type "http://www.siri.org.uk/siri":SituationFullRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a SITUATION. Elements are retained as atomic elements.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceFeatureRef of XSD type "http://www.siri.org.uk/siri":ServiceFeatureRefStructure.
/// <PRE><BLOCKQUOTE>
///   Classification of service into arbitrary Service categories, e.g. school bus. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FeatureRef of XSD type "http://www.siri.org.uk/siri":FeatureRefStructure.
/// <PRE><BLOCKQUOTE>
///   Classification of facilities into arbitrary Facility categories. SIRI provides a recommended set of values covering most usages. SIRI provides a recommended set of values covering most usages, intended to be TPEG comnpatible. See the SIRI facilities packaged.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":OriginName of XSD type "http://www.siri.org.uk/siri":NaturalLanguagePlaceNameStructure.
/// <PRE><BLOCKQUOTE>
///   The name of the origin of the journey; used to help identify the VEHICLE JOURNEY on arrival boards.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ViaName of XSD type "http://www.siri.org.uk/siri":NaturalLanguagePlaceNameStructure.
/// <PRE><BLOCKQUOTE>
///   Names of VIA points, used to help identify the LINEfor example, Luton to Luton via Sutton. Currently 3 in VDV. Should only be included if the detail level was requested.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DestinationName of XSD type "http://www.siri.org.uk/siri":NaturalLanguagePlaceNameStructure.
/// <PRE><BLOCKQUOTE>
///   The name of the DESTINATION of the journey; used to help identify the VEHICLE to the public. Note when used in a CALL, this is the Dynamic Destination Display: since vehicles can change their destination during a journey, the destination included here should be what the VEHICLE will display when it reaches the stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FirstOrLastJourney of XSD type "http://www.siri.org.uk/siri":FirstOrLastJourneyEnumeration.
/// <PRE><BLOCKQUOTE>
///   Whether journey is first or last journey of day. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":JourneyNote of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
/// <PRE><BLOCKQUOTE>
///   Additional descriptive text associated with journey. Inherited property.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":Direction of XSD type "http://www.siri.org.uk/siri":DirectionStructure.
/// <PRE><BLOCKQUOTE>
///   Description of a DIRECTION.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AimedArrivalTime of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Target arrival time of VEHICLE at stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ActualArrivalTime of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Observed time of arrival of VEHICLE at stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ExpectedArrivalTime of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Estimated time of arriival of VEHICLE at stop .
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ArrivalStatus of XSD type "http://www.siri.org.uk/siri":CallStatusEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the visit according to a fixed list of values. If not specified, same as DepartureStatus.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ArrivalProximityText of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
/// <PRE><BLOCKQUOTE>
///   Arbitrary text string to show to indicate the status of the departure of the VEHICLE for example, Enroute, 5 Km, Approaching. May depend on the policy of the OPERATOR, for example show Approaching if less than 200metres away from stop. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ArrivalPlatformName of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
/// <PRE><BLOCKQUOTE>
///   Bay or platform name. Inheritable property. Can be omitted if the same as the DeparturePlatformName If there no arrival platform name separate from the departure platform name, the precedence is (i) any arrival platform on any related dated timetable element, (ii) any departure platform name on this estimated element; (iii) any departure platform name on any related dated timetable CALL.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ArrivalBoardingActivity of XSD type "http://www.siri.org.uk/siri":ArrivalBoardingActivityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Type of boarding and alighting allowed at stop. Default is 'Alighting'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AimedDepartureTime of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Target departure time of VEHICLE from stop according to latest working timetable.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ActualDepartureTime of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Observed time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ExpectedDepartureTime of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Estimated time of departure of VEHICLE from stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AimedLatestPassengerAccessTime of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Latest target time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ExpectedLatestPassengerAccessTime of XSD type xs:dateTime.
/// <PRE><BLOCKQUOTE>
///   Latest expected time at which a PASSENGER should aim to arrive at the STOP PLACE containing the stop. This time may be earlier than the VEHICLE departure times and may include time for processes such as checkin, security, etc.(As specified by CHECK CONSTRAINT DELAYs in the underlying data) If absent assume to be the same as Earliest expected departure time, +SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DepartureStatus of XSD type "http://www.siri.org.uk/siri":CallStatusEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of the timeliness of the departure part of the CALL, according to a fixed list of values. This may reflect a presentation policy, for example CALLs less than one minute behind target time are still classified as on-time. Applications may use this to guide their own presentation of times.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DepartureProximityText of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
/// <PRE><BLOCKQUOTE>
///   Arbitrary text string to show to indicate the status of the departure of the vehicle, for example, Boarding, GatesClosed. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DeparturePlatformName of XSD type "http://www.siri.org.uk/siri":NaturalLanguageStringStructure.
/// <PRE><BLOCKQUOTE>
///   Departure QUAY ( Bay or platform) name. Inheritable property.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DepartureBoardingActivity of XSD type "http://www.siri.org.uk/siri":DepartureBoardingActivityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Nature of boarding allowed at stop. Default is 'Boarding'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AimedHeadwayInterval of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
/// <PRE><BLOCKQUOTE>
///   For frequency based services, target interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ExpectedHeadwayInterval of XSD type "http://www.siri.org.uk/siri":PositiveDurationType.
/// <PRE><BLOCKQUOTE>
///   For frequency based services, expected interval between vehicles at stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleMode of XSD type "http://www.siri.org.uk/siri":VehicleModesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   Vehicle mode- Tpeg ModeType pti1.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RailSubmode of XSD type "http://www.siri.org.uk/siri":RailSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti02 Rail submodes loc13.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CoachSubmode of XSD type "http://www.siri.org.uk/siri":CoachSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti03 Coach submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":MetroSubmode of XSD type "http://www.siri.org.uk/siri":MetroSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti04 Metro submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":BusSubmode of XSD type "http://www.siri.org.uk/siri":BusSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti05 Bus submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TramSubmode of XSD type "http://www.siri.org.uk/siri":TramSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti06 Tram submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":WaterSubmode of XSD type "http://www.siri.org.uk/siri":WaterSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti07 Water submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AirSubmode of XSD type "http://www.siri.org.uk/siri":AirSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti08 Air submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TelecabinSubmode of XSD type "http://www.siri.org.uk/siri":TelecabinSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti09 Telecabin submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FunicularSubmode of XSD type "http://www.siri.org.uk/siri":FunicularSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti10 Funicular submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TaxiSubmode of XSD type "http://www.siri.org.uk/siri":TaxiSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti11 Taxi submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SelfDriveSubmode of XSD type "http://www.siri.org.uk/siri":SelfDriveSubmodesOfTransportEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG pti12 SelfDrive submodes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PublishToWebAction of XSD type "http://www.siri.org.uk/siri":PublishToWebActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To Web.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PublishToMobileAction of XSD type "http://www.siri.org.uk/siri":PublishToMobileActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To WAP and PDA.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PublishToDisplayAction of XSD type "http://www.siri.org.uk/siri":PublishToDisplayActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To Displays.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PublishToAlertsAction of XSD type "http://www.siri.org.uk/siri":PublishToAlertsActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To Alert Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PublishToTvAction of XSD type "http://www.siri.org.uk/siri":PublishToTvActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To TvService.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":NotifyBySmsAction of XSD type "http://www.siri.org.uk/siri":NotifyBySmsActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION to an individual by SMS.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":NotifyByEmailAction of XSD type "http://www.siri.org.uk/siri":NotifyByEmailActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION to a named workgroup or individual by email.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":NotifyByPagerAction of XSD type "http://www.siri.org.uk/siri":NotifyByPagerActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To pager.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":NotifyUserAction of XSD type "http://www.siri.org.uk/siri":NotifyUserActionStructure.
/// <PRE><BLOCKQUOTE>
///   Action: Publish SITUATION To User.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ReportType of XSD type "http://www.siri.org.uk/siri":ReportTypeEnumeration.
/// <PRE><BLOCKQUOTE>
///   Scope of incident - Tpeg Report Type pti27.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":InterchangeStatusType of XSD type "http://www.siri.org.uk/siri":InterchangeStatusEnumeration.
/// <PRE><BLOCKQUOTE>
///   Status of a SERVICE JOURNEY INTERCHANGE Status TPEG cross reference pti31.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TicketRestrictionType of XSD type "http://www.siri.org.uk/siri":TicketRestrictionEnumeration.
/// <PRE><BLOCKQUOTE>
///   Ticket restrictions - Tpeg Report Type pti25.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":BookingStatusType of XSD type "http://www.siri.org.uk/siri":BookingStatusEnumeration.
/// <PRE><BLOCKQUOTE>
///   Booking Status - Tpeg Report Type pti24.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopPointType of XSD type "http://www.siri.org.uk/siri":StopPointTypeEnumeration.
/// <PRE><BLOCKQUOTE>
///   STOP POINT type Tpeg Report Type pti17.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RoutePointType of XSD type "http://www.siri.org.uk/siri":RoutePointTypeEnumeration.
/// <PRE><BLOCKQUOTE>
///   Route point type Tpeg Report Type pti15.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TimetableType of XSD type "http://www.siri.org.uk/siri":TimetableTypeEnumeration.
/// <PRE><BLOCKQUOTE>
///   Timetable type - Tpeg pti33.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":Severity of XSD type "http://www.siri.org.uk/siri":SeverityEnumeration.
/// <PRE><BLOCKQUOTE>
///   Severity of Incident. Corresponds to TPEG Pti26 severities. Defautl is 'normal'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":Condition of XSD type "http://www.siri.org.uk/siri":ServiceConditionEnumeration.
/// <PRE><BLOCKQUOTE>
///   Classification of effect on service. TPEG Pti13 Service Condition values.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":UnknownReason of XSD type xs:string.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_0/TPEG unknown event reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":MiscellaneousReason of XSD type "http://www.siri.org.uk/siri":MiscellaneousReasonEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_1/TPEG Pti_19 miscellaneous event reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":MiscellaneousSubReason of XSD type "http://www.siri.org.uk/siri":MiscellaneousSubReasonEnumeration.
/// <PRE><BLOCKQUOTE>
///   Additional refinements TPEG miscellaneous event reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PersonnelReason of XSD type "http://www.siri.org.uk/siri":PersonnelReasonEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_2/TPEG Pti_20 personnel event reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PersonnelSubReason of XSD type "http://www.siri.org.uk/siri":PersonnelSubReasonEnumeration.
/// <PRE><BLOCKQUOTE>
///   Additional refinements TPEG Personnelevent reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EquipmentReason of XSD type "http://www.siri.org.uk/siri":EquipmentReasonEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_3/TPEG Pti_21 equipment event reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EquipmentSubReason of XSD type "http://www.siri.org.uk/siri":EquipmentSubReasonEnumeration.
/// <PRE><BLOCKQUOTE>
///   Additional refinements TPEG Equipment event reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EnvironmentReason of XSD type "http://www.siri.org.uk/siri":EnvironmentReasonEnumeration.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_4/TPEG Pti_22 environment event reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EnvironmentSubReason of XSD type "http://www.siri.org.uk/siri":EnvironmentSubReasonEnumeration.
/// <PRE><BLOCKQUOTE>
///   Additional refinements TPEG Environmentevent reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":UndefinedReason of XSD type xs:string.
/// <PRE><BLOCKQUOTE>
///   TPEG Pti18_255/TPEG Pti_22 undefined event reason.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":PtSituationElement of XSD type "http://www.siri.org.uk/siri":PtSituationElementStructure.
/// <PRE><BLOCKQUOTE>
///   Type for individual IPT ncident.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RoadSituationElement of XSD type "http://www.siri.org.uk/siri":RoadSituationElementStructure.
/// <PRE><BLOCKQUOTE>
///   Type for individual IPT ncident.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductionTimetableRequest of XSD type "http://www.siri.org.uk/siri":ProductionTimetableRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for daily production timetables.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductionTimetableDelivery of XSD type "http://www.siri.org.uk/siri":ProductionTimetableDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Production Timetable Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DatedTimetableVersionFrame of XSD type "http://www.siri.org.uk/siri":DatedTimetableVersionFrameStructure.
/// <PRE><BLOCKQUOTE>
///   A TIMETABLE FRAME to run on a specified date.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductionTimetableCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":ProductionTimetableCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for ProductionTimetable Service. Answers a Answered with a ProductionTimetableCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductionTimetableServiceCapabilities of XSD type "http://www.siri.org.uk/siri":ProductionTimetableServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of ProductionTimetableService.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DatedVehicleJourney of XSD type "http://www.siri.org.uk/siri":DatedVehicleJourneyStructure.
/// <PRE><BLOCKQUOTE>
///   A planned VEHICLE JOURNEY taking place on a particular date.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":DatedCall of XSD type "http://www.siri.org.uk/siri":DatedCallStructure.
/// <PRE><BLOCKQUOTE>
///   Complete sequence of stops along the route path, in calling order.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByValidityPeriod of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VALIDITY PERIOD. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByOperatorRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by OPERATOR. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByLineRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by LINE. Default is 'true'
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByDirectionRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by DIRECTION Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByMonitoringRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Monitoring point (LOGICAL DISPLAY). Fixed as 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByConnectionLinkRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by CONNECTION LINK. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByDestination of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by DESTINATION. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByVehicleRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VEHICLE. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByStopPointRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by SCHEDULED STOP POINT. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByInterchangeRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by SERVICE JOURNEY INTERCHANGE. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByVehicleJourneyRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by VEHICLE JOURNEY. Default is 'false'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FilterByFacilityRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Whether results can be filtered by Facility (EQUIPMENT). Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductionTimetablePermission of XSD type "http://www.siri.org.uk/siri":ConnectionServicePermissionStructure.
/// <PRE><BLOCKQUOTE>
///   Permission for a single participant or all participants to use an aspect of the service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CheckOperatorRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by OPERATOR is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CheckLineRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by LINE is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CheckMonitoringRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by monitoring point (LOGICAL DISPLAY) is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":CheckConnectionLinkRef of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   If access control is supported, whether access control by CONNECTION link is supported. Default is 'true'.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AllowAll of XSD type xs:boolean.
/// <PRE><BLOCKQUOTE>
///   Allow access to all topics known to the service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedTimetableRequest of XSD type "http://www.siri.org.uk/siri":EstimatedTimetableRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about the estimated timetable.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedTimetableSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":EstimatedTimetableSubscriptionStructure.
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedTimetableDelivery of XSD type "http://www.siri.org.uk/siri":EstimatedTimetableDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Estimated Timetable Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedTimetableCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Estimated Timetable Service Capabilities. Answered with a EstimatedTimetableCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedTimetableCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":EstimatedTimetableCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Estimated Timetable Service. Answers a EstimatedTimetableCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedTimetableServiceCapabilities of XSD type "http://www.siri.org.uk/siri":EstimatedTimetableServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of Estimated TimetableService.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedVehicleJourney of XSD type "http://www.siri.org.uk/siri":EstimatedVehicleJourneyStructure.
/// <PRE><BLOCKQUOTE>
///   A VEHICLE JOURNEY taking place on a particular date that will be managed by an AVMs.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedServiceJourneyInterchange of XSD type "http://www.siri.org.uk/siri":EstimatedServiceJourneyInterchangeStructure.
/// <PRE><BLOCKQUOTE>
///   A VEHICLE JOURNEY taking place on a particular date that will be managed by an AVMs.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":EstimatedCall of XSD type "http://www.siri.org.uk/siri":EstimatedCallStructure.
/// <PRE><BLOCKQUOTE>
///   Ordered sequence of SCHEDULED STOP POINTs called at by the VEHICLE JOURNEY If IsCompleteStopSequence is false, may be just those stops that are altered.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":RecordedCall of XSD type "http://www.siri.org.uk/siri":RecordedCallStructure.
/// <PRE><BLOCKQUOTE>
///   Ordered sequence of SCHEDULED STOP POINTs called at by the VEHICLE JOURNEY If IsCompleteStopSequence is false, may be just those stops that are altered.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopTimetableRequest of XSD type "http://www.siri.org.uk/siri":StopTimetableRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrival and departure at a stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopTimetableSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":StopTimetableSubscriptionStructure.
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Stop TimetablesService.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopTimetableDelivery of XSD type "http://www.siri.org.uk/siri":StopTimetableDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopTimetableCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Timetable Service Capabilities Answered with a StopTimetableCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopTimetableCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":StopTimetableCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Timetable Service. Answers a StopTimetableCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopTimetableServiceCapabilities of XSD type "http://www.siri.org.uk/siri":StopTimetableServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of Stop Timetable Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TargetedVehicleJourney of XSD type "http://www.siri.org.uk/siri":TargetedVehicleJourneyStructure.
/// <PRE><BLOCKQUOTE>
///   Timetabled VEHICLE JOURNEY.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TargetedCall of XSD type "http://www.siri.org.uk/siri":TargetedCallStructure.
/// <PRE><BLOCKQUOTE>
///   Information about the call at the stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopMonitoringRequest of XSD type "http://www.siri.org.uk/siri":StopMonitoringRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrivals and departures at a stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopMonitoringMultipleRequest of XSD type "http://www.siri.org.uk/siri":StopMonitoringMultipleRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Visits, i.e. arrivals and departures at multiple stops stop. SIRI 1.3
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopMonitoringSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":StopMonitoringSubscriptionStructure.
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopMonitoringDelivery of XSD type "http://www.siri.org.uk/siri":StopMonitoringDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Stop Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":MonitoredStopVisit of XSD type "http://www.siri.org.uk/siri":MonitoredStopVisitStructure.
/// <PRE><BLOCKQUOTE>
///   A visit to a stop by a VEHICLE as an arrival and /or departure.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":MonitoredStopVisitCancellation of XSD type "http://www.siri.org.uk/siri":MonitoredStopVisitCancellationStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to an previously communicated Stop Visit which should now be removed from the arrival/departure board for the stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopLineNotice of XSD type "http://www.siri.org.uk/siri":StopLineNoticeStructure.
/// <PRE><BLOCKQUOTE>
///   LINE notice for stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopLineNoticeCancellation of XSD type "http://www.siri.org.uk/siri":StopLineNoticeCancellationStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to an previously communicated LINE notice which should now be removed from the arrival/departure board for the stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopNotice of XSD type "http://www.siri.org.uk/siri":StopNoticeStructure.
/// <PRE><BLOCKQUOTE>
///   Notice for stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopNoticeCancellation of XSD type "http://www.siri.org.uk/siri":StopNoticeCancellationStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to an previously communicated Notice which should now be removed from the arrival/departure board for the stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceException of XSD type "http://www.siri.org.uk/siri":ServiceExceptionStructure.
/// <PRE><BLOCKQUOTE>
///   Exceptions to service availability for all or some services SIRI 2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopMonitoringCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Stop Monitoring Service Capabilities. Answered with StopMonitoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopMonitoringCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":StopMonitoringCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Stop Monitoring Service. Answers a StopMonitoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopMonitoringServiceCapabilities of XSD type "http://www.siri.org.uk/siri":StopMonitoringServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of StopMonitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleMonitoringRequest of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Vehicle Movements.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleMonitoringSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringSubscriptionStructure.
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleMonitoringDelivery of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleMonitoringCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Vehicle Monitoring Service Capabilities. Answered with a VehicleMontoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleMonitoringServiceCapabilities of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleMonitoringCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":VehicleMonitoringCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Vehicle Monitoring Service. Answers a VehicleMontoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionTimetableRequest of XSD type "http://www.siri.org.uk/siri":ConnectionTimetableRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about timetabled connections at a stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionTimetableSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":ConnectionTimetableSubscriptionStructure.
/// <PRE><BLOCKQUOTE>
///   Subscription Request for information about Timetabled connections at a stop.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionTimetableDelivery of XSD type "http://www.siri.org.uk/siri":ConnectionTimetableDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TimetabledFeederArrival of XSD type "http://www.siri.org.uk/siri":TimetabledFeederArrivalStructure.
/// <PRE><BLOCKQUOTE>
///   A feeder arrival at the arrival SCHEDUELD STOP POINT of the CONNECTION link .
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":TimetabledFeederArrivalCancellation of XSD type "http://www.siri.org.uk/siri":TimetabledFeederArrivalCancellationStructure.
/// <PRE><BLOCKQUOTE>
///   Cancellation of a previously issued Feeder Arrival.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionTimetableCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Connection Timetable Service Capabilities. Answered with a ConnectionTimetableCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionTimetableCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":ConnectionTimetableCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Connection Timetable Service. Answers a ConnectionTimetableCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionTimetableServiceCapabilities of XSD type "http://www.siri.org.uk/siri":ConnectionTimetableServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of Connection Timetable Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionMonitoringRequest of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about changes to connections at a stop for Connection Monitoring service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionMonitoringSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringSubscriptionRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionMonitoringFeederDelivery of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringFeederDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Feeder Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":MonitoredFeederArrival of XSD type "http://www.siri.org.uk/siri":MonitoredFeederArrivalStructure.
/// <PRE><BLOCKQUOTE>
///   A feeder arrival at the connection point.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":MonitoredFeederArrivalCancellation of XSD type "http://www.siri.org.uk/siri":MonitoredFeederArrivalCancellationStructure.
/// <PRE><BLOCKQUOTE>
///   Cancellation of a feeder arrival at a connection point.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionMonitoringDistributorDelivery of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringDistributorDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Distributor Delivery for Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionMonitoringCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Connection Monitoring Service Capabilities. Answered with a ConnectionMontoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionMonitoringCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Connection Monitoring Service. Answers a ConnectionMontoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionMonitoringServiceCapabilities of XSD type "http://www.siri.org.uk/siri":ConnectionMonitoringServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of Connection Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessageRequest of XSD type "http://www.siri.org.uk/siri":GeneralMessageRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about general information messages affecting stops, vehicles or services.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessageSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":GeneralMessageSubscriptionStructure.
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to General Message Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessageDelivery of XSD type "http://www.siri.org.uk/siri":GeneralMessageDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for General Message Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessage of XSD type "http://www.siri.org.uk/siri":InfoMessageStructure.
/// <PRE><BLOCKQUOTE>
///   An informative message.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessageCancellation of XSD type "http://www.siri.org.uk/siri":InfoMessageCancellationStructure.
/// <PRE><BLOCKQUOTE>
///   A revocation of a previous message.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessageCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about General Message Service Capabilities. Answered with a GeneralMessageCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessageCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":GeneralMessageCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for General Message Service. Answers a GeneralMessageCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":GeneralMessageServiceCapabilities of XSD type "http://www.siri.org.uk/siri":GeneralMessageServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of General Message Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityMonitoringRequest of XSD type "http://www.siri.org.uk/siri":FacilityMonitoringRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Facilities status.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityMonitoringSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":FacilityMonitoringSubscriptionStructure.
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityMonitoringDelivery of XSD type "http://www.siri.org.uk/siri":FacilityMonitoringDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityCondition of XSD type "http://www.siri.org.uk/siri":FacilityConditionStructure.
/// <PRE><BLOCKQUOTE>
///   Condition of a Facility that is being monitored.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityMonitoringCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Vehicle Monitoring Service Capabilities. Answered with a VehicleMontoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityMonitoringCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":FacilityMonitoringCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Vehicle Monitoring Service. Answers a VehicleMontoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityMonitoringServiceCapabilities of XSD type "http://www.siri.org.uk/siri":FacilityMonitoringServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of Vehicle Monitoring Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationExchangeRequest of XSD type "http://www.siri.org.uk/siri":SituationExchangeRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Facilities status.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationExchangeSubscriptionRequest of XSD type "http://www.siri.org.uk/siri":SituationExchangeSubscriptionStructure.
/// <PRE><BLOCKQUOTE>
///   Request for a subscription to the Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationExchangeDelivery of XSD type "http://www.siri.org.uk/siri":SituationExchangeDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Delivery for Situation Exchange Service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationExchangeCapabilitiesRequest of XSD type "http://www.siri.org.uk/siri":ServiceCapabilitiesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Request for information about Situation Exchange Service Capabilities. Answered with a VehicleMontoringCapabilitiesResponse.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationExchangeCapabilitiesResponse of XSD type "http://www.siri.org.uk/siri":SituationExchangeCapabilitiesResponseStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities for Situation Exchange Service. Answers a VehicleMontoringCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":SituationExchangeServiceCapabilities of XSD type "http://www.siri.org.uk/siri":SituationExchangeServiceCapabilitiesStructure.
/// <PRE><BLOCKQUOTE>
///   Capabilities of Situation Exchange Service. Answers a SituationExchangeCapabilitiesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":StopPointsDelivery of XSD type "http://www.siri.org.uk/siri":StopPointsDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Returns basic details about the STOP POINTs/places covered by a service. Answers a StopPointsRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":LinesRequest of XSD type "http://www.siri.org.uk/siri":LinesDiscoveryRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the LINEs covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":LinesDelivery of XSD type "http://www.siri.org.uk/siri":LinesDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Returns the LINEs covered by a web service. Answers a LINEsRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductCategoriesRequest of XSD type "http://www.siri.org.uk/siri":ProductCategoriesDiscoveryRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Product Categories covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductCategoriesDelivery of XSD type "http://www.siri.org.uk/siri":ProductCategoriesDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Returns the Product Categories covered by a service. Answers a ProductCategoriesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleFeaturesRequest of XSD type "http://www.siri.org.uk/siri":VehicleFeaturesRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Vehicle Features covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleFeaturesDelivery of XSD type "http://www.siri.org.uk/siri":VehicleFeaturesDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Returns the Vehicle Features covered by a service. Answers a VehicleFeaturesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":InfoChannelRequest of XSD type "http://www.siri.org.uk/siri":InfoChannelDiscoveryRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Info Channels covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":InfoChannelDelivery of XSD type "http://www.siri.org.uk/siri":InfoChannelDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Returns the Info Channels covered by a service. Answers a InfoChannelRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityRequest of XSD type "http://www.siri.org.uk/siri":FacilityRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the Facilities covered by a Producer.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":FacilityDelivery of XSD type "http://www.siri.org.uk/siri":FacilityDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Returns the Facilities covered by a service. Answers a StopPointsRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceFeaturesDelivery of XSD type "http://www.siri.org.uk/siri":ServiceFeaturesDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Returns the SERVICE FEATUREs covered by a service. Answers a ServiceFeaturesRequest.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionLinksRequest of XSD type "http://www.siri.org.uk/siri":ConnectionLinksDiscoveryRequestStructure.
/// <PRE><BLOCKQUOTE>
///   Requests a list of the CONNECTION LINKs covered by a Producer. +SIRI v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ConnectionLinksDelivery of XSD type "http://www.siri.org.uk/siri":ConnectionLinksDeliveryStructure.
/// <PRE><BLOCKQUOTE>
///   Returns the CONNECTION LINKs covered by a web service. Answers a LINEsRequest. +Siri v2.0
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AnnotatedLineRef of XSD type "http://www.siri.org.uk/siri":AnnotatedLineStructure.
/// <PRE><BLOCKQUOTE>
///   Information about LINEs covered by server.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":Destination of XSD type "http://www.siri.org.uk/siri":AnnotatedDestinationStructure.
/// <PRE><BLOCKQUOTE>
///   Description of a DESTINATION.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AnnotatedStopPointRef of XSD type "http://www.siri.org.uk/siri":AnnotatedStopPointStructure.
/// <PRE><BLOCKQUOTE>
///   SCHEDULED STOP POINT definition.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ProductCategory of XSD type "http://www.siri.org.uk/siri":ProductCategoryStructure.
/// <PRE><BLOCKQUOTE>
///   Category for classification of a journey as a Product
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":ServiceFeature of XSD type "http://www.siri.org.uk/siri":ServiceFeatureStructure.
/// <PRE><BLOCKQUOTE>
///   Service Feature description.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":VehicleFeature of XSD type "http://www.siri.org.uk/siri":VehicleFeaturesStructure.
/// <PRE><BLOCKQUOTE>
///   Vehicle Feature description.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":InfoChannel of XSD type "http://www.siri.org.uk/siri":InfoChannelStructure.
/// <PRE><BLOCKQUOTE>
///   Info Channel supported by Producer service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.siri.org.uk/siri":AnnotatedConnectionLinkRef of XSD type "http://www.siri.org.uk/siri":AnnotatedConnectionLinkStructure.
/// <PRE><BLOCKQUOTE>
///   SCHEDULED CONNECTION LINK definition.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.siri.org.uk/siri                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.ifopt.org.uk/acsb":WheelchairAccess of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityStructure.
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT is wheelchair accessible.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/acsb":StepFreeAccess of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityStructure.
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has step free access.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/acsb":EscalatorFreeAccess of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityStructure.
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has escalator free access.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/acsb":LiftFreeAccess of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityStructure.
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has lift free access.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/acsb":AudibleSignalsAvailable of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityStructure.
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT is wheelchair accessible.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/acsb":VisualSignsAvailable of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityStructure.
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT has Visual signals availble for the free access.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/acsb":GuideDogAccess of XSD type "http://www.ifopt.org.uk/acsb":AccessibilityStructure.
/// <PRE><BLOCKQUOTE>
///   Whether a PLACE / SITE ELEMENT allows guide dog access.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.ifopt.org.uk/acsb                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":OtherPlaceEquipment of XSD type "http://www.ifopt.org.uk/ifopt":PlaceEquipmentStructure.
/// <PRE><BLOCKQUOTE>
///   EQUIPMENT. that may be in a fixed within a SITe.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":LocalService of XSD type "http://www.ifopt.org.uk/ifopt":LocalServiceStructure.
/// <PRE><BLOCKQUOTE>
///   LOCAL SERVICe.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":InfoLink of XSD type "http://www.ifopt.org.uk/ifopt":InfoLinkStructure.
/// <PRE><BLOCKQUOTE>
///   Info Link .
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":PointProjection of XSD type "http://www.ifopt.org.uk/ifopt":PointProjectionStructure.
/// <PRE><BLOCKQUOTE>
///   Points may be defined in tagged format or using GM coordinates element.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":LinkProjection of XSD type "http://www.ifopt.org.uk/ifopt":LinkProjectionStructure.
/// <PRE><BLOCKQUOTE>
///   Projection as a geospatial polyline.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":ZoneProjection of XSD type "http://www.ifopt.org.uk/ifopt":ZoneProjectionStructure.
/// <PRE><BLOCKQUOTE>
///   PROJECTION onto a geospatial zone.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":PathJunctionRef of XSD type "http://www.ifopt.org.uk/ifopt":PathJunctionRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a PATH JUNCTION.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":AccessLinkRef of XSD type "http://www.ifopt.org.uk/ifopt":AccessLinkRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to an ACCESS link.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":NavigationPathRef of XSD type "http://www.ifopt.org.uk/ifopt":NavigationPathRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a NAVIGATION PATH.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.ifopt.org.uk/ifopt":StopPlaceRef of XSD type "http://www.ifopt.org.uk/ifopt":StopPlaceRefStructure.
/// <PRE><BLOCKQUOTE>
///   Reference to a STOP PLACE.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.ifopt.org.uk/ifopt                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://datex2.eu/schema/2_0RC1/2_0":d2LogicalModel of XSD type "http://datex2.eu/schema/2_0RC1/2_0":D2LogicalModel.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://datex2.eu/schema/2_0RC1/2_0                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	SiriProducerDocBinding 
//gsoap ns1  service type:	SiriProducerDocPort 
//gsoap ns1  service port:	http://www.siri-service-location.com 
//gsoap ns1  service namespace:	http://wsdl.siri.org.uk/siri 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref SiriProducerDocBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page SiriProducerDocBinding Binding "SiriProducerDocBinding"

@section SiriProducerDocBinding_operations Operations of Binding "SiriProducerDocBinding"

  - @ref __ns1__Subscribe

  - @ref __ns1__DeleteSubscription

  - @ref __ns1__DataSupply

  - @ref __ns1__CheckStatus

  - @ref __ns1__GetProductionTimetable

  - @ref __ns1__GetEstimatedTimetable

  - @ref __ns1__GetStopTimetable

  - @ref __ns1__GetStopMonitoring

  - @ref __ns1__GetMultipleStopMonitoring

  - @ref __ns1__GetVehicleMonitoring

  - @ref __ns1__GetConnectionTimetable

  - @ref __ns1__GetConnectionMonitoring

  - @ref __ns1__GetGeneralMessage

  - @ref __ns1__GetFacilityMonitoring

  - @ref __ns1__GetSituationExchange

  - @ref __ns1__GetCapabilities

  - @ref __ns1__GetSiriService

  - @ref __ns1__StopPointsDiscovery

  - @ref __ns1__LinesDiscovery

@section SiriProducerDocBinding_ports Default endpoints of Binding "SiriProducerDocBinding"

  - http://www.siri-service-location.com

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use wsdl2h option -j to omit these declarations.

*/
mutable struct SOAP_ENV__Detail
{
/// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.

/// Fault _ns1__CheckStatusError SOAP: SOAP Fault deprecated from Siri 2.0
/// SOAP Fault message "CheckStatusError" part "SiriError" element ""http://wsdl.siri.org.uk/siri":WSErrorConditionElement".
    ns2__ErrorConditionStructure*        ns1__WSErrorConditionElement  ;

/// Fault _ns1__ConnectionMonitoringError SOAP: SOAP Fault deprecated from Siri 2.0
/// SOAP Fault message "ConnectionMonitoringError" part "SiriError" element ""http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement".
    ns2__ServiceDeliveryErrorConditionStructure*  ns1__WSServiceDeliveryErrorConditionElement;

/// Fault _ns1__ConnectionTimetableError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__DataSupplyError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__DeleteSubscriptionError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__EstimatedTimetableError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__FacilityMonitoringError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__GeneralMessageError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__GetCapabilitiesError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__LinesDiscoveryError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__ProductionTimetableError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__SituationExchangeError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__StopMonitoringError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__StopPointsDiscoveryError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__StopTimetableError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__SubscriptionError SOAP: SOAP Fault deprecated from Siri 2.0

/// Fault _ns1__VehicleMonitoringError SOAP: SOAP Fault deprecated from Siri 2.0
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object of type X or NULL
    _XML                                 __any                         ;	///< Catch any other content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   SiriProducerDocBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Subscribe                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Subscribe" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "Subscribe"

  - Addressing input action: "Subscribe"

  - Addressing output action: "SubscribeResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Subscribe(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsSubscriptionRequestStructure* ns1__Subscribe,
    // output parameters:
    ns1__WsSubscriptionAnswerStructure &ns1__SubscribeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Subscribe(
    struct soap *soap,
    // input parameters:
    ns1__WsSubscriptionRequestStructure* ns1__Subscribe,
    // output parameters:
    ns1__WsSubscriptionAnswerStructure &ns1__SubscribeResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Subscribe SOAP
//gsoap ns1  service method-style:	Subscribe document
//gsoap ns1  service method-encoding:	Subscribe literal
//gsoap ns1  service method-input-action:	Subscribe Subscribe
//gsoap ns1  service method-output-action:	Subscribe SubscribeResponse
//gsoap ns1  service method-fault:	Subscribe ns1__WSErrorConditionElement
int __ns1__Subscribe(
    ns1__WsSubscriptionRequestStructure* ns1__Subscribe,	///< Input parameter
    ns1__WsSubscriptionAnswerStructure &ns1__SubscribeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DeleteSubscription                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DeleteSubscription" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "DeleteSubscription"

  - Addressing input action: "DeleteSubscription"

  - Addressing output action: "DeleteSubscriptionResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DeleteSubscription(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsDeleteSubscriptionRequestStructure* ns1__DeleteSubscription,
    // output parameters:
    ns1__WsDeleteSubscriptionAnswerStructure&ns1__DeleteSubscriptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DeleteSubscription(
    struct soap *soap,
    // input parameters:
    ns1__WsDeleteSubscriptionRequestStructure* ns1__DeleteSubscription,
    // output parameters:
    ns1__WsDeleteSubscriptionAnswerStructure&ns1__DeleteSubscriptionResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteSubscription SOAP
//gsoap ns1  service method-style:	DeleteSubscription document
//gsoap ns1  service method-encoding:	DeleteSubscription literal
//gsoap ns1  service method-input-action:	DeleteSubscription DeleteSubscription
//gsoap ns1  service method-output-action:	DeleteSubscription DeleteSubscriptionResponse
//gsoap ns1  service method-fault:	DeleteSubscription ns1__WSErrorConditionElement
int __ns1__DeleteSubscription(
    ns1__WsDeleteSubscriptionRequestStructure* ns1__DeleteSubscription,	///< Input parameter
    ns1__WsDeleteSubscriptionAnswerStructure&ns1__DeleteSubscriptionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataSupply                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataSupply" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "DataSupply"

  - Addressing input action: "DataSupply"

  - Addressing output action: "DataSupplyResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataSupply(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsDataSupplyRequestStructure*  ns1__DataSupply,
    // output parameters:
    ns1__WsDataSupplyAnswerStructure   &ns1__DataSupplyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataSupply(
    struct soap *soap,
    // input parameters:
    ns1__WsDataSupplyRequestStructure*  ns1__DataSupply,
    // output parameters:
    ns1__WsDataSupplyAnswerStructure   &ns1__DataSupplyResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataSupply SOAP
//gsoap ns1  service method-style:	DataSupply document
//gsoap ns1  service method-encoding:	DataSupply literal
//gsoap ns1  service method-input-action:	DataSupply DataSupply
//gsoap ns1  service method-output-action:	DataSupply DataSupplyResponse
//gsoap ns1  service method-fault:	DataSupply ns1__WSErrorConditionElement
int __ns1__DataSupply(
    ns1__WsDataSupplyRequestStructure*  ns1__DataSupply,	///< Input parameter
    ns1__WsDataSupplyAnswerStructure   &ns1__DataSupplyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckStatus                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckStatus" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "CheckStatus"

  - Addressing input action: "CheckStatus"

  - Addressing output action: "CheckStatusResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsCheckStatusStructure*        ns1__CheckStatus,
    // output parameters:
    ns1__WsCheckStatusResponseStructure&ns1__CheckStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckStatus(
    struct soap *soap,
    // input parameters:
    ns1__WsCheckStatusStructure*        ns1__CheckStatus,
    // output parameters:
    ns1__WsCheckStatusResponseStructure&ns1__CheckStatusResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckStatus SOAP
//gsoap ns1  service method-style:	CheckStatus document
//gsoap ns1  service method-encoding:	CheckStatus literal
//gsoap ns1  service method-input-action:	CheckStatus CheckStatus
//gsoap ns1  service method-output-action:	CheckStatus CheckStatusResponse
//gsoap ns1  service method-fault:	CheckStatus ns1__WSErrorConditionElement
int __ns1__CheckStatus(
    ns1__WsCheckStatusStructure*        ns1__CheckStatus,	///< Input parameter
    ns1__WsCheckStatusResponseStructure&ns1__CheckStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetProductionTimetable                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetProductionTimetable" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetProductionTimetable"

  - Addressing input action: "GetProductionTimetable"

  - Addressing output action: "GetProductionTimetableResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetProductionTimetable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ProductionTimetableRequestStructure* ns1__GetProductionTimetable,
    // output parameters:
    ns1__ProductionTimetableAnswerStructure&ns1__GetProductionTimetableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetProductionTimetable(
    struct soap *soap,
    // input parameters:
    ns1__ProductionTimetableRequestStructure* ns1__GetProductionTimetable,
    // output parameters:
    ns1__ProductionTimetableAnswerStructure&ns1__GetProductionTimetableResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetProductionTimetable SOAP
//gsoap ns1  service method-style:	GetProductionTimetable document
//gsoap ns1  service method-encoding:	GetProductionTimetable literal
//gsoap ns1  service method-input-action:	GetProductionTimetable GetProductionTimetable
//gsoap ns1  service method-output-action:	GetProductionTimetable GetProductionTimetableResponse
//gsoap ns1  service method-fault:	GetProductionTimetable ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetProductionTimetable(
    ns1__ProductionTimetableRequestStructure* ns1__GetProductionTimetable,	///< Input parameter
    ns1__ProductionTimetableAnswerStructure&ns1__GetProductionTimetableResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetEstimatedTimetable                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetEstimatedTimetable" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetEstimatedTimetable"

  - Addressing input action: "GetEstimatedTimetable"

  - Addressing output action: "GetEstimatedTimetableResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetEstimatedTimetable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsEstimatedTimetableRequestStructure* ns1__GetEstimatedTimetable,
    // output parameters:
    ns1__WsEstimatedTimetableAnswerStructure&ns1__GetEstimatedTimetableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetEstimatedTimetable(
    struct soap *soap,
    // input parameters:
    ns1__WsEstimatedTimetableRequestStructure* ns1__GetEstimatedTimetable,
    // output parameters:
    ns1__WsEstimatedTimetableAnswerStructure&ns1__GetEstimatedTimetableResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetEstimatedTimetable SOAP
//gsoap ns1  service method-style:	GetEstimatedTimetable document
//gsoap ns1  service method-encoding:	GetEstimatedTimetable literal
//gsoap ns1  service method-input-action:	GetEstimatedTimetable GetEstimatedTimetable
//gsoap ns1  service method-output-action:	GetEstimatedTimetable GetEstimatedTimetableResponse
//gsoap ns1  service method-fault:	GetEstimatedTimetable ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetEstimatedTimetable(
    ns1__WsEstimatedTimetableRequestStructure* ns1__GetEstimatedTimetable,	///< Input parameter
    ns1__WsEstimatedTimetableAnswerStructure&ns1__GetEstimatedTimetableResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetStopTimetable                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetStopTimetable" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetStopTimetable"

  - Addressing input action: "GetStopTimetable"

  - Addressing output action: "GetStopTimetableResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetStopTimetable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__StopTimetableRequestStructure* ns1__GetStopTimetable,
    // output parameters:
    ns1__StopTimetableAnswerStructure  &ns1__GetStopTimetableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetStopTimetable(
    struct soap *soap,
    // input parameters:
    ns1__StopTimetableRequestStructure* ns1__GetStopTimetable,
    // output parameters:
    ns1__StopTimetableAnswerStructure  &ns1__GetStopTimetableResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetStopTimetable SOAP
//gsoap ns1  service method-style:	GetStopTimetable document
//gsoap ns1  service method-encoding:	GetStopTimetable literal
//gsoap ns1  service method-input-action:	GetStopTimetable GetStopTimetable
//gsoap ns1  service method-output-action:	GetStopTimetable GetStopTimetableResponse
//gsoap ns1  service method-fault:	GetStopTimetable ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetStopTimetable(
    ns1__StopTimetableRequestStructure* ns1__GetStopTimetable,	///< Input parameter
    ns1__StopTimetableAnswerStructure  &ns1__GetStopTimetableResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetStopMonitoring                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetStopMonitoring" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetStopMonitoring"

  - Addressing input action: "GetStopMonitoring"

  - Addressing output action: "GetStopMonitoringResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetStopMonitoring(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__StopMonitoringRequestStructure* ns1__GetStopMonitoring,
    // output parameters:
    ns1__StopMonitoringAnswerStructure &ns1__GetStopMonitoringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetStopMonitoring(
    struct soap *soap,
    // input parameters:
    ns1__StopMonitoringRequestStructure* ns1__GetStopMonitoring,
    // output parameters:
    ns1__StopMonitoringAnswerStructure &ns1__GetStopMonitoringResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetStopMonitoring SOAP
//gsoap ns1  service method-style:	GetStopMonitoring document
//gsoap ns1  service method-encoding:	GetStopMonitoring literal
//gsoap ns1  service method-input-action:	GetStopMonitoring GetStopMonitoring
//gsoap ns1  service method-output-action:	GetStopMonitoring GetStopMonitoringResponse
//gsoap ns1  service method-fault:	GetStopMonitoring ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetStopMonitoring(
    ns1__StopMonitoringRequestStructure* ns1__GetStopMonitoring,	///< Input parameter
    ns1__StopMonitoringAnswerStructure &ns1__GetStopMonitoringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMultipleStopMonitoring                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMultipleStopMonitoring" of service binding "SiriProducerDocBinding".
GetMultipleStopMonitoring deprecated from Siri 2.0 (use GetSiriService instead)

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetMultipleStopMonitoring"

  - Addressing input action: "GetMultipleStopMonitoring"

  - Addressing output action: "GetMultipleStopMonitoringResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMultipleStopMonitoring(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__StopMonitoringMultipleRequestStructure* ns1__GetMultipleStopMonitoring,
    // output parameters:
    ns1__StopMonitoringAnswerStructure &ns1__GetMultipleStopMonitoringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMultipleStopMonitoring(
    struct soap *soap,
    // input parameters:
    ns1__StopMonitoringMultipleRequestStructure* ns1__GetMultipleStopMonitoring,
    // output parameters:
    ns1__StopMonitoringAnswerStructure &ns1__GetMultipleStopMonitoringResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMultipleStopMonitoring SOAP
//gsoap ns1  service method-style:	GetMultipleStopMonitoring document
//gsoap ns1  service method-encoding:	GetMultipleStopMonitoring literal
//gsoap ns1  service method-input-action:	GetMultipleStopMonitoring GetMultipleStopMonitoring
//gsoap ns1  service method-output-action:	GetMultipleStopMonitoring GetMultipleStopMonitoringResponse
//gsoap ns1  service method-fault:	GetMultipleStopMonitoring ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetMultipleStopMonitoring(
    ns1__StopMonitoringMultipleRequestStructure* ns1__GetMultipleStopMonitoring,	///< Input parameter
    ns1__StopMonitoringAnswerStructure &ns1__GetMultipleStopMonitoringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVehicleMonitoring                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetVehicleMonitoring" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetVehicleMonitoring"

  - Addressing input action: "GetVehicleMonitoring"

  - Addressing output action: "GetVehicleMonitoringResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVehicleMonitoring(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__VehicleMonitoringRequestStructure* ns1__GetVehicleMonitoring,
    // output parameters:
    ns1__VehicleMonitoringAnswerStructure&ns1__GetVehicleMonitoringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVehicleMonitoring(
    struct soap *soap,
    // input parameters:
    ns1__VehicleMonitoringRequestStructure* ns1__GetVehicleMonitoring,
    // output parameters:
    ns1__VehicleMonitoringAnswerStructure&ns1__GetVehicleMonitoringResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetVehicleMonitoring SOAP
//gsoap ns1  service method-style:	GetVehicleMonitoring document
//gsoap ns1  service method-encoding:	GetVehicleMonitoring literal
//gsoap ns1  service method-input-action:	GetVehicleMonitoring GetVehicleMonitoring
//gsoap ns1  service method-output-action:	GetVehicleMonitoring GetVehicleMonitoringResponse
//gsoap ns1  service method-fault:	GetVehicleMonitoring ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetVehicleMonitoring(
    ns1__VehicleMonitoringRequestStructure* ns1__GetVehicleMonitoring,	///< Input parameter
    ns1__VehicleMonitoringAnswerStructure&ns1__GetVehicleMonitoringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetConnectionTimetable                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetConnectionTimetable" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetConnectionTimetable"

  - Addressing input action: "GetConnectionTimetable"

  - Addressing output action: "GetConnectionTimetableResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetConnectionTimetable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsConnectionTimetableRequestStructure* ns1__GetConnectionTimetable,
    // output parameters:
    ns1__WsConnectionTimetableAnswerStructure&ns1__GetConnectionTimetableResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetConnectionTimetable(
    struct soap *soap,
    // input parameters:
    ns1__WsConnectionTimetableRequestStructure* ns1__GetConnectionTimetable,
    // output parameters:
    ns1__WsConnectionTimetableAnswerStructure&ns1__GetConnectionTimetableResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetConnectionTimetable SOAP
//gsoap ns1  service method-style:	GetConnectionTimetable document
//gsoap ns1  service method-encoding:	GetConnectionTimetable literal
//gsoap ns1  service method-input-action:	GetConnectionTimetable GetConnectionTimetable
//gsoap ns1  service method-output-action:	GetConnectionTimetable GetConnectionTimetableResponse
//gsoap ns1  service method-fault:	GetConnectionTimetable ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetConnectionTimetable(
    ns1__WsConnectionTimetableRequestStructure* ns1__GetConnectionTimetable,	///< Input parameter
    ns1__WsConnectionTimetableAnswerStructure&ns1__GetConnectionTimetableResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetConnectionMonitoring                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetConnectionMonitoring" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetConnectionMonitoring"

  - Addressing input action: "GetConnectionMonitoring"

  - Addressing output action: "GetConnectionMonitoringResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetConnectionMonitoring(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsConnectionMonitoringRequestStructure* ns1__GetConnectionMonitoring,
    // output parameters:
    ns1__WsConnectionMonitoringAnswerStructure&ns1__GetConnectionMonitoringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetConnectionMonitoring(
    struct soap *soap,
    // input parameters:
    ns1__WsConnectionMonitoringRequestStructure* ns1__GetConnectionMonitoring,
    // output parameters:
    ns1__WsConnectionMonitoringAnswerStructure&ns1__GetConnectionMonitoringResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetConnectionMonitoring SOAP
//gsoap ns1  service method-style:	GetConnectionMonitoring document
//gsoap ns1  service method-encoding:	GetConnectionMonitoring literal
//gsoap ns1  service method-input-action:	GetConnectionMonitoring GetConnectionMonitoring
//gsoap ns1  service method-output-action:	GetConnectionMonitoring GetConnectionMonitoringResponse
//gsoap ns1  service method-fault:	GetConnectionMonitoring ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetConnectionMonitoring(
    ns1__WsConnectionMonitoringRequestStructure* ns1__GetConnectionMonitoring,	///< Input parameter
    ns1__WsConnectionMonitoringAnswerStructure&ns1__GetConnectionMonitoringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetGeneralMessage                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetGeneralMessage" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetGeneralMessage"

  - Addressing input action: "GetGeneralMessage"

  - Addressing output action: "GetGeneralMessageResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetGeneralMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GeneralMessageRequestStructure* ns1__GetGeneralMessage,
    // output parameters:
    ns1__GeneralMessageAnswerStructure &ns1__GetGeneralMessageResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetGeneralMessage(
    struct soap *soap,
    // input parameters:
    ns1__GeneralMessageRequestStructure* ns1__GetGeneralMessage,
    // output parameters:
    ns1__GeneralMessageAnswerStructure &ns1__GetGeneralMessageResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetGeneralMessage SOAP
//gsoap ns1  service method-style:	GetGeneralMessage document
//gsoap ns1  service method-encoding:	GetGeneralMessage literal
//gsoap ns1  service method-input-action:	GetGeneralMessage GetGeneralMessage
//gsoap ns1  service method-output-action:	GetGeneralMessage GetGeneralMessageResponse
//gsoap ns1  service method-fault:	GetGeneralMessage ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetGeneralMessage(
    ns1__GeneralMessageRequestStructure* ns1__GetGeneralMessage,	///< Input parameter
    ns1__GeneralMessageAnswerStructure &ns1__GetGeneralMessageResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetFacilityMonitoring                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetFacilityMonitoring" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetFacilityMonitoring"

  - Addressing input action: "GetFacilityMonitoring"

  - Addressing output action: "GetFacilityMonitoringResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetFacilityMonitoring(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsFacilityMonitoringRequestStructure* ns1__GetFacilityMonitoring,
    // output parameters:
    ns1__WsFacilityMonitoringAnswerStructure&ns1__GetFacilityMonitoringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetFacilityMonitoring(
    struct soap *soap,
    // input parameters:
    ns1__WsFacilityMonitoringRequestStructure* ns1__GetFacilityMonitoring,
    // output parameters:
    ns1__WsFacilityMonitoringAnswerStructure&ns1__GetFacilityMonitoringResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetFacilityMonitoring SOAP
//gsoap ns1  service method-style:	GetFacilityMonitoring document
//gsoap ns1  service method-encoding:	GetFacilityMonitoring literal
//gsoap ns1  service method-input-action:	GetFacilityMonitoring GetFacilityMonitoring
//gsoap ns1  service method-output-action:	GetFacilityMonitoring GetFacilityMonitoringResponse
//gsoap ns1  service method-fault:	GetFacilityMonitoring ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetFacilityMonitoring(
    ns1__WsFacilityMonitoringRequestStructure* ns1__GetFacilityMonitoring,	///< Input parameter
    ns1__WsFacilityMonitoringAnswerStructure&ns1__GetFacilityMonitoringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSituationExchange                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetSituationExchange" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetSituationExchange"

  - Addressing input action: "GetSituationExchange"

  - Addressing output action: "GetSituationExchangeResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSServiceDeliveryErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSituationExchange(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__SituationExchangeRequestStructure* ns1__GetSituationExchange,
    // output parameters:
    ns1__SituationExchangeAnswerStructure&ns1__GetSituationExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSituationExchange(
    struct soap *soap,
    // input parameters:
    ns1__SituationExchangeRequestStructure* ns1__GetSituationExchange,
    // output parameters:
    ns1__SituationExchangeAnswerStructure&ns1__GetSituationExchangeResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSituationExchange SOAP
//gsoap ns1  service method-style:	GetSituationExchange document
//gsoap ns1  service method-encoding:	GetSituationExchange literal
//gsoap ns1  service method-input-action:	GetSituationExchange GetSituationExchange
//gsoap ns1  service method-output-action:	GetSituationExchange GetSituationExchangeResponse
//gsoap ns1  service method-fault:	GetSituationExchange ns1__WSServiceDeliveryErrorConditionElement
int __ns1__GetSituationExchange(
    ns1__SituationExchangeRequestStructure* ns1__GetSituationExchange,	///< Input parameter
    ns1__SituationExchangeAnswerStructure&ns1__GetSituationExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetCapabilities                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetCapabilities" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetCapabilities"

  - Addressing input action: "GetCapabilities"

  - Addressing output action: "GetCapabilitiesResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsGetCapabilitiesAnswerStructure* ns1__GetCapabilities,
    // output parameters:
    ns1__WsGetCapabilitiesAnswerStructure&ns1__GetCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetCapabilities(
    struct soap *soap,
    // input parameters:
    ns1__WsGetCapabilitiesAnswerStructure* ns1__GetCapabilities,
    // output parameters:
    ns1__WsGetCapabilitiesAnswerStructure&ns1__GetCapabilitiesResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetCapabilities SOAP
//gsoap ns1  service method-style:	GetCapabilities document
//gsoap ns1  service method-encoding:	GetCapabilities literal
//gsoap ns1  service method-input-action:	GetCapabilities GetCapabilities
//gsoap ns1  service method-output-action:	GetCapabilities GetCapabilitiesResponse
//gsoap ns1  service method-fault:	GetCapabilities ns1__WSErrorConditionElement
int __ns1__GetCapabilities(
    ns1__WsGetCapabilitiesAnswerStructure* ns1__GetCapabilities,	///< Input parameter
    ns1__WsGetCapabilitiesAnswerStructure&ns1__GetCapabilitiesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSiriService                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetSiriService" of service binding "SiriProducerDocBinding".
SIRI 2.x : Single access to any SIRI Service

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "GetSiriService"

  - Addressing input action: "GetSiriService"

  - Addressing output action: "GetSiriServiceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSiriService(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__ServiceRequestStructure*       ns1__GetSiriService,
    // output parameters:
    ns2__ServiceDeliveryStructure      &ns1__GetSiriServiceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSiriService(
    struct soap *soap,
    // input parameters:
    ns2__ServiceRequestStructure*       ns1__GetSiriService,
    // output parameters:
    ns2__ServiceDeliveryStructure      &ns1__GetSiriServiceResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSiriService SOAP
//gsoap ns1  service method-style:	GetSiriService document
//gsoap ns1  service method-encoding:	GetSiriService literal
//gsoap ns1  service method-input-action:	GetSiriService GetSiriService
//gsoap ns1  service method-output-action:	GetSiriService GetSiriServiceResponse
int __ns1__GetSiriService(
    ns2__ServiceRequestStructure*       ns1__GetSiriService,	///< Input parameter
    ns2__ServiceDeliveryStructure      &ns1__GetSiriServiceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StopPointsDiscovery                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__StopPointsDiscovery" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "StopPointsDiscovery"

  - Addressing input action: "StopPointsDiscovery"

  - Addressing output action: "StopPointsDiscoveryResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StopPointsDiscovery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsStopPointsDiscoveryStructure* ns1__StopPointsDiscovery,
    // output parameters:
    ns1__WsStopPointsDiscoveryAnswerStructure&ns1__StopPointsDiscoveryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StopPointsDiscovery(
    struct soap *soap,
    // input parameters:
    ns1__WsStopPointsDiscoveryStructure* ns1__StopPointsDiscovery,
    // output parameters:
    ns1__WsStopPointsDiscoveryAnswerStructure&ns1__StopPointsDiscoveryResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	StopPointsDiscovery SOAP
//gsoap ns1  service method-style:	StopPointsDiscovery document
//gsoap ns1  service method-encoding:	StopPointsDiscovery literal
//gsoap ns1  service method-input-action:	StopPointsDiscovery StopPointsDiscovery
//gsoap ns1  service method-output-action:	StopPointsDiscovery StopPointsDiscoveryResponse
//gsoap ns1  service method-fault:	StopPointsDiscovery ns1__WSErrorConditionElement
int __ns1__StopPointsDiscovery(
    ns1__WsStopPointsDiscoveryStructure* ns1__StopPointsDiscovery,	///< Input parameter
    ns1__WsStopPointsDiscoveryAnswerStructure&ns1__StopPointsDiscoveryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LinesDiscovery                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LinesDiscovery" of service binding "SiriProducerDocBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.siri-service-location.com

  - Default SOAP action or REST location path:
    - "LinesDiscovery"

  - Addressing input action: "LinesDiscovery"

  - Addressing output action: "LinesDiscoveryResponse"

  - Output Fault: "http://wsdl.siri.org.uk/siri":WSErrorConditionElement (literal)
SOAP Fault deprecated from Siri 2.0

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LinesDiscovery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WsLinesDiscoveryStructure*     ns1__LinesDiscovery,
    // output parameters:
    ns1__WsLinesDiscoveryAnswerStructure&ns1__LinesDiscoveryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LinesDiscovery(
    struct soap *soap,
    // input parameters:
    ns1__WsLinesDiscoveryStructure*     ns1__LinesDiscovery,
    // output parameters:
    ns1__WsLinesDiscoveryAnswerStructure&ns1__LinesDiscoveryResponse
  );
@endcode

C++ proxy class (defined in soapSiriProducerDocBindingProxy.h generated with soapcpp2):
@code
  class SiriProducerDocBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSiriProducerDocBindingService.h generated with soapcpp2):
@code
  class SiriProducerDocBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LinesDiscovery SOAP
//gsoap ns1  service method-style:	LinesDiscovery document
//gsoap ns1  service method-encoding:	LinesDiscovery literal
//gsoap ns1  service method-input-action:	LinesDiscovery LinesDiscovery
//gsoap ns1  service method-output-action:	LinesDiscovery LinesDiscoveryResponse
//gsoap ns1  service method-fault:	LinesDiscovery ns1__WSErrorConditionElement
int __ns1__LinesDiscovery(
    ns1__WsLinesDiscoveryStructure*     ns1__LinesDiscovery,	///< Input parameter
    ns1__WsLinesDiscoveryAnswerStructure&ns1__LinesDiscoveryResponse	///< Output parameter
);

/**

@page SiriProducerDocBinding Binding "SiriProducerDocBinding"

@section SiriProducerDocBinding_policy_enablers Policy Enablers of Binding "SiriProducerDocBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://wsdl.siri.org.uk/siri"

  - <ns1:Subscribe> (use wsdl2h option -g to auto-generate type _ns1__Subscribe)

  - <ns1:SubscribeResponse> (use wsdl2h option -g to auto-generate type _ns1__SubscribeResponse)

  - <ns1:DeleteSubscription> (use wsdl2h option -g to auto-generate type _ns1__DeleteSubscription)

  - <ns1:DeleteSubscriptionResponse> (use wsdl2h option -g to auto-generate type _ns1__DeleteSubscriptionResponse)

  - <ns1:CheckStatus> (use wsdl2h option -g to auto-generate type _ns1__CheckStatus)

  - <ns1:CheckStatusResponse> (use wsdl2h option -g to auto-generate type _ns1__CheckStatusResponse)

  - <ns1:DataSupply> (use wsdl2h option -g to auto-generate type _ns1__DataSupply)

  - <ns1:DataSupplyResponse> (use wsdl2h option -g to auto-generate type _ns1__DataSupplyResponse)

  - <ns1:WSErrorConditionElement> (use wsdl2h option -g to auto-generate type _ns1__WSErrorConditionElement)

  - <ns1:WSServiceDeliveryErrorConditionElement> (use wsdl2h option -g to auto-generate type _ns1__WSServiceDeliveryErrorConditionElement)

  - <ns1:GetCapabilities> (use wsdl2h option -g to auto-generate type _ns1__GetCapabilities)

  - <ns1:GetCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns1__GetCapabilitiesResponse)

  - <ns1:StopPointsDiscovery> (use wsdl2h option -g to auto-generate type _ns1__StopPointsDiscovery)

  - <ns1:StopPointsDiscoveryResponse> (use wsdl2h option -g to auto-generate type _ns1__StopPointsDiscoveryResponse)

  - <ns1:LinesDiscovery> (use wsdl2h option -g to auto-generate type _ns1__LinesDiscovery)

  - <ns1:LinesDiscoveryResponse> (use wsdl2h option -g to auto-generate type _ns1__LinesDiscoveryResponse)

  - <ns1:GetConnectionMonitoring> (use wsdl2h option -g to auto-generate type _ns1__GetConnectionMonitoring)

  - <ns1:GetConnectionMonitoringResponse> (use wsdl2h option -g to auto-generate type _ns1__GetConnectionMonitoringResponse)

  - <ns1:GetConnectionTimetable> (use wsdl2h option -g to auto-generate type _ns1__GetConnectionTimetable)

  - <ns1:GetConnectionTimetableResponse> (use wsdl2h option -g to auto-generate type _ns1__GetConnectionTimetableResponse)

  - <ns1:GetEstimatedTimetable> (use wsdl2h option -g to auto-generate type _ns1__GetEstimatedTimetable)

  - <ns1:GetEstimatedTimetableResponse> (use wsdl2h option -g to auto-generate type _ns1__GetEstimatedTimetableResponse)

  - <ns1:GetFacilityMonitoring> (use wsdl2h option -g to auto-generate type _ns1__GetFacilityMonitoring)

  - <ns1:GetFacilityMonitoringResponse> (use wsdl2h option -g to auto-generate type _ns1__GetFacilityMonitoringResponse)

  - <ns1:GetGeneralMessage> (use wsdl2h option -g to auto-generate type _ns1__GetGeneralMessage)

  - <ns1:GetGeneralMessageResponse> (use wsdl2h option -g to auto-generate type _ns1__GetGeneralMessageResponse)

  - <ns1:GetProductionTimetable> (use wsdl2h option -g to auto-generate type _ns1__GetProductionTimetable)

  - <ns1:GetProductionTimetableResponse> (use wsdl2h option -g to auto-generate type _ns1__GetProductionTimetableResponse)

  - <ns1:GetSituationExchange> (use wsdl2h option -g to auto-generate type _ns1__GetSituationExchange)

  - <ns1:GetSituationExchangeResponse> (use wsdl2h option -g to auto-generate type _ns1__GetSituationExchangeResponse)

  - <ns1:GetStopMonitoring> (use wsdl2h option -g to auto-generate type _ns1__GetStopMonitoring)

  - <ns1:GetMultipleStopMonitoring> (use wsdl2h option -g to auto-generate type _ns1__GetMultipleStopMonitoring)

  - <ns1:GetStopMonitoringResponse> (use wsdl2h option -g to auto-generate type _ns1__GetStopMonitoringResponse)

  - <ns1:GetMultipleStopMonitoringResponse> (use wsdl2h option -g to auto-generate type _ns1__GetMultipleStopMonitoringResponse)

  - <ns1:GetStopTimetable> (use wsdl2h option -g to auto-generate type _ns1__GetStopTimetable)

  - <ns1:GetStopTimetableResponse> (use wsdl2h option -g to auto-generate type _ns1__GetStopTimetableResponse)

  - <ns1:GetVehicleMonitoring> (use wsdl2h option -g to auto-generate type _ns1__GetVehicleMonitoring)

  - <ns1:GetVehicleMonitoringResponse> (use wsdl2h option -g to auto-generate type _ns1__GetVehicleMonitoringResponse)

  - <ns1:GetSiriService> (use wsdl2h option -g to auto-generate type _ns1__GetSiriService)

  - <ns1:GetSiriServiceResponse> (use wsdl2h option -g to auto-generate type _ns1__GetSiriServiceResponse)

@section ns2 Top-level root elements of schema "http://www.siri.org.uk/siri"

  - <ns2:Siri> @ref _ns2__Siri
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__Siri(struct soap*, _ns2__Siri*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__Siri(struct soap*, _ns2__Siri*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__Siri(struct soap*, const char *URL, _ns2__Siri*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__Siri(struct soap*, const char *URL, _ns2__Siri*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__Siri(struct soap*, const char *URL, _ns2__Siri*);
    soap_POST_recv__ns2__Siri(struct soap*, _ns2__Siri*);
    @endcode

  - <ns2:ServiceRequest> @ref _ns2__ServiceRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ServiceRequest(struct soap*, _ns2__ServiceRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ServiceRequest(struct soap*, _ns2__ServiceRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ServiceRequest(struct soap*, const char *URL, _ns2__ServiceRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ServiceRequest(struct soap*, const char *URL, _ns2__ServiceRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ServiceRequest(struct soap*, const char *URL, _ns2__ServiceRequest*);
    soap_POST_recv__ns2__ServiceRequest(struct soap*, _ns2__ServiceRequest*);
    @endcode

  - <ns2:SubscriptionRequest> @ref _ns2__SubscriptionRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SubscriptionRequest(struct soap*, _ns2__SubscriptionRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SubscriptionRequest(struct soap*, _ns2__SubscriptionRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__SubscriptionRequest(struct soap*, const char *URL, _ns2__SubscriptionRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__SubscriptionRequest(struct soap*, const char *URL, _ns2__SubscriptionRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__SubscriptionRequest(struct soap*, const char *URL, _ns2__SubscriptionRequest*);
    soap_POST_recv__ns2__SubscriptionRequest(struct soap*, _ns2__SubscriptionRequest*);
    @endcode

  - <ns2:ServiceDelivery> @ref _ns2__ServiceDelivery
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ServiceDelivery(struct soap*, _ns2__ServiceDelivery*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ServiceDelivery(struct soap*, _ns2__ServiceDelivery*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ServiceDelivery(struct soap*, const char *URL, _ns2__ServiceDelivery*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ServiceDelivery(struct soap*, const char *URL, _ns2__ServiceDelivery*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ServiceDelivery(struct soap*, const char *URL, _ns2__ServiceDelivery*);
    soap_POST_recv__ns2__ServiceDelivery(struct soap*, _ns2__ServiceDelivery*);
    @endcode

  - <ns2:CapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__CapabilitiesRequest)

  - <ns2:CapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__CapabilitiesResponse)

  - <ns2:TerminateSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__TerminateSubscriptionRequest)

  - <ns2:TerminateSubscriptionResponse> (use wsdl2h option -g to auto-generate type _ns2__TerminateSubscriptionResponse)

  - <ns2:ResponseStatus> (use wsdl2h option -g to auto-generate type _ns2__ResponseStatus)

  - <ns2:SubscriptionResponse> (use wsdl2h option -g to auto-generate type _ns2__SubscriptionResponse)

  - <ns2:DataReadyNotification> (use wsdl2h option -g to auto-generate type _ns2__DataReadyNotification)

  - <ns2:DataReadyAcknowledgement> (use wsdl2h option -g to auto-generate type _ns2__DataReadyAcknowledgement)

  - <ns2:DataSupplyRequest> (use wsdl2h option -g to auto-generate type _ns2__DataSupplyRequest)

  - <ns2:DataReceivedAcknowledgement> (use wsdl2h option -g to auto-generate type _ns2__DataReceivedAcknowledgement)

  - <ns2:CheckStatusRequest> (use wsdl2h option -g to auto-generate type _ns2__CheckStatusRequest)

  - <ns2:CheckStatusResponse> (use wsdl2h option -g to auto-generate type _ns2__CheckStatusResponse)

  - <ns2:HeartbeatNotification> (use wsdl2h option -g to auto-generate type _ns2__HeartbeatNotification)

  - <ns2:AbstractRequest> (use wsdl2h option -g to auto-generate type _ns2__AbstractRequest)

  - <ns2:AuthenticatedRequest> (use wsdl2h option -g to auto-generate type _ns2__AuthenticatedRequest)

  - <ns2:AbstractTrackedRequest> (use wsdl2h option -g to auto-generate type _ns2__AbstractTrackedRequest)

  - <ns2:AbstractServiceRequest> (use wsdl2h option -g to auto-generate type _ns2__AbstractServiceRequest)

  - <ns2:AbstractFunctionalServiceRequest> (use wsdl2h option -g to auto-generate type _ns2__AbstractFunctionalServiceRequest)

  - <ns2:AbstractFunctionalServiceSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__AbstractFunctionalServiceSubscriptionRequest)

  - <ns2:AbstractResponse> (use wsdl2h option -g to auto-generate type _ns2__AbstractResponse)

  - <ns2:AbstractFunctionalServiceDelivery> (use wsdl2h option -g to auto-generate type _ns2__AbstractFunctionalServiceDelivery)

  - <ns2:Status> (use wsdl2h option -g to auto-generate type _ns2__Status)

  - <ns2:ProducerRequest> (use wsdl2h option -g to auto-generate type _ns2__ProducerRequest)

  - <ns2:AbstractFunctionalServiceCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__AbstractFunctionalServiceCapabilitiesRequest)

  - <ns2:AbstractFunctionalServiceCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__AbstractFunctionalServiceCapabilitiesResponse)

  - <ns2:AbstractDiscoveryRequest> (use wsdl2h option -g to auto-generate type _ns2__AbstractDiscoveryRequest)

  - <ns2:AbstractDiscoveryDelivery> (use wsdl2h option -g to auto-generate type _ns2__AbstractDiscoveryDelivery)

  - <ns2:Extensions> (use wsdl2h option -g to auto-generate type _ns2__Extensions)

  - <ns2:SrsName> (use wsdl2h option -g to auto-generate type _ns2__SrsName)

  - <ns2:ErrorCondition> (use wsdl2h option -g to auto-generate type _ns2__ErrorCondition)

  - <ns2:ErrorConditionElement> (use wsdl2h option -g to auto-generate type _ns2__ErrorConditionElement)

  - <ns2:ErrorCode> (use wsdl2h option -g to auto-generate type _ns2__ErrorCode)

  - <ns2:ServiceDeliveryErrorConditionElement> (use wsdl2h option -g to auto-generate type _ns2__ServiceDeliveryErrorConditionElement)

  - <ns2:UnapprovedKeyAccessError> (use wsdl2h option -g to auto-generate type _ns2__UnapprovedKeyAccessError)

  - <ns2:UnknownParticipantError> (use wsdl2h option -g to auto-generate type _ns2__UnknownParticipantError)

  - <ns2:UnknownEndpointError> (use wsdl2h option -g to auto-generate type _ns2__UnknownEndpointError)

  - <ns2:EndpointDeniedAccessError> (use wsdl2h option -g to auto-generate type _ns2__EndpointDeniedAccessError)

  - <ns2:EndpointNotAvailableAccessError> (use wsdl2h option -g to auto-generate type _ns2__EndpointNotAvailableAccessError)

  - <ns2:ServiceNotAvailableError> (use wsdl2h option -g to auto-generate type _ns2__ServiceNotAvailableError)

  - <ns2:CapabilityNotSupportedError> (use wsdl2h option -g to auto-generate type _ns2__CapabilityNotSupportedError)

  - <ns2:BeyondDataHorizon> (use wsdl2h option -g to auto-generate type _ns2__BeyondDataHorizon)

  - <ns2:AccessNotAllowedError> (use wsdl2h option -g to auto-generate type _ns2__AccessNotAllowedError)

  - <ns2:NoInfoForTopicError> (use wsdl2h option -g to auto-generate type _ns2__NoInfoForTopicError)

  - <ns2:InvalidDataReferencesError> (use wsdl2h option -g to auto-generate type _ns2__InvalidDataReferencesError)

  - <ns2:ParametersIgnoredError> (use wsdl2h option -g to auto-generate type _ns2__ParametersIgnoredError)

  - <ns2:UnknownExtensionsError> (use wsdl2h option -g to auto-generate type _ns2__UnknownExtensionsError)

  - <ns2:AllowedResourceUsageExceededError> (use wsdl2h option -g to auto-generate type _ns2__AllowedResourceUsageExceededError)

  - <ns2:UnknownSubscriberError> (use wsdl2h option -g to auto-generate type _ns2__UnknownSubscriberError)

  - <ns2:UnknownSubscriptionError> (use wsdl2h option -g to auto-generate type _ns2__UnknownSubscriptionError)

  - <ns2:OtherError> (use wsdl2h option -g to auto-generate type _ns2__OtherError)

  - <ns2:RequestTimestamp> (use wsdl2h option -g to auto-generate type _ns2__RequestTimestamp)

  - <ns2:RequestorRef> (use wsdl2h option -g to auto-generate type _ns2__RequestorRef)

  - <ns2:ResponseTimestamp> (use wsdl2h option -g to auto-generate type _ns2__ResponseTimestamp)

  - <ns2:IncludeTranslations> (use wsdl2h option -g to auto-generate type _ns2__IncludeTranslations)

  - <ns2:AccessFacility> (use wsdl2h option -g to auto-generate type _ns2__AccessFacility)

  - <ns2:AccommodationFacility> (use wsdl2h option -g to auto-generate type _ns2__AccommodationFacility)

  - <ns2:AssistanceFacility> (use wsdl2h option -g to auto-generate type _ns2__AssistanceFacility)

  - <ns2:FareClassFacility> (use wsdl2h option -g to auto-generate type _ns2__FareClassFacility)

  - <ns2:HireFacility> (use wsdl2h option -g to auto-generate type _ns2__HireFacility)

  - <ns2:LuggageFacility> (use wsdl2h option -g to auto-generate type _ns2__LuggageFacility)

  - <ns2:MobilityFacility> (use wsdl2h option -g to auto-generate type _ns2__MobilityFacility)

  - <ns2:NuisanceFacility> (use wsdl2h option -g to auto-generate type _ns2__NuisanceFacility)

  - <ns2:ParkingFacility> (use wsdl2h option -g to auto-generate type _ns2__ParkingFacility)

  - <ns2:PassengerInformationFacility> (use wsdl2h option -g to auto-generate type _ns2__PassengerInformationFacility)

  - <ns2:PassengerCommsFacility> (use wsdl2h option -g to auto-generate type _ns2__PassengerCommsFacility)

  - <ns2:RefreshmentFacility> (use wsdl2h option -g to auto-generate type _ns2__RefreshmentFacility)

  - <ns2:ReservedSpaceFacility> (use wsdl2h option -g to auto-generate type _ns2__ReservedSpaceFacility)

  - <ns2:RetailFacility> (use wsdl2h option -g to auto-generate type _ns2__RetailFacility)

  - <ns2:SanitaryFacility> (use wsdl2h option -g to auto-generate type _ns2__SanitaryFacility)

  - <ns2:TicketingFacility> (use wsdl2h option -g to auto-generate type _ns2__TicketingFacility)

  - <ns2:FacilityRef> (use wsdl2h option -g to auto-generate type _ns2__FacilityRef)

  - <ns2:FacilityConditionElement> (use wsdl2h option -g to auto-generate type _ns2__FacilityConditionElement)

  - <ns2:FacilityChangeElement> (use wsdl2h option -g to auto-generate type _ns2__FacilityChangeElement)

  - <ns2:VehicleJourneyRef> (use wsdl2h option -g to auto-generate type _ns2__VehicleJourneyRef)

  - <ns2:DatedVehicleJourneyRef> (use wsdl2h option -g to auto-generate type _ns2__DatedVehicleJourneyRef)

  - <ns2:InterchangeRef> (use wsdl2h option -g to auto-generate type _ns2__InterchangeRef)

  - <ns2:OriginRef> (use wsdl2h option -g to auto-generate type _ns2__OriginRef)

  - <ns2:ViaRef> (use wsdl2h option -g to auto-generate type _ns2__ViaRef)

  - <ns2:DestinationRef> (use wsdl2h option -g to auto-generate type _ns2__DestinationRef)

  - <ns2:VersionRef> (use wsdl2h option -g to auto-generate type _ns2__VersionRef)

  - <ns2:VisitNumber> (use wsdl2h option -g to auto-generate type _ns2__VisitNumber)

  - <ns2:Order> (use wsdl2h option -g to auto-generate type _ns2__Order)

  - <ns2:StopPointRef> (use wsdl2h option -g to auto-generate type _ns2__StopPointRef)

  - <ns2:StopPointName> (use wsdl2h option -g to auto-generate type _ns2__StopPointName)

  - <ns2:TimingPoint> (use wsdl2h option -g to auto-generate type _ns2__TimingPoint)

  - <ns2:VehicleAtStop> (use wsdl2h option -g to auto-generate type _ns2__VehicleAtStop)

  - <ns2:ConnectionLinkRef> (use wsdl2h option -g to auto-generate type _ns2__ConnectionLinkRef)

  - <ns2:JourneyPatternRef> (use wsdl2h option -g to auto-generate type _ns2__JourneyPatternRef)

  - <ns2:LineRef> (use wsdl2h option -g to auto-generate type _ns2__LineRef)

  - <ns2:PublishedLineName> (use wsdl2h option -g to auto-generate type _ns2__PublishedLineName)

  - <ns2:RouteName> (use wsdl2h option -g to auto-generate type _ns2__RouteName)

  - <ns2:VehicleRef> (use wsdl2h option -g to auto-generate type _ns2__VehicleRef)

  - <ns2:DayType> (use wsdl2h option -g to auto-generate type _ns2__DayType)

  - <ns2:SituationRef> (use wsdl2h option -g to auto-generate type _ns2__SituationRef)

  - <ns2:SituationSimpleRef> (use wsdl2h option -g to auto-generate type _ns2__SituationSimpleRef)

  - <ns2:SituationNumber> (use wsdl2h option -g to auto-generate type _ns2__SituationNumber)

  - <ns2:SituationFullRef> (use wsdl2h option -g to auto-generate type _ns2__SituationFullRef)

  - <ns2:ServiceFeatureRef> (use wsdl2h option -g to auto-generate type _ns2__ServiceFeatureRef)

  - <ns2:FeatureRef> (use wsdl2h option -g to auto-generate type _ns2__FeatureRef)

  - <ns2:OriginName> (use wsdl2h option -g to auto-generate type _ns2__OriginName)

  - <ns2:ViaName> (use wsdl2h option -g to auto-generate type _ns2__ViaName)

  - <ns2:DestinationName> (use wsdl2h option -g to auto-generate type _ns2__DestinationName)

  - <ns2:FirstOrLastJourney> (use wsdl2h option -g to auto-generate type _ns2__FirstOrLastJourney)

  - <ns2:JourneyNote> (use wsdl2h option -g to auto-generate type _ns2__JourneyNote)

  - <ns2:Direction> (use wsdl2h option -g to auto-generate type _ns2__Direction)

  - <ns2:AimedArrivalTime> (use wsdl2h option -g to auto-generate type _ns2__AimedArrivalTime)

  - <ns2:ActualArrivalTime> (use wsdl2h option -g to auto-generate type _ns2__ActualArrivalTime)

  - <ns2:ExpectedArrivalTime> (use wsdl2h option -g to auto-generate type _ns2__ExpectedArrivalTime)

  - <ns2:ArrivalStatus> (use wsdl2h option -g to auto-generate type _ns2__ArrivalStatus)

  - <ns2:ArrivalProximityText> (use wsdl2h option -g to auto-generate type _ns2__ArrivalProximityText)

  - <ns2:ArrivalPlatformName> (use wsdl2h option -g to auto-generate type _ns2__ArrivalPlatformName)

  - <ns2:ArrivalBoardingActivity> (use wsdl2h option -g to auto-generate type _ns2__ArrivalBoardingActivity)

  - <ns2:AimedDepartureTime> (use wsdl2h option -g to auto-generate type _ns2__AimedDepartureTime)

  - <ns2:ActualDepartureTime> (use wsdl2h option -g to auto-generate type _ns2__ActualDepartureTime)

  - <ns2:ExpectedDepartureTime> (use wsdl2h option -g to auto-generate type _ns2__ExpectedDepartureTime)

  - <ns2:AimedLatestPassengerAccessTime> (use wsdl2h option -g to auto-generate type _ns2__AimedLatestPassengerAccessTime)

  - <ns2:ExpectedLatestPassengerAccessTime> (use wsdl2h option -g to auto-generate type _ns2__ExpectedLatestPassengerAccessTime)

  - <ns2:DepartureStatus> (use wsdl2h option -g to auto-generate type _ns2__DepartureStatus)

  - <ns2:DepartureProximityText> (use wsdl2h option -g to auto-generate type _ns2__DepartureProximityText)

  - <ns2:DeparturePlatformName> (use wsdl2h option -g to auto-generate type _ns2__DeparturePlatformName)

  - <ns2:DepartureBoardingActivity> (use wsdl2h option -g to auto-generate type _ns2__DepartureBoardingActivity)

  - <ns2:AimedHeadwayInterval> (use wsdl2h option -g to auto-generate type _ns2__AimedHeadwayInterval)

  - <ns2:ExpectedHeadwayInterval> (use wsdl2h option -g to auto-generate type _ns2__ExpectedHeadwayInterval)

  - <ns2:VehicleMode> (use wsdl2h option -g to auto-generate type _ns2__VehicleMode)

  - <ns2:RailSubmode> (use wsdl2h option -g to auto-generate type _ns2__RailSubmode)

  - <ns2:CoachSubmode> (use wsdl2h option -g to auto-generate type _ns2__CoachSubmode)

  - <ns2:MetroSubmode> (use wsdl2h option -g to auto-generate type _ns2__MetroSubmode)

  - <ns2:BusSubmode> (use wsdl2h option -g to auto-generate type _ns2__BusSubmode)

  - <ns2:TramSubmode> (use wsdl2h option -g to auto-generate type _ns2__TramSubmode)

  - <ns2:WaterSubmode> (use wsdl2h option -g to auto-generate type _ns2__WaterSubmode)

  - <ns2:AirSubmode> (use wsdl2h option -g to auto-generate type _ns2__AirSubmode)

  - <ns2:TelecabinSubmode> (use wsdl2h option -g to auto-generate type _ns2__TelecabinSubmode)

  - <ns2:FunicularSubmode> (use wsdl2h option -g to auto-generate type _ns2__FunicularSubmode)

  - <ns2:TaxiSubmode> (use wsdl2h option -g to auto-generate type _ns2__TaxiSubmode)

  - <ns2:SelfDriveSubmode> (use wsdl2h option -g to auto-generate type _ns2__SelfDriveSubmode)

  - <ns2:PublishToWebAction> (use wsdl2h option -g to auto-generate type _ns2__PublishToWebAction)

  - <ns2:PublishToMobileAction> (use wsdl2h option -g to auto-generate type _ns2__PublishToMobileAction)

  - <ns2:PublishToDisplayAction> (use wsdl2h option -g to auto-generate type _ns2__PublishToDisplayAction)

  - <ns2:PublishToAlertsAction> (use wsdl2h option -g to auto-generate type _ns2__PublishToAlertsAction)

  - <ns2:PublishToTvAction> (use wsdl2h option -g to auto-generate type _ns2__PublishToTvAction)

  - <ns2:ManualAction> @ref _ns2__ManualAction
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ManualAction(struct soap*, _ns2__ManualAction*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ManualAction(struct soap*, _ns2__ManualAction*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ManualAction(struct soap*, const char *URL, _ns2__ManualAction*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ManualAction(struct soap*, const char *URL, _ns2__ManualAction*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ManualAction(struct soap*, const char *URL, _ns2__ManualAction*);
    soap_POST_recv__ns2__ManualAction(struct soap*, _ns2__ManualAction*);
    @endcode

  - <ns2:NotifyBySmsAction> (use wsdl2h option -g to auto-generate type _ns2__NotifyBySmsAction)

  - <ns2:NotifyByEmailAction> (use wsdl2h option -g to auto-generate type _ns2__NotifyByEmailAction)

  - <ns2:NotifyByPagerAction> (use wsdl2h option -g to auto-generate type _ns2__NotifyByPagerAction)

  - <ns2:NotifyUserAction> (use wsdl2h option -g to auto-generate type _ns2__NotifyUserAction)

  - <ns2:ReportType> (use wsdl2h option -g to auto-generate type _ns2__ReportType)

  - <ns2:InterchangeStatusType> (use wsdl2h option -g to auto-generate type _ns2__InterchangeStatusType)

  - <ns2:TicketRestrictionType> (use wsdl2h option -g to auto-generate type _ns2__TicketRestrictionType)

  - <ns2:BookingStatusType> (use wsdl2h option -g to auto-generate type _ns2__BookingStatusType)

  - <ns2:StopPointType> (use wsdl2h option -g to auto-generate type _ns2__StopPointType)

  - <ns2:RoutePointType> (use wsdl2h option -g to auto-generate type _ns2__RoutePointType)

  - <ns2:TimetableType> (use wsdl2h option -g to auto-generate type _ns2__TimetableType)

  - <ns2:Severity> (use wsdl2h option -g to auto-generate type _ns2__Severity)

  - <ns2:Condition> (use wsdl2h option -g to auto-generate type _ns2__Condition)

  - <ns2:VerificationStatus> @ref _ns2__VerificationStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__VerificationStatus(struct soap*, _ns2__VerificationStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__VerificationStatus(struct soap*, _ns2__VerificationStatus*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__VerificationStatus(struct soap*, const char *URL, _ns2__VerificationStatus*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__VerificationStatus(struct soap*, const char *URL, _ns2__VerificationStatus*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__VerificationStatus(struct soap*, const char *URL, _ns2__VerificationStatus*);
    soap_POST_recv__ns2__VerificationStatus(struct soap*, _ns2__VerificationStatus*);
    @endcode

  - <ns2:Predictability> @ref _ns2__Predictability
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__Predictability(struct soap*, _ns2__Predictability*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__Predictability(struct soap*, _ns2__Predictability*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__Predictability(struct soap*, const char *URL, _ns2__Predictability*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__Predictability(struct soap*, const char *URL, _ns2__Predictability*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__Predictability(struct soap*, const char *URL, _ns2__Predictability*);
    soap_POST_recv__ns2__Predictability(struct soap*, _ns2__Predictability*);
    @endcode

  - <ns2:UnknownReason> (use wsdl2h option -g to auto-generate type _ns2__UnknownReason)

  - <ns2:MiscellaneousReason> (use wsdl2h option -g to auto-generate type _ns2__MiscellaneousReason)

  - <ns2:MiscellaneousSubReason> (use wsdl2h option -g to auto-generate type _ns2__MiscellaneousSubReason)

  - <ns2:PersonnelReason> (use wsdl2h option -g to auto-generate type _ns2__PersonnelReason)

  - <ns2:PersonnelSubReason> (use wsdl2h option -g to auto-generate type _ns2__PersonnelSubReason)

  - <ns2:EquipmentReason> (use wsdl2h option -g to auto-generate type _ns2__EquipmentReason)

  - <ns2:EquipmentSubReason> (use wsdl2h option -g to auto-generate type _ns2__EquipmentSubReason)

  - <ns2:EnvironmentReason> (use wsdl2h option -g to auto-generate type _ns2__EnvironmentReason)

  - <ns2:EnvironmentSubReason> (use wsdl2h option -g to auto-generate type _ns2__EnvironmentSubReason)

  - <ns2:UndefinedReason> (use wsdl2h option -g to auto-generate type _ns2__UndefinedReason)

  - <ns2:PtSituationElement> (use wsdl2h option -g to auto-generate type _ns2__PtSituationElement)

  - <ns2:RoadSituationElement> (use wsdl2h option -g to auto-generate type _ns2__RoadSituationElement)

  - <ns2:ProductionTimetableRequest> (use wsdl2h option -g to auto-generate type _ns2__ProductionTimetableRequest)

  - <ns2:ProductionTimetableSubscriptionRequest> @ref _ns2__ProductionTimetableSubscriptionRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ProductionTimetableSubscriptionRequest(struct soap*, _ns2__ProductionTimetableSubscriptionRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ProductionTimetableSubscriptionRequest(struct soap*, _ns2__ProductionTimetableSubscriptionRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ProductionTimetableSubscriptionRequest(struct soap*, const char *URL, _ns2__ProductionTimetableSubscriptionRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ProductionTimetableSubscriptionRequest(struct soap*, const char *URL, _ns2__ProductionTimetableSubscriptionRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ProductionTimetableSubscriptionRequest(struct soap*, const char *URL, _ns2__ProductionTimetableSubscriptionRequest*);
    soap_POST_recv__ns2__ProductionTimetableSubscriptionRequest(struct soap*, _ns2__ProductionTimetableSubscriptionRequest*);
    @endcode

  - <ns2:ProductionTimetableDelivery> (use wsdl2h option -g to auto-generate type _ns2__ProductionTimetableDelivery)

  - <ns2:DatedTimetableVersionFrame> (use wsdl2h option -g to auto-generate type _ns2__DatedTimetableVersionFrame)

  - <ns2:ProductionTimetableCapabilitiesRequest> @ref _ns2__ProductionTimetableCapabilitiesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ProductionTimetableCapabilitiesRequest(struct soap*, _ns2__ProductionTimetableCapabilitiesRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ProductionTimetableCapabilitiesRequest(struct soap*, _ns2__ProductionTimetableCapabilitiesRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ProductionTimetableCapabilitiesRequest(struct soap*, const char *URL, _ns2__ProductionTimetableCapabilitiesRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ProductionTimetableCapabilitiesRequest(struct soap*, const char *URL, _ns2__ProductionTimetableCapabilitiesRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ProductionTimetableCapabilitiesRequest(struct soap*, const char *URL, _ns2__ProductionTimetableCapabilitiesRequest*);
    soap_POST_recv__ns2__ProductionTimetableCapabilitiesRequest(struct soap*, _ns2__ProductionTimetableCapabilitiesRequest*);
    @endcode

  - <ns2:ProductionTimetableCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__ProductionTimetableCapabilitiesResponse)

  - <ns2:ProductionTimetableServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__ProductionTimetableServiceCapabilities)

  - <ns2:ProductionTimetablePermissions> @ref _ns2__ProductionTimetablePermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ProductionTimetablePermissions(struct soap*, _ns2__ProductionTimetablePermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ProductionTimetablePermissions(struct soap*, _ns2__ProductionTimetablePermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ProductionTimetablePermissions(struct soap*, const char *URL, _ns2__ProductionTimetablePermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ProductionTimetablePermissions(struct soap*, const char *URL, _ns2__ProductionTimetablePermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ProductionTimetablePermissions(struct soap*, const char *URL, _ns2__ProductionTimetablePermissions*);
    soap_POST_recv__ns2__ProductionTimetablePermissions(struct soap*, _ns2__ProductionTimetablePermissions*);
    @endcode

  - <ns2:DatedVehicleJourney> (use wsdl2h option -g to auto-generate type _ns2__DatedVehicleJourney)

  - <ns2:DatedCall> (use wsdl2h option -g to auto-generate type _ns2__DatedCall)

  - <ns2:LinePermissions> @ref _ns2__LinePermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__LinePermissions(struct soap*, _ns2__LinePermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__LinePermissions(struct soap*, _ns2__LinePermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__LinePermissions(struct soap*, const char *URL, _ns2__LinePermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__LinePermissions(struct soap*, const char *URL, _ns2__LinePermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__LinePermissions(struct soap*, const char *URL, _ns2__LinePermissions*);
    soap_POST_recv__ns2__LinePermissions(struct soap*, _ns2__LinePermissions*);
    @endcode

  - <ns2:OperatorPermissions> @ref _ns2__OperatorPermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__OperatorPermissions(struct soap*, _ns2__OperatorPermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__OperatorPermissions(struct soap*, _ns2__OperatorPermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__OperatorPermissions(struct soap*, const char *URL, _ns2__OperatorPermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__OperatorPermissions(struct soap*, const char *URL, _ns2__OperatorPermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__OperatorPermissions(struct soap*, const char *URL, _ns2__OperatorPermissions*);
    soap_POST_recv__ns2__OperatorPermissions(struct soap*, _ns2__OperatorPermissions*);
    @endcode

  - <ns2:ConnectionLinkPermissions> @ref _ns2__ConnectionLinkPermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ConnectionLinkPermissions(struct soap*, _ns2__ConnectionLinkPermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ConnectionLinkPermissions(struct soap*, _ns2__ConnectionLinkPermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ConnectionLinkPermissions(struct soap*, const char *URL, _ns2__ConnectionLinkPermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ConnectionLinkPermissions(struct soap*, const char *URL, _ns2__ConnectionLinkPermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ConnectionLinkPermissions(struct soap*, const char *URL, _ns2__ConnectionLinkPermissions*);
    soap_POST_recv__ns2__ConnectionLinkPermissions(struct soap*, _ns2__ConnectionLinkPermissions*);
    @endcode

  - <ns2:FilterByValidityPeriod> (use wsdl2h option -g to auto-generate type _ns2__FilterByValidityPeriod)

  - <ns2:FilterByOperatorRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByOperatorRef)

  - <ns2:FilterByLineRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByLineRef)

  - <ns2:FilterByDirectionRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByDirectionRef)

  - <ns2:FilterByMonitoringRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByMonitoringRef)

  - <ns2:FilterByConnectionLinkRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByConnectionLinkRef)

  - <ns2:FilterByDestination> (use wsdl2h option -g to auto-generate type _ns2__FilterByDestination)

  - <ns2:FilterByVehicleRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByVehicleRef)

  - <ns2:FilterByStopPointRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByStopPointRef)

  - <ns2:FilterByInterchangeRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByInterchangeRef)

  - <ns2:FilterByVehicleJourneyRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByVehicleJourneyRef)

  - <ns2:FilterByFacilityRef> (use wsdl2h option -g to auto-generate type _ns2__FilterByFacilityRef)

  - <ns2:ProductionTimetablePermission> (use wsdl2h option -g to auto-generate type _ns2__ProductionTimetablePermission)

  - <ns2:CheckOperatorRef> (use wsdl2h option -g to auto-generate type _ns2__CheckOperatorRef)

  - <ns2:CheckLineRef> (use wsdl2h option -g to auto-generate type _ns2__CheckLineRef)

  - <ns2:CheckMonitoringRef> (use wsdl2h option -g to auto-generate type _ns2__CheckMonitoringRef)

  - <ns2:CheckConnectionLinkRef> (use wsdl2h option -g to auto-generate type _ns2__CheckConnectionLinkRef)

  - <ns2:AllowAll> (use wsdl2h option -g to auto-generate type _ns2__AllowAll)

  - <ns2:EstimatedTimetableRequest> (use wsdl2h option -g to auto-generate type _ns2__EstimatedTimetableRequest)

  - <ns2:EstimatedTimetableSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__EstimatedTimetableSubscriptionRequest)

  - <ns2:EstimatedTimetableDelivery> (use wsdl2h option -g to auto-generate type _ns2__EstimatedTimetableDelivery)

  - <ns2:EstimatedTimetableCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__EstimatedTimetableCapabilitiesRequest)

  - <ns2:EstimatedTimetableCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__EstimatedTimetableCapabilitiesResponse)

  - <ns2:EstimatedTimetableServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__EstimatedTimetableServiceCapabilities)

  - <ns2:EstimatedTimetablePermissions> @ref _ns2__EstimatedTimetablePermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__EstimatedTimetablePermissions(struct soap*, _ns2__EstimatedTimetablePermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__EstimatedTimetablePermissions(struct soap*, _ns2__EstimatedTimetablePermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__EstimatedTimetablePermissions(struct soap*, const char *URL, _ns2__EstimatedTimetablePermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__EstimatedTimetablePermissions(struct soap*, const char *URL, _ns2__EstimatedTimetablePermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__EstimatedTimetablePermissions(struct soap*, const char *URL, _ns2__EstimatedTimetablePermissions*);
    soap_POST_recv__ns2__EstimatedTimetablePermissions(struct soap*, _ns2__EstimatedTimetablePermissions*);
    @endcode

  - <ns2:EstimatedVehicleJourney> (use wsdl2h option -g to auto-generate type _ns2__EstimatedVehicleJourney)

  - <ns2:EstimatedServiceJourneyInterchange> (use wsdl2h option -g to auto-generate type _ns2__EstimatedServiceJourneyInterchange)

  - <ns2:EstimatedCall> (use wsdl2h option -g to auto-generate type _ns2__EstimatedCall)

  - <ns2:RecordedCall> (use wsdl2h option -g to auto-generate type _ns2__RecordedCall)

  - <ns2:StopTimetableRequest> (use wsdl2h option -g to auto-generate type _ns2__StopTimetableRequest)

  - <ns2:StopTimetableSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__StopTimetableSubscriptionRequest)

  - <ns2:StopTimetableDelivery> (use wsdl2h option -g to auto-generate type _ns2__StopTimetableDelivery)

  - <ns2:StopTimetableCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__StopTimetableCapabilitiesRequest)

  - <ns2:StopTimetableCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__StopTimetableCapabilitiesResponse)

  - <ns2:StopTimetableServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__StopTimetableServiceCapabilities)

  - <ns2:StopTimetablePermissions> @ref _ns2__StopTimetablePermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__StopTimetablePermissions(struct soap*, _ns2__StopTimetablePermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__StopTimetablePermissions(struct soap*, _ns2__StopTimetablePermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__StopTimetablePermissions(struct soap*, const char *URL, _ns2__StopTimetablePermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__StopTimetablePermissions(struct soap*, const char *URL, _ns2__StopTimetablePermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__StopTimetablePermissions(struct soap*, const char *URL, _ns2__StopTimetablePermissions*);
    soap_POST_recv__ns2__StopTimetablePermissions(struct soap*, _ns2__StopTimetablePermissions*);
    @endcode

  - <ns2:TargetedVehicleJourney> (use wsdl2h option -g to auto-generate type _ns2__TargetedVehicleJourney)

  - <ns2:TargetedCall> (use wsdl2h option -g to auto-generate type _ns2__TargetedCall)

  - <ns2:StopMonitoringRequest> (use wsdl2h option -g to auto-generate type _ns2__StopMonitoringRequest)

  - <ns2:StopMonitoringMultipleRequest> (use wsdl2h option -g to auto-generate type _ns2__StopMonitoringMultipleRequest)

  - <ns2:StopMonitoringSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__StopMonitoringSubscriptionRequest)

  - <ns2:StopMonitoringDelivery> (use wsdl2h option -g to auto-generate type _ns2__StopMonitoringDelivery)

  - <ns2:MonitoredStopVisit> (use wsdl2h option -g to auto-generate type _ns2__MonitoredStopVisit)

  - <ns2:MonitoredStopVisitCancellation> (use wsdl2h option -g to auto-generate type _ns2__MonitoredStopVisitCancellation)

  - <ns2:StopLineNotice> (use wsdl2h option -g to auto-generate type _ns2__StopLineNotice)

  - <ns2:StopLineNoticeCancellation> (use wsdl2h option -g to auto-generate type _ns2__StopLineNoticeCancellation)

  - <ns2:StopNotice> (use wsdl2h option -g to auto-generate type _ns2__StopNotice)

  - <ns2:StopNoticeCancellation> (use wsdl2h option -g to auto-generate type _ns2__StopNoticeCancellation)

  - <ns2:ServiceException> (use wsdl2h option -g to auto-generate type _ns2__ServiceException)

  - <ns2:StopMonitoringCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__StopMonitoringCapabilitiesRequest)

  - <ns2:StopMonitoringCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__StopMonitoringCapabilitiesResponse)

  - <ns2:StopMonitoringServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__StopMonitoringServiceCapabilities)

  - <ns2:StopMonitoringPermissions> @ref _ns2__StopMonitoringPermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__StopMonitoringPermissions(struct soap*, _ns2__StopMonitoringPermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__StopMonitoringPermissions(struct soap*, _ns2__StopMonitoringPermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__StopMonitoringPermissions(struct soap*, const char *URL, _ns2__StopMonitoringPermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__StopMonitoringPermissions(struct soap*, const char *URL, _ns2__StopMonitoringPermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__StopMonitoringPermissions(struct soap*, const char *URL, _ns2__StopMonitoringPermissions*);
    soap_POST_recv__ns2__StopMonitoringPermissions(struct soap*, _ns2__StopMonitoringPermissions*);
    @endcode

  - <ns2:VehicleMonitoringRequest> (use wsdl2h option -g to auto-generate type _ns2__VehicleMonitoringRequest)

  - <ns2:VehicleMonitoringSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__VehicleMonitoringSubscriptionRequest)

  - <ns2:VehicleMonitoringDelivery> (use wsdl2h option -g to auto-generate type _ns2__VehicleMonitoringDelivery)

  - <ns2:VehicleMonitoringCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__VehicleMonitoringCapabilitiesRequest)

  - <ns2:VehicleMonitoringServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__VehicleMonitoringServiceCapabilities)

  - <ns2:VehicleMonitoringCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__VehicleMonitoringCapabilitiesResponse)

  - <ns2:VehicleMonitoringPermissions> @ref _ns2__VehicleMonitoringPermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__VehicleMonitoringPermissions(struct soap*, _ns2__VehicleMonitoringPermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__VehicleMonitoringPermissions(struct soap*, _ns2__VehicleMonitoringPermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__VehicleMonitoringPermissions(struct soap*, const char *URL, _ns2__VehicleMonitoringPermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__VehicleMonitoringPermissions(struct soap*, const char *URL, _ns2__VehicleMonitoringPermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__VehicleMonitoringPermissions(struct soap*, const char *URL, _ns2__VehicleMonitoringPermissions*);
    soap_POST_recv__ns2__VehicleMonitoringPermissions(struct soap*, _ns2__VehicleMonitoringPermissions*);
    @endcode

  - <ns2:ConnectionTimetableRequest> (use wsdl2h option -g to auto-generate type _ns2__ConnectionTimetableRequest)

  - <ns2:ConnectionTimetableSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__ConnectionTimetableSubscriptionRequest)

  - <ns2:ConnectionTimetableDelivery> (use wsdl2h option -g to auto-generate type _ns2__ConnectionTimetableDelivery)

  - <ns2:FeederItem> (use wsdl2h option -g to auto-generate type _ns2__FeederItem)

  - <ns2:TimetabledFeederArrival> (use wsdl2h option -g to auto-generate type _ns2__TimetabledFeederArrival)

  - <ns2:TimetabledFeederArrivalCancellation> (use wsdl2h option -g to auto-generate type _ns2__TimetabledFeederArrivalCancellation)

  - <ns2:ConnectionTimetableCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__ConnectionTimetableCapabilitiesRequest)

  - <ns2:ConnectionTimetableCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__ConnectionTimetableCapabilitiesResponse)

  - <ns2:ConnectionTimetableServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__ConnectionTimetableServiceCapabilities)

  - <ns2:ConnectionMonitoringRequest> (use wsdl2h option -g to auto-generate type _ns2__ConnectionMonitoringRequest)

  - <ns2:ConnectionMonitoringSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__ConnectionMonitoringSubscriptionRequest)

  - <ns2:ConnectionMonitoringFeederDelivery> (use wsdl2h option -g to auto-generate type _ns2__ConnectionMonitoringFeederDelivery)

  - <ns2:MonitoredFeederArrival> (use wsdl2h option -g to auto-generate type _ns2__MonitoredFeederArrival)

  - <ns2:MonitoredFeederArrivalCancellation> (use wsdl2h option -g to auto-generate type _ns2__MonitoredFeederArrivalCancellation)

  - <ns2:ConnectionMonitoringDistributorDelivery> (use wsdl2h option -g to auto-generate type _ns2__ConnectionMonitoringDistributorDelivery)

  - <ns2:ConnectionMonitoringCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__ConnectionMonitoringCapabilitiesRequest)

  - <ns2:ConnectionMonitoringCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__ConnectionMonitoringCapabilitiesResponse)

  - <ns2:ConnectionMonitoringServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__ConnectionMonitoringServiceCapabilities)

  - <ns2:ConnectionMonitoringPermissions> @ref _ns2__ConnectionMonitoringPermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ConnectionMonitoringPermissions(struct soap*, _ns2__ConnectionMonitoringPermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ConnectionMonitoringPermissions(struct soap*, _ns2__ConnectionMonitoringPermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ConnectionMonitoringPermissions(struct soap*, const char *URL, _ns2__ConnectionMonitoringPermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ConnectionMonitoringPermissions(struct soap*, const char *URL, _ns2__ConnectionMonitoringPermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ConnectionMonitoringPermissions(struct soap*, const char *URL, _ns2__ConnectionMonitoringPermissions*);
    soap_POST_recv__ns2__ConnectionMonitoringPermissions(struct soap*, _ns2__ConnectionMonitoringPermissions*);
    @endcode

  - <ns2:GeneralMessageRequest> (use wsdl2h option -g to auto-generate type _ns2__GeneralMessageRequest)

  - <ns2:GeneralMessageSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__GeneralMessageSubscriptionRequest)

  - <ns2:GeneralMessageDelivery> (use wsdl2h option -g to auto-generate type _ns2__GeneralMessageDelivery)

  - <ns2:GeneralMessage> (use wsdl2h option -g to auto-generate type _ns2__GeneralMessage)

  - <ns2:GeneralMessageCancellation> (use wsdl2h option -g to auto-generate type _ns2__GeneralMessageCancellation)

  - <ns2:GeneralMessageCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__GeneralMessageCapabilitiesRequest)

  - <ns2:GeneralMessageCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__GeneralMessageCapabilitiesResponse)

  - <ns2:GeneralMessageServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__GeneralMessageServiceCapabilities)

  - <ns2:GeneralMessagePermissions> @ref _ns2__GeneralMessagePermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GeneralMessagePermissions(struct soap*, _ns2__GeneralMessagePermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GeneralMessagePermissions(struct soap*, _ns2__GeneralMessagePermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__GeneralMessagePermissions(struct soap*, const char *URL, _ns2__GeneralMessagePermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__GeneralMessagePermissions(struct soap*, const char *URL, _ns2__GeneralMessagePermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__GeneralMessagePermissions(struct soap*, const char *URL, _ns2__GeneralMessagePermissions*);
    soap_POST_recv__ns2__GeneralMessagePermissions(struct soap*, _ns2__GeneralMessagePermissions*);
    @endcode

  - <ns2:FacilityMonitoringRequest> (use wsdl2h option -g to auto-generate type _ns2__FacilityMonitoringRequest)

  - <ns2:FacilityMonitoringSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__FacilityMonitoringSubscriptionRequest)

  - <ns2:FacilityMonitoringDelivery> (use wsdl2h option -g to auto-generate type _ns2__FacilityMonitoringDelivery)

  - <ns2:FacilityCondition> (use wsdl2h option -g to auto-generate type _ns2__FacilityCondition)

  - <ns2:FacilityMonitoringCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__FacilityMonitoringCapabilitiesRequest)

  - <ns2:FacilityMonitoringCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__FacilityMonitoringCapabilitiesResponse)

  - <ns2:FacilityMonitoringServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__FacilityMonitoringServiceCapabilities)

  - <ns2:FacilityMonitoringPermissions> @ref _ns2__FacilityMonitoringPermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__FacilityMonitoringPermissions(struct soap*, _ns2__FacilityMonitoringPermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__FacilityMonitoringPermissions(struct soap*, _ns2__FacilityMonitoringPermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__FacilityMonitoringPermissions(struct soap*, const char *URL, _ns2__FacilityMonitoringPermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__FacilityMonitoringPermissions(struct soap*, const char *URL, _ns2__FacilityMonitoringPermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__FacilityMonitoringPermissions(struct soap*, const char *URL, _ns2__FacilityMonitoringPermissions*);
    soap_POST_recv__ns2__FacilityMonitoringPermissions(struct soap*, _ns2__FacilityMonitoringPermissions*);
    @endcode

  - <ns2:SituationExchangeRequest> (use wsdl2h option -g to auto-generate type _ns2__SituationExchangeRequest)

  - <ns2:SituationExchangeSubscriptionRequest> (use wsdl2h option -g to auto-generate type _ns2__SituationExchangeSubscriptionRequest)

  - <ns2:SituationExchangeDelivery> (use wsdl2h option -g to auto-generate type _ns2__SituationExchangeDelivery)

  - <ns2:SituationExchangeCapabilitiesRequest> (use wsdl2h option -g to auto-generate type _ns2__SituationExchangeCapabilitiesRequest)

  - <ns2:SituationExchangeCapabilitiesResponse> (use wsdl2h option -g to auto-generate type _ns2__SituationExchangeCapabilitiesResponse)

  - <ns2:SituationExchangeServiceCapabilities> (use wsdl2h option -g to auto-generate type _ns2__SituationExchangeServiceCapabilities)

  - <ns2:SituationExchangePermissions> @ref _ns2__SituationExchangePermissions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SituationExchangePermissions(struct soap*, _ns2__SituationExchangePermissions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SituationExchangePermissions(struct soap*, _ns2__SituationExchangePermissions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__SituationExchangePermissions(struct soap*, const char *URL, _ns2__SituationExchangePermissions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__SituationExchangePermissions(struct soap*, const char *URL, _ns2__SituationExchangePermissions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__SituationExchangePermissions(struct soap*, const char *URL, _ns2__SituationExchangePermissions*);
    soap_POST_recv__ns2__SituationExchangePermissions(struct soap*, _ns2__SituationExchangePermissions*);
    @endcode

  - <ns2:StopPointsRequest> @ref _ns2__StopPointsRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__StopPointsRequest(struct soap*, _ns2__StopPointsRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__StopPointsRequest(struct soap*, _ns2__StopPointsRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__StopPointsRequest(struct soap*, const char *URL, _ns2__StopPointsRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__StopPointsRequest(struct soap*, const char *URL, _ns2__StopPointsRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__StopPointsRequest(struct soap*, const char *URL, _ns2__StopPointsRequest*);
    soap_POST_recv__ns2__StopPointsRequest(struct soap*, _ns2__StopPointsRequest*);
    @endcode

  - <ns2:StopPointsDelivery> (use wsdl2h option -g to auto-generate type _ns2__StopPointsDelivery)

  - <ns2:LinesRequest> (use wsdl2h option -g to auto-generate type _ns2__LinesRequest)

  - <ns2:LinesDelivery> (use wsdl2h option -g to auto-generate type _ns2__LinesDelivery)

  - <ns2:ProductCategoriesRequest> (use wsdl2h option -g to auto-generate type _ns2__ProductCategoriesRequest)

  - <ns2:ProductCategoriesDelivery> (use wsdl2h option -g to auto-generate type _ns2__ProductCategoriesDelivery)

  - <ns2:VehicleFeaturesRequest> (use wsdl2h option -g to auto-generate type _ns2__VehicleFeaturesRequest)

  - <ns2:VehicleFeaturesDelivery> (use wsdl2h option -g to auto-generate type _ns2__VehicleFeaturesDelivery)

  - <ns2:InfoChannelRequest> (use wsdl2h option -g to auto-generate type _ns2__InfoChannelRequest)

  - <ns2:InfoChannelDelivery> (use wsdl2h option -g to auto-generate type _ns2__InfoChannelDelivery)

  - <ns2:FacilityRequest> (use wsdl2h option -g to auto-generate type _ns2__FacilityRequest)

  - <ns2:FacilityDelivery> (use wsdl2h option -g to auto-generate type _ns2__FacilityDelivery)

  - <ns2:ServiceFeaturesRequest> @ref _ns2__ServiceFeaturesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ServiceFeaturesRequest(struct soap*, _ns2__ServiceFeaturesRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ServiceFeaturesRequest(struct soap*, _ns2__ServiceFeaturesRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ServiceFeaturesRequest(struct soap*, const char *URL, _ns2__ServiceFeaturesRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ServiceFeaturesRequest(struct soap*, const char *URL, _ns2__ServiceFeaturesRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ServiceFeaturesRequest(struct soap*, const char *URL, _ns2__ServiceFeaturesRequest*);
    soap_POST_recv__ns2__ServiceFeaturesRequest(struct soap*, _ns2__ServiceFeaturesRequest*);
    @endcode

  - <ns2:ServiceFeaturesDelivery> (use wsdl2h option -g to auto-generate type _ns2__ServiceFeaturesDelivery)

  - <ns2:ConnectionLinksRequest> (use wsdl2h option -g to auto-generate type _ns2__ConnectionLinksRequest)

  - <ns2:ConnectionLinksDelivery> (use wsdl2h option -g to auto-generate type _ns2__ConnectionLinksDelivery)

  - <ns2:AnnotatedLineRef> (use wsdl2h option -g to auto-generate type _ns2__AnnotatedLineRef)

  - <ns2:Destination> (use wsdl2h option -g to auto-generate type _ns2__Destination)

  - <ns2:AnnotatedStopPointRef> (use wsdl2h option -g to auto-generate type _ns2__AnnotatedStopPointRef)

  - <ns2:ProductCategory> (use wsdl2h option -g to auto-generate type _ns2__ProductCategory)

  - <ns2:ServiceFeature> (use wsdl2h option -g to auto-generate type _ns2__ServiceFeature)

  - <ns2:VehicleFeature> (use wsdl2h option -g to auto-generate type _ns2__VehicleFeature)

  - <ns2:InfoChannel> (use wsdl2h option -g to auto-generate type _ns2__InfoChannel)

  - <ns2:AnnotatedConnectionLinkRef> (use wsdl2h option -g to auto-generate type _ns2__AnnotatedConnectionLinkRef)

@section ns3 Top-level root elements of schema "http://www.ifopt.org.uk/acsb"

  - <ns3:WheelchairAccess> (use wsdl2h option -g to auto-generate type _ns3__WheelchairAccess)

  - <ns3:StepFreeAccess> (use wsdl2h option -g to auto-generate type _ns3__StepFreeAccess)

  - <ns3:EscalatorFreeAccess> (use wsdl2h option -g to auto-generate type _ns3__EscalatorFreeAccess)

  - <ns3:LiftFreeAccess> (use wsdl2h option -g to auto-generate type _ns3__LiftFreeAccess)

  - <ns3:AudibleSignalsAvailable> (use wsdl2h option -g to auto-generate type _ns3__AudibleSignalsAvailable)

  - <ns3:VisualSignsAvailable> (use wsdl2h option -g to auto-generate type _ns3__VisualSignsAvailable)

  - <ns3:GuideDogAccess> (use wsdl2h option -g to auto-generate type _ns3__GuideDogAccess)

@section ns4 Top-level root elements of schema "http://www.ifopt.org.uk/ifopt"

  - <ns4:OtherPlaceEquipment> (use wsdl2h option -g to auto-generate type _ns4__OtherPlaceEquipment)

  - <ns4:LocalService> (use wsdl2h option -g to auto-generate type _ns4__LocalService)

  - <ns4:Extensions> @ref _ns4__Extensions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__Extensions(struct soap*, _ns4__Extensions*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__Extensions(struct soap*, _ns4__Extensions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns4__Extensions(struct soap*, const char *URL, _ns4__Extensions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns4__Extensions(struct soap*, const char *URL, _ns4__Extensions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns4__Extensions(struct soap*, const char *URL, _ns4__Extensions*);
    soap_POST_recv__ns4__Extensions(struct soap*, _ns4__Extensions*);
    @endcode

  - <ns4:InfoLink> (use wsdl2h option -g to auto-generate type _ns4__InfoLink)

  - <ns4:PointProjection> (use wsdl2h option -g to auto-generate type _ns4__PointProjection)

  - <ns4:LinkProjection> (use wsdl2h option -g to auto-generate type _ns4__LinkProjection)

  - <ns4:ZoneProjection> (use wsdl2h option -g to auto-generate type _ns4__ZoneProjection)

  - <ns4:PathJunctionRef> (use wsdl2h option -g to auto-generate type _ns4__PathJunctionRef)

  - <ns4:AccessLinkRef> (use wsdl2h option -g to auto-generate type _ns4__AccessLinkRef)

  - <ns4:NavigationPathRef> (use wsdl2h option -g to auto-generate type _ns4__NavigationPathRef)

  - <ns4:StopPlaceRef> (use wsdl2h option -g to auto-generate type _ns4__StopPlaceRef)

@section ns5 Top-level root elements of schema "http://datex2.eu/schema/2_0RC1/2_0"

  - <ns5:d2LogicalModel> (use wsdl2h option -g to auto-generate type _ns5__d2LogicalModel)

*/

/* End of ../SIRI.h */
